<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335214 Maintainer: simp Status: ready -->

<sect1 xml:id="migration56.openssl" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>OpenSSL Änderungen in PHP 5.6.x</title>

 <sect2 xml:id="migration56.openssl.peer-verification">
  <title>Streamwrapper verifizieren nun standardmäßig Zertifikate und Hostnamen bei Verwendung von SSL/TLS</title>

  &migration56.openssl.peer-verification;
 </sect2>

 <sect2 xml:id="migration56.openssl.fingerprint">
  <title>Fingerabdrücke von Zertifikaten</title>

  <para>
   Es wurde Unterstützung für das Auslesen und Verifizieren von Fingerabdrücken
   von Zertifikaten hinzugefügt. <function>openssl_x509_fingerprint</function> 
   kam hinzu, um den Fingerabdruck aus X.509-Zertifikaten auszulesen und zwei
   neue <link linkend="context.ssl">SSL Streamkontext</link>-Optionen wurden
   hinzugefügt: <literal>capture_peer_cert</literal> zum Auslesen des X.509-
   Zertifikats des Kommunikationspartners und <literal>peer_fingerprint</literal>
   zur Durchsetzung, dass das Zertifikat des Kommunikationspartners dem
   angegebenen Fingerabdruck entsprechen muss.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.ciphers">
  <title>Aktualisierung der Standardchiffren</title>

  <para>
   Die von PHP verwendeten Standardchiffren wurden auf eine sicherere Liste
   aktualisiert, basierend auf den
   <link xlink:href="&url.openssl.ciphers.mozilla;">Mozilla Chiffreempfehlungen</link>,
   mit zwei zusätzlichen Ausnahmen: anonyme Diffie-Hellman Chiffren und RC4.
  </para>

  <para>
   Auf diese Liste kann mit der neuen Konstante 
   <constant>OPENSSL_DEFAULT_STREAM_CIPHERS</constant> zugegriffen und (wie in 
   früheren PHP-Versionen) durch das Setzen der Kontextoption 
   <link linkend="context.ssl.ciphers"><parameter>ciphers</parameter></link>
   übersteuert werden.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.tls-compression">
  <title>Komprimierung standardmäßig deaktiviert</title>

  <para>
   Komprimierung von SSL/TLS wurde standardmäßig deaktiviert, um die
   CRIME-Attacke zu umgehen. PHP 5.4.13 fügte die Kontextoption
   <link linkend="context.ssl.disable-compression"><parameter>disable_compression</parameter></link>
   hinzu, um die Komprimierung zu deaktivieren. Dies ist nun standardmäßig
   auf &true; (d.h. Komprimierung deaktiviert) gesetzt.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.honor-cipher-order">
  <title>Servern wird erlaubt, die Reihenfolge bevorzugter Chiffren festzulegen</title>

  <para>
   Die SSL Kontextoption <parameter>honor_cipher_order</parameter> wurde
   hinzugefügt, um Servern von verschlüsselten Streams die Umgehung der
   BEAST-Schwachstelle zu ermöglichen, indem die Chiffren des Servers gegenüber
   denen des Clients bevorzugt werden.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.metadata">
  <title>Zugriff auf ausgehandeltes Protokoll und Chiffre</title>

  <para>
   Auf das Protokoll und die Chiffre, die für einen verschlüsselten Stream
   ausgehandelt wurden, kann nun mittels 
   <function>stream_get_meta_data</function> oder
   <function>stream_context_get_options</function> zugegriffen werden, wenn
   die SSL-Kontextoption <parameter>capture_session_meta</parameter> auf
   &true; gesetzt ist.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['ssl' => [
    'capture_session_meta' => TRUE
]]);

$html = file_get_contents('https://google.com/', FALSE, $ctx);
$meta = stream_context_get_options($ctx)['ssl']['session_meta'];
var_dump($meta);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["protocol"]=>
  string(5) "TLSv1"
  ["cipher_name"]=>
  string(20) "ECDHE-RSA-AES128-SHA"
  ["cipher_bits"]=>
  int(128)
  ["cipher_version"]=>
  string(11) "TLSv1/SSLv3"
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.forward-secrecy">
  <title>Neue Optionen für Perfect Forward Secrecy bei Servern für verschlüsselte Streams</title>

  <para>
   Verschlüsselte Clientstreams unterstützen Perfect Forward Secrecy bereits, da
   dies üblicherweise vom Server kontrolliert wird. Es muss nichts zusätzlich
   unternommen werden, um PFS bei verschlüsselten PHP-Server-Streams zu aktivieren,
   die Zertifikate verwenden, welche Perfect Forward Secrecy unterstützen. Es wurden
   jedoch einige neue SSL-Kontextoptionen hinzugefügt, welche mehr Kontrolle über
   PFS erlauben und eventuell auftretende Kompatibilitätsprobleme behandeln. 
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>ecdh_curve</parameter></term>
    <listitem>
     <para>
      Diese Option erlaubt die Auswahl einer spezifischen Kurve für 
      ECDH-Chiffren. Falls nicht angegeben, wird <literal>prime256v1</literal>
      verwendet.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>dh_param</parameter></term>
    <listitem>
     <para>
      Pfad zu einer Datei, welche Parameter für den 
      Diffie-Hellman-Schlüsselaustausch enthalt, die beispielsweise
      durch folgenden Befehl erzeugt werden könnte:
     </para>
     <programlisting role="shell">
<![CDATA[
openssl dhparam -out /path/to/my/certs/dh-2048.pem 2048
]]>
     </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_dh_use</parameter></term>
    <listitem>
     <para>
      Ist dies auf &true; gesetzt, wird ein neues Schlüsselpaar erzeugt,
      wenn Diffie-Hellman-Parameter verwendet werden, wodurch sich die
      Forward Secrecy verbessert.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_ecdh_use</parameter></term>
    <listitem>
     <para>
      Ist dies auf &true; gesetzt, wird immer ein neues Schlüsselpaar erzeugt,
      wenn ECDH-Chiffren ausgehandelt werden. Dies verbessert die 
      Forward Secrecy.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 xml:id="migration56.openssl.crypto-method">
  <title>SSL/TLS Versionsauswahl</title>

  <para>
   Es ist nun möglich die spezifischen Versionen von SSL oder TLS mittels
   der SSL-Kontextoption <parameter>crypto_method</parameter> oder durch
   die Angabe eines spezifischen Transportes bei der Erzeugung des 
   Streamwrappers auszuwählen (beispielsweise durch den Aufruf von 
   <function>stream_socket_client</function> oder 
   <function>stream_socket_server</function>).
  </para>

  <para>
   Die SSL-Kontextoption <parameter>crypto_method</parameter> erwartet
   eine Bitmaske in der die erlaubten Protokolle aufgezählt sind.
   Der Parameter <parameter>crypto_type</parameter> von 
   <function>stream_socket_enable_crypto</function> verhält sich
   genauso.
   <!-- TODO: link to full list, which is too big for this page but should be
              in the crypto_method and stream_socket_enable_crypto()
              documentation. -->
  </para>

  <segmentedlist>
   <title>Ausgewählte Protokollversionen und zugehörige Optionen</title>
   <segtitle>Protokoll(e)</segtitle>
   <segtitle>Client-Flag</segtitle>
   <segtitle>Server-Flag</segtitle>
   <segtitle>Transport</segtitle>
   <seglistitem>
    <seg>Beliebige Version von TLS oder SSL</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_SERVER</constant></seg>
    <seg><literal>ssl://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>Beliebige TLS-Version</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_SERVER</constant></seg>
    <seg><literal>tls://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.0</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_SERVER</constant></seg>
    <seg><literal>tlsv1.0://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.1</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_SERVER</constant></seg>
    <seg><literal>tlsv1.1://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.2</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_SERVER</constant></seg>
    <seg><literal>tlsv1.2://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>SSL 3</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_SERVER</constant></seg>
    <seg><literal>sslv3://</literal></seg>
   </seglistitem>
  </segmentedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// Voraussetzen von TLS 1.0 oder neuer bei Verwendung von 
// file_get_contents():
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLS_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// TLS 1.1 oder 1.2 voraussetzen:
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT |
                           STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Verbindung mittels tlsv1.2:// Stream-Socket-Transport.
$sock = stream_socket_client('tlsv1.2://google.com:443/');

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.default-certificate-paths">
  <title><function>openssl_get_cert_locations</function> hinzugefügt</title>

  <para>
   Die Funktion <function>openssl_get_cert_locations</function> wurde 
   hinzugefügt: Sie gibt den Standard-Ablageort aus, der von PHP bei der
   Suche von CA-Bundles verwendet wird.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(openssl_get_cert_locations());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(8) {
  ["default_cert_file"]=>
  string(21) "/etc/pki/tls/cert.pem"
  ["default_cert_file_env"]=>
  string(13) "SSL_CERT_FILE"
  ["default_cert_dir"]=>
  string(18) "/etc/pki/tls/certs"
  ["default_cert_dir_env"]=>
  string(12) "SSL_CERT_DIR"
  ["default_private_dir"]=>
  string(20) "/etc/pki/tls/private"
  ["default_default_cert_area"]=>
  string(12) "/etc/pki/tls"
  ["ini_cafile"]=>
  string(0) ""
  ["ini_capath"]=>
  string(0) ""
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.spki">
  <title>SPKI-Unterstützung</title>

  <para>
   Unterstützung für die Erzeugung, das Auslesen uns Verifizieren von
   Signed Public Key And Challenges wurde (SPKAC) wurde hinzugefügt.
   Die Funktionen <function>openssl_spki_new</function>,
   <function>openssl_spki_verify</function>,
   <function>openssl_spki_export_challenge</function> und
   <function>openssl_spki_export</function> wurden hinzugefügt, welche
   die durch ein <literal>KeyGen</literal> HTML5-Element erzeugten SPKACs
   erzeugen, verifizieren oder den PEM Public Key und zugehörige Challenge
   exportieren.
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>openssl_spki_new</parameter></term>
    <listitem>
     <para>
      Erzeugt ein neues SPKAC mit einem privaten Schlüssel, Challenge-String
      und Hashalgorithmus.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
SPKAC=MIIBXjCByDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3L0IfUijj7+A8CPC8EmhcdNoe5fUAog7OrBdhn7EkxFButUp40P7+LiYiygYG1TmoI/a5EgsLU3s9twEz3hmgY9mYIqb/rb+SF8qlD/K6KVyUORC7Wlz1Df4L8O3DuRGzx6/+3jIW6cPBpfgH1sVuYS1vDBsP/gMMIxwTsKJ4P0CAwEAARYkYjViMzYxMTktNjY5YS00ZDljLWEyYzctMGZjNGFhMjVlMmE2MA0GCSqGSIb3DQEBAwUAA4GBAF7hu0ifzmjonhAak2FhhBRsKFDzXdKIkrWxVNe8e0bZzMrWOxFM/rqBgeH3/gtOUDRS5Fnzyq425UsTYbjfiKzxGeCYCQJb1KJ2V5Ij/mIJHZr53WYEXHQTNMGR8RPm7IxwVXVSHIgAfXsXZ9IXNbFbcaLRiSTr9/N4U+MXUWL7
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_verify</parameter></term>
    <listitem>
     <para>
      Verifiziert ein angegebenes SPKAC.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
var_dump(openssl_spki_verify($spkac));
?>
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export_challenge</parameter></term>
    <listitem>
     <para>
      Exportiert eine zugehörige Challenge eines angegebenen SPKAC.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
$challenge = openssl_spki_export_challenge($spkac):
echo $challenge;
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
challenge string
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export</parameter></term>
    <listitem>
     <para>
      Exportiert den öffentlichen RSA-Schlüssel eines SPKAC
      in PEM-Format.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
echo openssl_spki_export($spkac);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcvQh9SKOPv4DwI8LwSaFx02h7
l9QCiDs6sF2GfsSTEUG61SnjQ/v4uJiLKBgbVOagj9rkSCwtTez23ATPeGaBj2Zg
ipv+tv5IXyqUP8ropXJQ5ELtbXPUN/gvw7cO5EbPHr/7eMhbpw8Gl+AfWxW5hLW8
MGw/+AwwjHBOwong/QIDAQAB
-----END PUBLIC KEY-----
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
