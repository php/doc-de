<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.13 $ -->
<!-- EN-Revision: 1.37 Maintainer: mk Status: ready -->
 
 <appendix id="reserved">
  <title>Reservierte Wörter in PHP</title>
  <para>
   Nachfolgend finden Sie eine Liste der vordefinierten Namen in PHP. 
   Sie sollten keinen dieser Namen in Ihren Skripten verwenden. Die Liste
   enthält Schlüsselwörter, vordefinierte Konstanten und Klassennamen.
   Die Liste ist nicht vollständig.
  </para>

  <sect1 id="reserved.keywords">
  <title>Liste der Schlüsselwörter</title>
   <simpara>
    Diese Wörter haben in PHP eine spezielle Bedeutung. Einige sehen aus
    wie Funktionen, andere sehen aus wie Konstanten usw., sie sind aber
    weder das eine noch das andere, sondern es sind Sprachkonstrukte. Sie
    können keines der folgenden Wörter als Namen für Konstanten, Klassen
    oder Funktionen benutzen. Als Vaiablennamen dürfen Sie die Namen
    benutzen, was aber zu Verwirrungen führen kann.
   </simpara>

   <table>
    <title>PHP Schlüsselwörter</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">exception</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__LINE__</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="migration.old-function">cfunction</link>
       </entry>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        const
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <link linkend="function.eval">eval</link>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
       <entry>
        <link linkend="migration.old-function">old_function</link>
       </entry>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
      </row>
      <row>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 id="reserved.variables">
   <title>Vordefinierte Variablen</title>
   
   <para>
    Seit PHP 4.1.0 wird empfohlen, 
    <link linkend="language.variables.external">externe Variablen</link> 
    über die Superglobals, die weiter unten beschrieben werden, abzufragen.
    Davor war man entweder auf die <link linkend="ini.register-globals">register_globals</link>
    -Einstelliung oder die Langformen der vordefinierten PHP-Arrays 
    (<varname>$HTTP_*_VARS</varname>) angewiesen.


    &avail.register-long-arrays;
   </para>

   <sect2 id="reserved.variables.server">
    <title>Server Variablen: <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      Dieses Array wurde mit PHP 4.1.0 eingeführt. In älteren Versionen
      benutzen Sie stattdessen <varname>$HTTP_SERVER_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     <varname>$_SERVER</varname> ist ein Array, in dem Informationen über
     Header, Pfade oder den Speicherort des Skripts gespeichert sind. Die
     Einträge dieses Arrays werden vom Webserver generiert. Es gibt keine
     Garantie, dass jeder Webserver alle diese Einträge erzeugt. Manche
     Server werden Einträge auslassen oder andere einfügen, die hier
     nicht aufgeführt sind. Ein grosser Teil dieser Variablen stammt aus
     der <ulink url="&url.cgispec;">CGI 1.1 Spezifikation</ulink>.
    </simpara>

    <simpara>
     Dies ist eine 'superglobale' oder automatisch globale Variable. Das
     bedeutet, dass die Variable in allen Sichtbarkeitsbereichen eines
     Skripts verfügbar ist. Sie brauchen dieses Array nicht mit
     <command>global $_SERVER;</command> in Funktionen oder Methoden
     importieren, um darauf zuzugreifen, so wie es bei
     <varname>$HTTP_SERVER_VARS</varname> notwendig ist.
    </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> enthält dieselben Informationen
     ist aber nicht automatisch global. (Beachten Sie, dass
     <varname>$HTTP_SERVER_VARS</varname> und <varname>$_SERVER</varname>
     verschiedene Variablen sind, die von PHP auch so behandelt werden.)
    </simpara>

    <simpara>
     Falls die Direktive <link linkend="ini.register-globals">register_globals</link> 
     gesetzt ist, sind diese Variablen auch im globalen Sichbarkeitsbereich eines
     Skripts verfügbar, d.h., unabhängig von den <varname>$_SERVER</varname> 
     und <varname>$HTTP_SERVER_VARS</varname> Arrays. Lesen Sie für weitere 
     Informationen das Kapitel über Sicherheit 
     <link linkend="security.globals">Verwendung von Register Globals</link>.
     Diese individuellen globalen Variablen sind nicht automatisch global.
    </simpara>

    <simpara>
     Möglicherweise finden Sie das eine oder andere der folgenden
     Elemente nicht in <varname>$_SERVER</varname>. Beachten Sie, dass nur 
     wenige, falls überhaupt, verfügbar sind (oder von Bedeutung
     sind) wenn sie PHP auf der Kommandozeile betreiben.
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
         Der Name des aktuell ausgeführten Skripts, relativ zum
         Wurzelverzeichnis des Servers. Zum Beispiel gibt
         <varname>$_SERVER['PHP_SELF']</varname> in einem Skript mit der
         Adresse <filename>http://example.com/test.php/foo.bar</filename>
         den Namen <filename>/test.php/foo.bar</filename> zurück.
        </simpara>
        <simpara>
         Falls PHP auf der Kommandozeile ausgeführt wird, ist diese
         Variable nicht verfügbar.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         In diesem Array sind die Argumente enthalten, die an ein Skript
         übergeben wurden. Wenn das Skript auf der Kommandozeile
         ausgeführt wird, haben Sie einen C-ähnlichen Zugriff auf die
         Kommandozeilenparameter. Wenn es mit der GET-Methode
         aufgerufen wird, enthält das Array den Abfragestring.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         Enthält die Anzahl der Kommandozeilenparameter, die an das
         Skript übergeben wurden (falls es von der Kommandozeile aus
         aufgerufen wurde).
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         Gibt an, welche Version der CGI Spezifikation der Server
         benutzt, beispielsweise '<literal>CGI/1.1</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         Der Name des Server Hosts unter dem das aktuelle Skript
         ausgeführt wird. Falls das Skript unter einem virtuellen Host
         läuft, wird der Name, der für diesen virtuellen Host vergeben
         wurde, angezeigt.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         Die Identifikation des Servers, mit der sich ein Server im
         Header bei der Beantwortung einer Anforderung identifiziert. 
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         Name und Versionsnummer des Protokolls, über das die Seite
         angefordert wurde. Z. B. '<literal>HTTP/1.0</literal>';
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         Welche Anforderungsmethode benutzt wurde, um auf die Seite
         zuzugreifen, z. B. '<literal>GET</literal>',
         '<literal>HEAD</literal>', '<literal>POST</literal>', '<literal>PUT</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         Der Abfragestring, falls vorhanden, mit dem die Seite
         angefordert wurde.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         Das Wurzelverzeichnis des Webservers, unter dem das aktuelle
         Skript ausgeführt wird, so wie es in der Konfigurationsdatei des
         Webservers hinterlegt ist.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         Der Inhalt des <literal>Accept:</literal>-Headers der aktuellen
         Anforderung, falls dieser Header vorhanden ist.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         Der Inhalt des <literal>Accept-Charset:</literal>-Headers der
         aktuellen Anforderung, so vorhanden. Z. B.
         '<literal>iso-8859-1,*,utf-8</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         Der Inhalt des <literal>Accept-Encoding:</literal>-Headers der
         aktuellen Anforderung, so vorhanden. Beispiel:
         '<literal>gzip</literal>'.          
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         Der Inhalt des <literal>Accept-Language:</literal>-Headers der
         aktuellen Anforderung, so vorhanden. Beispiel:
         '<literal>en</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         Der Inhalt des <literal>Connection:</literal>-Headers der
         aktuellen anforderung, so vorhanden. Beispiel: '<literal>Keep-Alive</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         Der Inhalt des <literal>Host:</literal>-Headers der aktuellen Anforderung, 
         so vorhanden.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         Die Adresse der Seite (falls es eine gibt), die den Browser auf
         die aktuelle Seite verwies. Dieser Header wird vom Browser
         gesetzt, aber nicht von allen. Einige Browser bieten die
         Möglichkeit, den <varname>HTTP_REFERER</varname> zu
         modifizieren. Kurz, auf diesen Header kann man sich nicht
         verlassen.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
         Der Inhalt des <literal>User_Agent:</literal>-Headers der
         aktuellen Anforderung, so vorhanden. Dies ist ein String, der
         den Typ und Namen des Browsers angibt, der auf die Seite
         zugreift. Ein typisches Beispiel ist:
         <computeroutput>Mozilla/4.5 [en] (X11; U; Linux 2.2.9
         i586)</computeroutput>. Unter anderem kann man diesen Wert mit
         <function>get_browser</function> auslesen, um die Ausgabe einer
         Seite auf den verwendeten Browser abzustimmen.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         Die IP-Adresse des Rechners, der die aktuelle Seite angefordert hat.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_HOST</varname>'</term>
       <listitem>
        <simpara>
         Der Hostname des Servers, von dem die aktuelle Seite geladen
         wurde. Der reverse dns lookup basiert auf dem 
         <varname>REMOTE_ADDR</varname>-Header.
        </simpara>
        <note>
         <simpara>
          Um diese Variable zu erzeugen, muss Ihr Webserver entsprechend
          eingestellt sein. Zum Beispiel muss beim Apache
          <literal>HostnameLookups On</literal> in der &httpd.conf; aktiv
          sein. Siehe auch unter <function>gethostbyaddr</function>.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         Der Port, Über den der Rechner des Benutzers mit dem Webserver
         kommuniziert.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <para>
         Der absolute Pfadname des aktuell ausgeführten Skripts. 
         <note>
          <para>
           Falls das Skript auf der Kommandozeile mit einem relativen
           Pfad aufgerufen wird, wie z. B. <filename>file.php</filename>
           oder <filename>../file.php</filename>, enthält
           <varname>$_SERVER['SCRIPT_FILENAME']</varname> den relativen
           Pfad, den der Benutzer angegeben hat. 
          </para>
         </note>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         Der Wert, der in der Server Konfiguration der Direktive 
         SERVER_ADMIN (bei Apache) zugewiesen wurde. Falls das Skript
         unter einem virtuellen Host läuft, wird der Wert angegeben, der
         für diesen virtuellen Host angegeben wurde. 
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
         Der Port, den der Server zur Kommunikation benutzt. Bei
         Standardinstallationen ist dies der Port
         '<literal>80</literal>'. Bei Verwendung von SSH ändert sich der
         Wert zu Ihrem definierten SSH Port. 
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
         Ein String, der bei Seiten, die vom Server generiert wurden, die
         Server Version und den Namen des virtuellen Hosts enthält, falls
         diese Option aktiviert ist.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         Der Pfad zur aktuellen Datei im Dateisystem (nicht relativ zum 
         Wurzelverzeichnis des Webserbers), nachdem der Server eventuelle
         Umwandlungen vom virtuellen ins reale System vorgenommen hat.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         Enthält den Pfad des aktuellen Skripts. Das ist nützlich für
         Programme, die sich selber referenzieren. 
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         Der URI mit dem diese Seite aufgerufen wurde. Z. B. '<literal>/index.html</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_USER</varname>'</term>
       <listitem>
        <simpara>
         Wenn HTTP-Authentifizierung mit Apache als Modul benutzt wird,
         enthält diese Variable den Benutzernamen, der vom Anwender
         angegeben wurde. 
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_PW</varname>'</term>
       <listitem>
        <simpara>
         Wenn HTTP-Authentifizierung mit Apache als Modul benutzt wird,
         enthält diese Variable das Passwort, das vom Anwender angegeben
         wurde. 
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>AUTH_TYPE</varname>'</term>
       <listitem>
        <simpara>
         Wenn HTTP-Authentifizierung mit Apache als Modul benutzt wird,
         enthält diese Variable den Authentifizierungs-Typ.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>
   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>Umgebungsvariablen: <varname>$_ENV</varname></title>

    <note>
     <simpara>
      Dieses Array wurde mit PHP 4.1.0 eingeführt. In älteren Versionen
      benutzen Sie das Array <varname>$HTTP_ENV_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Diese Variablen werden aus der Systemumgebung, in der der Parser
     läuft in den globalen Namensraum Von PHP importiert. Viele davon
     werden vom System generiert, unter dem der Parser läuft und
     unterschiedliche Systeme benutzen unterschiedliche
     Umgebungsvariablen. Eine verbindliche Liste anzugeben ist daher
     unmöglich. Schauen Sie in der Dokumentation Ihres Systems nach den
     dort definierten Umgebungsvaraiblen.
    </simpara>

    <simpara>
     Andere Umgebungsvariablen einschließlich der CGI-Variablen, sind hier
     aufgeführt, egal ob PHP als Servermodul oder CGI Prozess läuft.
    </simpara>
	
    <simpara>
     Dies ist eine 'superglobale' oder automatisch globale Variable. Das
     bedeutet, dass die Variable in allen Sichtbarkeitsbereichen eines
     Skripts verfügbar ist. Sie brauchen dieses Array nicht mit
     <command>global $_ENV;</command> in Funktionen oder Methoden
     importieren, um darauf zuzugreifen, so wie es bei
     <varname>$HTTP_ENV_VARS</varname> notwendig ist.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> enthält dieselben Informationen
     ist aber nicht automatisch global. (Beachten Sie, dass
     <varname>$HTTP_ENV_VARS</varname> und <varname>$_ENV</varname>
     verschiedene Variablen sind, die von PHP auch so behandelt werden.)
    </simpara>

    <simpara>
     Falls die Direktive <link linkend="ini.register-globals">register_globals</link> 
     gesetzt ist, sind diese Variablen auch im globalen Sichbarkeitsbereich eines
     Skripts verfügbar, d.h., unabhängig von den <varname>$_ENV</varname> und 
     <varname>$HTTP_ENV_VARS</varname>
     Arrays. Lesen Sie für weitere Informationen das Kapitel über
     Sicherheit <link linkend="security.globals">Verwendung von
     Register Globals</link>. Diese individuellen globalen Variablen
     sind nicht automatisch global.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>HTTP Cookies: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      Dieses Array wurde mit PHP 4.1.0 eingeführt. In älteren Versionen
      benutzen Sie das Array <varname>$HTTP_COOKIE_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Ein assoziatives Array mit Variablen, das an das aktuelle Skript mit
     HTTP-Cookies übergeben wurde. Es ist automatisch global in allen
     Gültigkeitsbereichen. 
    </simpara>

    <simpara>
     Dies ist eine 'superglobale' oder automatisch globale Variable. Das
     bedeutet, dass die Variable in allen Sichtbarkeitsbereichen eines
     Skripts verfügbar ist. Sie brauchen dieses Array nicht mit
     <command>global $_COOKIE;</command> in Funktionen oder Methoden
     importieren, um darauf zuzugreifen, so wie es bei
     <varname>$HTTP_COOKIE_VARS</varname> notwendig ist.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> contains the same initial
     information, but is not an autoglobal. (Note that
     <varname>HTTP_COOKIE_VARS</varname> and <varname>$_COOKIE</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     Falls die Direktive <link linkend="ini.register-globals">register_globals</link> 
     gesetzt ist, sind diese Variablen auch im globalen Sichbarkeitsbereich eines
     Skripts verfügbar, d.h., unabhängig von den <varname>$_COOKIE</varname> und 
     <varname>$HTTP_COOKIE_VARS</varname>
     Arrays. Lesen Sie für weitere Informationen das Kapitel über
     Sicherheit <link linkend="security.globals">Verwendung von
     Register Globals</link>. Diese individuellen globalen Variablen
     sind nicht automatisch global.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>HTTP GET Variablen: <varname>$_GET</varname></title>

    <note>
     <simpara>
      Dieses Array wurde mit PHP 4.1.0 eingeführt. In älteren Versionen
      benutzen Sie das Array <varname>$HTTP_GET_VARS</varname>.      
     </simpara>
    </note>
    
    <simpara>
     Ein assoziatives Array mit Variablen, das an das aktuelle Skript mit
     der GET-Methode übergeben wurde. Es ist automatisch global in allen
     Gültigkeitsbereichen.
    </simpara>

    <simpara>
     Dies ist eine 'superglobale' oder automatisch globale Variable. Das
     bedeutet, dass die Variable in allen Sichtbarkeitsbereichen eines
     Skripts verfügbar ist. Sie brauchen dieses Array nicht mit
     <command>global $_GET;</command> in Funktionen oder Methoden
     importieren, um darauf zuzugreifen, so wie es bei
     <varname>$HTTP_GET_VARS</varname> notwendig ist.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> enthält dieselben Informationen
     ist aber nicht automatisch global. (Beachten Sie, dass
     <varname>$HTTP_GET_VARS</varname> und <varname>$_GET</varname>
     verschiedene Variablen sind, die von PHP auch so behandelt werden.)
    </simpara>

    <simpara>
     Falls die Direktive <link linkend="ini.register-globals">register_globals</link> 
     gesetzt ist, sind diese Variablen auch im globalen Sichbarkeitsbereich eines
     Skripts verfügbar, d.h., unabhängig von den <varname>$_GET</varname> und 
     <varname>$HTTP_GET_VARS</varname>
     Arrays. Lesen Sie für weitere Informationen das Kapitel über
     Sicherheit <link linkend="security.globals">Verwendung von
     Register Globals</link>. Diese individuellen globalen Variablen
     sind nicht automatisch global.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>HTTP POST Variablen: <varname>$_POST</varname></title>

    <note>
     <simpara>
      Dieses Array wurde mit PHP 4.1.0 eingeführt. In älteren Versionen
      benutzen Sie das Array <varname>$HTTP_POST_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Ein assoziatives Array mit Variablen, das an das aktuelle Skript mit
     der POST-Methode übergeben wurde. Es ist automatisch global in allen
     Gültigkeitsbereichen.
    </simpara>

    <simpara>
     Dies ist eine 'superglobale' oder automatisch globale Variable. Das
     bedeutet, dass die Variable in allen Sichtbarkeitsbereichen eines
     Skripts verfügbar ist. Sie brauchen dieses Array nicht mit
     <command>global $_POST;</command> in Funktionen oder Methoden
     importieren, um darauf zuzugreifen, so wie es bei
     <varname>$HTTP_POST_VARS</varname> notwendig ist.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> enthält dieselben Informationen
     ist aber nicht automatisch global. (Beachten Sie, dass
     <varname>$HTTP_POST_VARS</varname> und <varname>$_POST</varname>
     verschiedene Variablen sind, die von PHP auch so behandelt werden.)
    </simpara>

    <simpara>
     Falls die Direktive <link linkend="ini.register-globals">register_globals</link> 
     gesetzt ist, sind diese Variablen auch im globalen Sichbarkeitsbereich eines
     Skripts verfügbar, d.h., unabhängig von den <varname>$_POST</varname> und 
     <varname>$HTTP_POST_VARS</varname>
     Arrays. Lesen Sie für weitere Informationen das Kapitel über
     Sicherheit <link linkend="security.globals">Verwendung von
     Register Globals</link>. Diese individuellen globalen Variablen
     sind nicht automatisch global.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>Variablen für HTTP Dateiuploads: <varname>$_FILES</varname></title>

    <note>
     <simpara>
      Dieses Array wurde mit PHP 4.1.0 eingeführt. In älteren Versionen
      benutzen Sie das Array <varname>$HTTP_POST_FILES</varname>.
     </simpara>
    </note>
    
    <simpara>
     Ein assoziatives Array mit Elementen, die in das aktuelle Skript
     mit der HTTP-POST-Methode hochgeladen wurden. Es ist automatisch global 
     in allen Gültigkeitsbereichen.
    </simpara>

    <simpara>
     Dies ist eine 'superglobale' oder automatisch globale Variable. Das
     bedeutet, dass die Variable in allen Sichtbarkeitsbereichen eines
     Skripts verfügbar ist. Sie brauchen dieses Array nicht mit
     <command>global $_FILES;</command> in Funktionen oder Methoden
     importieren, um darauf zuzugreifen, so wie es bei
     <varname>$HTTP_POST_FILES</varname> notwendig ist.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> enthält dieselben Informationen,
     ist aber nicht autoglobal.
    </simpara>

    <simpara>
     Falls die Direktive <link linkend="ini.register-globals">register_globals</link> 
     gesetzt ist, sind diese Variablen auch im globalen Sichbarkeitsbereich eines
     Skripts verfügbar, d.h., unabhängig von den <varname>$_FILES</varname> und 
     <varname>$HTTP_POST_FILES</varname>
     Arrays. Lesen Sie für weitere Informationen das Kapitel über
     Sicherheit <link linkend="security.globals">Verwendung von
     Register Globals</link>. Diese individuellen globalen Variablen
     sind nicht automatisch global.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>Variablen einer Anforderung: <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
      Dieses Array wurde mit PHP 4.1.0 neu eingeführt. Es gibt kein
      entsprechendes Array in älteren Versionen.
     </simpara>
    </note>
    <note>
     <simpara>
      Vor der PHP Version 4.3.0 waren die Informationen des Arrays
      <varname>$_FILES</varname> auch im Array
      <varname>$_REQUEST</varname> enthalten.
     </simpara>
    </note>

    <simpara>
     Ein assoziatives Aray, das die Inhalte der Arrays
     <varname>$_GET</varname>, <varname>$_POST</varname> und 
     <varname>$_COOKIE</varname> enthält.
    </simpara>

    <simpara>
     Dies ist eine 'superglobale' oder automatisch globale Variable. Das
     bedeutet, dass die Variable in allen Sichtbarkeitsbereichen eines
     Skripts verfügbar ist. Sie brauchen dieses Array nicht mit
     <command>global $_REQUEST;</command> in Funktionen oder Methoden
     importieren, um darauf zuzugreifen.
    </simpara>

    <simpara>
     Falls die Direktive <link linkend="ini.register-globals">register_globals</link> 
     gesetzt ist,
     sind diese Variablen auch im globalen Sichbarkeitsbereich eines
     Skripts verfügbar, d.h., unabhängig von dem Array <varname>$_REQUEST</varname>.
     Lesen Sie für weitere Informationen das Kapitel über
     Sicherheit <link linkend="security.globals">Verwendung von
     Register Globals</link>. Diese individuellen globalen Variablen
     sind nicht automatisch global.     
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>Session Variablen: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
      Dieses Array wurde mit PHP 4.1.0 eingeführt. In älteren Versionen
      benutzen Sie das Array <varname>$HTTP_SESSION_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Ein assoziatives Array, das die Sessionvariablen für das aktuelle
     Skript enthält. Mehr über die Verwendung dieses Arrays finden Sie bei
     der Dokumentation zu den  <link linkend="ref.session">Session Funktionen</link>.
    </simpara>

    <simpara>
     Dies ist eine 'superglobale' oder automatisch globale Variable. Das
     bedeutet, dass die Variable in allen Sichtbarkeitsbereichen eines
     Skripts verfügbar ist. Sie brauchen dieses Array nicht mit
     <command>global $_SESSION;</command> in Funktionen oder Methoden
     importieren, um darauf zuzugreifen, so wie es bei
     <varname>$HTTP_SESSION_VARS</varname> notwendig ist.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> enthält dieselben
     Informationen, ist aber nicht automatisch global.
    </simpara>

    <simpara>
     Falls die Direktive <link linkend="ini.register-globals">
     register_globals</link> gesetzt ist,
     sind diese Variablen auch im globalen Sichbarkeitsbereich eines
     Skripts verfügbar, d.h., unabhängig von den <varname>$_SESSION</varname> 
     und <varname>$HTTP_SESSION_VARS</varname>
     Arrays. Lesen Sie für weitere Informationen das Kapitel über
     Sicherheit <link linkend="security.globals">Verwendung von
     Register Globals</link>. Diese individuellen globalen Variablen
     sind nicht automatisch global.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>Globale Variablen: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> steht seit PHP 3.0.0 zur Verfügung.
     </simpara>
    </note>
    
    <simpara>
     Ein assoziatives Array, das Referenzen zu allen Variablen, die
     gegenwärtig im globalen Gültigkeitsbereich des Skripts definiert
     sind. Die Variablennamen sind die Indizes dieses Arrays.
    </simpara>

    <simpara>
     Dies ist eine 'superglobale' oder automatisch globale Variable. Das
     bedeutet, dass die Variable in allen Sichtbarkeitsbereichen eines
     Skripts verfügbar ist. Sie brauchen dieses Array nicht mit
     <command>global $GLOBALS;</command> in Funktionen oder Methoden
     importieren, um darauf zuzugreifen.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>Die letzte Fehlermeldung: <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> ist eine Variable, die den Text der
     zuletzt aufgetretenen PHP Fehlermeldung enthält. Hierauf kann nur in
     dem Gültigkeitsbereich zugegriffen werden, in dem der Fehler auftrat,
     und nur dann, wenn die Direktive <link
     linkend="ini.track-errors">track_errors</link>
     in der Konfiguration aktiviert ist (standardmäßig ist diese Direktive 
     deaktiviert).
    </simpara>
   </sect2>
  </sect1>


  <sect1 id="reserved.classes">
   <title>Vordefinierte Klassen</title>

   <sect2 id="reserved.classes.standard">
    <title>Standardmäßig definierte Klassen</title>

    <simpara>
     Diese Klassen sind im Standard Funktionsumfang einer PHP Distribution enthalten.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        Die Klasse, aus der <link linkend="class.dir">dir</link> instantiiert wird. 
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
   
   <sect2 id="reserved.classes.php5">
    <title>Vordefinierte Klassen in PHP 5</title>
    
    <simpara>
     Diese zusätzlichen vordefinierten Klassen wurden mit PHP 5.0.0
     eingeführt.
    </simpara>
    
    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.ming">
    <title>Definierte <link linkend="ref.ming">Ming</link> Klassen</title>

    <simpara>
     Diese Klassen sind in der <link linkend="ref.ming">Ming</link> 
     Erweiterung definiert und sind nur verfügbar, wenn diese Erweiterung
     entweder einkompiliert oder zur Laufzeit dynamisch in PHP geladen
     wurde. 
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>swfshape</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffill</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfgradient</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbitmap</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftext</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftextfield</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffont</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfdisplayitem</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmovie</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbutton</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfaction</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmorph</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfsprite</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.oci8">
    <title>Definierte <link linkend="ref.oci8">Oracle 8</link> Klassen</title>

    <simpara>
     Diese Klassen sind in der <link linkend="ref.oci8">Oracle 8</link> 
     Erweiterung definiert und sind nur verfügbar, wenn diese Erweiterung
     entweder einkompiliert oder zur Laufzeit dynamisch in PHP geladen
     wurde.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>OCI-Lob</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>OCI-Collection</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.qtdom">
    <title>Definierte <link linkend="ref.qtdom">qtdom</link> Klassen</title>

    <simpara>
     Diese Klassen sind in der <link linkend="ref.qtdom">qtdom</link> 
     Erweiterung definiert und sind nur verfügbar, wenn diese Erweiterung
     entweder einkompiliert oder zur Laufzeit dynamisch in PHP geladen
     wurde.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>QDomDocument</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>QDomNode</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

  </sect1>

  &appendices.reserved.constants;

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
