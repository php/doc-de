<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.14 $ -->
<!-- EN-Revision: 1.64 Maintainer: hholzgra Status: working -->

 <appendix id="reserved">
  <title>Liste der reservierten Wörter</title>
  <para>
   Die folgenden Listen enthält in PHP vordefinierten Bezeichner.
   Sie sollten die reservierten Worte aus diesen Listen keinesfalls
   in eigenen Scripten als Bezeichner benutzen. Die Listen enthält
   Schlüsselworte, vordefinierte Variablen, Konstanten und Klassennamen. 
   Beachten Sie bitte auch das diese Listen nicht unbedingt vollständig
   sind.
  </para>

  <sect1 id="reserved.keywords">
  <title>Liste der Schlüsselworte</title>
   <simpara>
    Die folgenden Begriffe haben in PHP eine spezielle Bedeutung.
    Einige von ihnen sehen aus wie Funktionen, Konstanten usw., 
    in Wirklichkeit handelt es sich aber um Sprachkonstrukte.
    Keines der folgenden Worte kann als Name für eine benutzerdefinierte
    Konstante, Klasse, Funktion oder Methode genutzt werden. Die Nutzung
    als Variablenname ist in der Regel möglich, sollte aber unterlassen
    werden um Verwirrung zu vermeiden.
   </simpara>

   <table>
    <title>PHP Schlüsselworte</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">exception</link> (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__LINE__</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        <link linkend="language.oop5.constants">const</link>
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <function>eval</function>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
       <entry>
        <link linkend="language.oop5.final">final</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link> (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.interfaces">interface</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.interfaces">implements</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.basic">extends</link>
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">public</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">private</link> (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.visibility">protected</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.abstract">abstract</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.cloning">clone</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.exceptions">try</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.exceptions">catch</link> (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.exceptions">throw</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="migration.old-function">cfunction</link> (PHP 4 only)
       </entry>
       <entry>
        <link linkend="migration.old-function">old_function</link> (PHP 4 only)
       </entry>
       <entry>
        <link linkend="keyword.class">this</link> (PHP 5 only)
       </entry>
       <entry>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 id="reserved.variables">
   <title>Vordefinierte Variablen</title>
   
   <para>
    Since PHP 4.1.0, the preferred method for retrieving 
    <link linkend="language.variables.external">external variables</link> is
    with the superglobals mentioned below.  Before this time, people relied
    on either <link linkend="ini.register-globals">register_globals</link>
    or the long predefined PHP arrays (<varname>$HTTP_*_VARS</varname>).
    
    &avail.register-long-arrays;
   </para>

   <sect2 id="reserved.variables.server">
    <title>Server variables: <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_SERVER_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     <varname>$_SERVER</varname> is an array containing information
     such as headers, paths, and script locations. The entries in this
     array are created by the web server. There is no guarantee that
     every web server will provide any of these; servers may omit some,
     or provide others not listed here. That said, a large number of
     these variables are accounted for in the <ulink
     url="&url.cgispec;">CGI 1.1 specification</ulink>, so you should
     be able to expect those.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_SERVER;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_SERVER_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> contains the same initial
     information, but is not a superglobal. (Note that
     <varname>$HTTP_SERVER_VARS</varname> and <varname>$_SERVER</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_SERVER</varname> and <varname>$HTTP_SERVER_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.globals">Using Register
      Globals</link>. These individual globals are not superglobals.
    </simpara>

    <simpara>
     You may or may not find any of the following elements in
     $_SERVER. Note that few, if any, of these will be available (or
     indeed have any meaning) if running PHP on the command line.
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
         The filename of the currently executing script, relative to
         the document root. For instance,
         <varname>$_SERVER['PHP_SELF']</varname> in a script at the
         address <filename>http://example.com/test.php/foo.bar</filename>
         would be <filename>/test.php/foo.bar</filename>.
         The <link linkend="language.constants.predefined">__FILE__</link>
         constant contains the full path and filename of the current (i.e.
         included) file.
        </simpara>
        <simpara>
         If PHP is running as a command-line processor this variable contains
         the script name since PHP 4.3.0. Previously it was not available.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         Array of arguments passed to the script. When the script is
         run on the command line, this gives C-style access to the
         command line parameters. When called via the GET method, this
         will contain the query string.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         Contains the number of command line parameters passed to the
         script (if run on the command line).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         What revision of the CGI specification the server is using;
         i.e. '<literal>CGI/1.1</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADDR</varname>'</term>
       <listitem>
        <simpara>
         The IP address of the server under which the current script is
         executing.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         The name of the server host under which the current script is
         executing. If the script is running on a virtual host, this
         will be the value defined for that virtual host.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         Server identification string, given in the headers when
         responding to requests.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         Name and revision of the information protocol via which the
         page was requested; i.e. '<literal>HTTP/1.0</literal>';
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         Which request method was used to access the page; i.e. '<literal>GET</literal>',
         '<literal>HEAD</literal>', '<literal>POST</literal>', '<literal>PUT</literal>'.
        </simpara>
        <note>
         <para>
          PHP script is terminated after sending headers (it means after
          producing any output without output buffering) if the request method
          was <literal>HEAD</literal>.
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_TIME</varname>'</term>
       <listitem>
        <simpara>
         The timestamp of the start of the request. Available since PHP 5.1.0.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         The query string, if any, via which the page was accessed.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         The document root directory under which the current script is
         executing, as defined in the server's configuration file.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Accept:</literal> header from the
         current request, if there is one.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Accept-Charset:</literal> header
         from the current request, if there is one. Example:
         '<literal>iso-8859-1,*,utf-8</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Accept-Encoding:</literal> header
         from the current request, if there is one. Example: '<literal>gzip</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Accept-Language:</literal> header
         from the current request, if there is one. Example: '<literal>en</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Connection:</literal> header from
         the current request, if there is one. Example: '<literal>Keep-Alive</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>Host:</literal> header from the
         current request, if there is one.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         The address of the page (if any) which referred the user
         agent to the current page. This is set by the user agent. Not
         all user agents will set this, and some provide the ability
         to modify <varname>HTTP_REFERER</varname> as a feature. In
         short, it cannot really be trusted.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
         Contents of the <literal>User-Agent:</literal> header from
         the current request, if there is one. This is a string
         denoting the user agent being which is accessing the page. A
         typical example is: <computeroutput>Mozilla/4.5 [en] (X11; U;
         Linux 2.2.9 i586)</computeroutput>. Among other things, you
         can use this value with <function>get_browser</function> to
         tailor your page's output to the capabilities of the user
         agent.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTPS</varname>'</term>
       <listitem>
        <simpara>
         Set to a non-empty value if the script was queried through the HTTPS
         protocol.
        </simpara>
        <simpara>
         Note that when using ISAPI with IIS, the value will be 
         <literal>off</literal> if the request was not made through the HTTPS
         protocol.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         The IP address from which the user is viewing the current
         page.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_HOST</varname>'</term>
       <listitem>
        <simpara>
         The Host name from which the user is viewing the current
         page.  The reverse dns lookup is based off the 
         <varname>REMOTE_ADDR</varname> of the user.
        </simpara>
        <note>
         <simpara>
          Your web server must be configured to create this variable. For
          example in Apache you'll need <literal>HostnameLookups On</literal>
          inside &httpd.conf; for it to exist.  See also
          <function>gethostbyaddr</function>.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         The port being used on the user's machine to communicate with
         the web server.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <para>
         The absolute pathname of the currently executing script.
         <note>
          <para>
           If a script is executed with the CLI, as a relative path,
           such as <filename>file.php</filename> or 
           <filename>../file.php</filename>, 
           <varname>$_SERVER['SCRIPT_FILENAME']</varname> will 
           contain the relative path specified by the user.
          </para>
         </note>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         The value given to the SERVER_ADMIN (for Apache) directive in
         the web server configuration file. If the script is running
         on a virtual host, this will be the value defined for that
         virtual host.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
         The port on the server machine being used by the web server
         for communication. For default setups, this will be '<literal>80</literal>';
         using SSL, for instance, will change this to whatever your
         defined secure HTTP port is.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
         String containing the server version and virtual host name
         which are added to server-generated pages, if enabled.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         Filesystem- (not document root-) based path to the current
         script, after the server has done any virtual-to-real
         mapping.
        </simpara>
        <note>
         <simpara>
          As of PHP 4.3.2, <envar>PATH_TRANSLATED</envar> is no longer set 
          implicitly under the Apache 2 <acronym>SAPI</acronym> in contrast 
          to the situation in Apache 1, where it's set to the same value as 
          the <envar>SCRIPT_FILENAME</envar> server variable when it's not 
          populated by Apache.  This change was made to comply with the 
          <acronym>CGI</acronym> specification that 
          <envar>PATH_TRANSLATED</envar> should only exist if 
          <envar>PATH_INFO</envar> is defined.
         </simpara>
         <simpara>
          Apache 2 users may use <literal>AcceptPathInfo = On</literal> inside
          <filename>httpd.conf</filename> to define <envar>PATH_INFO</envar>.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         Contains the current script's path. This is useful for pages
         which need to point to themselves.
         The <link linkend="language.constants.predefined">__FILE__</link>
         constant contains the full path and filename of the current (i.e.
         included) file.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         The URI which was given in order to access this page; for
         instance, '<literal>/index.html</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_DIGEST</varname>'</term>
       <listitem>
        <simpara>
         When running under Apache as module doing Digest HTTP authentication
         this variable is set to the 'Authorization' header sent by the
         client (which you should then use to make the appropriate
         validation).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_USER</varname>'</term>
       <listitem>
        <simpara>
         When running under Apache or IIS (ISAPI on PHP 5) as module doing
         HTTP authentication this variable is set to the username provided by
         the user.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_PW</varname>'</term>
       <listitem>
        <simpara>
         When running under Apache or IIS (ISAPI on PHP 5) as module doing
         HTTP authentication this variable is set to the password provided by
         the user.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>AUTH_TYPE</varname>'</term>
       <listitem>
        <simpara>
         When running under Apache as module doing HTTP authenticated this
         variable is set to the authentication type.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>Environment variables: <varname>$_ENV</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_ENV_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     These variables are imported into PHP's global namespace from the
     environment under which the PHP parser is running. Many are
     provided by the shell under which PHP is running and different
     systems are likely running different kinds of shells, a
     definitive list is impossible. Please see your shell's
     documentation for a list of defined environment variables.
    </simpara>

    <simpara>
     Other environment variables include the CGI variables, placed
     there regardless of whether PHP is running as a server module or
     CGI processor.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_ENV;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_ENV_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> contains the same initial
     information, but is not a superglobal. (Note that
     <varname>$HTTP_ENV_VARS</varname> and <varname>$_ENV</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_ENV</varname> and <varname>$HTTP_ENV_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.globals">Using Register
      Globals</link>. These individual globals are not superglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>HTTP Cookies: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_COOKIE_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array of variables passed to the current script
     via HTTP cookies.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_COOKIE;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_COOKIE_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> contains the same initial
     information, but is not a superglobal. (Note that
     <varname>$HTTP_COOKIE_VARS</varname> and <varname>$_COOKIE</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_COOKIE</varname> and <varname>$HTTP_COOKIE_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.globals">Using Register
      Globals</link>. These individual globals are not superglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>HTTP GET variables: <varname>$_GET</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_GET_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array of variables passed to the current script
     via the HTTP GET method.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_GET;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_GET_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> contains the same initial
     information, but is not a superglobal. (Note that
     <varname>$HTTP_GET_VARS</varname> and <varname>$_GET</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_GET</varname> and <varname>$HTTP_GET_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.globals">Using Register
      Globals</link>. These individual globals are not superglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>HTTP POST variables: <varname>$_POST</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_POST_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array of variables passed to the current script
     via the HTTP POST method.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_POST;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_POST_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> contains the same initial
     information, but is not a superglobal. (Note that
     <varname>$HTTP_POST_VARS</varname> and <varname>$_POST</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_POST</varname> and <varname>$HTTP_POST_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.globals">Using Register
      Globals</link>. These individual globals are not superglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>HTTP File upload variables: <varname>$_FILES</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_POST_FILES</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array of items uploaded to the current script
     via the HTTP POST method.  Automatically global in any scope. 
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_FILES;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_POST_FILES</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> contains the same
     information, but is not a superglobal. (Note that
     <varname>$HTTP_POST_FILES</varname> and <varname>$_FILES</varname>
     are different variables and that PHP handles them as such)
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_FILES</varname> and <varname>$HTTP_POST_FILES</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.globals">Using Register
      Globals</link>. These individual globals are not superglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>Request variables: <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. There is no equivalent array in earlier
      versions. 
     </simpara>
    </note>
    <note>
     <simpara>
      Prior to PHP 4.3.0, <varname>$_FILES</varname> information was 
      also included in <varname>$_REQUEST</varname>.
     </simpara>
    </note>

    <simpara>
     An associative array consisting of the contents of
     <varname>$_GET</varname>, <varname>$_POST</varname>,
     and <varname>$_COOKIE</varname>.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_REQUEST;</command> to access it within functions or methods.
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_REQUEST</varname> array.  For related information, see
     the security chapter titled <link
     linkend="security.globals">Using Register
     Globals</link>. These individual globals are not superglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>Session variables: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
      Introduced in 4.1.0. In earlier versions, use
      <varname>$HTTP_SESSION_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     An associative array containing session variables available to
     the current script. See the <link linkend="ref.session">Session
      functions</link> documentation for more information on how this
     is used.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $_SESSION;</command> to access it within functions or methods, as
     you do with <varname>$HTTP_SESSION_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> contains the same
     information, but is not a superglobal. (Note that
     <varname>$HTTP_SESSION_VARS</varname> and <varname>$_SESSION</varname>
     are different variables and that PHP handles them as such) 
    </simpara>

    <simpara>
     If the <link
     linkend="ini.register-globals">register_globals</link> directive
     is set, then these variables will also be made available in the
     global scope of the script; i.e., separate from the
     <varname>$_SESSION</varname> and <varname>$HTTP_SESSION_VARS</varname> 
     arrays.  For related information, see the security chapter titled 
     <link linkend="security.globals">Using Register
      Globals</link>. These individual globals are not superglobals.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>Global variables: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> has been available since PHP 3.0.0.
     </simpara>
    </note>
    
    <simpara>
     An associative array containing references to all variables which
     are currently defined in the global scope of the script. The
     variable names are the keys of the array.
    </simpara>

    <simpara>
     This is a 'superglobal', or automatic global, variable. This
     simply means that it is available in all scopes throughout a
     script. You don't need to do a <command>global
     $GLOBALS;</command> to access it within functions or methods.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>The previous error message: <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> is a variable containing the
     text of the last error message generated by PHP. This variable
     will only be available within the scope in which the error
     occurred, and only if the <link
     linkend="ini.track-errors">track_errors</link> configuration
     option is turned on (it defaults to off).
    </simpara>
   </sect2>
  </sect1>


  <sect1 id="reserved.classes">
   <title>Predefined Classes</title>
   <para>
    This section lists standard predefined classes. Miscellaneous extensions
    define other classes which are described in their reference.
   </para>

   <sect2 id="reserved.classes.standard">
    <title>Standard Defined Classes</title>

    <simpara>
     These classes are defined in the standard set of functions included
     in the PHP build.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        The class from which <link linkend="class.dir">dir</link> is instantiated.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
   
   <sect2 id="reserved.classes.php5">
    <title>Predefined classes as of PHP 5</title>
    
    <simpara>
     These additional predefined classes were introduced in 
     PHP 5.0.0
    </simpara>
    
    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

  </sect1>

  &appendices.reserved.constants;

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
