<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 2166824858a40ea664c558f2930b63b8f4fd89c6 Maintainer: samesch Status: ready -->

<sect1 xml:id="migration70.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Neue Features</title>

 <sect2 xml:id="migration70.new-features.scalar-type-declarations">
  <title>Deklaration skalarer Typen</title>

  <para>
   Für die
   <link linkend="language.types.declarations">Deklaration des Typs</link> von
   Skalaren gibt es zwei Möglichkeiten: erzwungen (Standard) und strikt. Die
   folgenden Typen können nun für Parameter erzwungen werden: Zeichenketten
   (<type>string</type>), Ganzzahlen (<literal>int</literal>), Gleitkommazahlen
   (<type>float</type>), und Booleans (<literal>bool</literal>). Sie ergänzen
   die anderen in PHP 5 eingeführten Typen: Klassennamen, Schnittstellen,
   <type>array</type> und <type>callable</type>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Erzwingender Modus
function sumOfInts(int ...$ints)
{
    return array_sum($ints);
}

var_dump(sumOfInts(2, '3', 4.1));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(9)
]]>
   </screen>
  </informalexample>

  <para>
   Um den strikten Modus zu aktivieren, muss am Anfang der Datei eine einzelne
   &declare;-Direktive stehen. Das bedeutet, dass die Strenge der Typisierung
   für Skalare für jede Datei einzeln festgelegt wird. Diese Anweisung wirkt
   sich nicht nur auf die Typ-Deklarationen von Parametern aus, sondern auch
   auf den Rückgabetyp von Funktionen (siehe
   <link linkend="language.types.declarations">Deklaration des Rückgabetyps</link>),
   auf eingebaute PHP-Funktionen und auf Funktionen von geladenen Erweiterungen.
  </para>

  <para>
   Eine vollständige Dokumentation und Beispiele für die Deklaration von
   Skalartypen ist im Abschnitt über die
   <link linkend="language.types.declarations">Deklaration des Typs</link>
   zu finden.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.return-type-declarations">
  <title>Deklaration des Rückgabetyps</title>

  <para>
   PHP 7 unterstützt die
   <link linkend="language.types.declarations">Deklaration des Rückgabetyps</link>.
   Ähnlich wie bei der
   <link linkend="language.types.declarations">Deklaration des Parameter-Typs</link>
   gibt die Deklaration des Rückgabetyps den Typ des Wertes an, der von einer
   Funktion zurückgegeben wird. Für die Deklaration des Rückgabetyps stehen
   dieselben <link linkend="language.types.declarations">Typen</link> zur
   Verfügung wie für die Deklaration des Parameter-Typs.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function arraysSum(array ...$arrays): array
{
    return array_map(function(array $array): int {
        return array_sum($array);
    }, $arrays);
}

print_r(arraysSum([1,2,3], [4,5,6], [7,8,9]));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => 6
    [1] => 15
    [2] => 24
)
]]>
   </screen>
  </informalexample>

  <para>
   Eine vollständige Dokumentation und Beispiele für die Deklaration des
   Rückgabetyps ist im Abschnitt über die
   <link linkend="language.types.declarations">Deklaration des Rückgabetyps</link>
   zu finden.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.null-coalesce-op">
  <title>Null-Koaleszenz-Operator</title>

  <para>
   Der null-Koaleszenz-Operator (etwa: Operator für die Kombination mit null)
   <literal>??</literal> wurde als syntaktische Vereinfachung hinzugefügt für
   den häufigen Fall, dass ein ternärer Operator in Verbindung mit
   <function>isset</function> verwendet wird. Er gibt seinen ersten Operanden
   zurück, wenn er existiert und nicht &null; ist; andernfalls gibt er seinen
   zweiten Operanden zurück.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Gibt den Wert von $_GET['user'] zurück, falls er existiert,
// und andernfalls 'nobody'.
$username = $_GET['user'] ?? 'nobody';
// Dies ist gleichbedeutend mit:
$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';

// Dieser Operator kann verkettet werden. Das Beispiel gibt den
// ersten definierten Wert aus $_GET['user'], $_POST['user'] und
// 'nobody' zurück.
$username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.spaceship-op">
  <title>Raumschiff-Operator (Spaceship)</title>
  <para>
   Der Raumschiff-Operator wird für den Vergleich zweier Ausdrücke verwendet.
   Er gibt -1, 0  oder 1 zurück, wenn <varname>$a</varname> kleiner, gleich
   oder größer ist als <varname>$b</varname>. Vergleiche werden gemäß den
   üblichen Regeln für
   <link linkend="types.comparisons">Typenvergleiche in PHP</link>
   durchgeführt.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Ganzzahlen
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1

// Gleitkommazahlen
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1

// Zeichenketten
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.define-array">
  <title>Definieren von Array-Konstanten mit <function>define</function></title>

  <para>
   Es ist nun möglich, <type>Array</type>-Konstanten mit
   <function>define</function> zu definieren. Bis zu PHP 5.6 konnten
   Array-Konstanten nur mit &const; definiert werden.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
define('ANIMALS', [
    'dog',
    'cat',
    'bird'
]);

echo ANIMALS[1]; // gibt "cat" aus
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.anonymous-classes">
  <title>Anonyme Klassen</title>

  <para>
   Mit <literal>new class</literal> wurde die Unterstützung für anonyme Klassen
   hinzugefügt. Dies kann anstelle von vollständigen Klassendefinitionen
   verwendet werden für Objekte, die nur einmal benötigt werden:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
interface Logger {
    public function log(string $msg);
}

class Application {
    private $logger;

    public function getLogger(): Logger {
         return $this->logger;
    }

    public function setLogger(Logger $logger) {
         $this->logger = $logger;
    }
}

$app = new Application;
$app->setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});

var_dump($app->getLogger());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(class@anonymous)#2 (0) {
}
]]>
   </screen>
  </informalexample>

  <para>
   Die vollständige Dokumentation befindet sich im Abschnitt
   <link linkend="language.oop5.anonymous">Anonyme Klassen</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.unicode-codepoint-escape-syntax">
  <title>Syntax für die Maskierung von Unicode-Codepunkten</title>

  <para>
   Diese Syntax nimmt einen Unicode-Codepunkt in hexadezimaler Form und gibt
   diesen Codepunkt in UTF-8 in eine Zeichenkette mit doppelten
   Anführungszeichen oder einen Heredoc aus. Jeder gültige Codepunkt wird
   akzeptiert, wobei führende Nullen optional sind.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
echo "\u{aa}";
echo "\u{0000aa}";
echo "\u{9999}";
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ª
ª (wie zuvor, jedoch mit führenden Nullen)
香
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.closure-call-method">
  <title><methodname>Closure::call</methodname></title>

  <para>
   Die Methode <methodname>Closure::call</methodname> ist ein
   leistungsfähigerer und kürzerer Weg, um den Gültigkeitsbereich eines
   Objekts vorübergehend an eine Closure zu binden und diese aufzurufen.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {private $x = 1;}

// Code vor PHP 7
$getX = function() {return $this->x;};
$getXCB = $getX->bindTo(new A, 'A'); // zwischengeschaltete Closure
echo $getXCB();

// Code in PHP 7+
$getX = function() {return $this->x;};
echo $getX->call(new A);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
1
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.filtered-unserialize">
  <title>Gefiltertes <function>unserialize</function></title>

  <para>
   Dieser Mechanismus soll zusätzliche Sicherheit beim Deserialisieren von
   Objekten aus nicht vertrauenswürdigen Daten bieten. Durch die Definition
   einer Whitelist für Klassen, die deserialisiert werden dürfen, können
   Angriffe durch Code-Injection verhindert werden.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// wandelt alle Objekte in __PHP_Incomplete_Class-Objekte um
$data = unserialize($foo, ["allowed_classes" => false]);

// wandelt mit Ausnahme von MyClass und MyClass2 alle Objekte in __PHP_Incomplete_Class-Objekte um
$data = unserialize($foo, ["allowed_classes" => ["MyClass", "MyClass2"]]);

// In der Voreinstellung (entspricht dem Weglassen des zweiten Parameters) werden alle Klassen akzeptiert
$data = unserialize($foo, ["allowed_classes" => true]);
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intlchar">
  <title><classname>IntlChar</classname></title>

  <para>
   Die neue Klasse <classname>IntlChar</classname> wurde hinzugefügt, um
   zusätzliche Funktionalitäten von ICU zu nutzen. Die Klasse selbst definiert
   eine Reihe von statischen Methoden und Konstanten, die zur Bearbeitung von
   Unicode-Zeichen verwendet werden können.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

printf('%x', IntlChar::CODEPOINT_MAX);
echo IntlChar::charName('@');
var_dump(IntlChar::ispunct('!'));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
10ffff
COMMERCIAL AT
bool(true)
]]>
   </screen>
  </informalexample>

  <para>
   Um diese Klasse verwenden zu können, muss die Erweiterung
   <link linkend="book.intl">Intl</link> installiert sein.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.expectations">
  <title>Expectations (Annahmen)</title>

  <para>
   Die <link linkend="function.assert.expectations">Expectations</link> sind
   eine abwärtskompatible Weiterentwicklung der alten Funktion
   <function>assert</function>. Sie ermöglichen Assertions ohne
   Leistungsverluste im Produktionscode und bieten die Möglichkeit,
   benutzerdefinierte Exceptions auszulösen, wenn eine Assertion fehlschlägt.
  </para>

  <para>
   Während die alte API aus Kompatibilitätsgründen beibehalten wird, ist
   <function>assert</function> nun ein Sprachkonstrukt, das es ermöglicht,
   dass der erste Parameter ein Ausdruck sein kann und nicht nur ein
   auszuwertender <type>string</type>-Wert oder ein zu testender
   <type>bool</type>)-Wert.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
ini_set('assert.exception', 1);

class CustomError extends AssertionError {}

assert(false, new CustomError('Irgendeine Fehlermeldung'));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught CustomError: Irgendeine Fehlermeldung
]]>
   </screen>
  </informalexample>

  <para>
   Alle Details zu diesem Feature, einschließlich der Konfiguration sowohl in
   Entwicklungs- und Produktionsumgebungen, befinden sich im Abschnitt
   <link linkend="function.assert.expectations">Expectations</link> der
   <function>assert</function>-Referenz.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.group-use-declarations">
  <title>Zusammengefasste <literal>use</literal>-Deklarationen</title>

  <para>
   Klassen, Funktionen und Konstanten, die aus demselben &namespace;
   importiert werden, können nun in einer einzigen &use.namespace;-Anweisung
   zusammengefasst werden.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Code vor PHP 7
use some\namespace\ClassA;
use some\namespace\ClassB;
use some\namespace\ClassC as C;

use function some\namespace\fn_a;
use function some\namespace\fn_b;
use function some\namespace\fn_c;

use const some\namespace\ConstA;
use const some\namespace\ConstB;
use const some\namespace\ConstC;

// Code in PHP 7+
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.generator-return-expressions">
  <title>Generatoren können Werte zurückgeben</title>

  <para>
   Dieses Feature baut auf der Generator-Funktionalität auf, die in PHP 5.5
   eingeführt wurde. Sie ermöglicht es, eine <literal>return</literal>-Anweisung
   innerhalb eines Generators zu verwenden, damit der Wert eines Ausdrucks
   zurückgegeben werden kann (eine Rückgabe per Referenz ist nicht erlaubt).
   Dieser Wert kann mit der neuen Methode
   <literal>Generator::getReturn()</literal> abgerufen werden, die erst
   verwendet werden darf, nachdem der Generator die Ausgabe von Werten
   abgeschlossen hat.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$gen = (function() {
    yield 1;
    yield 2;

    return 3;
})();

foreach ($gen as $val) {
    echo $val, PHP_EOL;
}

echo $gen->getReturn(), PHP_EOL;
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
]]>
   </screen>
  </informalexample>

  <para>
   Die Möglichkeit, den Endwert eines Generators explizit zurückzugeben, ist
   sehr nützlich. Dadurch kann der Client-Code, der den Generator ausführt,
   den letzten vom Generator zurückgegebenen Wert (das Ergebnis einer
   Berechnung durch eine Art Co-Routine) als Sonderfall behandeln. Dies ist
   viel einfacher, als einen clientseitigen Code zu schreiben, der zunächst
   prüft, ob der zurückgegebene Wert der Letzte ist, und ihn dann
   gegebenenfalls als speziellen Wert behandelt.
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.generator-delegation">
  <title>Delegierung durch Generatoren</title>

  <para>
   Generatoren können nun automatisch an einen anderen Generator, ein
   <classname>Traversable</classname>-Objekt oder ein <type>Array</type>
   delegieren, ohne dass Boilerplate (redundanter Code) in den äußersten
   Generator geschrieben werden muss. Dies wird durch die Verwendung des
   Konstrukts &yield.from; erreicht.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function gen()
{
    yield 1;
    yield 2;
    yield from gen2();
}

function gen2()
{
    yield 3;
    yield 4;
}

foreach (gen() as $val)
{
    echo $val, PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
4
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intdiv">
  <title>Ganzzahl-Division mit <function>intdiv</function></title>

  <para>
   Die neue Funktion <function>intdiv</function> führt eine Ganzzahl-Division
   ihrer Operanden durch und gibt das Ergebnis zurück.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(intdiv(10, 3));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.session-options">
  <title>Optionen für Session</title>

  <para>
   Die Funktion <function>session_start</function> akzeptiert nun ein
   <type>Array</type> von Optionen. Diese überschreiben die
   <link linkend="session.configuration">Session-Konfigurationsanweisungen</link>,
   die normalerweise in der php.ini gesetzt werden.
  </para>

  <para>
   Diese Optionen unterstützen nun auch
   <link linkend="ini.session.lazy-write">session.lazy_write</link>. Diese
   Option ist standardmäßig aktiviert und bewirkt, dass PHP eine Session-Datei
   nur dann überschreibt, wenn sich die Session-Daten geändert haben. Außerdem
   wurde die Option <literal>read_and_close</literal> hinzugefügt. Sie kann
   nur an <function>session_start</function> übergeben werden und gibt an,
   dass die Session-Daten gelesen werden sollen und die Session dann sofort
   unverändert geschlossen werden soll.
  </para>

  <para>
   Um zum Beispiel
   <link linkend="ini.session.cache-limiter">session.cache_limiter</link> auf
   <literal>private</literal> zu setzen und die Session nach dem Lesen sofort
   zu schließen, kann Folgendes verwendet werden:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
session_start([
    'cache_limiter' => 'private',
    'read_and_close' => true,
]);
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.preg-repace-callback-array-function">
  <title><function>preg_replace_callback_array</function></title>

  <para>
   Wenn die Funktion <function>preg_replace_callback</function> verwendet
   werden müsste, kann stattdessen mit der neuen Funktion
   <function>preg_replace_callback_array</function> saubererer Code
   geschrieben werden. Vor PHP 7 musste für jeden regulären Ausdruck ein
   Callback ausgeführt werden, was dazu führte, dass die Callback-Funktion
   voller Verzweigungen sein musste.
  </para>

  <para>
   Nun können Callbacks für jeden regulären Ausdruck registriert werden, indem
   ein assoziatives Array verwendet wird, bei dem die regulären Ausdrücke
   die Schlüssel sind, und die Callback-Funktionen deren Werte.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.csprng-functions">
  <title>CSPRNG-Funktionen</title>

  <para>
   Zwei neue Funktionen wurden hinzugefügt, um plattformübergreifend
   kryptographisch sichere Ganzzahlen und Zeichenketten zu erzeugen:
   <function>random_bytes</function> und <function>random_int</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.list-arrayaccess">
  <title>
   <function>list</function> kann nun immer Objekte entpacken, die
   <classname>ArrayAccess</classname> implementieren
  </title>

  <para>
   Zuvor war nicht gewährleistet, dass <function>list</function> bei Objekten,
   die <classname>ArrayAccess</classname> implementieren, korrekt funktioniert.
   Dies wurde nun behoben.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.others">
  <title>Andere Features</title>
  <itemizedlist>
   <listitem>
    <simpara>
     Es wurde die Möglichkeit hinzugefügt, beim Klonen auf Klassenelemente
     zuzugreifen, z. B. <literal>(clone $foo)-&gt;bar()</literal>.
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
