<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e1e0c52f12f7f01724d36b12cb0044ecb0c3f20d Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration83.other-changes" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Sonstige Änderungen</title>

 <sect2 xml:id="migration83.other-changes.core">
  <title>PHP-Kern</title>

  <sect3 xml:id="migration83.other-changes.core.ffi">
   <title>FFI</title>

   <para>
    Die Methode <methodname>FFI::load</methodname> kann nun während des
    Preloads aufgerufen werden, wenn
    <link linkend="ini.opcache.preload-user">opcache.preload_user</link> der
    aktuelle Systembenutzer ist. Zuvor war der Aufruf von
    <methodname>FFI::load</methodname> während des Preloads nicht möglich,
    wenn die Direktive
    <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    gesetzt war.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.fpm">
   <title>FPM</title>

   <para>
    Der FPM CLI-Test schlägt nun fehl, wenn der Socket-Pfad länger ist als vom
    Betriebssystem unterstützt.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.opcache">
   <title>Opcache</title>

   <para>
    In den SAPIs CLI und phpdbg muss die Direktive
    <link linkend="ini.opcache.preload-user">opcache.preload_user</link> nicht
    mehr für das Preloading gesetzt werden, wenn sie als root ausgeführt
    werden. In anderen SAPIs ist diese Direktive weiterhin erforderlich, wenn
    sie als root ausgeführt werden, weil das Preloading durchgeführt wird,
    bevor die SAPI zu einem unprivilegierten Benutzer wechselt.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.streams">
   <title>Streams</title>

   <para>
    Wenn die Funktion <function>fread</function> auf einer Socket-Verbindung
    blockiert wird und gepufferte Daten vorhanden sind, gibt sie diese sofort
    zurück, statt auf weitere Daten zu warten.
   </para>

   <para>
    Ein Speicherstrom schlägt nicht mehr fehl, wenn der Such-Offset über das
    Ende hinausgeht. Stattdessen wird der Speicher beim nächsten Schreibvorgang
    vergrößert und der Bereich zwischen dem alten Ende und dem Offset wird mit
    Nullbytes gefüllt, ähnlich wie es auch bei Dateien der Fall ist.
   </para>

   <para>
    <function>stat</function>-Zugriffsoperationen wie
    <function>file_exists</function> und ähnliche verwenden nun den
    tatsächlichen Pfad statt des aktuellen Stream-Pfads, was mit dem Öffnen
    von Streams übereinstimmt.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.sapi">
  <title>Änderungen in SAPI-Modulen</title>

  <sect3 xml:id="migration83.other-changes.sapi.cli">
   <title>CLI</title>

   <para>
    Die <constant>STDOUT</constant>-, <constant>STDERR</constant>- und
    <constant>STDIN</constant>-Streams werden nicht mehr geschlossen, wenn die
    Ressource zerstört wird, was in der Regel beim Beenden der CLI der Fall
    ist. Es ist jedoch immer noch möglich, diese Streams mittels
    <function>fclose</function> und ähnlichem explizit zu schließen.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.functions">
  <title>Geänderte Funktionen</title>

  <sect3 xml:id="migration83.other-changes.functions.core">
   <title>PHP-Kern</title>

   <para>
    Bei der Funktion <function>gc_status</function> wurden die folgenden 8
    Felder hinzugefügt:

    <simplelist>
     <member><literal>"running"</literal> => bool</member>
     <member><literal>"protected"</literal> => bool</member>
     <member><literal>"full"</literal> => bool</member>
     <member><literal>"buffer_size"</literal> => int</member>
     <member>
      <literal>"application_time"</literal> => float: die gesamte
      Ausführungszeit der Anwendung in Sekunden (einschließlich collector_time)
     </member>
     <member>
      <literal>"collector_time"</literal> =>float: die Zeit, die mit dem
      Sammeln von Zyklen verbracht wurde, in Sekunden (einschließlich
      destructor_time und free_time)
     </member>
     <member>
      <literal>"destructor_time"</literal> => float: die Zeit, die während des
      Sammelns von Zyklen für die Ausführung von Destruktoren benötigt wurde,
      in Sekunden
     </member>
     <member>
      <literal>"free_time"</literal> => float: die Zeit, die während des
      Sammelns von Zyklen dafür benötigt wurde, Speicher freizugeben, in
      Sekunden
     </member>
    </simplelist>
   </para>

   <para>
    Mit der Funktion <function>class_alias</function> kann nun ein Alias einer
    internen Klasse erstellt werden.
   </para>

   <para>
    Wenn <link linkend="ini.open-basedir">open_basedir</link> zur Laufzeit
    mittels <code>ini_set('open_basedir', ...);</code> gesetzt wird, werden
    keine Pfade mehr akzeptiert, die das übergeordnete Verzeichnis
    (<literal>..</literal>) enthalten; zuvor waren nur die Pfade unzulässig,
    die mit <literal>..</literal> beginnen. Dies konnte leicht umgangen
    werden, indem dem Pfad <literal>./</literal> vorangestellt wurde.
   </para>

   <para>
    Benutzerdefinierte Exception-Handler fangen nun Exceptions beim
    Herunterfahren ab.
   </para>

   <para>
    Die HTML-Ausgabe der Funktionen <function>highlight_string</function> und
    <function>highlight_file</function> wurde geändert. Leerzeichen zwischen
    äußeren HTML-Tags werden entfernt. Zeilenumbrüche und Leerzeichen werden
    nicht mehr in HTML-Entities umgewandelt. Der gesamte HTML-Text wird nun in
    <literal>&lt;pre&gt;</literal>-Tags eingeschlossen. Die äußeren
    <literal>&lt;span&gt;</literal>-Tags wurden mit den
    <literal>&lt;code&gt;</literal>-Tags verschmolzen.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.calendar">
   <title>Calendar</title>

   <para>
    Die Funktion <function>easter_date</function> unterstützt nun auf
    64-Bit-Systemen die Jahreszahlen von 1970 bis 2.000.000.000; bisher wurden
    nur die Jahre im Bereich von 1970 bis 2037 unterstützt.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.curl">
   <title>Curl</title>

   <para>
    Die Funktion <function>curl_getinfo</function> unterstützt nun zwei neue
    Konstanten: <constant>CURLINFO_CAPATH</constant> und
    <constant>CURLINFO_CAINFO</constant>. Wenn der Wert des Parameters option
    &null; ist, stehen die zwei zusätzlichen Schlüssel
    <literal>"capath"</literal> und <literal>"cainfo"</literal> zur Verfügung.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.dom">
   <title>DOM</title>

   <para>
    Der voreingestellte Rückgabetyp der Methode
    <methodname>DOMCharacterData::appendData</methodname> wurde auf
    <type>true</type> geändert.
   </para>

   <para>
    Der voreingestellte Rückgabetyp der Methoden
    <methodname>DOMDocument::loadHTML</methodname>,
    <methodname>DOMDocument::loadHTMLFile</methodname> und
    <methodname>DOMDocument::loadXML</methodname> ist nun <type>bool</type>.
    Zuvor war dies mit dem Rückgabetyp <code>DOMDocument|bool</code>
    dokumentiert, aber seit PHP 8.0.0 kann ein Objekt der Klasse
    <classname>DOMDocument</classname> nicht mehr zurückgegeben werden, da es
    nicht mehr statisch aufgerufen werden kann.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.gd">
   <title>Gd</title>

   <para>
    Die Signatur der Funktion <function>imagerotate</function> wurde geändert.
    Der Parameter <parameter>$ignore_transparent</parameter> wurde entfernt,
    da er seit PHP 5.5.0 ignoriert wurde.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.intl">
   <title>Intl</title>

   <para>
    Die Funktion <function>datefmt_set_timezone</function> und ihr Alias, die
    Methode <methodname>IntlDateformatter::setTimeZone</methodname>, geben nun
    bei Erfolg &true; zurück; zuvor wurde &null; zurückgegeben.
   </para>

   <para>
    Die Methode <methodname>IntlBreakiterator::setText</methodname> gibt nun
    bei Erfolg &true; und bei einem Fehler &false; zurück; zuvor gab sie in
    beiden Fällen &null; zurück.
   </para>

   <para>
    Die Methode <methodname>IntlChar::enumCharNames</methodname> gibt nun
    einen booleschen Wert zurück; zuvor gab sie bei Erfolg &null; und bei
    einem Fehler &false; zurück.
   </para>

   <para>
    Die Methode <methodname>IntlDateFormatter::__construct</methodname> wirft
    eine <constant>U_ILLEGAL_ARGUMENT_ERROR</constant>-Exception, wenn eine
    ungültige Locale gesetzt gesetzt wurde.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mbstring">
   <title>MBString</title>

   <para>
    Die Funktionen <function>mb_strtolower</function> und
    <function>mb_convert_case</function> implementieren für den griechischen
    Buchstaben Sigma die Regeln der bedingten Groß- und Kleinschreibung. Bei
    der Funktion <function>mb_convert_case</function> gilt die bedingte
    Groß-/Kleinschreibung nur für die Modi <constant>MB_CASE_LOWER</constant>
    und <constant>MB_CASE_TITLE</constant>, nicht aber für
    <constant>MB_CASE_LOWER_SIMPLE</constant> und
    <constant>MB_CASE_TITLE_SIMPLE</constant>.
   </para>

   <para>
    Die Funktion <function>mb_decode_mimeheader</function> interpretiert
    Unterstriche in QPrint-kodierten MIME-kodierten Wörtern gemäß RFC 2047 und
    wandelt sie in Leerzeichen um. Unterstriche müssen in solchen
    MIME-kodierten Wörtern als <literal>"=5F"</literal> kodiert werden.
   </para>

   <para>
    In seltenen Fällen kodiert die Funktion
    <function>mb_encode_mimeheader</function> die Eingabezeichenkette um,
    während sie in PHP 8.2 als reines ASCII durchgereicht würde.
   </para>

   <para>
    Die Funktion <function>mb_encode_mimeheader</function> entfernt keine NUL-
    (Null) Bytes mehr, wenn die Eingabezeichenkette in Qprint-Kodierung
    vorliegt. Dies führte in früheren Versionen bei bestimmten Textkodierungen,
    insbesondere UTF-16 und UTF-32, dazu, dass Zeichenketten von
    mb_encode_mimeheader beschädigt wurden.
   </para>

   <para>
    Der "non-strict"-Modus der Funktion <function>mb_detect_encoding</function>
    verhält sich nun wie in der Dokumentation beschrieben. Zuvor gab sie
    &false; zurück, wenn ein bestimmtes Byte (&zb; das Erste) der
    Eingabezeichenkette in allen möglichen Kodierungen ungültig war.
    Allgemeiner ausgedrückt: Alle in Frage kommenden Kodierungen, in denen ein
    solches Byte ungültig war, wurden ausgeschlossen, und wenn dasselbe Byte
    alle verbleibenden Kodierungen ausschloss, die noch in Frage kamen, wurde
    &false; zurückgegeben. Wurden hingegen alle in Frage kommenden Kodierungen
    bis auf eine ausgeschlossen, wurde die letzte verbleibende Kodierung
    zurückgegeben, ohne Rücksicht darauf, wie viele Kodierungsfehler später in
    der Zeichenkette auftreten könnten. Dies unterscheidet sich von dem in der
    Dokumentation beschriebenen Verhalten, das besagt: "Wenn strict auf false
    gesetzt ist, wird die am besten passende Kodierung zurückgegeben."
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mysqli">
   <title>mysqli</title>

   <para>
    Die Funktion <function>mysqli_fetch_object</function> wirft nun einen
    <classname>ValueError</classname> statt einer
    <classname>Exception</classname>, wenn das Argument
    <parameter>$constructor_args</parameter> nicht leer ist, die Klasse aber
    keinen Konstruktor hat.
   </para>

   <para>
    Die Funktion <function>mysqli_poll</function> wirft nun einen
    <classname>ValueError</classname>, wenn weder das Argument
    <parameter>$read</parameter> noch das Argument
    <parameter>$error</parameter> übergeben wird.
   </para>

   <para>
    Der Rückgabetyp der Funktion <function>mysqli_field_seek</function> und
    der Methode <methodname>mysqli_result::field_seek</methodname> wurde von
    <type>bool</type> auf <type>true</type> geändert.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.odbc">
   <title>ODBC</title>

   <para>
    Die Funktion <function>odbc_autocommit</function> akzeptiert nun &null;
    als Wert für den Parameter <parameter>$enable</parameter>. Die Übergabe
    von &null; entspricht der Übergabe von nur einem Parameter, &dh; die
    Funktion zeigt an, ob autocommit aktiviert ist oder nicht.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.pgsql">
   <title>PGSQL</title>

   <para>
    Die Funktion <function>pg_fetch_object</function> wirft nun einen
    <classname>ValueError</classname> statt einer
    <classname>Exception</classname>, wenn das Argument
    <parameter>$constructor_args</parameter> nichtleer ist, die Klasse aber
    keinen Konstruktor hat.
   </para>

   <para>
    Die Funktion <function>pg_insert</function> wirft nun einen
    <classname>ValueError</classname> statt eine
    <constant>E_WARNING</constant>-Meldung auszugeben, wenn die angegebene
    Tabelle ungültig ist.
   </para>

   <para>
    Wenn der Wert/Typ eines Feldes nicht mit dem PostgreSQL-Typ übereinstimmt,
    werfen die Funktionen <function>pg_insert</function> und
    <function>pg_convert</function> einen <classname>ValueError</classname>
    oder einen <classname>TypeError</classname>, statt eine
    <constant>E_WARNING</constant>-Meldung auszugeben.
   </para>

   <para>
    Bei den Funktionen <function>pg_fetch_result</function>,
    <function>pg_field_prtlen</function> und
    <function>pg_field_is_null</function> kann der Wert des Parameters
    <parameter>$row</parameter> nun &null; sein.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.random">
   <title>Random</title>

   <para>
    Die Funktionen <function>mt_srand</function> und <function>srand</function>
    prüfen nun nicht mehr die Anzahl der Argumente, um festzustellen, ob ein
    Zufallswert (Seed) verwendet werden soll. Wenn &null; übergeben wird, wird
    ein Seed erzeugt, bei <literal>0</literal> wird Null als Seed verwendet.
    Damit entspricht das Verhalten dieser Funktionen dem der Methode
    <methodname>Random\Engine\Mt19937::__construct</methodname>.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.reflection">
   <title>Reflection</title>

   <para>
    Der Rückgabetyp der Methode
    <methodname>ReflectionClass::getStaticProperties</methodname> kann nicht
    mehr &null; sein.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.standard">
   <title>Standard</title>

   <para>
    Bei der Funktion <function>unserialize</function> wurden Meldungen der
    Stufe <constant>E_NOTICE</constant> auf <constant>E_WARNING</constant>
    hochgestuft.
    <!-- RFC: https://wiki.php.net/rfc/improve_unserialize_error_handling -->
   </para>

   <para>
    Die Funktion <function>unserialize</function> gibt nun eine neue Meldung
    der Stufe <constant>E_WARNING</constant> aus, wenn nicht alle Bytes der
    Eingabe verarbeitet wurden.
    <!-- RFC: https://wiki.php.net/rfc/unserialize_warn_on_trailing_data -->
   </para>

   <para>
    Die Funktion <function>array_pad</function> ist nun nur noch durch die
    maximale Anzahl der Elemente begrenzt, die ein Array haben kann; zuvor
    konnten nur maximal 1048576 Elemente auf einmal hinzugefügt werden.
   </para>

   <para>
    Die Funktion <function>strtok</function> erzeugt eine Meldung der Stufe
    <constant>E_WARNING</constant>, wenn beim Start der Tokenisierung kein
    Token angegeben wird.
   </para>

   <para>
    Wenn die Erzeugung des Salt fehlschlägt, verkettet die Funktion
    <function>password_hash</function> nun die zugrundeliegende
    <classname>Random\RandomException</classname> als
    <parameter>$previous</parameter>-<classname>Exception</classname> der
    <classname>ValueError</classname>-Exception.
   </para>

   <para>
    Wenn ein Array als Parameter <parameter>$command</parameter> an die
    Funktion <function>proc_open</function> übergeben wird, muss es nun
    mindestens ein nichtleeres Element enthalten; andernfalls wird ein
    <classname>ValueError</classname> geworfen.
   </para>

   <para>
    Wenn das <parameter>$command</parameter>-Array ein ungültiger Befehl ist,
    gibt die Funktion <function>proc_open</function> &false; zurück, statt ein
    Ressourcenobjekt, das später eine Warnung erzeugt. Dies war unter Windows
    bereits der Fall und ist nun auch der Fall, wenn eine
    posix_spawn-Implementierung verwendet wird (die meisten Linux-, BSD- und
    MacOS-Plattformen). Es gibt noch ein paar alte Plattformen, bei denen sich
    dieses Verhalten nicht geändert hat, da posix_spawn dort nicht unterstützt
    wird.
   </para>

   <para>
    Die Funktionen <function>array_sum</function> und
    <function>array_product</function> geben nun eine Warnung aus, wenn Werte
    in einem Array nicht in int/float umgewandelt werden können. Zuvor wurden
    Arrays und Objekte ignoriert, während alle anderen Werte in int
    umgewandelt wurden. Außerdem werden Objekte, die eine Umwandlung in eine
    Zahl definieren (&zb; <link linkend="book.gmp">GMP</link>), nun umgewandelt
    statt ignoriert.
    <!-- RFC: https://wiki.php.net/rfc/saner-array-sum-product -->
   </para>

   <para>
    Der Parameter <parameter>$decimals</parameter> der Funktion
    <function>number_format</function> verarbeitet nun auch negative Zahlen
    korrekt. Wenn <parameter>$decimals</parameter> einen negativen Wert hat,
    wird <parameter>$num</parameter> auf <parameter>$decimals</parameter>
    signifikante Stellen vor dem Dezimaltrennzeichen gerundet. Zuvor wurden
    negative <parameter>$decimals</parameter> stillschweigend ignoriert und
    die Zahl wurde auf null Dezimalstellen gerundet.
   </para>

   <para>
    Der Funktion <function>strrchr</function> wurde der neue Parameter
    <parameter>$before_needle</parameter> hinzugefügt. Er verhält sich wie der
    entsprechende Parameter der Funktionen <function>strstr</function> und
    <function>stristr</function>.
   </para>

   <para>
    Die Funktionen <function>str_getcsv</function> und
    <function>fgetcsv</function> geben nun für das letzte Feld eine leere
    Zeichenkette statt einer Zeichenkette mit einem einzelnen Null-Byte
    zurück, wenn dieses Feld nur eine nicht terminierte Enclosure
    (Einschließung) enthält.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration83.other-changes.extensions">
  <title>Sonstige Änderungen bei Erweiterungen</title>

  <sect3 xml:id="migration83.other-changes.extensions.core">
   <title>Core</title>

   <para>
    Die Anwendung des
    <link linkend="language.operators.increment">Inkrement/Dekrement</link>-Operators
    (<literal>++</literal>/<literal>--</literal>) auf einen Wert vom Typ
    <type>bool</type> führt nun zu einer Warnung. Der Grund dafür ist, dass
    dieser Operator zwar derzeit keine Wirkung hat, sich aber in Zukunft wie
    <code>$bool += 1</code> verhalten wird.
   </para>

   <para>
    Die Anwendung des
    <link linkend="language.operators.increment">Dekrement</link>-Operators
    (<literal>--</literal>) auf einen Wert vom Typ <type>null</type> führt nun
    zu einer Warnung. Der Grund dafür ist, dass dieser Operator zwar derzeit
    keine Wirkung hat, sich aber in Zukunft wie <code>$null -= 1</code>
    verhalten wird.
   </para>

   <para>
    Interne Objekte, die die _IS_NUMBER-Umwandlung implementieren, aber keinen
    do_operator-Handler, der die Addition und Subtraktion überschreibt, können
    nun inkrementiert und dekrementiert werden, als ob <code>$o += 1</code>
    oder <code>$o -= 1</code> ausgeführt worden wäre.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.dom">
   <title>DOM</title>

   <para>
    Der DOM-Mechanismus zur Verwaltung der Lebensdauer wurde dahingehend
    überarbeitet, dass implizit gelöschte Knoten weiterhin abgerufen werden
    können; zuvor führte dies zu einer Exception.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.sqlite3">
   <title>SQLite3</title>

   <para>
    Die Klasse <classname>SQLite3</classname> wirft nun eine
    <classname>SQLite3Exception</classname> (eine Erweiterung von
    <classname>Exception</classname>) statt einer
    <classname>Exception</classname>.
   </para>

   <para>
    Der SQLite-Fehlercode wird nun im Fehlercode der Exception übergeben,
    statt in der Fehlermeldung enthalten zu sein.
   </para>

  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.ini">
  <title>Änderungen bei der Handhabung von INI-Dateien</title>

  <itemizedlist>
   <listitem>
    <para>
     Die <literal>assert.*</literal>-INI-Direktiven sind veraltet.
     Dies betrifft die folgenden Direktiven:
     <simplelist>
      <member><link linkend="ini.assert.active">assert.active</link></member>
      <member><link linkend="ini.assert.bail">assert.bail</link></member>
      <member><link linkend="ini.assert.callback">assert.callback</link></member>
      <member><link linkend="ini.assert.exception">assert.exception</link></member>
      <member><link linkend="ini.assert.warning">assert.warning</link></member>
     </simplelist>
     Wenn der Wert einer Direktive mit dem Standardwert übereinstimmt, wird
     keine Meldung über die Missbilligung ausgegeben.
     Statt dieser Direktiven sollte die INI-Direktive
     <link linkend="ini.zend.assertions">zend.assertions</link> verwendet werden.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.max_allowed_stack_size">-->zend.max_allowed_stack_size<!--</link>-->
     ist eine neue INI-Direktive, mit der die maximal erlaubte Stackgröße
     festgelegt werden kann; mögliche Werte sind <literal>0</literal> (erkennt
     die maximale Stackgröße des Prozesses oder Threads), <literal>-1</literal>
     (kein Limit) oder eine positive Anzahl von Bytes. Der Standardwert ist
     <literal>0</literal>. Wenn es nicht möglich ist, die maximale Stackgröße
     des Prozesses oder Threads zu ermitteln, wird eine bekannte Systemvorgabe
     verwendet. Wird dieser Wert zu hoch eingestellt, hat das den gleichen
     Effekt wie die Deaktivierung der Stack-Größenbegrenzung. Fibers verwenden
     <!-- link TODO -->fiber.stack_size<!-- /link --> als maximal erlaubte
     Stackgröße.
     Wenn der Stack des Prozessaufrufs
     <!-- link TODO -->zend.max_allowed_stack_size-zend.reserved_stack_size<!-- /link-->
     Bytes überschreitet, wird ein <classname>Error</classname> geworfen, um
     Segmentierungsfehler durch Stack-Überlauf zu verhindern und damit die
     Fehlersuche zu erleichtern. Die Stackgröße erhöht sich während
     unkontrollierter Rekursionen mit internen Funktionen oder den magischen
     Methoden
     <link linkend="object.tostring">__toString()</link>,
     <link linkend="object.clone">__clone()</link>,
     <link linkend="object.sleep">__sleep()</link>,
     <link linkend="object.destruct">__destruct()</link>.
     Dies hat nichts mit Stack-Pufferüberläufen zu tun und ist somit auch keine
     Sicherheitsmaßnahme.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.reserved_stack_size">-->zend.reserved_stack_size<!--</link>-->
     ist eine neue INI-Direktive, mit der die zu reservierende Stackgröße in
     Bytes festgelegt werden kann. Wenn die Stackgröße überprüft wird, wird
     dieser Wert als Puffer von der maximal erlaubten Stackgröße abgezogen.
    </para>
   </listitem>
   </itemizedlist>
 </sect2>

 <sect2 xml:id="migration83.other-changes.performance">
  <title>Performance</title>

  <sect3 xml:id="migration83.other-changes.performance.dom">
   <title>DOM</title>

   <para>
    Beim Durchlaufen einer Schleife über eine
    <classname>DOMNodeList</classname> wird nun ein Zwischenspeicher
    verwendet. Dadurch steigt die Zeit, die für die Abfrage von Elementen
    benötigt wird, nicht mehr standardmäßig quadratisch an.
   </para>

   <para>
    Wenn Textinhalte von Knoten abgerufen werden, wird nun vermieden, Speicher
    zuzuweisen, was zu einem Leistungsgewinn führt.
   </para>

   <para>
    <methodname>DOMChildNode::remove</methodname> läuft nun mit
    O(1)-Performance.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.standard">
   <title>Standard</title>

   <para>
    Die flags-Fehlerprüfung der Funktion <function>file</function> ist nun
    etwa 7% schneller.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.spl">
   <title>SPL</title>

   <para>
    Die Klasse <classname>RecursiveDirectoryIterator</classname> führt nun
    weniger I/O (Ein-/Ausgabeoperationen) durch, wenn ein Verzeichnis in einer
    Schleife durchlaufen wird.
   </para>
  </sect3>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
