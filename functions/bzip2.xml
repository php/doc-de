<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.11 Maintainer: nohn Status: ready -->
 <reference id="ref.bzip2">
  <title>Bzip2 Komprimierungsfunktionen</title>
  <titleabbrev>Bzip2</titleabbrev>
  <partintro>
   <para>
    Dieses Module nutzt die Funktionen der <ulink
    url="&url.bzip2;">bzip2</ulink>-Bibliothek von Julian Seward, um
    transparent bzip2 (.bz2)-komprimierte Dateien lesen und schreiben zu
    können.
   </para>
   <para>
    Die Bzip2-Unterstützung in PHP ist nicht standardmäßig aktiviert. Es ist
    erforderlich, die <link
    linkend="install.configure.with-bzip2">--with-bz2</link>-Option beim
    compilieren von PHP zu aktivieren. Dazu ist die bzip2/libbzip2 version
    &gt;= 1.0.x. nötig.
   </para>

   <sect1 id="bzip2-example">
    <title>Ein kleines Code-Beispiel</title>
    <para>
     Dieses Beispiel öffnet eine tempräre Datei und schreibt einen Teststring
     in diese, dann gibt es den Inhalt der Datei aus.
    </para>
    <example>
     <title>Ein kleines <function>bzip2</function> Beispiel</title>
     <programlisting role="php">
&lt;?php

$filename = "/tmp/testfile.bz2";
$str = "This is a test string.\n";

// open file for writing
$bz = bzopen($filename, "w");

// write string to file
bzwrite($bz, $str);

// close file
bzclose($bz);

// open file for reading
$bz = bzopen($filename, "r");

// read 10 characters
print bzread($bz, 10);

// output until end of the file (or the next 1024 char) and close it.  
print bzread($bz);

bzclose($bz);

?>
     </programlisting>
    </example>
   </sect1>
  </partintro>


  <refentry id="function.bzclose">
   <refnamediv>
    <refname>bzclose</refname>
    <refpurpose>Schließe einen bzip2-Dateizeiger</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>bzclose</methodname>
      <methodparam><type>int</type><parameter>bz</parameter></methodparam>
     </methodsynopsis>
    <para>
     Schließt die bzip2-Datei, die von dem Zeiger <parameter>bz</parameter>
     referenziert wird.
    </para>
    <para>
     Gibt &true; bei Erfolg und &false; bei einem Fehler zurück.
    </para>
    <para>
     Der Dateizeiger muß gültig sein, und auf eine Datei zeigen, die
     erfolgreich mittels der <function>bzopen</function>-Funktion geöffnet
     wurde.
    </para>
    <para>
     Siehe auch <function>bzopen</function>.
    </para>
   </refsect1>
  </refentry>

  
  <refentry id="function.bzcompress">
   <refnamediv>
    <refname>bzcompress</refname>
    <refpurpose>Komprimiert einen String in bzip2-encodierte Daten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>bzcompress</methodname>
      <methodparam><type>string</type><parameter>source</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>blocksize</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>workfactor</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>bzcompress</function> komprimiert den
     <parameter>source</parameter>-String und gibt ihn als bzip2-komprimierte
     Daten zurück.
    </para>
    <para>
     Der optionale Parameter <parameter>blocksize</parameter> spezifiziert
     die Blockgröße während der Komprimierung und darf zwischen 1 und 9 liegen.
     9 ergibt dabei den besten Komprimierungsfaktor, benötigt jedoch auch die
     meisten Systemressourcen. Der Standardwert für
     <parameter>blocksize</parameter> ist 4.
    </para>
    <para>
     Der optionale Parameter <parameter>workfactor</parameter> bestimmt, wie
     die Funktion sich im schlimmsten Fall, stark wiederholende Eingabedaten
     zu verhalten hat. Der Wer kann zwischen 0 und 250 liegen, 0 ist ein
     spezieller Fall, 30 ist der Standardwert. Unabhängig vom Parameter
     <parameter>workfactor</parameter> wird die generierte Ausgabe immer die
     selbe sein.
    </para>
    <para>
     <example>
      <title><function>bzcompress</function> Beispiel</title>
      <programlisting role="php">&lt;?php
$str = "sample data";
$bzstr = bzcompress($str, 9);
print( $bzstr );
?>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>bzdecompress</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzdecompress">
   <refnamediv>
    <refname>bzdecompress</refname>
    <refpurpose>Dekomprimiert bzip2-komprimierte Daten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>bzdecompress</methodname>
      <methodparam><type>string</type><parameter>source</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>small</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>bzdecompress</function> dekomprimiert den
     <parameter>source</parameter>-Parameter, der bzip2-komprimierte Daten
     enthält und gibt die dekomprimierten Daten zurück. Wenn der optionale
     Parameter <parameter>small</parameter> &true; ist, wird ein alternative
     Dekomprimierungsalgorithmus verwendet, der weniger Speicher benötigt,
     jedoch nur halb so schnell läuft. Weitere Informationen sind in der
     <ulink url="&url.bzip2;">bzip2 Dokumentation</ulink> zu finden.
    </para>
    <para>
     <example>
      <title><function>bzdecompress</function></title>
      <programlisting role="php">&lt;?php
$start_str = "This is not an honest face?";
$bzstr = bzcompress($start_str);

print( "Compressed String: " );
print( $bzstr );
print( "\n&lt;br&gt;n" );

$str = bzdecompress($bzstr);
print( "Decompressed String: " );
print( $str );
print( "\n&lt;br&gt;n" );
?>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>bzcompress</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzerrno">
   <refnamediv>
    <refname>bzerrno</refname>
    <refpurpose>Gibt einen bzip2-Fehlercode zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>bzerrno</methodname>
      <methodparam><type>int</type><parameter>bz</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt den Fehlercode eines beliebigen Fehlercodes, der von dem Dateizeiger
     <parameter>bz</parameter> zurückgegeben wird.
    </para>
    <para>
     Siehe auch <function>bzerror</function> und <function>bzerrstr</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzerror">
   <refnamediv>
    <refname>bzerror</refname>
    <refpurpose>Gibt den bzip2 Fehlercode und eine Fehlerbeschreinung in einem
     Array zurück.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>bzerror</methodname>
      <methodparam><type>int</type><parameter>bz</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt den Fehlercode und die Fehlerbeschreibung eines beliebigen von
     dem Dateizeiger <parameter>bz</parameter> gelieferten bzip2-Fehlers in
     einem assoziativen Array zurück.
    </para>
    <para>
     <example>
      <title><function>bzerror</function> Beispiel</title>
      <programlisting role="php">&lt;?php
$error = bzerror($bz);

echo $error["errno"];
echo $error["errstr"];
?>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>bzerrno</function> und <function>bzerrstr</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzerrstr">
   <refnamediv>
    <refname>bzerrstr</refname>
    <refpurpose>Gibt eine bzip2-Fehlermeldung zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>bzerrstr</methodname>
      <methodparam><type>int</type><parameter>bz</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt eine Fehlermeldung eines bzip2-Fehler zurück, anhand des Dateizeigers
     <parameter>bz</parameter> identifiziert wird.
    </para>
    <para>
     Siehe auch <function>bzerrno</function> und <function>bzerror</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzflush">
   <refnamediv>
    <refname>bzflush</refname>
    <refpurpose>Erzwinge das schreiben aller gepufferten Daten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>bzflush</methodname>
      <methodparam><type>int</type><parameter>bz</parameter></methodparam>
     </methodsynopsis>
    <para>
     Erzwingt ein Schreiben alle gepufferten bzip2-Daten für den Dateizeiger
     <parameter>bz</parameter>.
    </para>
    <para>
     Gibt &true; bei Erfolg, &false; bei einem Fehler zurück.
    </para>
    <para>
     Siehe auch <function>bzread</function> und <function>bzwrite</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzopen">
   <refnamediv>
    <refname>bzopen</refname>
    <refpurpose>Öffnet eine bzip2-komprimierte Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>bzopen</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>string</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
    <para>
     Öffnet eine bzip2 (.bz2)-Datei, um sie zu lesen oder zu schreiben.
     Der Parameter <parameter>filename</parameter> ist der Names der Datei, die
     geöffnet werden soll. Der <parameter>mode</parameter>-Parameter ist
     mit der <function>fopen</function> Vergleich ('r' für lesenden Zugriff,
     'w' für schreibenden Zugriff usw.).
    </para>
    <para>
     Wenn das öffnen Fehlschlägt, gibt die Funktion &false; zurück, andernfalls
     wird ein Zeiger auf die geöffnete Datei zurückgegeben.
    </para>
    <para>
     <example>
      <title><function>bzopen</function> Beispiel</title>
      <programlisting role="php">&lt;?php
$bz = bzopen("/tmp/foo.bz2", "r");
$decompressed_file = bzread($bz, filesize("/tmp/foo.bz2"));
bzclose($bz);

print( "The contents of /tmp/foo.bz2 are: " );
print( "\n&lt;br&gt;n" );
print( $decompressed_file );
?>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>bzclose</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzread">
   <refnamediv>
    <refname>bzread</refname>
    <refpurpose>liest binäre Daten aus einer bzip2 komprimierten Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>bzread</methodname>
      <methodparam><type>int</type><parameter>bz</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>bzread</function> liest bis zu
     <parameter>length</parameter> Bytes aus dem bzip2-Dateizeiger 
     <parameter>bz</parameter>. Hört mit dem Lesen auf, wenn
     <parameter>length</parameter> (dekomprimierte) Bytes gelesen wurden
     oder das Ende der Datei (EOF) erreicht ist, welcher Fall auch immer
     zuerst auftritt. Wenn der optionale Parameter
     <parameter>length</parameter> nicht angegeben wird, wird die Funktion
     <function>bzread</function> 1024 unkomprimierte Bytes lesen.
    </para>
    <para>
     <example>
      <title><function>bzread</function> Beispiel</title>
      <programlisting role="php">&lt;?php
$bz = bzopen("/tmp/foo.bz2", "r");
$str = bzread($bz, 2048);
print( $str );
?>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>bzwrite</function> und <function>bzopen</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.bzwrite">
   <refnamediv>
    <refname>bzwrite</refname>
    <refpurpose>bzip2-Datei schreiben</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>bzwrite</methodname>
      <methodparam><type>int</type><parameter>bz</parameter></methodparam>
      <methodparam><type>string</type><parameter>data</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>bzwrite</function> schreibt den Inhalt des Strings
      <parameter>data</parameter> in den bzip2-Dateistream, auf den
      <parameter>bz</parameter> zeigt. Wenn der optionale Parameter
      <parameter>length</parameter> übergeben wird, wird das Schreiben
      abgebrochen, nachdem <parameter>length</parameter> Bytes unkomprimierte
      Bytes geschrieben, oder das Ende des Strings erreicht wurde.
    </para>
    <para>
     <example>
      <title><function>bzwrite</function> Beispiel</title>
      <programlisting role="php">&lt;?php
$str = "uncompressed data";
$bz = bzopen("/tmp/foo.bz2", "w");
bzwrite($bz, $str, strlen($str));
bzclose($bz);
?>
      </programlisting> 
     </example>
    </para>
    <para>
     Siehe auch <function>bzread</function> und <function>bzopen</function>.
    </para>
   </refsect1>
  </refentry>


 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

