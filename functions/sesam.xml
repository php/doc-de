<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.sesam">
  <title>SESAM Datenbankfunktionen</title>
  <titleabbrev>SESAM</titleabbrev>

  <partintro>
   <para>
    SESAM/SQL-Server ist ein von Fujitsu Siemens Computers in Deutschland entwickeltes 
    Mainframe-Datenbanksystem für High-End Server mit dem Betriebssystem BS2000/OSD.
   </para>
   <para>
    In zahlreichen BS2000-Installationen hat SESAM/SQL-Server unter Beweis gestellt:
    <itemizedlist>
     <listitem><simpara>die einfach zu handhabende Unterstützung von Java-, Web- und
                        Client-Server-Anwendungen</simpara></listitem>
     <listitem><simpara>eine Hochverfügbarkeit von mehr als 99,99 %</simpara></listitem>
     <listitem><simpara>die Fähigkeit, bis zu mehrere hunderttausend Benutzer zu 
                        bedienen </simpara></listitem>
    </itemizedlist>
   </para>
   <para>
    Mit einer PHP3 SESAM-Schnittstelle sind jetzt auch Datenbank-Operationen per 
    PHP-scripts möglich.
   </para>
   <note>
    <title>Konfigurationshinweise</title>
    <para>
     Die PHP-SESAM-Schnittstelle muß als Modul in Apache integriert werden. 
     Stand-alone-Betrieb ist nicht möglich. Im Apache-PHP-Modul ist die 
     <link linkend="ini.sect.sesam">SESAM-Schnittstelle</link> entsprechend
     den Apache-Vorschriften zu konfigurieren.
     <table>
      <title>SESAM-Konfigurationsvorschriften</title>
      <tgroup cols="2">
       <thead>
        <row>
 	<entry>Directive</entry>
 	<entry>Bedeutung</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry><literal>php3_sesam_oml</literal></entry>
 	<entry>Name der BS2000-PLAM-Bibliothek mit den ladbaren Modulen des
               SESAM-Treibers. Für die Nutzung von SESAM-Funktionen erforderlich.
               <para>
	        Beispiel:
	        <informalexample>
                 <programlisting role="apache">
php3_sesam_oml $.SYSLNK.SESAM-SQL.030</programlisting>
                </informalexample>
	       </para>
        </entry>
        </row>
        <row>
 	<entry><literal>php3_sesam_configfile</literal></entry>
 	<entry>Name der Konfigurationsdatei der SESAM-Anwendung. Für die Nutzung 
               von SESAM-Funktionen erforderlich.
	       <para>
	        Example:
	        <informalexample>
                 <programlisting role="apache">
php3_sesam_configfile $SESAM.SESAM.CONF.AW</programlisting></informalexample>
                enthält im allgemeinen folgende Konfiguration (siehe auch SESAM
                Referenzhandbuch):
	        <informalexample>
                 <programlisting role="bs2000">
CNF=B
NAM=K
NOTYPE</programlisting>
                </informalexample>
               </para>
        </entry>
        </row>
        <row>
 	<entry><literal>php3_sesam_messagecatalog</literal></entry>
 	<entry>Name des SESAM-Meldungskatalogs. Nur erforderlich, wenn der 
               SESAM-Meldungskatalog nicht im BS2000-Meldungkatalog enthalten ist.
               <para>
	        Example:
                <informalexample>
                 <programlisting role="apache">
php3_sesam_messagecatalog $.SYSMES.SESAM-SQL.030</programlisting>
                </informalexample>
               </para>
        </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Zusätzlich zur PHP-SESAM-Schnittstelle muß natürlich die SESAM-Datenbank
     selbst auf dem BS2000-System installiert und konfiguriert werden:
     <itemizedlist>
      <listitem><simpara>der SESAM database handler (DBH) muß gestartet sein</simpara></listitem>
      <listitem><simpara>die Datenbank und der DBH müssen verbunden sein</simpara></listitem>
     </itemizedlist>
    </para>
    <para>
     Für eine Verbindung zwischen dem PHP script und dem DBH müssen die Parameter von
     <literal>CNF</literal> und <literal>NAM</literal> der SESAM-Konfiguration
     den Werten des im BS2000 gestarteten DBH ensprechen.
    </para>
    <para>
     Bei verteilten Datenbanken muß ein SESAM/SQL-DCN-Agent gestartet
     werden, dessen Konfigurationstabelle Host- und Datenbank-Namen enthält.
    </para>
    <para>
     Die Kommunication zwischen PHP im BS2000-Subsystem POSIX und dem DBH 
     im BS2000 erfolgt über Zugriffe eines speziellen Treibermoduls (SQLSCI) und 
     der SESAM-Anschlußmodule auf einen gemeinsamen Speicherbereich (common 
     memory).
     Der common-memory-pool-Mechanismus und die Tatsache, daß PHP in den 
     Webserver statisch eingebunden ist, machen die Datenbankzugriffe sehr 
     schnell. Datenbankzugriffe über ODBC, JDBC or UTM sind nicht erforderlich.
    </para>
    <para>
     Nur ein kleines Lademodul (SESMOD) wird zum PHP gebunden, während die 
     SESAM-Anschlußmodule aus der SESAM-OML (PLAM-Bibliothek) nachgeladen werden.
     library.  In der <link
     linkend="ini.sect.sesam">PHP-Konfiguration</link>,muß diese SESAM-OML und der
     für die SESAM-Konfiguration erforderliche Linkname angegeben werden
     (SQLSCI ist wie in SESAM V3.0 in der Standard-SESAM-Toolbibliothek verfügbar). 
    </para>
    <para>
     Wegen der SQL-Syntaxvorschriften für Anführungszeichen (doppelte Anführungszeichen
     statt AnfÜhrungszeichen mit vorangestelltem Gegenschrägstrich wie in manchen
     anderen Datenbanken) wird empfohlen, die PHP-Konfigurationsvorschriften 
     <link linkend="ini.magic-quotes-gpc"><literal>php3_magic_quotes_gpc</literal></link>
     und <link linkend="ini.magic-quotes-sybase"><literal>php3_magic_quotes_sybase</literal></link>
     für alle SESAM betreffenden PHP-scripts auf <literal>On</literal> zu setzen.
    </para>
   </note>
   <note>
    <title>Überlegungen zur Ablaufzeit</title>
    <para>
     Wegen der spezifischen Eigenschaften der BS2000-Prozeßsteuerung kann der 
     Treiber erst nach dem fork des Apache-Servers für seine Sohn-Prozesse
     geladen werden. Der erste SESAM-Zugriff jedes dieser Prozesse wird dadurch
     etwas verlangsamt, alle weiteren Zugriffe werden jedoch ohne Beeinträchtigung
     abgearbeitet.   
    </para>
    <para>
     Ein explizit definierter SESAM-Meldungskatalog wird bei jedem Laden des Treibers
     (d.h. beim ersten SESAM-Zugriff) geladen. BS2000 erzeugt nach dem erfolgreichen Laden
     dieses Katalogs eine Meldung, die an die error_logfile von Apache geschickt wird.
     Da BS2000 z. Zt. ein Unterdrücken dieser Meldung nicht erlaubt, wird das logfile
     langsam damit vollgeschrieben.
    </para>
    <para>
     Bitte beachten: die SESAM-OML (PLAM-Bibliothek) und die SESAM-Konfigurationsdatei
     müssen für die Benutzerkennung, unter der der Webserver läuft, lesbar sein!
     Andernfalls kann der Server den Treiber nicht laden, womit die SESAM-Funktionen
     nicht zur Verfügung stehen. Auch der Zugriff die Datenbank selbst muß dem Server
     möglich sein, da sonst keine Verbindung zum DBH möglich ist.
    </para>
   </note>
   <note>
    <title>Cursor Typen</title>
    <para>
     Die für SQL-Abfragen "select type" zugewiesenen Ergebniscursor können
     "sequential" oder "scrollable" sein, Standardwert ist wegen des geringeren 
     Speicherbedarfs "sequential"
    </para>
    <para>
     "Scrollable" Cursors können im Ausgabedatensatz beliebig positioniert werden. 
     Für jede "scrollable" Abfrage gibt es globale Standardwerte für den Scroll-Typ 
     (initialisiert zu: <literal>SESAM_SEEK_NEXT</literal>) und der Scrolling-Abstand,
     der entweder einmal mit: <function>sesam_seek_row</function> oder jedesmal beim 
     Lesen einer Zeile mit: <function>sesam_fetch_row</function> gesetzt werden kann.
     Die folgende Tabelle zeigt die Behandlung der globalen Stadtardwerte für
     Scroll-Typ und Scroll-Abstand beim Lesen einer Zeile mit "scrollable" Cursor: 
     <table>
      <title>Scrolled Cursor Post-Processing</title>
      <tgroup cols="2">
       <thead>
        <row>
 	<entry>Scroll Type</entry>
 	<entry>Action</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry><literal>SESAM_SEEK_NEXT</literal></entry>
 	<entry>none</entry>
        </row>
        <row>
 	<entry><literal>SESAM_SEEK_PRIOR</literal></entry>
 	<entry>none</entry>
        </row>
        <row>
 	<entry><literal>SESAM_SEEK_FIRST</literal></entry>
 	<entry>set scroll type to
               <literal>SESAM_SEEK_NEXT</literal></entry>
        </row>
        <row>
 	<entry><literal>SESAM_SEEK_LAST</literal></entry>
 	<entry>set scroll type to
               <literal>SESAM_SEEK_PRIOR</literal></entry>
        </row>
        <row>
 	<entry><literal>SESAM_SEEK_ABSOLUTE</literal></entry>
 	<entry>Auto-Increment internal offset value</entry>
        </row>
        <row>
 	<entry><literal>SESAM_SEEK_RELATIVE</literal></entry>
 	<entry>none. (maintain global default 
               <parameter>offset</parameter> value, which allows
               for, e.g., fetching each 10th row backwards)
               </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
   </note>
   <note>
    <title>
     Bemerkungen zur Portierung
    </title>
    <para>
     Da in PHP Indizes üblicherweise mit &null; gestartet werden, mußte
     die SESAM-Schnittstelle entsprechend adaptiert werden: während in
     der "normalen" SESAM-Schnittstelle ein Array mit Index 1 beginnt, 
     wird in PHP &null; als Startpunkt verwendet - z.B. hat beim Lesen von
     Spalten mit <function>sesam_fetch_row</function> die erste Spalte
     den Index 0 und the folgenden Spalten haben Indizes bis zu (aber 
     nicht einschließlich!) dem Spaltenindex ($array["count"]).
     Beim Portieren von SESAM-Anwendungen aus aus anderen höheren 
     Programmiersprachen nach PHP ist diese Schnittstellenänderung zu
     beachten. Wo es erforderlich ist, beinhaltet die jeweilige 
     PHP-SESAM-Funktion einen Hinweis auf die mit &null; beginnende
     Indizierung.
    </para>
   </note>
   <note>
    <title>Sicherheitsaspekte</title>
    <para>
     Beim Zugriff auf SESAM-Datenbanken sollte der normale Benutzer
     eines Web-Servers nur die allernötigsten Privilegien bekommen.
     Im allgemeinen sollte auf Datenbanken nur lesender Zugriff 
     möglich sein. Weitergehende Rechte sollten - nur falls wirklich 
     erforderlich - abhängig vom jeweiligen Einsatzfall eingerichtet
     werden. Auf keinen Fall sollte man beliebigen Benutzern im Internet
     volle Zugriffsrechte auf eine Datenbank gewähren! Der Zugriff auf
     PHP-scripts für die Datenbank-Administration sollte in jedem Fall
     per Passwort und/oder durch SSL-Verbindung geschützt sein.
   </para>
   </note>
   <note>
    <title>Migration von anderen SQL-Datenbanken</title>
    <para>
     Unterschiedliche SQL-Ausprägungen sind nie 100-prozentig kompatibel.
     Bei der Portierung von SQL-Anwendungen anderer Datenbanken nach SESAM
     können daher Anpassungen erforderlich sein. Auf folgende, typische
     Unterschiede sei besonders hingewiesen:
     <itemizedlist>
      <listitem>
       <simpara>Herstellerspezifische Datentypen</simpara>
       <simpara>Manche herstellerspezifischen Datentypen müssen u.U. durch
       Standard-SQL-Typen ersetzt werden, wie z.B. <literal>TEXT</literal> 
       in <literal>VARCHAR(max. size)</literal>.
     </simpara>
      </listitem>
      <listitem>
       <simpara>Schlüsselwörter als SQL-Bezeichner</simpara>
       <simpara>In SESAM müssen Schlüsselwörter in Anführungsstrichen (???)
        angegeben werden (SQL-Standard) Schlüssel.</simpara>
      </listitem>
      <listitem>
       <simpara>Länge der Anzeige in Datentypen</simpara>
       <simpara>Datentypen in SESAM sind nicht durch Längenangabe, sondern 
        durch ihre Genauigkeit spezifiziert. Statt <literal>int(4)</literal> 
        für  ganze Zahlen bis '9999' braucht SESAM lediglich 
	<literal>int</literal> für eine implizite Länge von 31 Bit. Als Datentypen 
         für Datum und Zeit gibt es in SESAM nur: <literal>DATE</literal>, 
         <literal>TIME(3)</literal> und <literal>TIMESTAMP(3)</literal>.
       </simpara>
      </listitem>
      <listitem>
       <simpara>SQL-Datentypen mit herstellerspezifischen Attributen der Form: 
	<literal>unsigned</literal>, <literal>zerofill</literal>, oder
	<literal>auto_increment</literal> attributes</simpara>
       <simpara><literal>Unsigned</literal> und<literal>
	zerofill</literal>werden nicht unterstützt. Um die SESAM-implizite 
        automatische Erhöhung zu nutzen, gibt es anstelle von <literal>"... VALUES(0,
        ...)"</literal> automatisch <literal>Auto_increment</literal> (<literal>
        "INSERT ... VALUES(*, ...)"</literal>.
        . </simpara>
      </listitem>
      <listitem>
       <simpara><command>int ... DEFAULT '0000'</command></simpara>
       <simpara>Numerische Variablen dürfen nicht mit Zeichenkonstanten initialisiert 
                werden. Statt dessen ist <command>DEFAULT 0</command> zu verwenden.
                Dem Initialisierungs-string für Variablen des SQL-Datentyps datetime
                muß das jeweilige Schlüsselwort als Prefix vorangestellt werden wie in
                <literal> CREATE TABLE exmpl ( xtime timestamp(3) DEFAULT TIMESTAMP 
               '1970-01-01 00:00:00.000' NOT &null;
                ); </literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara><command>$count = xxxx_num_rows();</command></simpara>
       <simpara>Manche Datenbanken liefern die geschätzte/erratene Anzahl von
                Ausgabezeilen als Abfrageresultat an, obwohl der gelieferte 
                Wert grob falsch ist. SESAM kennt die Anzahl von Ausgabezeilen 
                erst, wenn sie tatsächlich gelesen wurden. Falls diese Information
                TATSÄCHLICH benötigt wird, sollte man <command>SELECT COUNT(...) 
                WHERE ...</command>, versuchen. Diese Funktion ermittelt die 
                Anzahl der Treffer. Ein zweiter Aufruf liefert (hoffentlich)
		die eigentlichen Ergebnisse.
       </simpara>
      </listitem>
      <listitem>
       <simpara><command>DROP TABLE thename;</command></simpara>
       <simpara>In SESAM muß im Kommamdo <command>DROP TABLE</command>
		der Name entweder um die Schlüsselwörter <literal>RESTRICT</literal> 
                oder <literal>CASCADE</literal> ergänzt werden. Bei der Angabe von
                <literal>RESTRICT</literal> wird ein Fehler gemeldet, wenn abhängige		
                Objekte (z.B. VIEWs) existieren, während bei <literal>CASCADE</literal>
                abhängige Objekte zusammen (???) mit der definierten Tabelle 
                gelöscht werden.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </note>
   <note>
    <title>
     Bemerkungen zu weiteren SQL-Datentypen 
    </title>
    <para>
     SESAM unterstützt z.Zt. keine Daten von Typ BLOB. Für zukünftige 
     SESAM-Versionen ist diese Unterstützung geplant.
    </para>
    <para>
     Bei SQL-Abfragen werden von der PHP-Schnittstelle folgende Datentypen 
     automatisch konvertiert:
     <table>
      <title>SQL to PHP Type Conversions</title>
      <tgroup cols="2">
       <thead>
        <row>
 	<entry>SQL Type</entry>
 	<entry>PHP Type</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry>SMALLINT, INTEGER</entry>
 	<entry>"integer"</entry>
        </row>
        <row>
 	<entry>NUMERIC, DECIMAL, FLOAT, REAL, DOUBLE</entry>
 	<entry>"double"</entry>
        </row>
        <row>
 	<entry>DATE, TIME, TIMESTAMP</entry>
 	<entry>"string"</entry>
        </row>
        <row>
 	<entry>VARCHAR, CHARACTER</entry>
 	<entry>"string"</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     Bei Abfragen auf ganze Zeilen wird das Ergebnis als Array geliefert.
     Leere Felder werden nicht gefüllt, d.h. ihre Existenz muß explizit mit
     <function>isset</function> oder <function>empty</function> überprüft werden.
     Dies ermöglicht dem Benutzer eine bessere Kontrolle als durch Rückgabe 
     eines Leer-strings zur Darstellung eines leeren Feldes.
    </para>
   </note>
   <note>
    <title>Unterstützung der SESAM-Features "multiple fields"</title>
    <para>
     Diese spezielle SESAM-Funktion erlaubt die Definiton von Spalten als Feld-Array.
     Eine "multiple field" Spalte wird wie folgt definiert:
     <example>
      <title>Creating a "multiple field" column</title>
      <programlisting role="sesam">
CREATE TABLE multi_field_test
(
     pkey  CHAR(20) PRIMARY KEY,
     multi(3)   CHAR(12)
)
      </programlisting>
     </example>
     und folgendermaßen ausgefüllt: 
     <example>
      <title>Filling a "multiple field" column</title>
      <programlisting role="sesam">
INSERT INTO multi_field_test ( pkey, multi(2..3) )
  VALUES ( 'Second', &lt;'first_val','second_val'&gt;)
      </programlisting>
     </example>
     Zur Beachtung: führende leere Unterfelder (wie in diesem Fall) werden ignoriert 
     und die enthaltenen Werte damit verworfen, so daß in obigem Beispiel das Ergebnis
     als multi(1..2) angezeigt wird und nicht als multi(2..3).
    </para>
    <para>
     Bei der Ausgabe von Ergebniszeilen wird auf "multiple columns" wie auf "inlined" 
     zusätzliche Spalten zugegriffen. Im obigen Beispiel bekommt  "pkey" den Indexwert
     &null; und auf die drei Spalten "multi(1..3)" kann mit den Indizes 1 bis 3 zugegriffen 
     werden.
    </para>
   </note>
   <para>
    SESAM-spezifische Details sind in den Handbüchern <ulink url="&url.sesam.en;">
    the SESAM/SQL-Server documentation (english)</ulink> oder
    <ulink url="&url.sesam.de;">the SESAM/SQL-Server documentation (german)</ulink>
    beschrieben. Beide Manuale sind online abrufbar und stehen in gedruckter Form
    zur Verfügung.
   </para>
  </partintro>

  <refentry id="function.sesam-connect">
   <refnamediv>
    <refname>sesam_connect</refname>
    <refpurpose>Eröffnet die Verbindung zu einer SESAM-Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>sesam_connect</function></funcdef>
      <paramdef>string <parameter>catalog</parameter></paramdef>
      <paramdef>string <parameter>schema</parameter></paramdef>
      <paramdef>string <parameter>user</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Ergibt &true; beim erfolgreichen Verbindungsaufbau oder
     &false; im Fehlerfall.
    </para>
    <para>
     <function>sesam_connect</function> baut die Verbindung zu einem SESAM-DBH-Prozeß auf.
     Diese Verbindung ist "permanent", d.h. nur der erste Zugriff veranlaßt das Laden
     des Treibers aus der konfigurierten SESAM-OML-Plam-Bibliothek. Alle folgenden Zugriffe
     nutzen den verwenden den geladenen Treiber und damit automatisch den dadurch definierten 
     Katalog, das Datenbankschema und den Benutzer.
    </para>
    <para>
     Beim Erstellen einer Datenbank wird der <parameter>"catalog"</parameter>
     definiert in der SESAM-Konfigurationsvorschrift <command>//ADD-SQL-DATABASE-CATALOG-LIST
     ENTRY-1 = *CATALOG(CATALOG-NAME = catalogname,...)</command>
    </para>
    <para>
     <parameter>"schema"</parameter> beschreibt das gewünschte Datenbankschema
     (siehe SESAM-Benutzerhandbuch).
    </para>
    <para>
     <parameter>"user"</parameter> bezieht sich auf Benutzer, die auf die 
     <parameter>"catalog"</parameter> / <parameter>"schema"</parameter>
     Kombination Zugriff haben. Hinweis: <parameter>"user"</parameter> ist
     sowohl von der Benutzerkennung im System als auch von der HTTP-Benutzerkennung 
     völlig unabhängig und erscheint nur in der SESAM-Konfiguration.
    </para>
    <para>
     siehe auch <function>sesam_disconnect</function>.
     <example>
      <title>Connect to a SESAM database</title>
      <programlisting role="php">
&lt;?php
if (! sesam_connect ("mycatalog", "myschema", "otto")
     die("Unable to connect to SESAM";
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-disconnect">
   <refnamediv>
    <refname>sesam_disconnect</refname>
    <refpurpose>Trennen der Verbindung zu einer SESAM-Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>sesam_disconnect</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Rückgabewert: immer &true;.
    </para>
    <para>
     <function>sesam_disconnect</function> schließt die logische Verbindung
     zur SESAM-Datenbank (ohne Verbindungsabbau und Entladen des Treibers).
    </para>
    <para>
     Hinweis: dieser Funktionsaufruf ist normalerweise nicht erforderlich,
     da eine offene logische Verbindung automatisch am Ende der Bearbeitung
     des Skripts geschlossen wird. Ungesicherte Daten werden verworfen, da ein
     implizites <function>sesam_rollback</function> durchgeführt wird. 
    </para>
    <para>
     <function>sesam_disconnect</function> schließt nicht die permanente Verbindung,
     sondern setzt die Gültigkeit der aktuellen Definition von 
     <parameter>"catalog"</parameter>, <parameter>"schema"</parameter>
     und <parameter>"user"</parameter> zurück. SESAM-Aufrufe nach
    <function>sesam_disconnect</function> sind nicht mehr möglich.
    </para>
    <para>
     Siehe auch: <function>sesam_connect</function>.
     <example>
      <title>Closing a SESAM connection</title>
      <programlisting role="php">
if (sesam_connect ("mycatalog", "myschema", "otto")) {
... some queries and stuff ...
sesam_disconnect(); }
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-settransaction">
   <refnamediv>
    <refname>sesam_settransaction</refname>
    <refpurpose>Parameter der SESAM-Transaction setzen </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>sesam_settransaction</function></funcdef>
      <paramdef>int <parameter>isolation_level</parameter></paramdef>
      <paramdef>int <parameter>read_only</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Ergibt &true; für gültige Werte und wenn 
     <function>settransaction</function> erfolgreich war, ansonsten
     &false;.
    </para>
    <para>
     <function>sesam_settransaction</function> überschreibt die Standardwerte für 
     "isolation level" Parameter und die in der SESAM-Konfigurationsdatei gesetzten
     "read-only" Transaktionsparameter, um nachfolgende Abfragen zu optimieren und
     die Konsistenz der Datenbank sicherzustellen. Die geänderten (überschriebenen) 
     Werte wirken nur auf die nächste Transaktion.
    </para>
    <para>
     <function>sesam_settransaction</function> kann nur vor dem Start aufgerufen werden,
      also nicht, wenn eine Transaktion bereits gestartet wurde.
    </para>
    <para>
     Um die Anwendung in PHP-Scripts zu vereinfachen, wurden folgende Konstanten in
     PHP vordefiniert (zur Erläuterung der Semantik siehe SESAM-Benutzerhandbuch):
     <table>
      <title>Gültige Werte für <parameter>"Isolation_Level"</parameter> Parameter </title>
      <tgroup cols="3">
       <thead>
        <row>
 	<entry>Value</entry>
 	<entry>Constant</entry>
 	<entry>Meaning</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry>1</entry>
 	<entry><literal>SESAM_TXISOL_READ_UNCOMMITTED</literal></entry>
 	<entry>Read Uncommitted</entry>
        </row>
        <row>
 	<entry>2</entry>
 	<entry><literal>SESAM_TXISOL_READ_COMMITTED</literal></entry>
 	<entry>Read Committed</entry>
        </row>
        <row>
 	<entry>3</entry>
 	<entry><literal>SESAM_TXISOL_REPEATABLE_READ</literal></entry>
 	<entry>Repeatable Read</entry>
        </row>
        <row>
 	<entry>4</entry>
 	<entry><literal>SESAM_TXISOL_SERIALIZABLE</literal></entry>
 	<entry>Serializable</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <table>
      <title>Gültige Werte für <parameter>"Read_Only"</parameter> Parameter</title>
      <tgroup cols="3">
       <thead>
        <row>
 	<entry>Value</entry>
 	<entry>Constant</entry>
 	<entry>Meaning</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry>0</entry>
 	<entry><literal>SESAM_TXREAD_READWRITE</literal></entry>
 	<entry>Read/Write</entry>
        </row>
        <row>
 	<entry>1</entry>
 	<entry><literal>SESAM_TXREAD_READONLY</literal></entry>
 	<entry>Read-Only</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Die von <function>sesam_settransaction</function> gesetzten Werte überschreiben
     die in der <link linkend="ini.sesam-configfile">SESAM-Konfigurationsdatei</link>
     gesetzten Standardwerte.
    </para>
    <para>
     <example>
      <title>Setzen von SESAM-Transaktionsparametern</title>
      <programlisting role="php">
&lt;?php
sesam_settransaction(SESAM_TXISOL_REPEATABLE_READ,
                     SESAM_TXREAD_READONLY);
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-commit">
   <refnamediv>
    <refname>sesam_commit</refname>
    <refpurpose>Schreibt noch nicht gesicherte Änderungen in die SESAM-Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>sesam_commit</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Rüchgabewert: &true; bei erfolgreicher Ausführung,
     ansonsten &false;
    </para>
    <para>
     <function>sesam_commit</function> schreibt alle noch ausstehenden Änderungen in die 
      Datenbank 
    </para>
    <para>
     Hinweis: es gibt keine Funktion "automatisches Sichern" wie in anderen Datenbanken,
     da dies zu ungewolltem Datenverlust führen kann. Bei der Beendigung des aktuellen 
     Skripts oder beim Aufruf von <function>sesam_disconnect</function>) werden nicht
     gesicherte Daten durch einen impliziten <function>sesam_rollback</function> Aufruf
     verworfen.
    </para>
    <para>
    </para>
    <para>
     Siehe auch: <function>sesam_rollback</function>.
     <example>
      <title>Schreiben eines Update in die SESAM-Datenbank</title>
      <programlisting role="php">
&lt;?php
if (sesam_connect ("mycatalog", "myschema", "otto")) {
  if (!sesam_execimm("INSERT INTO mytable VALUES (*, 'Small Test', &lt;0, 8, 15&gt;)"))
     die("insert failed");
  if (!sesam_commit())
     die("commit failed");
}
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-rollback">
   <refnamediv>
    <refname>sesam_rollback</refname>
    <refpurpose>Verwirft alle noch nicht gesicherten Änderungen der SESAM-Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>sesam_rollback</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Rückgabewerte: &true; bei erfolgreicher Ausführung, ansonsten
     &false;
    </para>
    <para>
     <function>sesam_rollback</function> Verwirft alle noch nicht gesicherten Änderungen
     der SESAM-Datenbank sowie Ergebnis-Cursor und Ergebnis-Deskriptoren.
    </para>
    <para>
     Bei jeder Beendigung eines aktuellen Skripts sowie beim Aufruf von 
     <function>sesam_disconnect</function>) werden nicht gesicherte Daten durch einen 
     impliziten <function>sesam_rollback</function> Aufruf verworfen.
    </para>
    <para>
     Siehe auch: <function>sesam_commit</function>.
     <example>
      <title>Verwerfen einer Änderung der SESAM-Datenbank</title>
      <programlisting role="php">
&lt;?php
if (sesam_connect ("mycatalog", "myschema", "otto")) {
  if (sesam_execimm("INSERT INTO mytable VALUES (*, 'Small Test', &lt;0, 8, 15&gt;)")
   && sesam_execimm("INSERT INTO othertable VALUES (*, 'Another Test', 1)"))
     sesam_commit();
  else
     sesam_rollback();
}
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-execimm">
   <refnamediv>
    <refname>sesam_execimm</refname>
    <refpurpose>Ausführen einer "immediate" SQL-Anweisung</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>sesam_execimm</function></funcdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Rückgabewerte: Ein SESAM "result identifier" oder &false; 
     im Fehlerfall.
    </para>
    <para>
     <function>sesam_execimm</function> bewirkt die Ausführung einer "immediate"  
     SQL-Anweisung wie z.B. UPDATE, INSERT oder DELETE, die keine Rückgabewerte
     liefern und weder Eingabe- noch Ausgabevariablen verwenden und setzt den 
     Abfrageparameter <parameter>affected_rows</parameter>  über die 
     <function>sesam_affected_rows</function> Funktion. Auf "select type" 
     Abfragen kann <function>sesam_execimm</function> nicht angewendet werden.     
    </para>
    <para>
     Hinweis: <function>sesam_query</function> unterstützt sowohl "immediate" als 
     auch "select-type" Abfragen. <function>sesam_execimm</function> sollte nur 
     verwendet werden, wenn der verwendete Anfragetyp von vornherein bekannt ist.
     SELECT-Abfragen mit <function>sesam_execimm</function> werden mit dem Fehler
     <literal>$err["sqlstate"] == "42SBW"</literal> beendet.
    </para>
    <para>
     Der Rückgabewert "result identifier" kann nicht für Abfragen mit 
     <function>sesam_affected_rows</function> verwendet werden; er wird wegen der 
     Kompatibilität zur Funktion <function>sesam_query</function> ausgegeben.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
$stmt = "INSERT INTO mytable VALUES('one', 'two')";
$result = sesam_execimm ($stmt);
$err = sesam_diagnostic();
print("sqlstate = ".$err["sqlstate"]."\n".
      "Affected rows = ".$err["rowcount"]." == ".
      sesam_affected_rows($result)."\n");
      </programlisting>
     </informalexample>
     Siehe auch: <function>sesam_query</function> und
     <function>sesam_affected_rows</function>.
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.sesam-query">
   <refnamediv>
    <refname>sesam_query</refname>
    <refpurpose>Durchführen einer SESAM-SQL-Abfrage und aufbereiten der Ergebnisse</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>sesam_query</function></funcdef>
      <paramdef>string <parameter>query</parameter></paramdef>
      <paramdef>bool
       <parameter><optional>scrollable</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Rückgabewerte: ein SESAM "result identifier" oder &false; 
     im Fehlerfall.
    </para>
    <para>
     Von anderen Funktionen wird "result_id" für Abfrage-Ergebnisse verwendet. 
    </para>
    <para>
     <function>sesam_query</function> schickt eine Abfrage an die aktuelle
     Datenbank auf dem Server. Sie kann sowohl "immediate" SQL-Anweisungen
     als auch "select type" Abfragen ausführen. Bei der Ausführung einer 
     "immediate" Anweisung ist kein Cursor aktiv und bei jedem folgenden
     <function>sesam_fetch_row</function> oder <function>sesam_fetch_result</function> call will return an empty
     Aufruf wird ein leeres Ergebnis (zero columns, indicating end-of-result) 
     zurückgeliefert.
     Für "select type" Anweisungen wird ein Ergebnis-Deskriptor und ein Cursor
     (scrollable oder sequential, abhängig vom optionalen
     bool <parameter>scrollable</parameter>-Parameter) zugewiesen.
     Wenn <parameter>scrollable</parameter> nicht angegeben wird, ist der 
     Cursor sequentiell.
    </para>
    <para>
     Bei der Verwendung von "scrollable" Cursors kann der Cursor
     im Ausgabesatz beliebig positioniert werden. Für jede "scrollable"
     Abfrage gibt es globale Standardwerte für den "scrolling"-Typ 
     (Initial-Wert: <literal>SESAM_SEEK_NEXT</literal>) und den
     scrolling offset, der entweder einmal durch 
     <function>sesam_seek_row</function> oder bei jedem Lesen
     einer Zeile mit <function>sesam_fetch_row</function>.
    </para>
    <para>
     Für "immediate" Befehle wird die Anzahl der betroffenen Zeilen für Abfragen
     von der Funktion <function>sesam_affected_rows</function> gesichert.
    </para>
    <para>
     Siehe auch: <function>sesam_fetch_row</function> und
     <function>sesam_fetch_result</function>.
     <example>
      <title>
       Zeige alle Zeilen der Tabelle "Telefon" als HTML-Tabelle
      </title>
      <programlisting role="php">
&lt;?php
if (!sesam_connect("phonedb", "demo", "otto"))
  die("cannot connect");
$result = sesam_query("select * from phone");
if (!$result) {
  $err = sesam_diagnostic();
  die($err["errmsg"]);
}
echo "&lt;TABLE BORDER&gt;\n";
// Add title header with column names above the result:
if ($cols = sesam_field_array($result)) {
  echo " &lt;TR&gt;&lt;TH COLSPAN=".$cols["count"]."&gt;Result:&lt;/TH&gt;&lt;/TR&gt;\n";
  echo " &lt;TR&gt;\n";
  for ($col = 0; $col &lt; $cols["count"]; ++$col) {
    $colattr = $cols[$col];
    /* Span the table head over SESAM's "Multiple Fields": */
    if ($colattr["count"] &gt; 1) {
      echo "  &lt;TH COLSPAN=".$colattr["count"]."&gt;".$colattr["name"].
           "(1..".$colattr["count"].")&lt;/TH&gt;\n";
      $col += $colattr["count"] - 1;
    }
    else
      echo "  &lt;TH&gt;" . $colattr["name"] . "&lt;/TH&gt;\n";
  }
  echo " &lt;/TR&gt;\n";
}

do {
  // Fetch the result in chunks of 100 rows max.
  $ok = sesam_fetch_result($result,100);
  for ($row=0; $row &lt; $ok["rows"]; ++$row) {
    echo " &lt;TR&gt;\n";
    for ($col = 0; $col &lt; $ok["cols"]; ++$col) {
      if (isset($ok[$col][$row]))
        echo "  &lt;TD&gt;" . $ok[$col][$row] . "&lt;/TD&gt;\n";
      else
        echo "  &lt;TD&gt;-empty-&lt;/TD&gt;\n";
    }
    echo " &lt;/TR&gt;\n";
  }
} while ($ok["truncated"]); // while there may be more data
echo "&lt;/TABLE&gt;\n";
// free result id
sesam_free_result($result);
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-num-fields">
   <refnamediv>
    <refname>sesam_num_fields</refname>
    <refpurpose>Liefert die Anzahl von Feldern/Spalten in einem Ausgabesatz</refpurpose>
   </refnamediv>
   <refsect1>
   <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>sesam_num_fields</function></funcdef>
      <paramdef>string <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Nach dem Aufruf der Funktion <function>sesam_query</function> mit einer
     "select type" Abfrage wird die Anzahl von Spalten als Resultat ausgegeben.
     Die Ausgabe ist ein Integer-Wert, der die Anzahl aller Spalten (aka.fields) 
     im aktuellen <parameter>result_id</parameter> Ergebnis-Satz oder &false;.
    </para>
    <para>
     Bei "immediate" Befehle wird der Wert &null; zurückgegeben. Die SESAM
     "multiple field" Spalten zählen entsprechend der jeweiligen Dimension, d.h.
     ein dreispaltiges "multiple field" zählt als drei Spalten.
    </para>
    <para>
     Siehe auch: <function>sesam_query</function> und
     <function>sesam_field_array</function> zur Unterscheidung zwischen
     "multiple field" Spalten und normalen Spalten.
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.sesam-field-name">
   <refnamediv>
    <refname>sesam_field_name</refname>
    <refpurpose>
     Liefert einen Spaltennamen des Ausgabesatzes
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>sesam_field_name</function></funcdef>
      <paramdef>string <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>index</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert den Namen eines Feldes (d.h. den Spaltennamen) oder &false; on error.
    </para>
    <para>
     Bei "immediate" Abfragen oder bei dynamischen Spalten wird ein Leerstring 
     zurückgegeben.
    </para>
    <note><para>
     Der Spalten-Index zählt ab &null;, nicht wie bei SESAM ab Eins.
    </para></note>
    <para>
     Siehe auch: <function>sesam_field_array</function>. Bietet einen bequemeren Zugriff
     auf Spaltennamen und -typen und erlaubt die Prüfung auf "multiple fields".
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-diagnostic">
   <refnamediv>
    <refname>sesam_diagnostic</refname>
    <refpurpose>Liefert Status-Informationen über den letzten SESAM-Aufruf</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>sesam_diagnostic</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert ein assoziatives Array (???) von Status- und Returncodes des letzten SQL-
     Aktion (Abfrage/Statement(???)/Befehl). Elemente des Arrays sind: 
     <table>
      <title>
       Von <function>sesam_diagnostic</function> gelieferte Status Information 
      </title>
      <tgroup cols="2">
       <thead>
        <row>
 	<entry>Element</entry>
 	<entry>Contents</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry>$array["sqlstate"]</entry>
 	<entry>5-stelliger SQL-Returncode (mögliche Werte von SQLSTATE: siehe 
               SESAM-Benutzerhandbuch)</entry>
        </row>
        <row>
 	<entry>$array["rowcount"]</entry>
 	<entry>Anzahl betroffener Zeilen im letzten update/insert/delete
               (nur nach "immediate" Statements gesetzt)
        </entry>
        </row>
        <row>
 	<entry>$array["errmsg"]</entry>
 	<entry>"lesbarer" Fehlermeldungstext
               (nur nach Fehlern gesetzt)
        </entry>
        </row>
        <row>
 	<entry>$array["errcol"]</entry>
 	<entry>Spaltennummer des letzten Fehlers (1-indiziert oder 0, wenn
               nicht definiert; nur nach Fehlern gesetzt)
        </entry>
        </row>
        <row>
 	<entry>$array["errlin"]</entry>
 	<entry>Zeilennummer des letzten Fehlers (1-indiziert oder 0, wenn
               nicht definiert; nur nach Fehlern gesetzt)
        </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Im folgenden Beispiel wird ein Syntaxfehler (E SEW42AE ILLEGAL
     CHARACTER) zusammen mit dem fehlerhaften SQL-Statement und der genauen 
     Position des Fehlers angezeigt. 
     <example>
      <title>Anzeige von  SESAM-Fehlermeldungen mit Fehlerposition</title>
      <programlisting role="php">
&lt;?php
// Function which prints a formatted error message,
// displaying a pointer to the syntax error in the
// SQL statement
function PrintReturncode($exec_str)
{
   $err = Sesam_Diagnostic();
   $colspan=4; // 4 cols for: sqlstate, errlin, errcol, rowcount
   if ($err["errlin"] == -1)
     --$colspan;
   if ($err["errcol"] == -1)
     --$colspan;
   if ($err["rowcount"] == 0)
     --$colspan;
   echo "&lt;TABLE BORDER&gt;\n";
   echo "&lt;TR&gt;&lt;TH COLSPAN=".$colspan."&gt;&lt;FONT COLOR=red&gt;ERROR:&lt;/FONT&gt; ".
	  	htmlspecialchars($err["errmsg"])."&lt;/TH&gt;&lt;/TR&gt;\n";
   if ($err["errcol"] &gt;= 0) {
     echo "&lt;TR&gt;&lt;TD COLSPAN=".$colspan."&gt;&lt;PRE&gt;\n";
     $errstmt = $exec_str."\n";
     for ($lin=0; $errstmt != ""; ++$lin) {
       if ($lin != $err["errlin"]) { // $lin is less or greater than errlin
         if (! ($i = strchr($errstmt, "\n")))
           $i = "";
         $line = substr($errstmt, 0, strlen($errstmt)-strlen($i)+1);
         $errstmt = substr($i, 1);
         if ($line != "\n")
           print htmlspecialchars($line);
       }
       else {
         if (! ($i = strchr($errstmt, "\n")))
           $i = "";
         $line = substr($errstmt, 0, strlen($errstmt)-strlen($i)+1);
         $errstmt = substr($i, 1);
         for ($col=0; $col &lt; $err["errcol"]; ++$col)
           echo (substr($line, $col, 1) == "\t") ? "\t" : ".";
         echo "&lt;FONT COLOR=RED&gt;&lt;BLINK&gt;\\&lt;/BLINK&gt;&lt;/FONT&gt;\n";
         print "&lt;FONT COLOR=\"#880000\"&gt;".htmlspecialchars($line)."&lt;/FONT&gt;";
         for ($col=0; $col &lt; $err["errcol"]; ++$col)
           echo (substr($line, $col, 1) == "\t") ? "\t" : ".";
         echo "&lt;FONT COLOR=RED&gt;&lt;BLINK&gt;/&lt;/BLINK&gt;&lt;/FONT&gt;\n";
       }
     }
     echo "&lt;/PRE&gt;&lt;/TD&gt;&lt;/TR&gt;\n";
   }
   echo "&lt;TR&gt;\n";
   echo " &lt;TD&gt;sqlstate=" . $err["sqlstate"] . "&lt;/TD&gt;\n";
   if ($err["errlin"] != -1)
     echo " &lt;TD&gt;errlin=" . $err["errlin"] . "&lt;/TD&gt;\n";
   if ($err["errcol"] != -1)
     echo " &lt;TD&gt;errcol=" . $err["errcol"] . "&lt;/TD&gt;\n";
   if ($err["rowcount"] != 0)
     echo " &lt;TD&gt;rowcount=" . $err["rowcount"] . "&lt;/TD&gt;\n";
   echo "&lt;/TR&gt;\n";
   echo "&lt;/TABLE&gt;\n";
}

if (!sesam_connect("mycatalog", "phoneno", "otto"))
  die("cannot connect");

$stmt = "SELECT * FROM phone\n".
        "  WHERE@ LASTNAME='KRAEMER'\n".
        "  ORDER BY FIRSTNAME";
if (! ($result = sesam_query($stmt)))
  PrintReturncode($stmt);
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch: <function>sesam_errormsg</function> für einfachen Zugriff nur auf die
     Fehlermeldung
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-fetch-result">
   <refnamediv>
    <refname>sesam_fetch_result</refname>
    <refpurpose>Liefert das Ergebnis einer Abfrage (ganz oder teilweise)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>sesam_fetch_result</function></funcdef>
      <paramdef>string
       <parameter>result_id</parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>max_rows</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert ein gemischtes Array (???) mit den Ergebnissen einer Abfrage, optional
     begrenzt auf ein Maximum durch <parameter>max_rows</parameter> Zeilen. Sowohl
     Zeilen- als auch Spaltenindizes sind Null-basiert.
     <table>
      <title>
       Gemischtes Resultat mit der Funktion <function>sesam_fetch_result</function>
      </title>
      <tgroup cols="2">
       <thead>
        <row>
 	<entry>Array Element</entry>
 	<entry>Contents</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry>int $arr["count"]</entry>
 	<entry>Anzahl von Ergebnis-Spalten im Ausgabesatz (oder &null; bei 
               "immediate" Abfragen)</entry>
        </row>
        <row>
 	<entry>int $arr["rows"]</entry>
 	<entry>Anzahl von Zeilen im Ausgabesatz (zwischen &null; und 
               <parameter>max_rows</parameter>)</entry>
        </row>
        <row>
 	<entry>bool $arr["truncated"]</entry>
 	<entry>&true; wenn die Anzahl der Zeilen mindestens
               <parameter>max_rows</parameter> ist, ansonsten &false;.
               Hinweis: auch bei &true; kann der nächste 
               <function>sesam_fetch_result</function> u.U. 0 Zeilen zurückliefern, 
               weil es keine weiteren Ergebniseinträge gibt.
               </entry>
        </row>
        <row>
 	<entry>mixed $arr[col][row]</entry>
 	<entry>Ergebnisdaten für alle Felder in Zeile(<literal>row</literal>) 
	       und Spalte(<literal>col</literal>), wobei der Integer-Index 
               <literal>row</literal> zwischen 0 and <literal>$arr["rows"]-1</literal>,
	       und <literal>col</literal> zwischen 0 und
	       <literal>$arr["count"]-1</literal>) liegt. Da Felder auch leer sein können,
               muß ihre Existenz mit der PHP-Funktion <function>isset</function>
	       verifiziert werden. Der zurückgelieferte Feldtyp hängt vom entsprechenden,
               für die Spalte defineirten SQL-Typ ab (siehe <link linkend="ref.sesam">SESAM 
               overview</link> für die angewendeten Umsetzungen). SESAM "multiple
	       fields" sind "inlined" (???) und werden wie eine Spaltenfolge behandelt.
        </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     Hinweis: der Speicherbedarf für eine umfangreiche Abfrage kann
     immens groß werden. Es ist empfehlenswert, den Parameter 
     <parameter>max_rows</parameter> zum Begrenzen der maximalen Anzahl 
     von gelieferten Zeilen zu verwenden, um zu verhindern, daß die Ausgabe
     nicht den gesamten verfügbaren Speicher belegt.
     </para>
    <para>
     Siehe auch: <function>sesam_fetch_row</function>, und
     <function>sesam_field_array</function> zur Überprüfung auf "multiple
     fields". Ein komplettes Beispiel für die Funktion 
     <function>sesam_fetch_result</function> findet man in 
     <function>sesam_query</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-affected-rows">
   <refnamediv>
    <refname>sesam_affected_rows</refname>
    <refpurpose>Anzahl der von einer sofortigen (???) Abfrage betroffenen Zeilen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>sesam_affected_rows</function></funcdef>
      <paramdef>string
       <parameter>result_id</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>result_id</parameter> ist eine von <function>sesam_query</function>
      zurückgelieferte gültige Ergebniskennung (???).
    </para>
    <para>
     Liefert die Anzahl der von einer Abfrage betroffenen Zeilen bezogen auf die 
     <parameter>result_id</parameter>. 
    </para>
    <para>
     Die Funktion <function>sesam_affected_rows</function> liefert sinnvolle Werte
     nur in Verbindung mit "immediate" SQL-Statements (Update-Operationen wie 
     <literal>INSERT</literal>, <literal>UPDATE</literal> and <literal>DELETE</literal>),
     da SESAM für "select type" Abfragen keinerlei Information über betroffene Zeilen
     liefert. Der gelieferte Wert ist die Anzahl der betroffenen Zeilen. 
    </para>
    <para>
     Siehe auch: <function>sesam_query</function> und
               <function>sesam_execimm</function>
    </para>
     <informalexample>
      <programlisting role="php">
$result = sesam_execimm ("DELETE FROM PHONE WHERE LASTNAME = '".strtoupper($name)."'");
if (! $result) {
    ... error ...
}
print sesam_affected_rows($result).
      " entries with last name ".$name." deleted.\n"
     </programlisting>
    </informalexample>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-errormsg">
   <refnamediv>
    <refname>sesam_errormsg</refname>
    <refpurpose>Liefert die Fehlermeldung des letzten SESAM-Aufrufs</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>sesam_errormsg</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert die SESAM-Fehlermeldung des letzten SESAM-Fehlers.
    </para>
    <informalexample>
     <programlisting role="php">
if (!sesam_execimm($stmt))
  printf("%s&lt;br&gt;\n", sesam_errormsg());
     </programlisting>
    </informalexample>
    <para>
     Siehe auch: <function>sesam_diagnostic</function> für den vollen Umfang der 
     SESAM SQL Statusinformation.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-field-array">
   <refnamediv>
    <refname>sesam_field_array</refname>
    <refpurpose>
     Liefert Meta-Information über einzelne Ergebnisspalten
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>sesam_field_array</function></funcdef>
      <paramdef>string <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>result_id</parameter> ist eine gültige Ergebniskennung (?) der Funktion
     <function>sesam_query</function>.
    </para>
    <para>
     Liefert eine gemischtes assoziativ indiziertes Array (???) mit Meta-Informationen
     (Spaltenname, Typ, Genauigkeit, ...) über einzelne Ergebnisspalten nach einer mit
     <parameter>result_id</parameter> assoziierten Abfrage.
    </para>
    <para>
     <table>
      <title>
       Von <function>sesam_field_array</function> gelieferter gemischter Ausgabesatz 
      </title>
      <tgroup cols="2">
       <thead>
        <row>
 	<entry>Array Element</entry>
 	<entry>Contents</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry>int $arr["count"]</entry>
 	<entry>Gesamtanzahl von Zeilen im Ausgabesatz (oder &null; bei "immediate"
               Abfragen). SESAM "multiple fields" sind "inlined" (???) und werden
               werden wie die entsprechende Anzahl von Spalten behandelt.
	</entry>
        </row>
        <row>
 	<entry>string $arr[col]["name"]</entry>
 	<entry>Spaltenname für column(<literal>col</literal>), wobei 
               <literal>col</literal> zwischen 0 und 
               <literal>$arr["count"]-1</literal> liegt. Für dynamisch
               berechnete Spalten kann der gelieferte Wert auch ein 
               Leer-String sein. SESAM "multiple fields" sind 
               "inlined" (???) und werden wie die entsprechende Anzahl 
               von Spalten behandelt , jedes mit dem selben Spaltennamen. 
        </entry>
        </row>
        <row>
 	<entry>string $arr[col]["count"]</entry>
 	<entry>"count" ist der Wiederholungsfaktor, wenn 
               die Spalte als "multiple field" definiert wurde
               (normalerweise 1). Die erste Spalte einer
               "multiple field"-Spalte enthält dagegen die Anzahl
               von Wiederholungen (in der zweiten und in allen weiteren 
               Spalten ist "count" 1), was zur Identifikation von
               "multiple fields" im Ergebnissatz verwendet werden kann.
               Das Beispiel in der Beschreibung von 
               <function>sesam_query</function> demonstriert die Anwendung
               des "count"-Attributes.
        </entry>
        </row>
        <row>
 	<entry>string $arr[col]["type"]</entry>
 	<entry>PHP-Variablentyp der Daten für
               column(<literal>col</literal>), wobei
               <literal>col</literal> zwischen
	       und <literal>$arr["count"]-1</literal> liegt. Der gelieferte 
               Wert kann (abhängig vom SQL-Typ des Ergebnisses) einer der 
               folgenden sein:
               <itemizedlist>
                <listitem>
                 <simpara>"integer"</simpara>
                </listitem>
                <listitem>
                 <simpara>"double"</simpara>
                </listitem>
                <listitem>
                 <simpara>"string"</simpara>
                </listitem>
               </itemizedlist>
               SESAM "multiple fields" sind "inlined" (???) und werden wie 
               die entsprechende Anzahl von Spalten behandelt, 
               jedes mit dem selben PHP-Typ. 
        </entry>
        </row>
        <row>
 	<entry>string $arr[col]["sqltype"]</entry>
 	<entry>SQL-Variablentyp der Spaltendaten für
               column(<literal>col</literal>), wobei
               <literal>col</literal> zwischen 0
	       und <literal>$arr["count"]-1</literal> liegt. Der gelieferte Wert
               kann abhängig vom SQL-Typ des Ergebnisses einer der folgenden sein:
               <itemizedlist>
                <listitem>
                 <simpara>"CHARACTER"</simpara>
                </listitem>
                <listitem>
                 <simpara>"VARCHAR"</simpara>
                </listitem>
                <listitem>
                 <simpara>"NUMERIC"</simpara>
                </listitem>
                <listitem>
                 <simpara>"DECIMAL"</simpara>
                </listitem>
                <listitem>
                 <simpara>"INTEGER"</simpara>
                </listitem>
                <listitem>
                 <simpara>"SMALLINT"</simpara>
                </listitem>
                <listitem>
                 <simpara>"FLOAT"</simpara>
                </listitem>
                <listitem>
                 <simpara>"REAL"</simpara>
                </listitem>
                <listitem>
                 <simpara>"DOUBLE"</simpara>
                </listitem>
                <listitem>
                 <simpara>"DATE"</simpara>
                </listitem>
                <listitem>
                 <simpara>"TIME"</simpara>
                </listitem>
                <listitem>
                 <simpara>"TIMESTAMP"</simpara>
                </listitem>
               </itemizedlist>
               SESAM "multiple fields" sind "inlined" (???) und werden wie 
               die entsprechende Anzahl von Spalten behandelt, 
               jedes mit dem selben SQL-Typ. 
        </entry>
        </row>
        <row>
 	<entry>string $arr[col]["length"]</entry>
 	<entry>Das Attribut "length" der SQL-Variablen in
               column(<literal>col</literal>), wobei
	       <literal>col</literal> zwischen 0 und
	       <literal>$arr["count"]-1</literal> liegt. Das "length"
	       Attribut wird in "CHARACTER" und "VARCHAR" SQL-Typen
               zur Spezifizierung der (maximalen) Länge der Zeichenvariablen
	       verwendet.  SESAM "multiple fields" sind "inlined" (???) und 
               werden wie die entsprechende Anzahl von Spalten behandelt, 
               jedes mit dem selben Längenattribut. 
        </entry>
        </row>
        <row>
 	<entry>string $arr[col]["precision"]</entry>
 	<entry>Das Attribut "precision" der SQL-Variablen in
               column(<literal>col</literal>), wobei
	       <literal>col</literal> zwischen 0 and
	       <literal>$arr["count"]-1</literal> liegt. Das Attribut "precision"
	       wird für numerische und Zeit-Felder verwendet.
	       SESAM "multiple fields" sind "inlined" (???) und 
               werden wie die entsprechende Anzahl von Spalten behandelt, 
               jedes mit dem selben Attribut "precision". 
        </entry>
        </row>
        <row>
 	<entry>string $arr[col]["scale"]</entry>
 	<entry>Das Attribut "scale" der SQL-Variablen in
               column(<literal>col</literal>), wobei 
	       <literal>col</literal> zwischen 0 and
	       <literal>$arr["count"]-1</literal> liegt. Das Attribut
               "scale" wird für numerische Datentypen verwendet.
               SESAM "multiple fields" sind "inlined" (???) und 
               werden wie die entsprechende Anzahl von Spalten behandelt, 
               jedes mit dem selben Attribut "scale". 
        </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Siehe Beschreibung von <function>sesam_query</function> für eine beispielhafte
     Anwendung der Funktion <function>sesam_field_array</function>.    
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-fetch-row">
   <refnamediv>
    <refname>sesam_fetch_row</refname>
    <refpurpose>Lesen einer Zeile als Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>sesam_fetch_row</function></funcdef>
      <paramdef>string <parameter>result_id</parameter></paramdef>
      <paramdef>int
       <parameter><optional>whence</optional></parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>offset</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert ein Array entsprechend der gelesenen Zeile oder
     &false; nach de letzten gefundenen Zeile.
    </para>
    <para>Die Anzahl der Spalten im Ausgabesatz wird als Element des
     assoziativen Arrays $array["count"] geliefert. Da Ergebnisspalten 
     auch leer sein können, kann die Funktion <function>count</function> 
     nicht auf das Ergebnis der Funktion <function>sesam_fetch_row</function>
     angewendet werden.
    </para>
    <para>
     <parameter>result_id</parameter> ist eine gültige Ergebniskennung (???)
     der Funktion <function>sesam_query</function> (nur Abfragen vom Typ select!).
    </para>
    <para>
     <parameter><optional>whence</optional></parameter> ist ein optionaler
     Parameter für eine "fetch"-Operation (???) bei "scrollable" Cursor und
     kann auf folgende vordefinierte Werte gesetzt werden:
     <table>
      <title>Gültige Werte für Parameter <parameter>"whence"</parameter></title>
      <tgroup cols="3">
       <thead>
        <row>
 	<entry>Value</entry>
 	<entry>Constant</entry>
 	<entry>Meaning</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry>0</entry>
 	<entry><literal>SESAM_SEEK_NEXT</literal></entry>
 	<entry>sequentielles Lesen (nach "fetch" wird der interne 
               Standardwert auf <literal>SESAM_SEEK_NEXT</literal> gesetzt)
        </entry>
        </row>
        <row>
 	<entry>1</entry>
 	<entry><literal>SESAM_SEEK_PRIOR</literal></entry>
 	<entry>sequentielles Lesen rückwärts (nach "fetch" wird der interne 
               Standardwert auf <literal>SESAM_SEEK_PRIOR</literal> gesetzt)
        </entry>
        </row>
        <row>
 	<entry>2</entry>
 	<entry><literal>SESAM_SEEK_FIRST</literal></entry>
 	<entry>zurück zur ersten Zeile (nach "fetch" wird der interne 
               Standardwert auf <literal>SESAM_SEEK_NEXT</literal> gesetzt)
        </entry>
        </row>
        <row>
 	<entry>3</entry>
 	<entry><literal>SESAM_SEEK_LAST</literal></entry>
 	<entry>suche letzte Zeile (nach "fetch" wird der interne 
               Standardwert auf <literal>SESAM_SEEK_PRIOR</literal> gesetzt)
        </entry>
        </row>
        <row>
 	<entry>4</entry>
 	<entry><literal>SESAM_SEEK_ABSOLUTE</literal></entry>
 	<entry>suche Zeilen mit der Nummer definiert durch
               <parameter>offset</parameter> (Null-basierte Indizierung 
               (nach "fetch" wird der interne Standardwert auf 
               <literal>SESAM_SEEK_ABSOLUTE</literal> gesetzt und der 
               interne offset-Wert wird automatisch hochgesetzt)</entry>
        </row>
        <row>
 	<entry>5</entry>
 	<entry><literal>SESAM_SEEK_RELATIVE</literal></entry>
 	<entry>suche relativ zur aktuellen Position; 
               <parameter>offset</parameter> kann positiv oder
               negativ sein.</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     Dieser Parameter ist nur für "scrollable" Cursors gültig.
    </para>
    <para>
     Bei "scrollable" kann der Cursor beliebig im Ausgabesatz
     positioniert werden. Wird der optionale Parameter 
     <parameter><optional>whence</optional></parameter> nicht benutzt,
     werden die globalen Standardwerte für den Scroll-Typ verwendet
     (Initialiwert: <literal>SESAM_SEEK_NEXT</literal>, einstellbar 
     mit der Funktion <function>sesam_seek_row</function>). Bei
     Verwendung des Parameters 
     <parameter><optional>whence</optional></parameter> ersetzen dessen
     Werte die golbalen Standardwerte.
    </para>
    <para>
     <parameter><optional>offset</optional></parameter> ist ein
     optionaler Parameter, der nur wirkt (und auch nur benötigt wird),
     wenn <parameter><optional>whence</optional></parameter> entweder
     den Wert <literal>SESAM_SEEK_RELATIVE</literal> oder
     <literal>SESAM_SEEK_ABSOLUTE</literal> hat. Dieser Parameter ist
     nur für "scrollable" Cursors gültig.
    </para>
    <para>
     <function>sesam_fetch_row</function> holt eine Datenzeile
     aus dem Ergebnis mit der zugeordneten Ergebniskennung (???).
     Die Zeile wird als Array geliefert, wobei die indizierten Werte
     zwischen <literal>0</literal> und <literal>$array["count"]-1</literal>)
     liegen.  Da Felder auch leer sein können, muß die Existenz eines
     mit der PHP-Funktion <function>isset</function> verifiziert werden.
     Der Typ der gelieferten Felder ist abhängig von der entsprechenden
     SQL-Typdeklaration düe die Spalten (siehe <link linkend="ref.sesam">SESAM
     overview</link> für die angewendeten Umsetzungen). SESAM "multiple
     fields" sind "inlined" (???) und werden wie eine Spaltenfolge behandelt.
    </para>
    <para>
     Nachfolgende Aufrufe von <function>sesam_fetch_row</function> liefern
     die nächste Zeile (oder die vorhergehende, höchste/niedrigste je nach den
     Attributen) im Ausgabesatz oder &false; wenn keine Zeilen 
     mehr verfügabr sind.
    </para>
    <example>
     <title>SESAM fetch rows</title>
     <programlisting role="php">
&lt;?php
$result = sesam_query (&quot;SELECT * FROM phone\n&quot;.
                       &quot;  WHERE LASTNAME='&quot;.strtoupper($name).&quot;'\n&quot;.
                       &quot;  ORDER BY FIRSTNAME&quot;, 1);
if (! $result) {
    ... error ...
}
// print the table in backward order
print &quot;&lt;TABLE BORDER&gt;\n&quot;;
$row = sesam_fetch_row ($result, SESAM_SEEK_LAST);
while (is_array($row)) {
    print &quot; &lt;TR&gt;\n&quot;;
    for($col = 0; $col &lt; $row[&quot;count&quot;]; ++$col) {
        print &quot;  &lt;TD&gt;&quot;.htmlspecialchars($row[$col]).&quot;&lt;/TD&gt;\n&quot;;
    }
    print &quot; &lt;/TR&gt;\n&quot;;
    // use implied SESAM_SEEK_PRIOR
    $row = sesam_fetch_row ($result);
}
print &quot;&lt;/TABLE&gt;\n&quot;;
sesam_free_result ($result);
?&gt;
     </programlisting>
    </example>
    <para>
     Siehe auch: Funktion <function>sesam_fetch_array</function> (liefert ein 
     assoziatives Array ) und <function>sesam_fetch_result</function>
     (liefert viele Zeilen pro Aufruf (???))
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-fetch-array">
   <refnamediv>
    <refname>sesam_fetch_array</refname>
    <refpurpose>Liefert eine Zeile als assoziatives Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>sesam_fetch_array</function></funcdef>
      <paramdef>string <parameter>result_id</parameter></paramdef>
      <paramdef>int
       <parameter><optional>whence</optional></parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>offset</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert ein Array, das der gelesenen Zeile entspricht oder 
     &false; falls es keine weiteren Zeilen mehr gibt.
    </para>
    <para>
     <function>sesam_fetch_array</function> ist eine Alternative
     zur Funktion <function>sesam_fetch_row</function>. Die Daten werden 
     anstatt in numerischen Indizes des Ergebnisarrays in assoziativen
     Indizes gespeichert, wobei die Feldnamen als Indizes benutzt werden.
    </para>
    <para>
     <parameter>result_id</parameter> ist eine gültige Ergebniskennung (???)
     der Funktion <function>sesam_query</function> (nur Abfragen vom Typ select!).
    </para>
    <para>
     Für die gültigen Werte der optionalen Parameter
     <parameter><optional>whence</optional></parameter> und
     <parameter><optional>offset</optional></parameter> im Detail 
     siehe <function>sesam_fetch_row</function>.
    </para>
    <para>
     Die Funktion <function>sesam_fetch_array</function> holt eine 
     mit der spezifizierten Ergebniskennung (???) assoziierte Datenzeile. 
     Die Zeile wird als assoziatives Array zur Verfügung gestellt. 
     Jede Ergebnisspalte wird mit einem assoziativen Index gleich dem
     Spaltennamen (aka. field) abgespeichert. Die Spaltennamen werden
     in Kleinschreibung konvertiert dargestellt.
    </para>
    <para>
     Spalten ohne Feldnamen (z.B. Ergebnisse von arithmetischen
     Operationen) und leere Felder werden im Array nicht gespeichert. 
     Haben zwei oder mehr Spalten im Ergebnis den selben Namen, bekommt
     diesen die letzte Spalte. In diesem Fall empfiehlt sich der Einsatz
     von <function>sesam_fetch_row</function> oder Alias-Definitionen
     für die Spalten.
     <informalexample>
      <programlisting>
SELECT TBL1.COL AS FOO, TBL2.COL AS BAR FROM TBL1, TBL2</programlisting>
     </informalexample>
    </para>
    <para>
     Eine Spezialbehandlung erlaubt  den Zugriff auf "multiple field"
     Spalten (die sonst alle den selben Spaltennamen haben würden).
     Für jede Spalte eines "multiple field" wird der Name gebildet durch
     Anhängen von "(n)", wobei n den Sub-Index der "multiple field" Spalte
     darstellt und Werte von 1 bis zum deklarierten Wiederholungsfaktor 
     annehmen kann. Zur Übereinstimmung mit der entsprechenden Abfragesyntax
     sind die Indizes  n i c h t  null-basiert. Für eine Spalte der Definition:
     <informalexample>
      <programlisting role="sesam">
CREATE TABLE ... ( ... MULTI(3) INT )</programlisting>
     </informalexample>
     ergäben sich die assoziativen Indizes für die einzelnen "multiple fields"
     als <literal>"multi(1)"</literal>, <literal>"multi(2)"</literal>, and
     <literal>"multi(3)"</literal>.
    </para>
    <para>
     Nachfolgende Aufrufe von <function>sesam_fetch_array</function> liefern
     die nächste Zeile (oder die vorhergehende, höchste/niedrigste je nach den
     Attributen) im Ausgabesatz oder &false; wenn keine Zeilen 
     mehr verfügabr sind.
    </para>
    <example>
     <title>SESAM fetch rows</title>
     <programlisting role="php">
&lt;?php
$result = sesam_query (&quot;SELECT * FROM phone\n&quot;.
                       &quot;  WHERE LASTNAME='&quot;.strtoupper($name).&quot;'\n&quot;.
                       &quot;  ORDER BY FIRSTNAME&quot;, 1);
if (! $result) {
    ... error ...
}
// print the table:
print &quot;&lt;TABLE BORDER&gt;\n&quot;;
while (($row = sesam_fetch_array ($result)) && count($row) &gt; 0) {
    print &quot; &lt;TR&gt;\n&quot;;
    print &quot;  &lt;TD&gt;&quot;.htmlspecialchars($row[&quot;firstname&quot;]).&quot;&lt;/TD&gt;\n&quot;;
    print &quot;  &lt;TD&gt;&quot;.htmlspecialchars($row[&quot;lastname&quot;]).&quot;&lt;/TD&gt;\n&quot;;
    print &quot;  &lt;TD&gt;&quot;.htmlspecialchars($row[&quot;phoneno&quot;]).&quot;&lt;/TD&gt;\n&quot;;
    print &quot; &lt;/TR&gt;\n&quot;;
}
print &quot;&lt;/TABLE&gt;\n&quot;;
sesam_free_result ($result);
?&gt;
     </programlisting>
    </example>
    <para>
     Siehe auch: <function>sesam_fetch_row</function> (liefert ein indiziertes Array)  
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-seek-row">
   <refnamediv>
    <refname>sesam_seek_row</refname>
    <refpurpose>
     Setzt "scrollable Cursor" Modus für weitere Aufrufe 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>sesam_seek_row</function></funcdef>
      <paramdef>string <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>whence</parameter></paramdef>
      <paramdef>int
       <parameter><optional>offset</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>result_id</parameter> ist eine gültige Ergebniskennung (???);
     nur bei Abfragen vom Typ select und nur, wenn beim Aufruf von
     <function>sesam_query</function>) ein "scrollable Cursor" verlangt wurde.
    </para>
    <para>
     <parameter>whence</parameter> definiert den globalen Standardwert
     für den Scroll-Typ, der in weiteren Lese-Operationen für "scrollable"
     Cursor angewendet wird; folgende vordefinierte Werte sind möglich:
     constants:
     <table>
      <title>Valid values for <parameter>"whence"</parameter> parameter</title>
      <tgroup cols="3">
       <thead>
        <row>
 	<entry>Value</entry>
 	<entry>Constant</entry>
 	<entry>Meaning</entry>
        </row>
       </thead>
       <tbody>
        <row>
 	<entry>0</entry>
 	<entry><literal>SESAM_SEEK_NEXT</literal></entry>
 	<entry>sequentielles Lesen
        </entry>
        </row>
        <row>
 	<entry>1</entry>
 	<entry><literal>SESAM_SEEK_PRIOR</literal></entry>
 	<entry>sequentielles Lesen rückwärts
        </entry>
        </row>
        <row>
 	<entry>2</entry>
 	<entry><literal>SESAM_SEEK_FIRST</literal></entry>
 	<entry>erste Zeile lesen (nach dem Lesen wird der
               Standardwert auf 
               <literal>SESAM_SEEK_NEXT</literal> gesetzt)</entry>
        </row>
        <row>
 	<entry>3</entry>
 	<entry><literal>SESAM_SEEK_LAST</literal></entry>
 	<entry>letzte Zeile lesen (nach dem Lesen wird der
               Standardwert auf 
               <literal>SESAM_SEEK_PRIOR</literal> gesetzt)</entry>
        </row>
        <row>
 	<entry>4</entry>
 	<entry><literal>SESAM_SEEK_ABSOLUTE</literal></entry>
 	<entry>lesen Zeile mit der Nummer definiert durch
               <parameter>offset</parameter> (Null-basierte Indizierung; 
               nach "fetch" wird der interne Standardwert auf 
               <literal>SESAM_SEEK_ABSOLUTE</literal> gesetzt und der 
               interne offset-Wert wird automatisch hochgesetzt)</entry>
        </row>
        <row>
 	<entry>5</entry>
 	<entry><literal>SESAM_SEEK_RELATIVE</literal></entry>
 	<entry>suche relativ zur aktuellen Position; 
               <parameter>offset</parameter> kann positiv oder
               negativ sein und wird auch als Standard-Offset
               für weitere Abfragen gesetzt</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     <parameter><optional>offset</optional></parameter> ist ein
     optionaler Parameter, der nur wirkt (und auch nur benötigt wird),
     wenn <parameter><optional>whence</optional></parameter> entweder
     den Wert <literal>SESAM_SEEK_RELATIVE</literal> oder
     <literal>SESAM_SEEK_ABSOLUTE</literal> hat.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sesam-free-result">
   <refnamediv>
    <refname>sesam_free_result</refname>
    <refpurpose>Gibt Betriebsmittel für die Abfrage frei (der Abfrage ???)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>sesam_free_result</function></funcdef>
      <paramdef>string <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt Betriebsmittel der mit <parameter>result_id</parameter>
     assoziierten Abfrage frei.  Rückgabewert im Fehlerfall: 
     &false;.
    </para>
   </refsect1>
  </refentry>
 </reference>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
