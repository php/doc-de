<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.dbm">
  <title>DBM Datenbankfunktionen</title>
  <titleabbrev>DBM</titleabbrev>

  <partintro>
   <simpara>
    Diese Funktionen erlauben Ihnen den Zugriff auf Datensätze die
    im DBM-Format vorliegen.

    Im Gegensatz zu den relationalen Datenbanken (mySQL, etc.)
    werden die Datensätze in Form von ISAM-Sätzen gespeichert.
    DBM Datenbanken werden von verschiedenen Systemfunktionen als
    interne Arbeitsbibliothek benützt. Diese Datenbank-Art wird
    auch von der Berkeley DB und GDBM verwendet.
   </simpara>
   <para>
    <example>
     <title>Beispiel für ein DBM Script</title>
     <programlisting role="php">
$dbm = dbmopen ("lastseen", "w");
if (dbmexists ($dbm, $userid)) {
    $last_seen = dbmfetch ($dbm, $userid);
} else {
    dbminsert ($dbm, $userid, time());
}
do_stuff();
dbmreplace ($dbm, $userid, time());
dbmclose ($dbm);
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.dbmopen">
   <refnamediv>
    <refname>dbmopen</refname>
    <refpurpose>Öffnen einer DBM Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dbmopen</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>string <parameter>flags</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Das erste Argument ist der vollqualifizierte Dateiname der DBM Datenbank,
     die geöffnet werden soll. Das zweite Argument ist der Modus,
     mit dem die DBM Datenbank geöffnet werden soll.
     Es gibt 4 Möglichkeiten, eine DBM Datenbank zu öffnen:
     <variablelist>
      <varlistentry>
       <term>"r" (read-only)</term>
       <listitem><para>
        Eine existierende Datenbank soll nur lesend
        geöffnet werden.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>"n" (new)</term>
       <listitem><para>
        Eine neue Datenbank soll angelegt werden.
        Diese wird automatisch als read-write geöffnet.
        Eine existierende Datenbank wird inhaltlich
        gelöscht.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>"c" (create)</term>
       <listitem><para>
        Eine neue Datenbank soll angelegt werden.
        Diese wird automatisch als read-write geöffnet.
        Im Gegensatz zu "n" wird eine bereits existierende
        Datenbank inhaltlich nicht gelöscht, sondern nur
        "read-writeable" geöffnet.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>"w" (read-write)</term>
       <listitem><para>
        Eine existierende Datenbank soll lesend und
        schreibend geöffnet werden.</para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     Wenn die angegebene DBM Datenbank geöffnet werden konnte,
     wird ein Identifier zurückgegeben. Dieser Identifier muss
     für alle weiteren Aufrufe, die an die DBM Datenbank getätigt
     werden, mitgegeben werden.
     Wenn das Öffenen der DBM Datenbank fehlgeschlagen ist,
     wird das Ergebnis &false; zurückgegeben.
    </para>
    <para>
     Wenn die NDBM Unterstützung aktiviert wird, werden jeweils
     zwei Dateien <filename>filename.dir</filename> und
     <filename>filename.pag</filename> erzeugt. GDBM, ebenso wie
     der interne "Flat-File" Mechanismus und die Berkeley DB,
     verwenden nur eine Datei (und diese heisst bei der Berkeley
     DB <filename>filename.db</filename>).

     Bitte beachten Sie, dass PHP seine Dateisperren zusätzlich
     zu den vorhanden DBM-Bibliothekseigenen Routinen verwendet.
     PHP löscht auch die <filename>.lck</filename> Dateien nicht
     wieder. Es verwendet diese Datei nur als zusätzliches
     Mittel für Dateilocking. Wenn Sie mehr über
     DBM-Datenbanken wissen wollen, sehen Sie in den
     UNIX-Manualseiten nach, oder schauen bei <ulink
     url="&url.gdbm;">GNU's GDBM</ulink> nach.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmclose">
   <refnamediv>
    <refname>dbmclose</refname>
    <refpurpose>Schließen einer DBM Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dbmclose</function></funcdef>
      <paramdef>int <parameter>dbm_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt Zugiffssperren auf Datensätze frei und schließt die angegebene
     DBM Datenbank.
    </para>
    <para>
     Liefert &true; bei Erfolg bzw. &false; bei Fehler.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmexists">
   <refnamediv>
    <refname>dbmexists</refname>
    <refpurpose>
     Prüft, ob ein Eintrag für den angegebenen Schlüssel
     in der DBM Datenbank vorhanden ist.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dbmexists</function></funcdef>
      <paramdef>int <parameter>dbm_identifier</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Wenn in der DBM Datenbank ein Eintrag mit dem angegebenen Schlüssel
     <parameter>key</parameter> vorhanden ist, wird als Ergebnis
     &true; zurückgegeben.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmfetch">
   <refnamediv>
    <refname>dbmfetch</refname>
    <refpurpose>
     Holt einen Datensatz mit dem angegebenen Schlüssel
     aus der DBM Datenbank.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dbmfetch</function></funcdef>
      <paramdef>int <parameter>dbm_identifier</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert den Datensatz, der dem <parameter>key</parameter> in der
     DBM Datenbank entspricht.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbminsert">
   <refnamediv>
    <refname>dbminsert</refname>
    <refpurpose>
     Schreibt einen Datensatz mit dem angegebenen Schlüssel
     in die DBM Datenbank.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dbminsert</function></funcdef>
      <paramdef>int <parameter>dbm_identifier</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Schreibt den Datensatz mit angegebenen Schlüssel in die
     Datenbank.
    </para>
    <para>
     Ergebniswerte:
     <variablelist>
      <varlistentry>
       <term>-1</term>
       <listitem><simpara>nur Leseberechtigung.</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>0</term>
       <listitem><simpara>Aktion erfolgreich beendet.</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>1</term>
       <listitem><simpara>Ein Eintrag mit dem angegebenen Schlüssel
        existiert bereits in der Datenbank.</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmreplace">
   <refnamediv>
    <refname>dbmreplace</refname>
    <refpurpose>
     Ersetzt einen Datensatz mit dem angegebenen Schlüssel
     in der DBM Datenbank.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dbmreplace</function></funcdef>
      <paramdef>int <parameter>dbm_identifier</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Schreibt einen Datensatz mit dem angegebenen Satzschlüssel in
     die Datenbank bzw. ersetzt ihn.
    </para>
    <para>
     Wenn ein Eintrag mit den angegebenen Schlüssel vorhanden ist,
     wird dieser überschrieben. Ansonsten wird ein Datensatz mit
     mit den Schlüssel neu angelegt.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmdelete">
   <refnamediv>
    <refname>dbmdelete</refname>
    <refpurpose>
     Löscht einen Datensatz mit dem angegebenen Schlüssel
     aus der DBM Datenbank.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dbmdelete</function></funcdef>
      <paramdef>int <parameter>dbm_identifier</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Löscht einen vorhanden Datensatz, der dem
     <parameter>key</parameter> entspricht, aus der Datenbank.
    </para>
    <para>
     Wenn kein Datensatz zum Löschen gefunden wurde, wird der
     Returncode &false; zurückgegeben.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbmfirstkey">
   <refnamediv>
    <refname>dbmfirstkey</refname>
    <refpurpose>
     Gibt den ersten Schlüssel der DBM Datenbank zurück.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dbmfirstkey</function></funcdef>
      <paramdef>int <parameter>dbm_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt den ersten Schlüssel der DBM Datenbank zurück.
    </para>
    <note><para>Achtung: Es gibt keine Garantie für eine bestimmte Reihenfolge
              innerhalb der Datenbank, da die Datenbank auf einen
              Hash-Algorithmus aufgebaut ist.
    </para></note>
   </refsect1>
  </refentry>

  <refentry id="function.dbmnextkey">
   <refnamediv>
    <refname>dbmnextkey</refname>
    <refpurpose>
     Stellt den nächsten Schlüssel aus den Datenbank zur Verfügung.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dbmnextkey</function></funcdef>
      <paramdef>int <parameter>dbm_identifier</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt den auf <parameter>key</parameter> folgenden Schlüssel
     an den Aufrufer zurück. Um alle Schlüssel einer DBM Datenbank
     auszulesen, wird <function>dbmfirstkey</function>, gefolgt von
     wiederholten Aufrufen von <function>dbmnextkey</function>
     verwendet, wie im folgenden Script:
     <example>
      <title>Ausgeben aller Schlüssel mit Datensätzen einer DBM Datenbank</title>
      <programlisting role="php">
$key = dbmfirstkey ($dbm_id);
while ($key) {
    echo "$key = " . dbmfetch ($dbm_id, $key) . "\n";
    $key = dbmnextkey ($dbm_id, $key);
}
     </programlisting>
    </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dblist">
   <refnamediv>
    <refname>dblist</refname>
    <refpurpose>
     Liefert eine Beschreibung, welches DBM-Format
     verwendet wird.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dblist</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
