<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.ibase">
  <title>InterBase-Funktionen</title>
  <titleabbrev>InterBase</titleabbrev>

  <partintro>
   <para>
    InterBase ist eine bekannte Datenbank, die von Borland/Inprise
    stammt. Weitere Informationen zu InterBase finden sie unter
    <ulink url="&url.ibase;">&url.ibase;</ulink>. Wichtig: InterBase
    befindet sich gerade auf dem Weg zum Open Source!
   </para>
   <note>
    <para>
     Umfassende Unterstützung für InterBase 6 wurde in PHP 4.0
     eingeführt.
    </para>
   </note>
  </partintro>

  <refentry id="function.ibase-connect">
   <refnamediv>
    <refname>ibase_connect</refname>
    <refpurpose>
     Öffnet eine Verbindung zu einer InterBase-Datenbank
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_connect</function></funcdef>
      <paramdef>string <parameter>database</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>username</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>password</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>charset</optional></parameter>
      </paramdef>
      <paramdef>int 
       <parameter><optional>buffers</optional></parameter>
      </paramdef>
      <paramdef>int 
       <parameter><optional>dialect</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>role</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Stellt eine Verbindung zu einem InterBase-Server her. Das
     <parameter>database</parameter>-Argument muss ein gültiger Pfad
     zu einer bestehenden Datenbank des Servers sein. Ist der DB-Server
     nicht lokal, muss ihm - in Abhängigkeit vom benutzten Protokoll -
     ein 'hostname:' (bei TCP/IP), '//hostname/' (bei NetBEUI) oder 
     'hostname@' (bei IPX/SPX) vorangestellt werden. Die Parameter
     <parameter>username</parameter> und <parameter>password</parameter>
     können auch über die PHP-Konfigurations-Anweisungen 
     ibase.default_user und ibase.default_password gesetzt werden.
     <parameter>Charset</parameter> ist der reguläre Zeichensatz der
     Datenbank. Mit <parameter>buffers</parameter> geben sie die Anzahl
     der Datenbank-Cache-Buffer (serverseitig) an. Ist der Wert 0 oder
     nicht angegeben, benutzt der Server seine Default-Werte. Mittels
     <parameter>dialect</parameter> bestimmen sie den Default-Wert des
     anzuwendenden SQL-Dialekts für alle Anweisungen während einer 
     Datenbank-Verbindung (default ist der Client-seitig höchst
     verfügbare Dialekt).
    </para>
    <para>
     Wenn <function>ibase_connect</function> mit den selben Argumenten
     erneut aufgerufen wird, wird keine neue Verbindung hergestellt,
     sondern die ID der bereits geöffneten Verbindung zurück gegeben.
     Die Verbindung zum InterBase-Server wird am Ende des jeweiligen
     Skripts automatisch beendet, es sei denn, es wird vorher die
     Funktion <function>ibase_close</function> aufgerufen.
     <example>
      <title><function>ibase_connect</function>-Beispiel:</title>
      <programlisting role="php">
&lt;?php
    $dbh = ibase_connect ($host, $username, $password);
    $stmt = 'SELECT * FROM tblname';
    $sth = ibase_query ($dbh, $stmt);
    while ($row = ibase_fetch_object ($sth)) {
        print $row->email . "\n";
    }
    ibase_close ($dbh);
?>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      <parameter>Buffers</parameter> existiert seit PHP4-RC2.
     </para>
    </note>
    <note>
     <para>
      <parameter>Dialect</parameter> wurde in PHP4-RC2 hinzugefügt.
       Er funktioniert ab der InterBase-Version 6.
     </para>
    </note>
    <note>
     <para>
      <parameter>Role</parameter> existiert seit PHP4-RC2. Er
      funktioniert ab der InterBase-Version 5.
     </para>
    </note>
    <para>
     Siehe auch: <function>ibase_pconnect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-pconnect">
   <refnamediv>
    <refname>ibase_pconnect</refname>
    <refpurpose>
     Erzeugt eine permanente Verbindung zu einer InterBase-Datenbank
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_connect</function></funcdef>
      <paramdef>string <parameter>database</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>username</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>password</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>charset</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>role</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ibase_pconnect</function> agiert ähnlich der Funktion
     <function>ibase_connect</function> (mit zwei Ausnahmen). Erstens
     wird beim Verbindungs-Aufbau versucht, eine bereits bestehende
     permanente Verbindung zu finden, die mit den selben Parametern
     aufgebaut worden ist. Wird eine solche gefunden, wird statt eines
     neuen Verbindungs-Aufbaus die ID der bestehenden Verbindung zurück
     gegeben. Zweitens wird beim Beenden des Skripts die Verbindung
     nicht beendet. Statt dessen wird die Verbindung für den weiteren
     Gebrauch beibehalten (<function>ibase_close</function> beendet
     keine Verbindung, die mittels <function>ibase_pconnect</function>
     erzeugt wurde). Diese Art der Verbindung wird deshalb auch
     'persistent' (permanent) genannt.
    </para>
    <para>
     Siehe auch <function>ibase_connect</function> hinsichtlich der
     Bedeutung der dieser Funktion übergebenen Parameter. Es sind die
     gleichen.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-close">
   <refnamediv>
    <refname>ibase_close</refname>
    <refpurpose>
     Schließt die Verbindung zu einer InterBase-Datenbank
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_close</function></funcdef>
      <paramdef>int 
       <parameter><optional>connection_id</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Beendet die Verbindung zu einer InterBase-DB, deren Verbindungs-ID
     mit der von <function>ibase_connect</function> zurück gegebenen ID
     überein stimmt. Wird die Verbindungs-ID weg gelassen, wird die
     zuletzt hergestellte Verbindung beendet. Vorgenommene
     Transaktionen der Verbindung werden übertragen, andere werden
     zurück genommen.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-query">
   <refnamediv>
    <refname>ibase_query</refname>
    <refpurpose>
     Führt eine Abfrage (Query) auf eine InterBase-DB aus
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_query</function></funcdef>
      <paramdef>int 
       <parameter><optional>link_identifier</optional></parameter>
      </paramdef>
      <paramdef>string
       <parameter>query</parameter>
      </paramdef>
      <paramdef>int 
       <parameter><optional>bind_args</optional></parameter> 
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Erzeugt eine Anfrage auf eine InterBase-DB, deren Ergebnis mit
     <function>ibase_fetch_row</function>,
     <function>ibase_fetch_object</function>,
     <function>ibase_free_result</function> und
     <function>ibase_free_query</function> weiter verarbeitet werden
     kann.
    </simpara>
    <note>
     <para>
      Obwohl diese Funktion auch die Verwendung von Platzhaltern
      unterstützt, ist ihr keine besondere Bedeutung beizumessen.
      Für reale Abfragen und Beispiele sehen sie unter
      <function>ibase_prepare</function> und
      <function>ibase_execute</function> nach.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-fetch-row">
   <refnamediv>
    <refname>ibase_fetch_row</refname>
    <refpurpose>
     Liest einen Datensatz aus einer InterBase-Datenbank
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>ibase_fetch_row</function></funcdef>
      <paramdef>int
       <parameter>result_identifier</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt den nächsten Datensatz des per
     <function>ibase_query</function> gewonnenen Zeigers in einem Array
     zurück.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-fetch-object">
   <refnamediv>
    <refname>ibase_fetch_object</refname>
    <refpurpose>
     Liest einen Datensatz einer InterBase-Datenbank als Objekt ein
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>ibase_fetch_object</function></funcdef>
      <paramdef>int
       <parameter>result_id</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liest die Daten der per <function>ibase_query</function> oder
     <function>ibase_execute</function> gewonnenen 
     <parameter>result_id</parameter> in ein Pseudo-Objekt ein.
     <informalexample>
      <programlisting role="php">
&lt;php
    $dbh  = ibase_connect ($host, $username, $password);
    $stmt = 'SELECT * FROM tblname';
    $sth  = ibase_query ($dbh, $stmt);
    while ($row = ibase_fetch_object ($sth)) {
        print $row->email . "\n";
    }
    ibase_close ($dbh);
?>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch <function>ibase_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-free-result">
   <refnamediv>
    <refname>ibase_free_result</refname>
    <refpurpose>
     Gibt den Speicher eines Abfrage-Ergebnisses frei
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_free_result</function></funcdef>
      <paramdef>int
       <parameter>result_identifier</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt den durch den Aufruf von <function>ibase_query</function>
     belegten Speicher wieder frei.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-prepare">
   <refnamediv>
    <refname>ibase_prepare</refname>
    <refpurpose>
     Vorbereitung einer Abfrage für den folgenden Gebrauch von
     Parameter-Platzhaltern und für die eigentliche Ausführung.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_prepare</function></funcdef>
      <paramdef>int 
       <parameter><optional>link_identifier</optional></parameter>
      </paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Vorbereitung einer Abfrage für den folgenden Gebrauch von
     Parameter-Platzhaltern und für die eigentliche Ausführung (per
     <function>ibase_execute</function>).
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-execute">
   <refnamediv>
    <refname>ibase_execute</refname>
    <refpurpose>Ausführen einer vorbereiteten Abfrage</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_execute</function></funcdef>
      <paramdef>int 
       <parameter>query</parameter>
      </paramdef>
      <paramdef>int 
       <parameter><optional>bind_args</optional></parameter> 
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Führt eine vorher per <function>ibase_prepare</function>
     vorbereitete Abfrage aus. Dies ist effizienter als der Gebrauch
     von <function>ibase_query</function>, sofern sie mehrere ähnliche
     Abfragen durchführen wollen, bei denen sich immer nur einige
     Parameter ändern.
     <informalexample>
      <programlisting role="php">
&lt;?php
    $updates = array(
        1 => 'Erik',
        5 => 'Phillip',
        7 => 'Ludwig'
    );

    $query = ibase_prepare("UPDATE FOO SET BAR = ? WHERE BAZ = ?");

    while (list($baz, $bar) = each($updates)) {
        ibase_execute($query, $bar, $baz);
    }
?>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-free-query">
   <refnamediv>
    <refname>ibase_free_query</refname>
    <refpurpose>
     Gibt den Speicher einer vorbereiteten Abfrage wieder frei
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_free_query</function></funcdef>
      <paramdef>int
       <parameter>query</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt den Speicher einer vorbereiteten Abfrage (siehe
     <function>ibase_prepare</function>) wieder frei.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-timefmt">
   <refnamediv>
    <refname>ibase_timefmt</refname>
    <refpurpose>
     Bestimmt das Format von Zeitstempel-, Datums- und Zeit-Feldern,
     die von einer Abfrage zurück gegeben werden
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_timefmt</function></funcdef>
      <paramdef>string
       <parameter>format</parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>columntype</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Bestimmt das Format von Zeitstempel-, Datums- und Zeit-Feldern,
     die durch eine Abfrage zurück gegeben werden. Intern werden diese
     Felder durch die C-Funktion strftime() formatiert. Deshalb finden
     sie in der dazu bestehenden Dokumentation genaue Hinweise über
     das entsprechende String-Format. Der optionale Parameter
     <parameter>columntype</parameter> kann eine der Konstanten 
     IBASE_TIMESTAMP, IBASE_DATE oder IBASE_TIME sein. Fehlt er, wird
     per default von IBASE_TIMESTAMP ausgegangen (wegen der 
     Abwärts-Kompatibilität).
     <informalexample>
      <programlisting role="php">
&lt;?php
    // InterBase 6 Zeit-Typ-Felder werden im
    // Format '05 Stunden 37 Minuten' zurück gegeben. 
    ibase_timefmt("%H Stunden %M Minuten", IBASE_TIME);
?>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Sie können über die PHP-Konfigurations-Anweisungen
     ibase.timestampformat, ibase.dateformat und ibase.timeformat
     den default-Wert anpassen.
    </para>
    <note>
     <para>
      <parameter>Columntype</parameter> wurde in PHP 4.0 hinzu gefügt.
      Er hat erst ab InterBase-Version 6 eine Bedeutung.
     </para>
    </note>
    <note>
     <para>
      Eine Abwärts-Inkompatibilität wurde in PHP 4.0 behoben, indem
      die Konfigurations-Anweisung ibase.timeformat umbenannt wurde
      in ibase.timestampformat und die Anweisungen ibase.dateformat und
      ibase.timeformat hinzu gefügt wurden. Dadurch entsprechen die
      Namen eher ihrer eigentlichen Funktionalität.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.ibase-num-fields">
   <refnamediv>
    <refname>ibase_num_fields</refname>
    <refpurpose>
     Ermittelt die Anzahl der Felder einer Ergebnis-Liste
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ibase_num_fields</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Der zurück gegebene Integer-Wert stellt die Anzahl der Felder
     einer Ergebnis-Liste dar.
     <informalexample>
      <programlisting role="php">
&lt;?php
    $dbh = ibase_connect ($host, $username, $password);
    $stmt = 'SELECT * FROM tblname';
    $sth = ibase_query ($dbh, $stmt);

    if (ibase_num_fields($sth) > 0) {
        while ($row = ibase_fetch_object ($sth)) {
            print $row->email . "\n";
        }
    } else {
        die ("Keine Ergebnisse für ihre Abfrage");
    }

    ibase_close ($dbh);
?>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch: <function>ibase_field_info</function>.
    </para>
    <note>
     <para>
      <function>ibase_num_fields</function> funktioniert z.Zt. nicht
      bei PHP 4.
     </para>
    </note>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
