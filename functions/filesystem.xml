<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.130 Maintainer: tom Status: ready -->
<reference id="ref.filesystem">
  <title>Funktionen des Dateisystems</title>
  <titleabbrev>Filesystem</titleabbrev>

  <partintro>
   <simpara>
    Verwandte Funktionen finden Sie in den Abschnitten <link
    linkend="ref.dir">Verzeichnis-Funktionen</link> und <link
    linkend="ref.exec">Funktionen zur Programmausführung</link>.
   </simpara>
  </partintro>

  <refentry id="function.basename">
   <refnamediv>
    <refname>basename</refname>
    <refpurpose>
     Extrahiert den Namen einer Datei aus einer vollständigen Pfadangabe
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>basename</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>suffix</parameter></methodparam>
     </methodsynopsis>
    <para>
     Diese Funktion extrahiert aus einer vollständigen Pfadangabe den
     Namen der Datei und gibt diesen zurück. Endet der Dateiname mit
     <parameter>suffix</parameter>, wird dieses Ende ebenfalls 
     abgeschnitten.
    </para>
    <para>
     Unter Windows wird sowohl der Slash (<literal>/</literal>) als
     auch der Backslash (<literal>\</literal>) als Trennzeichen bei
     Pfadangaben benutzt. Unter anderen Betriebssystemen hingegen nur
     der Slash (<literal>/</literal>).
    </para>
    <para>
     <example>
      <title><function>basename</function></title>
      <programlisting role="php">
<![CDATA[
$path = "/home/httpd/html/index.php";
$file = basename($path);         // $file enthält den Wert "index.php"
$file = basename ($path,".php"); // $file enthält den Wert "index"
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Der Parameter <parameter>suffix</parameter> wurde in PHP 4.1.0.
      eingeführt.
     </para>
    </note>
    <para>
     Siehe auch <function>dirname</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.chgrp">
   <refnamediv>
    <refname>chgrp</refname>
    <refpurpose>Wechselt die Gruppenzugehörigkeit einer Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>chgrp</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>group</parameter></methodparam>
     </methodsynopsis>
    <para>
     Weist der Datei <parameter>filename</parameter> die Benutzergruppe
     <parameter>group</parameter> zu (spezifiziert durch Name oder Nummer). Um
     diese Funktion ausführen zu können, müssen Sie Superuser sein. Andere
     Benutzer können die Gruppenzugehörigkeit einer Datei in jede Gruppe
     ändern, derer sie angehören.
    </para>
    <para>
     Gibt bei Erfolg &true; zurück, andernfalls &false;.
    </para>
    <para>
     Siehe auch <function>chown</function> und
     <function>chmod</function>.
    </para>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.chmod">
   <refnamediv>
    <refname>chmod</refname>
    <refpurpose>Ändert die Zugriffsrechte einer Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>chmod</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>int</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
    <para>
     Diese Funktion ändert die Zugriffsrechte der Datei spezifiziert
     in <parameter>filename</parameter> in die Zugriffsrechte um, die
     in <parameter>mode</parameter> spezifiziert sind.
    </para>
    <para>
     Bedenken Sie, das <parameter>mode</parameter> nicht automatisch
     für einen Oktalwert gehalten wird. Um sicher zu gehen, dass die
     Operation wie erwartet verläuft sollten Sie
     <parameter>mode</parameter> mit dem Prefix &null; (0) versehen:
     <informalexample>
      <programlisting role="php">
<![CDATA[
chmod ("/somedir/somefile", 755);   // dezimal; möglicherweise falsch
chmod ("/somedir/somefile", "u+rwx,go+rx"); // String; falsch       
chmod ("/somedir/somefile", 0755);  // oktal; richtiger Wert von mode
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Gibt &true; bei Erfolg zurück, andernfalls &false;.
    </para>
    <para>
     Siehe auch <function>chown</function> und
     <function>chgrp</function>.
    </para>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.chown">
   <refnamediv>
    <refname>chown</refname>
    <refpurpose>Ändert den Eigentümer einer Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>chown</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>user</parameter></methodparam>
     </methodsynopsis>
    <para>
     Ändert den Eigentümer der Datei <parameter>filename</parameter>
     in Benutzer <parameter>user</parameter>.  Nur der Superuser kann
     den Eigentümer einer Datei ändern.
    </para>
    <para>
     Gibt bei Erfolg &true; zurück, andernfalls &false;.
    </para>
    <para>
     Siehe auch <function>chown</function> und
     <function>chmod</function>.
    </para>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.clearstatcache">
   <refnamediv>
    <refname>clearstatcache</refname>
    <refpurpose>Löscht den Status Cache</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>void</type><methodname>clearstatcache</methodname>
      <void/>
     </methodsynopsis>
    <para>
     <function>clearstatcache</function> löscht den Zwischenspeicher
     mit den Dateistatuswerten. Die Systemaufrufe
     <systemitem>stat</systemitem> oder <systemitem>lstat</systemitem>
     sind auf den meisten Systemen sehr "teure" Aufrufe. Daher wird
     das Ergebnis des letzten Aufrufs von einer der unten aufgeführten
     Funktionen für die nächste Benutzung eines ähnlichen Aufrufs mit
     dem gleichen Dateinamen gespeichert. Wenn Sie einen neuen
     Status-Check erzwingen wollen, z.B. wenn die Datei in der
     Zwischenzeit oftmals aufgerufen wurde, verändert oder
     verschwunden ist, können Sie diese Funktion dazu benutzen, das
     Ergebnis des letzten Aufrufes aus dem Speicher zu leeren.
    </para>
    <para>
     Dieser Wert wird nur für die Zeit eines einzelnen Requests
     zwischengespeichert.
    </para>
    <para>
     Folgende Funktionen betreffen den Dateistatus:
     <function>stat</function>, <function>lstat</function>,
     <function>file_exists</function>,
     <function>is_writeable</function>,
     <function>is_readable</function>,
     <function>is_executable</function>, <function>is_file</function>,
     <function>is_dir</function>, <function>is_link</function>,
     <function>filectime</function>, <function>fileatime</function>,
     <function>filemtime</function>, <function>fileinode</function>,
     <function>filegroup</function>, <function>fileowner</function>,
     <function>filesize</function>, <function>filetype</function>, and
     <function>fileperms</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.copy">
   <refnamediv>
    <refname>copy</refname>
    <refpurpose>Kopiert eine Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>copy</methodname>
      <methodparam><type>string</type><parameter>source</parameter></methodparam>
      <methodparam><type>string</type><parameter>dest</parameter></methodparam>
     </methodsynopsis>
    <para>
     Die Funktion <function>copy</function> kopiert eine Datei.  Sie
     gibt &true; zurück, wenn der Kopiervorgang erfolgreich war,
     andernfalls &false;.
     <example>
      <title><function>copy</function></title>
      <programlisting role="php">
<![CDATA[
if (!copy($file, $file.'.bak')) {
    print ("failed to copy $file...<br>\n");
}
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Ab PHP 4.3.0 können die Parameter <parameter>source</parameter> und
      <parameter>dest</parameter> auch URLs sein, wenn "fopen wrappers"
      aktiviert ist. Weitere Details hierzu finden Sie unter
      <function>fopen</function>.
     </para>
    </note>
    <warning>
     <para>
      Sollte die Zieldatei bereits existieren, wird sie überschrieben.
     </para>
    </warning>
    <para>
     Siehe auch <function>move_uploaded_file</function>,
     <function>rename</function>, und den Abschnitt über
     <link linkend="features.file-upload">Steuerung von
     Dateiuploads</link>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.delete">
   <refnamediv>
    <refname>delete</refname>
    <refpurpose>"Dummy Handbuch Eintrag"</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>void</type><methodname>delete</methodname>
      <methodparam><type>string</type><parameter>file</parameter></methodparam>
     </methodsynopsis>
    <para>
     Dieses ist ein "Dummy Handbuch Eintrag" für diejenigen, die nach
     einer Funktion wie <function>unlink</function> oder
     <function>unset</function> an der falschen Stelle suchen.
    </para>
    <para>
     Siehe auch <function>unlink</function> um Dateien zu löschen,
     <function>unset</function> um Variablen zu löschen.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dirname">
   <refnamediv>
    <refname>dirname</refname>
    <refpurpose>
     Extrahiert den Verzeichnis-Namen aus einer vollständigen
     Pfadangabe
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>dirname</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
     Bei einer vollständigen Pfadangabe gibt diese Funktion den
     Verzeichnispfad zurück.
    </para>
    <para>
     Unter Windows wird sowohl der Slash (<literal>/</literal>) als
     auch der Backslash (<literal>\</literal>) als Trennzeichen bei
     Pfadangaben benutzt. Unter anderen Betriebssystemen hingegen nur
     der Slash (<literal>/</literal>).
    </para>
    <para>
     <example>
      <title><function>dirname</function></title>
      <programlisting role="php">
<![CDATA[
$path = "/etc/passwd";
$file = dirname ($path); // $file enthält den Wert "/etc"
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Seit PHP 4.0.3 entspricht <function>dirname</function> dem
      POSIX-Standard. Im Grunde heißt das, dass wenn keine Slashes
      in <parameter>path</parameter> vorhanden sind, wird ein Punkt
      ('<literal>.</literal>') zurückgegeben, womit das aktuelle
      Verzeichnis gemeint ist. Andernfalls enthält der zurückgegebene
      String <parameter>path</parameter>, jedoch ohne den hinteren
      <literal>/component</literal>. Beachten Sie, dass Sie von
      <function>dirname</function> oft einen Slash oder Punkt
      zurückbekommen, wo die alte Funktionalität einen leeren String
      lieferte.
     </para>
    </note>
    <para>
     Siehe auch <function>basename</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.disk-free-space">
   <refnamediv>
    <refname>disk_free_space</refname>
    <refpurpose>
     Liefert den freien Speicherplatz in einem Verzeichnis
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>float</type><methodname>disk_free_space</methodname>
      <methodparam><type>string</type><parameter>directory</parameter></methodparam>
     </methodsynopsis>
    <para>
     Diese Funktion gibt den freien Speicherplatz eines Verzeichnisses
     in Byte zurück.
    </para>
    <para>
     <example>
      <title><function>disk_free_space</function></title>
      <programlisting role="php">
<![CDATA[
$df = disk_free_space("/"); // $df hält die Anzahl an freien Bytes 
                            // im Verzeichnis  "/"
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.diskfreespace">
   <refnamediv>
    <refname>diskfreespace</refname>
    <refpurpose>Ist ein Alias für <function>disk_free_space</function></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>float</type><methodname>diskfreespace</methodname>
      <methodparam><type>string</type><parameter>directory</parameter></methodparam>
     </methodsynopsis>
    <para>
     Von diesem Alias wird abgeraten, benutzen Sie stattdessen
     <function>disk_free_space</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.disk-total-space">
   <refnamediv>
    <refname>disk_total_space</refname>
    <refpurpose>Liefert die Gesamtgröße eines Verzeichnisses</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>float</type><methodname>disk_total_space</methodname>
      <methodparam><type>string</type><parameter>directory</parameter></methodparam>
     </methodsynopsis>
    <para>
     Anhand des übergebenen Strings mit dem Verzeichnisnamen gibt diese 
     Funktion die Anzahl Bytes auf dem korrespondierenden Dateisystem oder 
     der Disk Partition zurück.
    </para>
    <para>
     <example>
      <title><function>disk_total_space</function></title>
      <programlisting role="php">
<![CDATA[
$df = disk_total_space("/"); // $df enthält die Gesamtanzahl 
                             // verfügbarer Bytes in "/"
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fclose">
   <refnamediv>
    <refname>fclose</refname>
    <refpurpose>Schließt einen offenen Dateizeiger</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>fclose</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     Die Datei, auf die der Dateizeiger <parameter>fp</parameter>
     zeigt wird geschlossen.
    </para>
    <para>
     Gibt bei erfolgreichem Schließen der Datei &true;, andernfalls
     &false; zurück.
    </para>
    <para>
     Der Datei-Zeiger muss gültig sein, d.h. die Datei, auf die
     gezeigt wird muss zuvor mit <function>fopen</function>
     oder <function>fsockopen</function> geöffnet worden sein.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.feof">
   <refnamediv>
    <refname>feof</refname>
    <refpurpose>
     Prüft, ob der Dateizeiger am Ende der Datei steht
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>feof</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt &true; zurück, falls der Dateizeiger am Ende der Datei steht
     oder ein Fehler aufgetreten ist, andernfalls &false;.
    </para>
    <para>
     Der Dateizeiger muss gültig sein, d.h. die Datei, auf die gezeigt
     wird, muss zuvor mit <function>fopen</function>,
     <function>popen</function> oder <function>fsockopen</function>
     geöffnet worden sein.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fflush">
   <refnamediv>
    <refname>fflush</refname>
    <refpurpose>Schreibt den Ausgabepuffer in eine Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fflush</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     Diese Funktion erzwingt das Schreiben des gesamten Ausgabepuffers 
     in die von dem Dateizeiger <parameter>fp</parameter> angegebenen 
     Datei. Gibt bei Erfolg &true;, andernfalls &false; zurück.
    </para>
    <para>
     Der Dateizeiger muss gültig sein, und auf eine mittels 
     <function>fopen</function>, <function>popen</function>, oder 
     <function>fsockopen</function> erfolgreich geöffnete Datei zeigen.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetc">
   <refnamediv>
    <refname>fgetc</refname>
    <refpurpose>
     Liest das Zeichen, auf welches der Dateizeiger zeigt
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>fgetc</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt einen String zurück, der ein einzelnes Zeichen von der
     aktuellen Position des Dateizeigers <parameter>fp</parameter>
     enthält.  Gibt &false; zurück, wenn der Dateizeiger am Ende der
     Datei steht (wie die Funktion <function>feof</function>).
    </para>
    <para>
     Der Dateizeiger muss gültig sein, d.h. die Datei, auf die gezeigt
     wird, muss zuvor mit <function>fopen</function>,
     <function>popen</function> oder <function>fsockopen</function>
     geöffnet worden sein.
    </para>
    <para>
     Siehe auch <function>fread</function>,
     <function>fopen</function>, <function>popen</function>,
     <function>fsockopen</function> und <function>fgets</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetcsv">
   <refnamediv>
    <refname>fgetcsv</refname>
    <refpurpose>
     Liest eine Zeile von der Position des Dateizeigers und 
     prüft diese auf Komma-Separierte-Werte (CSV)
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>fgetcsv</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>
        delimiter
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Die Funktion <function>fgetcsv</function> handelt ähnlich der
     Funktion <function>fgets</function>, bis auf den Umstand, das
     <function>fgetcsv</function> die eingelesene Zeile auf
     Kommaseparierte Felder hin überprüft. Das Ergebnis wird als Array
     zurückgegeben.  Als Trennzeichen (Delimiter) wird - wenn kein
     anderes Trennzeichen im dritten optionalen Parameter angegeben
     wird - das Komma benutzt.
    </simpara>
    <simpara>
     Der Dateizeiger <parameter>fp</parameter> muss gültig sein,
     d.h. die Datei, auf die gezeigt wird, muss zuvor mit
     <function>fopen</function>, <function>popen</function> oder
     <function>fsockopen</function> geöffnet worden sein.
    </simpara>
    <simpara>
     'length' muss größer sein als die längste in der CSV-Datei
     vorhandene Zeile (um das Erkennen von EndOfLine(Ende der Zeile)
     Zeichen zu ermöglichen).
    </simpara>
    <simpara>
     <function>fgetcsv</function> gibt &false; am Dateiende und bei
     Lesefehlern zurück.
    </simpara>
    <simpara>
     Eine leere Zeile der CSV-Datei wird als Array mit einem Feld das
     den Wert &null; hält zurückgegeben. Sie wird nicht als Fehler
     behandelt.
    </simpara>
    <example>
     <title>
      <function>fgetcsv</function> Beispiel - Lesen und Ausgabe des
      Inhalts einer CSV-Datei
     </title>
     <programlisting role="php">
<![CDATA[
$row = 1;                                  // Anzahl der Arrays
$fp = fopen ("test.csv","r");              // Datei wird zum Lesen 
                                           // geöffnet
while ($data = fgetcsv ($fp, 1000, ",")) { // Daten werden aus der Datei
                                           // in einen Array $data gelesen
    $num = count ($data);                  // Felder im Array $data 
                                           // werden gezählt
    print "<p> $num fields in line $row: <br>";
    $row++;                                // Anzahl der Arrays wird 
                                           // inkrementiert
    for ($c=0; $c < $num; $c++) {          // FOR-Schleife, um Felder 
        print $data[$c] . "<br>";          // des Arrays auszugeben
    }
}
fclose ($fp);
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.fgets">
   <refnamediv>
    <refname>fgets</refname>
    <refpurpose>
     Liest eine Zeile von der Position des Dateizeigers
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>fgets</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt eine Zeile bis zu <parameter>length</parameter> -1 Bytes 
     Länge zurück, welche aus der Datei von der aktuellen Position des 
     Dateizeigers <parameter>fp</parameter> aus ausgelesen wird. Die 
     Zeile endet an einem Zeilenumbruch (welcher im Rückgabewert enthalten 
     ist), EOF (Ende der Datei) oder bei <parameter>length</parameter>
     - 1 Bytes (Je nachdem, was eher auftritt). Ist keine Länge angegeben,
     wird diese auf 1k bzw. 1024 Bytes gesetzt.
    </para>
    <para>
     Wenn ein Fehler auftritt, wird &false; zurückgegeben.
    </para>
    <para>
     Häufig auftretende Fehler:
    </para>
    <simpara>
     Wenn Sie an die C-Semantik von <function>fgets</function> gewöhnt sind,
     sollten Sie auf die unterschiedliche Behandlung von <literal>EOF</literal>
     (genauer: wie EOF zurückgegeben wird) achten.
    </simpara>
    <simpara>
     Der Datei-Zeiger <parameter>fp</parameter> muss gültig sein,
     d.h. die Datei, auf die gezeigt wird, muss zuvor mit
     <function>fopen</function>, <function>popen</function>, oder
     <function>fsockopen</function> geöffnet worden sein.
    </simpara>
    <para>
     Ein einfaches Beispiel:
     <example>
      <title>Eine Datei Zeile für Zeile einlesen</title>
      <programlisting role="php">
<![CDATA[
$fd = fopen ("/tmp/inputfile.txt", "r");
while (!feof($fd)) {
    $buffer = fgets($fd, 4096);
    echo $buffer;
}
fclose ($fd);
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      Der Parameter <parameter>length</parameter> wurde erst ab PHP 4.2.0 optional.
     </simpara>
    </note>
    <para>
     Siehe auch <function>fread</function>, <function>fopen</function>,
     <function>popen</function>, <function>fgetc</function>,
     <function>fsockopen</function>, und 
     <function>socket_set_timeout</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetss">
   <refnamediv>
    <refname>fgetss</refname>
    <refpurpose>
     Liest eine Zeile von der Position des Dateizeigers und entfernt 
     HTML und PHP-Tags.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>fgetss</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>
        allowable_tags
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     Diese Funktion ist identisch mit der Funktion
     <function>fgets</function>, außer dass
     <function>fgetss</function> versucht, vorhandene HTML und
     PHP-Tags aus dem gelesenen Text zu entfernen.
    </para>
    <para>
     Optional können mit dem dritten Parameter
     <parameter>allowable_tags</parameter> Tags spezifiziert werden,
     die nicht entfernt werden sollen.
     <note>
      <para>
       <parameter>allowable_tags</parameter> wurden in PHP 3.0.13 bzw.
       PHP 4.0.0 hinzugefügt.
      </para>
     </note>
    </para>
    <para>
     Siehe auch <function>fgets</function>,
     <function>fopen</function>, <function>fsockopen</function>,
     <function>popen</function> und <function>strip_tags</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.file-get-contents">
   <refnamediv>
    <refname>file_get_contents</refname> 
    <refpurpose>Liest die gesamte Datei in einen String</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>file_get_contents</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>use_include_path</parameter></methodparam>
     </methodsynopsis>
    <para> 
     Diese Funktion ist mit <function>readfile</function> identisch,
     außer dass <function>file_get_contents</function> die Datei in
     einem String zurückgibt.
    </para>
    &note.bin-safe;
    &tip.fopen-wrapper;
   </refsect1>
  </refentry>
  
  <refentry id="function.file">
   <refnamediv>
    <refname>file</refname>
    <refpurpose>
     Liest eine Datei komplett in einen Array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>use_include_path</parameter></methodparam>
     </methodsynopsis>
    <para>
     Die Funktion <function>file</function> ist identisch mit
     <function>readfile</function>, außer dass die eingelesene Datei
     als Array zurückgegeben wird. Jedes Feld des Arrays korrespondiert
     mit einer Zeile der Datei. Der Zeilenumbruch bleibt erhalten.
    </para>
    <note>
     <para>
      Jede Zeile in dem resultierenden Array enthält das Zeilenende ('\0'),
      weshalb Sie <function>trim</function> verwenden müssen, falls Sie
      dieses Zeichen nicht vorhanden sein soll.
     </para>
    </note>
    <para>
     Optional kann der zweite Parameter benutzt und auf '1' gesetzt
     werden, wenn in dem <link
     linkend="ini.include-path">include_path</link> ebenfalls nach der
     Datei gesucht werden soll.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
// liest eine Webseite in einen Array und gibt das Ergebnis aus
$fcontents = file ('http://www.php.net/');
while (list ($line_num, $line) = each ($fcontents)) {
    echo "<b>Line $line_num:</b>; ", htmlspecialchars ($line), "<br>\n";
}

// liefert eine Webseite in einen String
$fcontents = implode ('', file ('http://www.php.net/'));
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Ab PHP 4.3.0 können Sie <function>file_get_contents</function>
      verwenden, um den Inhalt einer Datei als binären String zu bekommen.
     </para>
    </note>
    &note.not-bin-safe;
    &tip.fopen-wrapper;
    <para>
     Siehe auch <function>readfile</function>,
     <function>fopen</function>, <function>fsockopen</function> und 
     <function>popen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.file-exists">
   <refnamediv>
    <refname>file_exists</refname>
    <refpurpose>Überprüft, ob eine Datei existiert</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>file_exists</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Gibt &true; zurück, wenn die mit <parameter>filename</parameter>
     spezifizierte Datei existiert, andernfalls &false;.
    </simpara>
    <simpara>
     <function>file_exists</function> funktioniert nur mit lokalen
     Dateien.  Die Datei, deren Existenz überprüft werden soll muss
     über das Dateisystem des Servers erreichbar sein.
    </simpara>
    <simpara>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fileatime">
   <refnamediv>
    <refname>fileatime</refname>
    <refpurpose>
     Liefert Datum und Uhrzeit des letzten Zugriffs auf eine Datei
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fileatime</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Gibt Datum und Uhrzeit des letzten Zugriffs auf eine Datei
     zurück, oder &false; wenn ein Fehler auftrat. Das Datum wird als
     UNIX-Timestamp zurückgegeben.
    </simpara>
    <simpara>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </simpara>
    <simpara>
     Anmerkung: Die atime einer Datei vorgesehen sich immer zu ändern,
     sobald Datenblöcke einer Datei geändert werden. Das kann sich 
     folgenschwer auf die Performance auswirken, wenn eine Anwendung 
     regelmäßig auf eine große Anzahl Dateien oder Verzeichnisse zugreift.
     Manche Unix Dateisysteme können mit deaktivierter atime-Aktualisierung 
     gemountet werden, um die Performance solcher Applikationen zu erhöhen;
     USENET news spools sind ein häufiges Beispiel. Auf solchen 
     Dateisystemen wird diese Funktion nutzlos.
    </simpara>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filectime">
   <refnamediv>
    <refname>filectime</refname>
    <refpurpose>
     Liefert Datum und Uhrzeit der letzten Änderung des Dateizeigers
     Inode
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>filectime</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt Zeit der letzten Änderung des Dateizeigers Inode zurück,
     oder &false; wenn ein Fehler auftrat. Die Zeit wird als
     UNIX-Timestamp zurückgegeben.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <para>
     Anmerkung: Bei den meisten Unix Dateisystemen gilt eine Datei als
     geändert, sobald ihre Inode-Daten geändert wurden; d.h. wenn die
     Rechte, Eigentümer, Gruppe, oder andere Metadaten des Inodes 
     aktualisiert werden. Siehe auch <function>filemtime</function> (das 
     ist was Sie suchen, wenn Sie Fußzeilen mit "Zuletzt Aktualisiert"
     für Webseiten erstellen möchten) und <function>fileatime</function>.
    </para>
    <para>Beachten Sie auch, dass in einigen Unix-Texten ctime als die Zeit 
     der Erstellung der Datei beschrieben wird. Das ist falsch. Bei den 
     meisten Unix Dateisystemen gibt es keine Zeitangabe für die Erstellung
     von Unix Dateien.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filegroup">
   <refnamediv>
    <refname>filegroup</refname>
    <refpurpose>
     Liefert die Gruppenzugehörigkeit einer Datei
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>filegroup</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt die Gruppen ID des Besitzers einer Datei zurück, oder &false;
     wenn ein Fehler auftrat. Die Gruppen ID wird im numerischen
     Format zurückgegeben. Mit der Funktion
     <function>posix_getgrgid</function> können Sie diese zu ihrem
     Gruppennamen auflösen.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    &note.no-windows;
    <note>
     <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.fileinode">
   <refnamediv>
    <refname>fileinode</refname>
    <refpurpose>Liefert die Inode-Nummer einer Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fileinode</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt die Inode-Nummer einer Datei zurück, oder &false; wenn ein
     Fehler auftrat.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.filemtime">
   <refnamediv>
    <refname>filemtime</refname>
    <refpurpose>
     Liefert Datum und Uhrzeit der letzten Dateiänderung
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>filemtime</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt Datum und Uhrzeit zurück, wann die Datei das letzte mal
     modifiziert wurde, oder &false; wenn ein Fehler auftrat. Das Datum
     wird als UNIX-Timestamp zurückgegeben.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
    <para>Anmerkung: Diese Funktion gibt den Zeitpunkt zurück, an dem in 
     die Datenblöcke einer Datei geschrieben wurde; d.h. den Zeitpunkt der 
     Änderung des Inhalts der Datei. Verwenden Sie <function>date</function>,
     um das Ergebnis dieser Funktion in ein ausgabefähiges Änderungsdatum 
     für z.B. Fußzeilen in Webseiten zu erhalten.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fileowner">
   <refnamediv>
    <refname>fileowner</refname>
    <refpurpose>Liefert den Dateieigentümer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fileowner</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt die Benutzer ID des Eigentümers einer Datei zurück, oder
     &false; wenn ein Fehler auftrat. Die Benutzer ID wird in
     numerischem Format zurückgegeben und kann mit der Funktion
     <function>posix_getpwuid</function> zum Benutzernamen aufgelöst
     werden.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.fileperms">
   <refnamediv>
    <refname>fileperms</refname>
    <refpurpose>Liefert die Zugriffsrechte einer Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fileperms</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt die Zugriffsrechte einer Datei zurück, oder &false; wenn ein
     Fehler auftrat.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.filesize">
   <refnamediv>
    <refname>filesize</refname>
    <refpurpose>Liefert die Größe einer Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>filesize</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt die Größe einer Datei in Bytes zurück, oder &false; wenn ein Fehler
     auftrat.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filetype">
   <refnamediv>
    <refname>filetype</refname>
    <refpurpose>Liefert den Typ einer Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>filetype</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt den Typ einer Datei zurück. Mögliche Werte sind fifo, char,
     dir, block, link, file und unknown.
    </para>
    <para>
     Gibt &false; zurück, wenn ein Fehler auftrat.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.flock">
   <refnamediv>
    <refname>flock</refname>
    <refpurpose>Portables Datei-Verriegelungs-Verfahren</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>flock</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>operation</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>
        wouldblock
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
     PHP liefert einen portablen Weg, Dateien in einer "beratenden"
     Art und Weise zu verriegeln. D.h. alle zugreifende Programme
     müssen die gleiche Art und Weise der Verriegelung benutzen, oder
     es funktioniert nicht.
    </simpara>
    <simpara>
     <function>flock</function> arbeitet mit <parameter>fp</parameter>
     welcher ein existierender Dateizeiger sein muss. Der Parameter
     <parameter>operation</parameter> bestimmt die Art der
     Verriegelung und kann einen der folgenden Werte annehmen:
    </simpara>
    <para>
     <itemizedlist>
      <listitem>
       <simpara>
        Um eine verteilte, nur lesende Verriegelung zu erhalten,
        setzten Sie <parameter>operation</parameter> auf LOCK_SH (bzw.
        1 vor PHP 4.0.1).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Um eine exklusive, nur schreibende Verriegelung zu erhalten,
        setzen Sie <parameter>operation</parameter> auf LOCK_EX (bzw.
        2 vor PHP 4.0.1).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Um eine Verriegelung freizugeben (lesend oder schreibend),
        setzten Sie <parameter>operation</parameter> auf LOCK_UN (bzw.
        3 vor PHP 4.0.1).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Wenn Sie Zugriffe während der Verriegelung durch
        <function>flock</function> erlauben wollen, fügen Sie LOCK_NB 
        (bzw. 4 vor PHP 4.0.1) zu <parameter>operation</parameter> hinzu.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <simpara>
     <function>flock</function> erlaubt es Ihnen ein einfaches
     Leser/Schreiber Modell zu erstellen, welches auf fast jeder Plattform
     benutzt werden kann (inkl. den meisten UNIX-Derivaten und auch Windows).
     Das optionale dritte Argument ist auf &true; gesetzt, wenn die 
     Verriegelung sperren sollte (EWOULDBLOCK errno Bedingung).
    </simpara>
    <simpara>
     <function>flock</function> gibt &true; bei Erfolg, &false; wenn ein
     Fehler auftrat (z.B. wenn eine Verriegelung nicht erstellt werden
     konnte) zurück.
    </simpara>
    <note>
     <para>
      Da <function>flock</function> einen Dateizeiger benötigt, könnten Sie
      eine spezielle Sperrdatei benutzen, um den Zugriff auf eine Datei zu
      schützen, welche Sie mittels Öffnen im Schreibmodus (mit dem Argument
      "w" or "w+" von <function>fopen</function>) kürzen wollen.
     </para>
    </note>
    <warning>
     <para>
      <function>flock</function> funktioniert nicht auf NFS und verschiedenen
      anderen vernetzten Dateisystemen. Für weitere Detail konsultieren Sie
      bitte Ihre Betriebssystemdokumentation.
     </para>
     <para>
      Bei einigen Betriebssystemen ist <function>flock</function> auf dem
      Prozesslevel implementiert. Wenn Sie ein multithreaded Server API wie
      ISAPI benutzen können Sie sich nicht auf <function>flock</function>
      verlassen, um Dateien vor anderen PHP-Skripten zu schützen, welche in
      parallelen Threads der gleichen Server-Instanz laufen!
     </para>
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.fgetwrapperdata">
   <refnamediv>
    <refname>fgetwrapperdata</refname>
    <refpurpose>Liefert Kopf-/Metadaten von geöffneten Dateien</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>mixed</type><methodname>fgetwrapperdata</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Diese Funktion gibt die Kopf- oder Metadaten von mittels 
     <function>fopen</function> geöffneten Dateien zurück. Dies ist
     hilfreich, um Antwort headers von HTTP Verbindungen, oder andere
     Statistiken anderer Ressourcen zu erhalten.
    </simpara>
    <simpara>
     Das Format der zurückgegebenen Daten ist derzeit bewusst nicht
     dokumentiert.
    </simpara>
    <note>
     <para>
      Diese Funktion wurde in PHP 4.3.0 eingeführt.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.fopen">
   <refnamediv>
    <refname>fopen</refname>
    <refpurpose>Öffnet eine Datei oder URL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fopen</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>string</type><parameter>mode</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>
        use_include_path
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Wenn <parameter>filename</parameter> mit "http://" (nicht case
     sensitive) beginnt, wird zu dem spezifiziertem Server eine HTTP
     1.0 Verbindung geöffnet, die Seite mittels der HTTP GET Methode
     angefordert, und ein Dateizeiger auf den Anfang des Textes der 
     Antwort zurückgegeben. Ein 'Host:' header wird mit der Anfrage 
	 geschickt, um namens-basierte Virtual Hosts zu verarbeiten.
    </simpara>
    <simpara>
     Ab PHP 4.3.0 (noch nicht freigegeben) können Sie eine HTTP Verbindung
     über SSL mit "https://" verwenden, wenn Sie PHP mit Unterstützung für
     OpenSSL kompiliert haben.
    </simpara>
    <simpara>
     Beachten Sie, dass Ihnen der Dateizeiger nur den Empfang des 
     <emphasis>body</emphasis> aus der Antwort erlaubt. Um den HTTP
     Antwortheader zu erhalten, benötigen Sie PHP ab Version 4.0.5. Die
     Headers werden in der Variable $http_response_header gespeichert.
     Ab PHP 4.3.0 (noch nicht freigegeben) kann die Header Information
     mittels <function>fgetwrapperdata</function> geholt werden.
    </simpara>
    <simpara>
     HTTP Verbindungen sind nur zum Lesen, d.h. Sie können keine Daten
     schreiben oder Dateien an eine HTTP Ressource kopieren.
    </simpara>
    <simpara>
     In älteren Versionen als PHP 4.0.5 werden Weiterleitungen (HTTP 
     Redirects) nicht unterstützt, hier muss die Datei daher vollständig 
     und mit abschließendem "/" beschrieben werden.
    </simpara>
    <simpara>
     Wenn <parameter>filename</parameter> mit "ftp://" (nicht case
     sensitive) beginnt, wird eine ftp-Connection zu dem
     spezifizierten Server geöffnet und ein Zeiger auf die
     angeforderte Datei zurückgegeben.  Wenn der Server keinen
     passiven FTP-Modus unterstützt, wird diese Methode
     fehlschlagen. Sie können Dateien entweder zum Schreiben oder zum
     Lesen öffnen, jedoch nicht für beides gleichzeitig.
    </simpara>
    <simpara>
     Wenn <parameter>filename</parameter> "php://stdin",
     "php://stdout", oder "php://stderr" ist, wird der
     korrespondierende stdio stream geöffnet (Feature wurde in Version
     3.0.13 eingeführt, in früheren Versionen muss der Dateiname wie
     z.B. "/dev/stdin" oder "/dev/fd/0" benutzt werden, um auf die
     stdio streams zuzugreifen).
    </simpara>
    <simpara>
     Wenn <parameter>filename</parameter> mit irgendetwas anderem
     beginnt, wird die Datei vom lokalen Dateisystem geöffnet und ein
     Dateizeiger auf die geöffnete Datei zurückgegeben.
    </simpara>
    <simpara>
     Wenn das Öffnen scheitert, gibt die Funktion &false; zurück.
    </simpara>
    <para>
     <parameter>mode</parameter> kann einen der folgenden Werte
     einnehmen:
     <itemizedlist>
      <listitem>
       <simpara>
	'r' - öffnet die Datei nur zum Lesen und positioniert den
	Dateizeiger auf den Anfang der Datei.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
       	'r+' - Öffnet die Datei zum Lesen und Schreiben und setzt den
       	Dateizeiger auf den Anfang der Datei.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	'w' - Öffnet die Datei nur zum Schreiben und setzt den
	Dateizeiger auf den Anfang der Datei sowie die Länge der Datei
	auf 0 Byte. Wenn die Datei nicht existiert wird versucht sie
	anzulegen.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	'w+' - Öffnet die Datei zum Lesen und Schreiben und setzt den
	Dateizeiger auf den Anfang der Datei sowie die Länge der Datei
	auf 0 Byte. Wenn die Datei nicht existiert, wird versucht sie
	anzulegen.
      </simpara>
      </listitem>
      <listitem>
       <simpara>
	'a' - Öffnet die Datei nur zum Schreiben. Positioniert den
	Dateizeiger auf das Ende der Datei. Wenn die Datei nicht
	existiert, wird versucht sie anzulegen.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	'a+' - Öffnet die Datei zum Lesen und Schreiben. Positioniert
	den Dateizeiger auf das Ende der Datei. Wenn die Datei nicht
	existiert, wird versucht sie anzulegen.
       </simpara>
      </listitem>
     </itemizedlist>
     Zusätzlich kann <parameter>mode</parameter> der Buchstabe 'b'
     hinzugefügt werden, der die Behandlung von Binär-Dateien
     erlaubt. Dies ist nur auf Systemen sinnvoll, welche zwischen Binär-
     und Text-Dateien unterscheiden (z.B. Windows. Ist bei Unix sinnlos).
     Wenn das Feature nicht gebraucht wird, wird es einfach ignoriert.
    </para>
    <para>
     Sie können optional ein dritten Parameter benutzen und diesen auf
     '1' setzten, wenn Sie auch im <link
     linkend="ini.include-path">include_path</link> nach der Datei
     suchen möchten.
    </para>
    <para>
     <example>
      <title>fopen()</title>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("/home/simi/simi.txt", "r");
$fp = fopen ("/home/simi/simi.gif", "wb");
$fp = fopen ("http://www.php.net/", "r");
$fp = fopen ("ftp://user:password@example.com/", "w");
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Wenn Sie Probleme mit dem Lesen oder Schreiben von Dateien haben 
     und PHP als Servermodul benutzen, stellen Sie zunächst
     sicher, dass die Dateien und Verzeichnisse die Sie benutzen
     wollen auch für den Server-Prozess zugänglich sind
     (Rechtevergabe).
    </simpara>
    <para>
     Achten Sie auf Windows-Systemen darauf, dass Sie als
     Verzeichnistrenner normale Schrägstriche '/' benutzen um
     plattformunabhängig programmieren zu können. Sollten Sie dennoch
     Backslashes verwenden, vergessen Sie nicht diese zu escapen '\\'
     <informalexample>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("c:\\data\\info.txt", "r");
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Siehe auch <function>fclose</function>,
     <function>fsockopen</function>,
     <function>socket_set_timeout</function>, und 
     <function>popen</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fpassthru">
   <refnamediv>
    <refname>fpassthru</refname>
    <refpurpose>
     Gibt alle verbleibenden Daten eines Dateizeigers direkt aus.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fpassthru</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Die Funktion liest alle Daten von der aktuellen Position des Dateizeigers
     bis EOF aus und gibt die Daten auf der Standartausgabe (Browser) aus.
    </simpara>
    <simpara>
     Wenn ein Fehler auftritt, gibt <function>fpassthru</function>
     &false; zurück.
    </simpara>
    <simpara>
     Der Dateizeiger muss gültig sein und auf eine erfolgreich durch
     <function>fopen</function>, <function>popen</function> oder
     <function>fsockopen</function> geöffnete Datei zeigen. Vielleicht
     müssen Sie <function>rewind</function> aufrufen um den Dateizeiger
     auf den Beginn der Datei zurückzusetzen, wenn Sie bereits Daten in
     die Datei geschrieben haben. Die Datei wird geschlossen, wenn 
     <function>fpassthru</function> die Datei komplett gelesen hat
     (hinterlässt nutzlosen <parameter>fp</parameter>-Dateizeiger).
    </simpara>
    <simpara>
     Wenn Sie den Inhalt einer Datei nur auf der Standartausgabe
     (Browser) ausgeben wollen, sollten Sie besser
     <function>readfile</function> benutzen, bei der Sie nicht zuvor
     die Datei mittels <function>fopen</function> geöffnet haben
     müssen.
    </simpara>
    <note>
     <para>
      Wenn Sie <function>fpassthru</function> an einer Binärdatei unter
      Windows benutzen sollten Sie sich vergewissern, dass Sie die Datei
      im Binärmodus öffnen, indem Sie ein <literal>b</literal> an den
      Mode-Parameter von <function>fopen</function> anhängen.
     </para>
    </note>
    <simpara>
     Siehe auch <function>readfile</function>,
     <function>fopen</function>, <function>popen</function> und
     <function>fsockopen</function>
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fputs">
   <refnamediv>
    <refname>fputs</refname>
    <refpurpose>
     Schreibt Daten an die Position des Dateizeigers
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fputs</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>
        length
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>fputs</function> ist ein Alias für die Funktion
     <function>fwrite</function>, und ist in jeder Hinsicht identisch
     mit ihr. Beachten Sie, dass der Parameter
     <parameter>length</parameter> optional ist, und dass, wenn er
     nicht benutzt wird, die gesamte Zeichenkette geschrieben wird.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fread">
   <refnamediv>
    <refname>fread</refname>
    <refpurpose>Liest Binärdaten aus einer Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>fread</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>fread</function> liest <parameter>length</parameter>
     Bytes vom Dateizeiger, maximal jedoch bis zum Dateiende.
     </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
// liest den Inhalt einer Datei in einen String
$filename = "/usr/local/simi.txt";
$fd = fopen ($filename, "r");
$contents = fread ($fd, filesize ($filename));
fclose ($fd);
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Auf Systemen, welche zwischen Binär- und Textdateien (z.B. Windows)
      unterscheiden, muss die Datei mit 'b' im <function>fopen</function>
      Mode-Parameter geöffnet werden.
     </para>
    </note>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$filename = "c:\\files\\somepic.gif";
$fd = fopen ($filename, "rb");
$contents = fread ($fd, filesize ($filename));
fclose ($fd);
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Siehe auch <function>fwrite</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>,
     <function>fgets</function>, <function>fgetss</function>,
     <function>fscanf</function>, <function>file</function> und
     <function>fpassthru</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fscanf">
   <refnamediv>
    <refname>fscanf</refname>
    <refpurpose>Interpretiert den Input einer Datei entsprechend einem 
    angegebenen Format </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>mixed</type><methodname>fscanf</methodname>
      <methodparam><type>int</type><parameter>handle</parameter></methodparam>
      <methodparam><type>string</type><parameter>format</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>var1</parameter></methodparam>
     </methodsynopsis>
    <para>
     Die Funktion <function>fscanf</function> ist 
     <function>sscanf</function> ähnlich, wobei sie ihren Input aus 
     der mit <parameter>handle</parameter> angegebenen Datei nimmt, und
     entsprechend dem angegebenen <parameter>format</parameter>
     interpretiert. Sind nur 2 Parameter angegeben, werden die analysierten 
     Werte als Array zurückgegeben. Werden auch optionale Parameter 
     übergeben, gibt die Funktion die Anzahl der ermittelten Werte zurück.
     Die optionalen Parameter müssen referenziert übergeben werden.
     <example>
      <title><function>fscanf</function></title>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("users.txt","r");
while ($userinfo = fscanf ($fp, "%s\t%s\t%s\n")) {
    list ($name, $profession, $countrycode) = $userinfo;
    //... Tue etwas mit den Werten
}
fclose($fp);
]]>
      </programlisting>
     </example>
     <example>
      <title>users.txt</title>
      <programlisting>
<![CDATA[
javier  argonaut        pe
hiroshi sculptor        jp
robert  slacker us
luigi   florist it
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>fread</function>, <function>fgets</function>,
     <function>fgetss</function>, <function>sscanf</function>,
     <function>printf</function>, und <function>sprintf</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fseek">
   <refnamediv>
    <refname>fseek</refname>
    <refpurpose>
     Positioniert den Dateizeiger
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fseek</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>offset</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>whence</parameter></methodparam>
     </methodsynopsis>
	<para>
     Setzt den Dateizeiger einer mit <parameter>fp</parameter> angegebenen
	 Datei auf eine neue Position. Diese neue Position, angegeben in Bytes
	 vom Begin der Datei an, wird definiert durch Hinzufügen von
     <parameter>offset</parameter> zu der Position spezifiziert durch
     <parameter>whence</parameter>, deren Werte wie folgt definiert sind:
    <simplelist>
      <member>SEEK_SET - Setzt Position gleich
      <parameter>offset</parameter> bytes.</member>
	  <member>SEEK_CUR - Setzt Position auf die aktuelle Stelle plus
      <parameter>offset</parameter>.</member>
	  <member>SEEK_END - Setzt die Position ans Ende der Datei plus
      <parameter>offset</parameter>. (Um zu einer Position vor EOF zu
      gelangen, übergeben Sie in <parameter>offset</parameter> einen
      negativen Wert.)</member>
     </simplelist>
    </para>
	<para>Wenn <parameter>whence</parameter> nicht angegeben wurde, wird
    SEEK_SET angenommen.
    </para>
	<para>
     Bei Erfolg wird '0' zurückgegeben, andernfalls '-1'. Beachten
     Sie, dass die Überschreitung des Dateiendes (EOF) nicht als
     Fehler bewertet wird.
    </para>
    <para>
     Diese Funktion sollte nicht auf Dateizeiger angewandt werden, die
     durch die Verwendung von "http://" oder "ftp://" bei der Funktion
     <function>fopen</function> erhalten wurden.
    </para>
    <note>
     <para>
      Das <parameter>whence</parameter>-Argument wurde nach PHP 4.0.0 
      eingeführt.
     </para>
    </note>
    <para>
     Siehe auch <function>ftell</function> und
     <function>rewind</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fstat">
   <refnamediv>
    <refname>fstat</refname>
    <refpurpose>
     Liefert Informationen über eine Datei mit offenem Dateizeiger
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>fstat</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     Trägt die Statistiken der mittel des Dateizeigers fp geöffneten 
     Datei zusammen. Diese Funktion ist ähnlich der Funktion 
     <function>stat</function>, außer dass sie mit einem offenen
     Dateizeiger anstatt eines Dateinamens arbeitet.
    </para>
    <para>
     Gibt die Statistiken einer Datei in Form eines Arrays mit den 
     folgenden Elementen zurück:
     <orderedlist>
      <listitem><simpara>Gerät</simpara></listitem>
      <listitem><simpara>Inode</simpara></listitem>
      <listitem><simpara>Anzahl Links</simpara></listitem>
      <listitem><simpara>User id des Eigentümers</simpara></listitem>
      <listitem><simpara>Gruppen id Eigentümer</simpara></listitem>
      <listitem><simpara>Gerätetype wenn ein Inode-Gerät *</simpara></listitem>
      <listitem><simpara>Größe in Bytes</simpara></listitem>
      <listitem><simpara>Zeit des letzten Zugriffs</simpara></listitem>
      <listitem><simpara>Zeit der letzten Modifikation</simpara></listitem>
      <listitem><simpara>Zeit der letzten Änderung</simpara></listitem>
      <listitem><simpara>Blockgröße für Dateisystem I/O *</simpara></listitem>
      <listitem><simpara>Anzahl der Blöcke</simpara></listitem>
     </orderedlist>
     * - nur gültig bei Systemen, welche den st_blksize Typ unterstützen, andere 
     Systeme (z.B. Windows) geben -1 zurück</para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert. Siehe
     <function>clearstatcache</function> für weitere Einzelheiten.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ftell">
   <refnamediv>
    <refname>ftell</refname>
    <refpurpose>
     Ermittelt die aktuelle Position des Dateizeigers
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>ftell</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt die aktuelle Position des Dateizeigers
     <parameter>fp</parameter> zurück, z.B. seinen Offset im
     Dateistream.
    </para>
    <para>
     Wenn ein Fehler auftritt, wird &false; zurückgegeben.
    </para>
    <para>
     Der Dateizeiger muss gültig sein und auf eine erfolgreich durch
     <function>fopen</function> oder <function>popen</function>
     geöffnete Datei zeigen.
    </para>
    <para>
     Siehe auch <function>fopen</function>,
     <function>popen</function>, <function>fseek</function> und
     <function>rewind</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ftruncate">
   <refnamediv>
    <refname>ftruncate</refname>
    <refpurpose>
     Kürzt eine Datei auf die angegebene Länge
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>ftruncate</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>size</parameter></methodparam>
     </methodsynopsis>
    <para>
     Nimmt den Dateizeiger <parameter>fp</parameter>, und verkürzt die 
     Datei auf die Länge <parameter>size</parameter>.
     Diese Funktion gibt bei Erfolg &true;, ansonsten &false; zurück.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fwrite">
   <refnamediv>
    <refname>fwrite</refname>
    <refpurpose>Schreibt Binärdaten in eine Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fwrite</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>string</type><parameter>string</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>
        length
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>fwrite</function> schreibt den Inhalt einer
     Zeichenkette <parameter>string</parameter> in die Datei, auf
     welche der <parameter>fp</parameter> Dateizeiger zeigt. Wenn der
     <parameter>length</parameter> Parameter gegeben ist, wird das
     Schreiben nach <parameter>length</parameter> Bytes beendet, oder
     wenn das Dateiende (EOF) erreicht ist, je nachdem, was eher
     eintritt.
    </simpara>
    <simpara>
     <function>fwrite</function> gibt bei Erfolg die Anzahl der
     geschriebenen Bytes zurück, andernfalls -1.
    </simpara>
    <simpara>
     Bedenken Sie, dass wenn der <parameter>length</parameter>
     Parameter gesetzt ist, die <link
     linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link>
     Konfigurations-Option ignoriert wird und somit keine Slashes mehr
     von der Zeichenkette <parameter>string</parameter> entfernt
     werden.
    </simpara>
    <note>
     <para>
      Auf Systemen, welche zwischen Binär- und Textdateien (z.B. Windows)
      unterscheiden, muss die Datei mit 'b' im <function>fopen</function>
      Mode-Parameter geöffnet werden.
     </para>
    </note>
    <simpara>
     Siehe auch <function>fread</function>,
     <function>fopen</function>, <function>fsockopen</function>,
     <function>popen</function> und <function>fputs</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.set-file-buffer">
   <refnamediv>
    <refname>set_file_buffer</refname>
    <refpurpose>
     Setzt die Dateipufferung für einen gegebenen Dateizeiger
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>set_file_buffer</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>buffer</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Eine Ausgabe mittels <function>fwrite</function> wird normalerweise 
     mit 8k gepuffert. Das heißt, dass wenn zwei Prozesse in den gleichen
     Output Stream (eine Datei) schreiben wollen, jeder nach 8k Daten
     unterbrochen wird, um den anderen schreiben zu lassen.
     <function>set_file_buffer</function> setzt die Pufferung für
     Schreiboperationen des gegebenen Dateizeigers
     <parameter>fp</parameter> auf <parameter>buffer</parameter>
     Bytes. Wenn <parameter>buffer</parameter> 0 ist, erfolgen die 
     Schreiboperationen ungepuffert. Dies stellt sicher, dass alle 
     Schreiboperationen mit <function>fwrite</function> abgeschlossen 
     werden, bevor andere Prozesse in diesen Output Stream schreiben können.
    </simpara>
    <simpara>
     Die Funktion gibt bei Erfolg 0, oder EOF wenn die Anfrage nicht
     erfolgreich war, zurück.
    </simpara>
    <para>
     Das folgende Beispiel zeigt, wie man mittels
     <function>set_file_buffer</function> einen ungepufferten Stream
     generiert.
     <example>
      <title><function>set_file_buffer</function></title>
      <programlisting role="php">
<![CDATA[
$fp=fopen($file, "w");
if($fp){
  set_file_buffer($fp, 0);
  fputs($fp, $output);
  fclose($fp);
}
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Siehe auch <function>fopen</function>, <function>fwrite</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-dir">
   <refnamediv>
    <refname>is_dir</refname>
    <refpurpose>
     Prüft, ob der gegebene Dateiname ein Verzeichnis ist
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_dir</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt &true; zurück, wenn der Dateiname existiert und es sich
     hierbei um ein Verzeichnis handelt.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe auch <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <para>
     Siehe auch <function>is_file</function> und
     <function>is_link</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-executable">
   <refnamediv>
    <refname>is_executable</refname>
    <refpurpose>
     Prüft, ob eine Datei ausführbar ist
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_executable</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt &true; zurück, wenn die Datei existiert und ausführbar ist.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe auch <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
    <para>
     Siehe auch <function>is_file</function> und
     <function>is_link</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-file">
   <refnamediv>
    <refname>is_file</refname>
    <refpurpose>
     Prüft, ob der Dateiname eine reguläre Datei ist 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt &true; zurück, wenn die Datei existiert und eine reguläre
     Datei ist.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe auch <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <para>
     Siehe auch <function>is_dir</function> und
     <function>is_link</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-link">
   <refnamediv>
    <refname>is_link</refname>
    <refpurpose>
     Prüft, ob der Dateiname ein symbolischer Link ist
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_link</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt &true; zurück, wenn der Dateiname existiert und es sich um
     einen symbolischen Link handelt.
    </para>
     <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe auch <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <para>
     Siehe auch <function>is_dir</function>,
     <function>is_file</function> und <function>readlink</function>.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.is-readable">
   <refnamediv>
    <refname>is_readable</refname>
    <refpurpose>
     Prüft, ob eine Datei lesbar ist
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_readable</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt &true; zurück wenn die Datei existiert und sie lesbar ist.
    </para>
    <para>
     Bedenken Sie, dass PHP mit der Benutzer ID auf die Datei
     zugreift, unter welcher der Webserver läuft (oftmals ist dieses
     'nobody').  Beschränkungen durch safe_mode werden nicht
     berücksichtigt.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe auch <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
    <para>
     Siehe auch <function>is_writable</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-writable">
   <refnamediv>
    <refname>is_writable</refname>
    <refpurpose>
     Prüft, ob in eine Datei geschrieben werden kann
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_writable</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt &true; zurück, wenn die Datei existiert und nicht
     schreibgeschützt ist. Das Dateinamen-Argument 
     <parameter>filename</parameter> kann ein Verzeichnisname
     sein. So können Sie überprüfen, ob in ein Verzeichnis
     geschrieben werden kann.
    </para>
    <para>
     Bedenken Sie, dass PHP mit der Benutzer ID auf die Datei
     zugreift, unter welcher der Webserver läuft (oftmals ist dieses
     'nobody').  Beschränkungen durch safe_mode werden nicht
     berücksichtigt.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe auch <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
    <simpara>
     Diese Funktion ist nicht für <link 
     linkend="features.remote-files">remote Dateien</link> geeignet, die zu 
     prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
    </simpara>
    <para>
     Siehe auch <function>is_readable</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-writeable">
   <refnamediv>
    <refname>is_writeable</refname>
    <refpurpose>Prüft, ob in eine Datei geschrieben werden kann</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_writeable</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Dies ist ein Alias für <function>is_writable</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-uploaded-file">
   <refnamediv>
    <refname>is_uploaded_file</refname>
    <refpurpose>Prüft, ob die Datei mittels HTTP POST upgeloaded wurde.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_uploaded_file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt &true; zurück, wenn die Datei <varname>filename</varname> mittels
     HTTP POST upgeloaded wurde. Das ist hilfreich sicherzustellen, dass 
     kein böswilliger User versucht hat das Script zu überlisten, indem 
     er es Dateien bearbeiten lässt, die es gar nicht bearbeiten sollte.
     Zum Beispiel <filename>/etc/passwd</filename>.
    </para>
    <para>
     Diese Prüfung ist speziell dort interessant, wo irgendeine Aktion mit 
     upgeloadeten Dateien deren Inhalt dem User zugänglich machen könnte 
     (oder auch anderen Usern auf dem selben System).
    </para>
    <para>
     <function>is_uploaded_file</function> ist in PHP 3 nur nach Version
     3.0.16, und in PHP 4 nur nach Version 4.0.2 verfügbar. Sollten Sie
     eine frühere Version benutzen, können Sie sich mit der folgenden
     Funktion weiterhelfen:
     <note>
      <para>
       Das folgende Beispiel funktioniert <emphasis>nicht</emphasis> in
       Versionen nach PHP 4.0.2. Das liegt an der internen Funktionalität
       von PHP, welche sich nach dieser Version geändert hat.
      </para>
     </note>
     <programlisting role="php">
<![CDATA[
<?php
/* Userland Test für hochgeladene Datei. */
function is_uploaded_file($filename) {
    if (!$tmp_file = get_cfg_var('upload_tmp_dir')) {
        $tmp_file = dirname(tempnam('', ''));
    }
    $tmp_file .= '/' . basename($filename);
    /* Der Benutzer könnte einen führenden Slash in php.ini haben... */
    return (ereg_replace('/+', '/', $tmp_file) == $filename);
}

/* So verwenden Sie sie, nachdem Sie in diesen älteren
 * Versionen auch keine move_uploaded_file() haben: */
if (is_uploaded_file($HTTP_POST_FILES['userfile'])) {
    copy($HTTP_POST_FILES['userfile'], "/place/to/put/uploaded/file");
} else {
    echo "Mögliche Dateiupload-Attacke: Dateiname '$HTTP_POST_FILES[userfile]'.";
}
?>
]]>
     </programlisting>
    </para>
    <para>
     Siehe auch <function>move_uploaded_file</function>, und das Kapitel
     <link linkend="features.file-upload">Steuerung von Dateiuploads</link>
     für ein einfaches Anwendungsbeispiel.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.link">
   <refnamediv>
    <refname>link</refname>
    <refpurpose>Erzeugt einen absoluten Link</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>link</methodname>
      <methodparam><type>string</type><parameter>target</parameter></methodparam>
      <methodparam><type>string</type><parameter>link</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>link</function> erzeugt einen absoluten Link mit dem
     Ziel <parameter>target</parameter>.
    </para>
    <para>
     Siehe auch <function>symlink</function> um symbolische Links zu
     erstellen und <function>readlink</function> zusammen mit
     <function>linkinfo</function>.
    </para>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.linkinfo">
   <refnamediv>
    <refname>linkinfo</refname>
    <refpurpose>Liefert Informationen über einen Link</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>linkinfo</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>linkinfo</function> gibt das st_dev Feld des UNIX C
     stat structure resultierend aus dem lstat System Call
     zurück. Diese Funktion wird benutzt, um zu verifizieren ob ein
     Link (auf den mit <parameter>path</parameter> gezeigt wird)
     wirklich existiert (Hierbei wird die gleiche Methode benutzt,
     die in dem S_ISLNK Makro in stat.h definiert ist).  Gibt 0 oder
     &false; zurück wenn ein Fehler auftrat.
    </para>
    <para>
     Siehe auch <function>symlink</function>,
     <function>link</function>, und <function>readlink</function>.
    </para>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.mkdir">
   <refnamediv>
    <refname>mkdir</refname>
    <refpurpose>Erstellt ein Verzeichnis</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>mkdir</methodname>
      <methodparam><type>string</type><parameter>pathname</parameter></methodparam>
      <methodparam><type>int</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
    <para>
     Versucht ein Verzeichnis mit dem spezifiziertem Namen zu
     erstellen.
    </para>
    <para>
     Bedenken Sie, dass sie wahrscheinlich den Mode als oktalen
     Wert spezifizieren wollen, was bedeutet, dass er eine
     voranstehende Null haben sollte. Der Mode wird ebenfalls mit
     der aktuellen umask modifiziert, welchen Sie mittels 
     <function>umask</function> ändern können.
     <informalexample>
      <programlisting role="php">
<![CDATA[
mkdir ("/path/to/my/dir", 0700);
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Gibt &true; bei Erfolg, andernfalls &false; zurück.
    </para>
    <para>
     Siehe auch <function>rmdir</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.move-uploaded-file">
   <refnamediv>
    <refname>move_uploaded_file</refname>
    <refpurpose>Verschiebt eine upgeloadete Datei an einen neuen Ort.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>move_uploaded_file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>string</type><parameter>destination</parameter></methodparam>
     </methodsynopsis>
    <para>
     Diese Funktion prüft, ob die mit <parameter>filename</parameter>
     bezeichnete Datei eine gültige Upload-Datei ist (d.h., dass sie
     mittels PHP's HTTP POST Upload-Mechanismus upgeloaded wurde).
     Ist die Datei gültig, wird sie zum in 
     <parameter>destination</parameter> bezeichneten Dateinamen 
     verschoben.
    </para>

    <para>
     Wenn <parameter>filename</parameter> keine gültige Datei ist, wird
     keine Aktion ausgeführt, und 
     <function>move_uploaded_file</function> gibt
     &false; zurück.
    </para>

    <para>
     Wenn <parameter>filename</parameter> eine gültige Datei ist, jedoch
     aus irgendeinem Grund nicht verschoben werden kann, wird keine 
     Aktion ausgeführt, und <function>move_uploaded_file</function>
     gibt &false; zurück. Zusätzlich wird eine Warnung 
     ausgegeben.
    </para>

    <para>
     Diese Prüfung ist speziell dort interessant, wo irgendeine Aktion mit 
     upgeloadeten Dateien deren Inhalt dem User zugänglich machen könnte 
     (oder auch anderen Usern auf dem selben System).
    </para>

    <note>
     <para>
      <function>move_uploaded_file</function> ist von den normalen safe-mode 
      UID-Einschränkungen nicht betroffen. Dies ist nicht unsicher, da
      <function>move_uploaded_file</function> nur mit via PHP hochgeladenen
      Dateien arbeitet.
     </para>
    </note>

    <warning>
     <para>
      Sollte die Zieldatei bereits existieren, wird sie überschrieben.
     </para>
    </warning>

    <para>
     Siehe auch <function>is_uploaded_file</function>, und das Kapitel
     <link linkend="features.file-upload">Steuerung von Dateiuploads</link>
     für ein einfaches Anwendungsbeispiel.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.parse-ini-file">
   <refnamediv>
    <refname>parse_ini_file</refname>
    <refpurpose>Analysiert eine Konfiguratiionsdatei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>parse_ini_file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>
        process_sections
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>parse_ini_file</function> lädt die in
     <parameter>filename</parameter> angegebene Datei, und gibt
     die darin enthaltenen Einstellungen in einem assoziativen
     Array zurück. Setzen Sie den letzten Parameter
     <parameter>process_sections</parameter> auf &true;, erhalten
     Sie ein mehrdimensionales Array mit den Gruppennamen und
     Einstellungen. Ist <parameter>process_sections</parameter>
     nicht angegeben, wird &false; angenommen.
    </para>
    <note>
     <para>
      Diese Funktion hat nichts mit der <filename>php.ini</filename>
      zu tun, denn diese ist bereits abgearbeitet, wenn Sie Ihr Skript
      ausführen. Diese Funktion ist vorgesehen, um Konfigurationsdateien
      für Ihre eigenen Applikationen einzulesen.
     </para>
    </note>
    <para>
     Die Struktur der ini Datei ist der von
     <filename>php.ini</filename> ähnlich.
    </para>
    <para>
     <example>
      <title>Inhalt der sample.ini</title>
      <programlisting>
<![CDATA[
; Dies ist ein Beispiel für eine Konfigurationsdatei
; Kommentare beginnen wie in der php.ini mit ';'

[erste_gruppe]
eins = 1
fünf = 5

[zweite_gruppe]
pfad = /usr/local/bin
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title><function>parse_ini_file</function></title>
      <programlisting>
<![CDATA[
<?php

// Ohne Gruppen analysieren
$ini_array = parse_ini_file("sample.ini");
print_r($ini_array);

// Mit Gruppen analysieren
$ini_array = parse_ini_file("sample.ini", TRUE);
print_r($ini_array);

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Würde wie folgt ausgeben:
     <informalexample>
      <programlisting>
<![CDATA[
Array
(
    [eins] => 1
    [fünf] => 5
    [pfad] => /usr/local/bin
)
Array
(
    [erste_gruppe] => Array
        (
            [eins] => 1
            [fünf] => 5
        )

    [zweite_gruppe] => Array
        (
            [pfad] => /usr/local/bin
        )

)
]]>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pathinfo">
   <refnamediv>
    <refname>pathinfo</refname>
    <refpurpose>Liefert Informationen über den Dateipfad</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>pathinfo</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>pathinfo</function> gibt ein assoziatives Array
     mit Informationen über den Pfad <parameter>path</parameter>
     zurück. Die folgenden Arrayelemente werden zurückgegeben:
     den Verzeichnisnamen <parameter>dirname</parameter>, den Dateinamen 
     <parameter>basename</parameter>, und die Dateinamenserweiterung 
     <parameter>extension</parameter>.
    </para>
    <para>
     <example>
      <title><function>pathinfo</function></title>
      <programlisting role="php">
<![CDATA[
<?php

$path_parts = pathinfo("/www/htdocs/index.html");

echo $path_parts["dirname"] . "\n";
echo $path_parts["basename"] . "\n";
echo $path_parts["extension"] . "\n";

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Würde ausgeben:
     <informalexample>
      <programlisting>
<![CDATA[
/www/htdocs
index.html
html
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch <function>dirname</function>,
     <function>basename</function>, <function>parse_url</function>
     und <function>realpath</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pclose">
   <refnamediv>
    <refname>pclose</refname>
    <refpurpose>Schließt einen Prozess-Dateizeiger</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>pclose</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     Schließt einen Prozess-Dateizeiger, der durch einen Aufruf von
     <function>popen</function> geöffnet wurde.
    </para>
    <para>
     Der Dateizeiger muss gültig sein und durch einen erfolgreichen
     Funktionsaufruf von <function>popen</function> zurückgegeben
     worden sein.
    </para>
    <para>
     Gibt den End-Status eines laufenden Prozesses zurück.
    </para>
    <para>
     Siehe auch <function>popen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.popen">
   <refnamediv>
    <refname>popen</refname>
    <refpurpose>Öffnet einen Prozesszeiger</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>popen</methodname>
      <methodparam><type>string</type><parameter>command</parameter></methodparam>
      <methodparam><type>string</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
    <para>
     Öffnet eine Verbindung zu einem Prozess, der durch die Anweisung
     <parameter>command</parameter> ausgeführt wurde.
    </para>
    <para>
     Gibt einen Dateizeiger zurück, der identisch ist mit dem, der bei
     der Funktion <function>fopen</function> zurückgegeben wird,
     außer dass dieser nur in eine Richtung funktioniert (entweder
     lesend oder schreibend) und mit der Funktion
     <function>pclose</function> geschlossen werden muss.  Dieser
     Zeiger kann mit den Funktionen <function>fgets</function>,
     <function>fgetss</function> und <function>fputs</function>
     benutzt werden.
    </para>
    <para>
     Wenn ein Fehler auftritt, gibt diese Funktion &false; zurück.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$fp = popen ("/bin/ls", "r");
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Wenn das auszuführende Kommando nicht gefunden werden konnte,
      wird eine gültige Ressource zurückgegeben. Das mag seltsam
      erscheinen, macht aber Sinn. Es ermöglicht Ihnen, auf von der
      Shell zurückgegebene Fehlermeldungen zuzugreifen:
      <informalexample>
       <programlisting role="php">
<![CDATA[
<?php
error_reporting(E_ALL);

/* Umleitung hinzufügen, dass wir stderr erhalten können */
$fp = popen('/path/to/spooge 2>&1', 'r');
echo "'$fp'; " . gettype($fp) . "\n";
$read = fread($fp, 2096);
echo $read;
pclose($fp);
?>
]]>
       </programlisting>
      </informalexample>
     </para>
    </note>
    <para>
     Siehe auch <function>pclose</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.readfile">
   <refnamediv>
    <refname>readfile</refname>
    <refpurpose>Gibt eine Datei aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>readfile</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>
        use_include_path
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     Liest den Inhalt einer Datei und gibt ihn an der Standartausgabe
     (Browser) aus.
    </para>
    <para>
     Gibt die Anzahl der Bytes einer Datei zurück. Wenn ein Fehler
     auftritt wird &false; zurückgegeben und eine Fehlermeldung wird auf
     der Standartausgabe ausgegeben. Die Ausgabe einer Fehlermeldung
     kann durch Voranstellen eines '@' verhindert werden (@readfile).
    </para>
    <para>
     Wenn <parameter>filename</parameter> mit "http://" (nicht case
     sensitive) beginnt, wird eine HTTP 1.0 Verbindung zu dem
     spezifiziertem Server hergestellt und der Text der Antwort wird auf
     die Standartausgabe geschrieben.
    </para>
    <para>
     In älteren Versionen als PHP 4.0.5 werden Weiterleitungen (HTTP 
     Redirects) nicht unterstützt, hier muss die Datei daher vollständig 
     und mit abschließendem "/" beschrieben werden.
    </para>
    <para>
     Wenn <parameter>filename</parameter> mit "ftp://" (nicht case
     sensitive) beginnt, wird eine FTP Verbindung zu dem
     spezifiziertem Server hergestellt und die angeforderte Datei wird
     auf der Standartausgabe ausgegeben. Wenn der Server keinen
     passiven Mode unterstützt, wird diese Funktion fehlschlagen.
    </para>
    <para>
     Wenn <parameter>filename</parameter> mit keinem dieser
     Zeichenketten beginnt, wird die Datei vom lokalen Dateisystem
     geöffnet und ihr Inhalt auf der Standartausgabe ausgegeben.
    </para>
    <para>
     Sie können optional den zweiten Parameter benutzen und diesen
     auf '1' setzen, wenn Sie auch im <link
     linkend="ini.include-path"> include_path</link> nach der Datei
     suchen möchten.
    </para>
    <para>
     Siehe auch <function>fpassthru</function>,
     <function>file</function>, <function>fopen</function>,
     <function>include</function>, <function>require</function> und
     <function>virtual</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.readlink">
   <refnamediv>
    <refname>readlink</refname>
    <refpurpose>
     Liefert das Ziel eines symbolischen Links
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>readlink</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>readlink</function> ist von der Funktionalität her
     identisch mit der 'readlink C Funktion' und gibt den Inhalt des
     Pfades des symbolischen Links zurück oder 0, wenn der Aufruf
     fehlschlug.
    </para>
    <para>
     Siehe auch <function>is_link</function>,
     <function>symlink</function> und <function>linkinfo</function>.
    </para>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.rename">
   <refnamediv>
    <refname>rename</refname>
    <refpurpose>Benennt eine Datei um</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>rename</methodname>
      <methodparam><type>string</type><parameter>oldname</parameter></methodparam>
      <methodparam><type>string</type><parameter>newname</parameter></methodparam>
     </methodsynopsis>
    <para>
     Versucht eine Datei <parameter>oldname</parameter> in
     <parameter>newname</parameter> umzubenennen.
    </para>
    <para>
     Gibt &true; bei Erfolg, andernfalls &false; zurück.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rewind">
   <refnamediv>
    <refname>rewind</refname>
    <refpurpose>
     Setzt den Dateizeiger auf das erste Byte der Datei
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>rewind</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
     </methodsynopsis>
    <para>
     Setzt den Dateizeiger (Datei-Positions-Indikator) für
     <parameter>fp</parameter> an den Anfang des Dateistreams.
    </para>
    <para>
     Wenn ein Fehler auftritt, gibt die Funktion 0 zurück.
    </para>
    <para>
     Der Dateizeiger muss gültig sein und auf eine Datei zeigen, die
     zuvor erfolgreich durch <function>fopen</function> geöffnet
     wurde.
    </para>
    <note>
     <para>
      Haben Sie eine Datei im Append-Modus ("a") geöffnet, werden
      unabhängig von der Dateiposition alle zu schreibenden Daten
      angehängt.
     </para>
    </note>
    <para>
     Siehe auch <function>fseek</function> und
     <function>ftell</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rmdir">
   <refnamediv>
    <refname>rmdir</refname>
    <refpurpose>Löscht ein Verzeichnis</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>rmdir</methodname>
      <methodparam><type>string</type><parameter>dirname</parameter></methodparam>
     </methodsynopsis>
    <para>
     Versucht ein Verzeichnis spezifiziert durch die Pfadangabe zu
     löschen. Das Verzeichnis muss leer sein und die relevanten Rechte
     müssen erteilt sein.
    </para>
    <para>
     Wenn ein Fehler auftritt wird 0 zurückgegeben.
    </para>
    <para>
     Siehe auch <function>mkdir</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.stat">
   <refnamediv>
    <refname>stat</refname>
    <refpurpose>
     Liefert diverse Informationen über eine Datei
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>stat</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Sammelt Informationen über eine Datei spezifiziert in
     <parameter>filename</parameter>.
    </para>
    <para>
     Gibt einen Array mit folgenden statistischen Informationen als
     Array- Elemente zurück:
     <orderedlist>
      <listitem>
       <simpara>Laufwerk</simpara>
      </listitem>
      <listitem>
       <simpara>inode</simpara>
      </listitem>
      <listitem>
       <simpara>inode protection mode</simpara>
      </listitem>
      <listitem>
       <simpara>Anzahl der Links</simpara>
      </listitem>
      <listitem>
       <simpara>Benutzer ID des Inhabers</simpara>
      </listitem>
      <listitem>
       <simpara>Gruppen ID des Inhabers</simpara>
      </listitem>
      <listitem>
       <simpara>Laufwerkstyp wenn Inode-Laufwerk *</simpara>
      </listitem>
      <listitem>
       <simpara>Größe in Bytes</simpara>
      </listitem>
      <listitem>
       <simpara>Zeitpunkt des letzten Zugriffs</simpara>
      </listitem>
      <listitem>
       <simpara>Zeitpunkt der letzten Modifizierung</simpara>
      </listitem>
      <listitem>
       <simpara>Zeitpunkt der letzten Änderung</simpara>
      </listitem>
      <listitem>
       <simpara>Blockgröße für das Dateisystem I/O *</simpara>
      </listitem>
      <listitem>
       <simpara>Anzahl der zugewiesenen Blöcke</simpara>
      </listitem>
     </orderedlist>
     * - nur gültig auf Systemen, die st_blksize unterstützen. Andere
     Systeme (z.B. Windows) geben '-1' zurück.
    </para>
    <para>
     Gibt &false; zurück, wenn ein Fehler auftrat.
    </para>
    <para>
     <function>stat</function> ist nicht für <link
     linkend="features.remote-files">remote Dateien</link> geeignet.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe auch <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.lstat">
   <refnamediv>
    <refname>lstat</refname>
    <refpurpose>
     Liefert Informationen über eine Datei oder einen symbolischen Link.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>lstat</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Ermittelt statistische Informationen über eine Datei oder
     symbolischen Link, spezifiziert in <parameter>filename</parameter>.
     Diese Funktion ist identisch mit der Funktion 
     <function>stat</function>, außer dass wenn der Parameter 
     <parameter>filename</parameter> ein symbolischer Link ist, dessen 
     Status zurückgegeben wird und nicht der Status der Datei, auf die 
     der symbolische Link zeigt.
    </para>
    <para>
     Gibt einen Array mit statistischen Informationen über die Datei
     als Array-Elemente zurück:
     <orderedlist>
      <listitem>
       <simpara>Laufwerk</simpara>
      </listitem>
      <listitem>
       <simpara>inode</simpara>
      </listitem>
      <listitem>
       <simpara>Anzahl der Links</simpara>
      </listitem>
      <listitem>
       <simpara>Benutzer ID des Inhabers</simpara>
      </listitem>
      <listitem>
       <simpara>Gruppen ID des Inhabers</simpara>
      </listitem>
      <listitem>
       <simpara>Laufwerkstyp wenn inode Laufwerk *</simpara>
      </listitem>
      <listitem>
       <simpara>Größe in Bytes</simpara>
      </listitem>
      <listitem>
       <simpara>Zeitpunkt des letzten Zugriffs</simpara>
      </listitem>
      <listitem>
       <simpara>Zeitpunkt der letzten Modifikation</simpara>
      </listitem>
      <listitem>
       <simpara>Zeitpunkt der letzen Änderung</simpara>
      </listitem>
      <listitem>
       <simpara>Blockgröße für das Dateisystem I/O *</simpara>
      </listitem>
      <listitem>
       <simpara>Anzahl der zugewiesenen Blöcke</simpara>
      </listitem>
     </orderedlist>
     * - nur gültig auf Systemen, die st_blksize unterstützen. Andere
     Systeme (z.B. Windows) geben '-1' zurück.
    </para>
    <para>
     <function>lstat</function> ist nicht für <link
     linkend="features.remote-files">remote Dateien</link> geeignet.
    </para>
    <para>
     Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
     Siehe auch <function>clearstatcache</function> für weitere
     Einzelheiten.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.realpath">
   <refnamediv>
    <refname>realpath</refname>
    <refpurpose>Erzeugt einen kanonisch absoluten Pfadnamen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>realpath</methodname>
      <methodparam><type>string</type><parameter>path</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>realpath</function> expandiert alle symbolischen Links, und 
     beseitigt Verweise zu '/./', '/../' und extra '/' Zeichen im Input 
     <parameter>path</parameter>, und gibt den absoluten Pfadnamen 
     kanonisch zurück. Der Pfad im Ergebnis enthält keine Komponenten 
     eines symbolischen Links mehr, wie '/./' or '/../'.
    </para>
    <para>
     <example>
      <title><function>realpath</function></title>
      <programlisting role="php">
<![CDATA[
$real_path = realpath("../../index.php");
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.symlink">
   <refnamediv>
    <refname>symlink</refname>
    <refpurpose>Erzeugt einen symbolischen Link</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>symlink</methodname>
      <methodparam><type>string</type><parameter>target</parameter></methodparam>
      <methodparam><type>string</type><parameter>link</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>symlink</function> erzeugt einen symbolischen Link von
     dem gegebenen Parameter <parameter>target</parameter> mit dem
     spezifiziertem Namen <parameter>link</parameter>.
    </para>
    <para>
     Siehe auch <function>link</function> um absolute Links zu
     erstellen, und <function>readlink</function> zusammen mit
     <function>linkinfo</function>.
    </para>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.tempnam">
   <refnamediv>
    <refname>tempnam</refname>
    <refpurpose>Erzeugt eine Datei mit eindeutigem Dateinamen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>tempnam</methodname>
      <methodparam><type>string</type><parameter>dir</parameter></methodparam>
      <methodparam><type>string</type><parameter>prefix</parameter></methodparam>
     </methodsynopsis>
    <para>
     Erzeugt eine Datei mit einem eindeutigen Dateinamen in dem
     spezifizierten Verzeichnis. Wenn das Verzeichnis nicht existiert,
     erstellt <function>tempnam</function> eine Datei im temporären
     Verzeichnis des Systems, und gibt den Dateinamen zurück.
    </para>
    <para>
     Vor PHP 4.0.6 war das Verhalten von <function>tempnam</function>
     systemabhängig. Unter Windows wird die TMP-Umgebungsvariable den
     <parameter>dir</parameter> Parameter überschreiben, unter
     Linux-Systemen hat die TMPDIR Umgebungsvariable Vorrang, während
     SVR4 immer den spezifizierten Verzeichnisnamen benutzen wird,
     wenn dieses existiert. Wenn Sie nicht genau wissen, wie Ihr
     System <function>tempnam</function> behandelt, dann konsultieren
     Sie bitte Ihre System-Dokumentation.
    </para>
    <para>
     Gibt den neuen temporären Dateinamen bei Erfolg, oder eine
     &false; Zeichenkette wenn ein Fehler auftritt zurück.
     <example>
      <title><function>tempnam</function></title>
      <programlisting role="php">
<![CDATA[
$tmpfname = tempnam ("/tmp", "FOO");

$fp = fopen($tmpfname, "w");
fwrite($fp, "schreibe in Tämporärdatei");
fclose($fp);

// tue hier etwas

unlink($tmpfname);
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      Diese Funktion hat ihr Verhalten seit PHP 4.0.3 geändert.
      Die temporäre Datei wird ebenfalls angelegt um eine 
      "Hetzsituation" zu vermeiden, wo in der Zeit nach dem Generieren
      des Strings, und bevor das Script dazukommt die Datei anzulegen,
      die Datei im Dateisystem erscheinen könnte. Beachten Sie, dass
      falls Sie die Datei nicht mehr benötigen, Sie diese wieder entfernen
      müssen (dies geschieht nicht automatisch).
     </simpara>
    </note>
	<para>
     Siehe auch <function>tmpfile</function> und <function>unlink</function>.
	</para>
   </refsect1>
  </refentry>

  <refentry id="function.tmpfile">
   <refnamediv>
    <refname>tmpfile</refname>
    <refpurpose>Legt eine temporäre Datei an</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>tmpfile</methodname>
      <void/>
     </methodsynopsis>
    <para>
	 Erstellt eine temporäre Datei mit einem eindeutigen
	 Dateinamen im Schreibmodus und gibt einen Dateizeiger
	 ähnlich wie es bei der Funktion <function>fopen</function>
	 erfolgt, zurück. Die Datei wird automatisch gelöscht, wenn
	 sie geschlossen wird (mit <function>fclose</function>), oder
	 das Skript beendet wird.
    </para>
	<para>
	 Für Details konsultieren Sie bitte die Dokumentation Ihres
	 Betriebssystems bzgl. der <literal>tmpfile(3)</literal> Funktion,
	 wie auch die <filename>stdio.h</filename> Header-Datei.
    </para>
    <para>
     <example>
      <title><function>tmpfile</function></title>
      <programlisting role="php">
<![CDATA[
$temp = tmpfile();
fwrite($temp, "schreibt in Temporärdatei");
fclose($temp); // dies entfernt die Datei
]]>
      </programlisting>
     </example>
    </para>
	<para>
	 Siehe auch <function>tempnam</function>.
	</para>
   </refsect1>
  </refentry>

  <refentry id="function.touch">
   <refnamediv>
    <refname>touch</refname>
    <refpurpose>
     Setzt die Zugriffs- und Modifizierungszeit einer Datei
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>touch</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>
      	 time
      	</parameter></methodparam>
     </methodsynopsis>
    <para>
     Setzt Datum und Uhrzeit der letzten Änderung und des letzten Zugriffs
     der durch <parameter>filename</parameter> spezifizierten Datei auf den
     durch <parameter>time</parameter> spezifizierten Wert. Wenn die Option
     <parameter>time</parameter> nicht angegeben wurde, wird die aktuelle
     Zeit benutzt. Dies ist äquivalent zu dem, was utime tut (manchmal wird
     auch als utimes davon gesprochen).
    </para>
    <para>
     Wenn die Datei nicht existiert, wird sie erzeugt.
    </para>
    <para>
     Gibt &true; bei Erfolg, andernfalls &false; zurück.
     <example>
      <title><function>touch</function></title>
      <programlisting role="php">
<![CDATA[
if (touch ($DateiName)) {
    print "$DateiName Modifizierungs-Zeit wurde auf das aktuelle 
          Datum und die aktuelle Uhrzeit gesetzt.";
} else {
    print "Tut mir leid, Modifikations-Zeit von $DateiName konnte 
          nicht geändert werden.";
}
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.umask">
   <refnamediv>
    <refname>umask</refname>
    <refpurpose>
     Ändert die aktuelle umask (Zugriffsrechte)
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>umask</methodname>
      <methodparam><type>int</type><parameter>mask</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>umask</function> setzt PHP's umask auf
     <parameter>mask</parameter> &amp; 0777 und gibt die alte umask
     zurück. Wenn PHP als Servermodul benutzt wird, wird die umask
     zurückgespeichert wenn die jeweilige Anfrage beendet ist.
    </para>
    <para>
     <function>umask</function> ohne Argumente gibt einfach die
     aktuelle umask zurück.
    </para>
    &note.no-windows;
   </refsect1>
  </refentry>

  <refentry id="function.unlink">
   <refnamediv>
    <refname>unlink</refname>
    <refpurpose>Löscht eine Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>unlink</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Löscht <parameter>filename</parameter>. Ähnlich der UNIX C
     unlink() Funktion.
    </para>
    <para>
     &return.success;
    </para>
    <para>
     Siehe auch <function>rmdir</function> um Verzeichnisse zu löschen.
    </para>
   </refsect1>
  </refentry>
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

