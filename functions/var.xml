 <reference id="ref.var">
  <title>Variablen-Funktionen</title>
  <titleabbrev>Variablen</titleabbrev>

  <refentry id="function.doubleval">
   <refnamediv>
    <refname>doubleval</refname>
    <refpurpose>Konvertiert einen Wert nach double</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>double <function>doubleval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion interpretiert ihr Argument als Fließkommazahl
     und liefert den Wert als double zurück.
    </para>
    <para>
     Als <parameter>var</parameter> können beliebige skalare Ausdrücke,
     aber keine Arrays oder Objekte übergeben werden. 
     <informalexample>
      <programlisting role="php">
$var = '122.34343The';
$double_value_of_var = doubleval ($var);
print $double_value_of_var; // Ausgabe: 122.34343
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch <function>intval</function>,
     <function>strval</function>, <function>settype</function> und
     <link linkend="language.types.type-juggling">Typ-Veränderung</link>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.empty">
   <refnamediv>
    <refname>empty</refname>
    <refpurpose>Prüft, ob eine Variable einen Wert enthält</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>empty</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion liefert &true;, wenn eine Variable nicht definiert, 
     leer oder gleich 0 ist, ansonsten &false;.
     <informalexample>
      <programlisting role="php">
$var = 0;
if (empty ($var)) { #evaluates true 
    print '$var is either 0 or not at all set';
}
if (!isset ($var)) { // evaluates false
    print 'The $var is not set at all';
}
      </programlisting>
     </informalexample>
    </para>
    <para>
     <function>empty</function> kann nur auf Variablen, nicht aber
     auf Ausdrücke angewandt werden.
    </para>
    <para>
     Siehe auch <function>isset</function> und
     <function>unset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.gettype">
   <refnamediv>
    <refname>gettype</refname>
    <refpurpose>Liefert den Datentyp einer Variablen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>gettype</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion liefert den Namen des Typs der Variablen
     <parameter>var</parameter> zurück.
    </para>
    <para>
     Mögliche Ergebnisse sind:
     <itemizedlist>
      <listitem>
       <para>"integer"</para>
      </listitem>
      <listitem>
       <para>"double"</para>
      </listitem>
      <listitem>
       <para>"string"</para>
      </listitem>
      <listitem>
       <para>"array"</para>
      </listitem>
      <listitem>
       <para>"object"</para>
      </listitem>
      <listitem>
       <para>"unknown type"</para>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Siehe auch <function>settype</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.intval">
   <refnamediv>
    <refname>intval</refname>
    <refpurpose>Konvertiert einen Wert nach integer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>intval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>int
       <parameter><optional>base</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion konvertiert den Parameter <parameter>var</parameter>
     zu einem integer, wobei <parameter>base</parameter> als Basis benutzt
     wird (Default ist <parameter>base</parameter>=10).
    </para>
    <para>
     <parameter>var</parameter> kann ein Ausdruck oder eine einfache Variable 
     sein, nicht jedoch ein Array oder Objekt.
    </para>
    <para>
     Siehe auch <function>doubleval</function>,
     <function>strval</function>, <function>settype</function> und
     <link linkend="language.types.type-juggling">Typ-Veränderungen</link>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-array">
   <refnamediv>
    <refname>is_array</refname>
    <refpurpose>Prüft, ob Variable ein Array ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_array</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert &true;, wenn <parameter>var</parameter> ein Array ist,
     sonst &false;.
    </para>
    <para>
     Siehe auch <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, und
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-bool">
   <refnamediv>								
    <refname>is_bool</refname>
    <refpurpose>
     Prüft, ob eine Variable vom Typ bool ist
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int
       <function>is_bool</function>
      </funcdef>
      <paramdef>mixed 
       <parameter>var</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert &true;, wenn <parameter>var</parameter> 
     vom Typ bool ist.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-double">
   <refnamediv>
    <refname>is_double</refname>
    <refpurpose>Prüft, ob eine Variable vom Typ double ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_double</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert &true;, wenn <parameter>var</parameter> vom Typ double ist, 
     sonst &false;.
    </para>
    <para>
     Siehe auch <function>is_array</function>,
     <function>is_float</function>, <function>is_int</function>,
     <function>is_integer</function>, <function>is_real</function>,
     <function>is_string</function>, <function>is_long</function> und
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-float">
   <refnamediv>
    <refname>is_float</refname>
    <refpurpose>Prüft, ob eine Variable vom Typ float ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_float</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion ist ein Synonym für <function>is_double</function>.
    </para>
    <para>
     Siehe auch <function>is_double</function>,
     <function>is_real</function>, <function>is_int</function>,
     <function>is_integer</function>, <function>is_string</function>,
     <function>is_object</function>, <function>is_array</function> und
     <function>is_long</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-int">
   <refnamediv>
    <refname>is_int</refname>
    <refpurpose>Prüft, ob eine Variable vom Typ int ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_int</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion ist ein Synonym für <function>is_int</function>.
    </para>
    <para>
     Siehe auch <function>is_double</function>,
     <function>is_float</function>, <function>is_integer</function>,
     <function>is_string</function>, <function>is_real</function>,
     <function>is_object</function>, <function>is_array</function> und
     <function>is_long</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-integer">
   <refnamediv>
    <refname>is_integer</refname>
    <refpurpose>Prüft, ob eine Variable vom Typ integer ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_integer</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion liefert &true;, wenn <parameter>var</parameter> vom
     Typ integer ist, sonst &false;.
    </para>
    <para>
     Siehe auch <function>is_double</function>,
     <function>is_float</function>, <function>is_int</function>,
     <function>is_string</function>, <function>is_real</function>,
     <function>is_object</function>, <function>is_array</function> und
     <function>is_long</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-long">
   <refnamediv>
    <refname>is_long</refname>
    <refpurpose>Prüft, ob eine Variable vom Typ long ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_long</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion ist ein Synonym für 
     <function>is_integer</function>.
    </para>
    <para>
     Siehe auch <function>is_double</function>,
     <function>is_float</function>, <function>is_int</function>,
     <function>is_real</function>, <function>is_string</function>,
     <function>is_object</function>, <function>is_array</function> und
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-numeric">
   <refnamediv>
    <refname>is_numeric</refname>
    <refpurpose>
     Finds whether a variable is a number or a numeric string
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_numeric</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Returns &true; if <parameter>var</parameter> is a number or a
     numeric string, &false; otherwise.
    </para>
    <para>
     See also <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, and
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-object">
   <refnamediv>
    <refname>is_object</refname>
    <refpurpose>Prüft, ob eine Variable vom Typ object ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_object</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert &true;, wenn <parameter>var</parameter> ein Objekt enthält,
     sonst &false;.
    </para>
    <para>
     Siehe auch <function>is_long</function>,
     <function>is_int</function>, <function>is_integer</function>,
     <function>is_float</function>, <function>is_double</function>,
     <function>is_real</function>, <function>is_string</function> und
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-real">
   <refnamediv>
    <refname>is_real</refname>
    <refpurpose>Prüft, ob Variable vom Typ real ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_real</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion ist ein Synonym für <function>is_double</function>.
    </para>
    <para>
     Siehe auch <function>is_long</function>,
     <function>is_int</function>, <function>is_integer</function>,
     <function>is_float</function>, <function>is_double</function>,
     <function>is_object</function>, <function>is_string</function> und
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>

  
  <refentry id="function.is-resource">
   <refnamediv>
    <refname>is_resource</refname>
    <refpurpose>
     Prüft, ob eine Variable vom Typ resource ist
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>is_resource</function>
      </funcdef>
      <paramdef>mixed 
       <parameter>var</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>is_resource</function> liefert &true;, wenn es sich bei
     der Variable <parameter>var</parameter> um eine PHP-Resource wie
     z.B. ein Datei- oder Result-Handle handelt, ansonsten &false;.
     PHP-Resorucen werden von PHP-internen Funktione erzeugt und
     freigegeben. Unterläst der Benutzer die Freigabe in seinem Code,
     so kann diese durch den speziellen Datentyp resource dennoch
     angestossen werden, sobald die Resource-Variable nicht mehr
     referenziert wird.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-string">
   <refnamediv>
    <refname>is_string</refname>
    <refpurpose>Prüft, ob Variable vom Typ string ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>is_string</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert &true;, wenn <parameter>var</parameter> vom Typ string
     ist, sonst &false;.
    </para>
    <para>
     Siehe auch <function>is_long</function>,
     <function>is_int</function>, <function>is_integer</function>,
     <function>is_float</function>, <function>is_double</function>,
     <function>is_real</function>, <function>is_object</function> und
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.isset">
   <refnamediv>
    <refname>isset</refname>
    <refpurpose>Prüft die Existenz einer Variablen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>isset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion liefert &true;, wenn die Variable oder
     das Array-Element <parameter>var</parameter> existiert,
     sonst &false;.
    </para>
    <para>
     Wird eine Variable oder ein Array-Element mit
     <function>unset</function> freigegeben, so liefert
     <function>isset</function> anschließend ebenfalls &false;.
     <informalexample>
      <programlisting role="php">
echo isset ($a); // false
$a = "test";
echo isset ($a); // true
unset ($a);
echo isset ($a); // false
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch <function>empty</function> und
     <function>unset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.print-r">
   <refnamediv>
    <refname>print_r</refname>
    <refpurpose>
     Gibt Variablen-Informationen in lesbarer Form aus
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>print_r</function></funcdef>
      <paramdef>mixed <parameter>expression</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion zeigt Informationen über eine Variable oder einen
     Ausdruck in lesbarer Form an. Einfache Werte werden direkt ausgegeben,
     Arrays und Objekte werden dagegen als eingerückte Schlüssel /
     Wert-Paare ausgegeben.
    </para>
    <para>
     <function>print_r</function> ähnelt <function>var_dump</function>, gibt
     aber Typinformationen nur bei Arrays und Objekten aus.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
$a = array (1, 2, array ("a", "b", "c"));
print_r ($a);
?>
      </programlisting>
     </informalexample>
    </para>
    <warning>
     <para>
      Diese Funktion ist nicht in der Lage, zyklische Referenzen
      aufzulösen, d.h. die Ausgabe eines Arrays oder Objektes, das sich
      selbst enthält, wie z.B. <literal>print_r($GLOBALS)</literal>,
      wird niemals beendet.
     </para>
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>
     Erzeugt ein speicherbares Datenformat
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>serialize</function></funcdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>serialize</function> gibt eine Zeichenkette (String)
     zurück, die eine Byte-Stream entsprechende Wiedergabe von
     <parameter>value</parameter> enthält und beliebig abgespeichert
     werden kann.
    </simpara>
    <simpara>
     Diese Funktion dient der Speicherung oder Übergabe von
     PHP-Werten, ohne dass diese ihren Wert oder ihre Struktur
     verlieren.
    </simpara>
    <simpara>
     Um eine serialisierte Zeichenkette wieder als PHP-Wert verfügbar
     zu machen steht die <function>unserialize</function>-Funktion zur
     Verfügung. <function>serialize</function> kann mit den Typen
     <type>integer</type>, <type>double</type>, <type>string</type>,
     <type>array</type> (mehrdimensional) und <type>object</type>
     umgehen. Beim Objekt werden die Eigenschaften serialisiert, die
     Methoden gehen aber verloren.
    </simpara>
    <para>
     <example>
      <title><function>serialize</function>-Beispiel:</title>
      <programlisting role="php">
// $session_data enthält ein mehrdimensionales Array mit
// Session-Informationen des aktuellen Benutzers. Wir benutzen
// serialize() um diese Infos am Ende der Anfrage in eine
// Datenbank zu speichern.

$conn = odbc_connect ("webdb", "php", "moorhuhn");
$stmt = odbc_prepare ($conn,
                      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata)) {
    $stmt = odbc_prepare ($conn,
                          "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &amp;$sqldata)) {
        /* Etwas lief schief. Fluche, heule und stöhne. */
    }
}
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.settype">
   <refnamediv>
    <refname>settype</refname>
    <refpurpose>Legt den Typ einer Variablen fest</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>settype</function></funcdef>
      <paramdef>string <parameter>var</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Der Typ der Variablen <parameter>var</parameter> wird
     festgelegt als <parameter>type</parameter>.
    </para>
    <para>
     Mögliche Werte für <parameter>type</parameter> sind:
     <itemizedlist>
      <listitem><para>"integer"</para></listitem>
      <listitem><para>"double"</para></listitem>
      <listitem><para>"string"</para></listitem>
      <listitem><para>"array"</para></listitem>
      <listitem><para>"object"</para></listitem>
     </itemizedlist>
    </para>
    <para>
     Liefert &true; bei Erfolg, sonst &false;.
    </para>
    <para>
     Siehe auch <function>gettype</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strval">
   <refnamediv>
    <refname>strval</refname>
    <refpurpose>Konvertierung zum String</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion liefert den übergebenen Ausdruck
     <parameter>var</parameter> als String-Repräsentation zurück.
    </para>
    <para>
     <parameter>var</parameter> darf von jedem einfache Datentyp,
     aber kein Array oder Objekt sein.
    </para>
    <para>
     Siehe auch <function>doubleval</function>,
     <function>intval</function>, <function>settype</function> und
     <link linkend="language.types.type-juggling">Typ-Veränderung</link>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>
     Erzeugt aus einem gespeicherten Datenformat einen Wert in PHP
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>unserialize</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>unserialize</function> nimmt eine einzelne
     Variable aus einer serialisierten Datenmenge (siehe unter
     <function>serialize</function>) und wandelt sie in einen
     PHP-Wert um. Dieser Wert wird als Funktionsergebnis zurück
     gegeben. Er kann vom Typ <type>integer</type>,
     <type>double</type>, <type>string</type>, <type>array</type>
     oder <type>object</type> sein. Wurde ein Objekt serialisiert,
     können dessen Methoden nicht zurück gegeben werden.
    </simpara>
    <para>
     <example>
      <title><function>unserialize</function>-Beispiel:</title>
      <programlisting role="php">
// Als Beispiel benutzen wir unserialize() um Daten aus einer
// Datenbank nach $session_data zu laden. Das Beispiel vervollständigt
// das unter serialize() beschriebene.

$conn = odbc_connect ("webdb", "php", "moorhuhn");
$stmt = odbc_prepare ($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array ($PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata) || !odbc_fetch_into ($stmt, &amp;$tmp)) {
    // wenn execute oder fetch fehlschlägt, initialisiere ein leeres Array
    $session_data = array();
} else {
    // die serialisierten Daten sollten nun in $tmp[0] stehen
    $session_data = unserialize ($tmp[0]);
    if (!is_array ($session_data)) {
        // etwas ging schief, also wieder ein leeres Array initialisieren
        $session_data = array();
    }
}
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>Löschen einer Variablen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>unset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>unset</function> gibt eine Variable oder ein
     Array-Element vollständig frei.
    </para>
    <para>
     <example>
      <title><function>unset</function> example</title>
      <programlisting role="php">
unset ($foo);
unset ($bar['quux']);
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>isset</function> und
     <function>empty</function>.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.var-dump">
   <refnamediv>
    <refname>var_dump</refname>
    <refpurpose>Gibt alle Informationen zu einer Variablen aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>var_dump</function></funcdef>
      <paramdef>mixed <parameter>expression</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Fuktion liefert Informationen über Typ und Wert des
     Parameter <parameter>expression</parameter> zurück. Arrays und
     Objekte werden rekursiv durchlaufen und mit entsprechender
     Einrückung dargestellt.
    </para>
    <para>
     Siehe auch <function>print_r</function>.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;pre>
&lt;?php
    $a = array (1, 2, array ("a", "b", "c"));
    var_dump ($a);
?>
&lt;/pre>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
