 <reference id="ref.classobj">
  <title>Klassen- und Objekt Funktionen</title>
  <titleabbrev>Klassen/Objekte</titleabbrev>
  <partintro>
   <sect1 id="classobj.partintro">
    <title>Introduction</title>
    <sect2 id="classobj.intro">
	 <title>About</title>
	 <para>
	  These functions allow you to obtain information about classes
	  and instance objects. You can obtain the name of the class to
	  which a object belongs, as well as its member properties and 
	  methods. Using this functions, you can find out not only the
	  class membership of an object, but also its parentage (i.e.
	  what class is the object class extending).
	 </para>
	</sect2>
	<sect2>
	 <title>An example of use</title>
	 <para>
	  In this example, we first define a base class and an extension
	  of the class. The base class describes a general vegetable,
	  whether it is edible or not and what is its color. The subclass
	  <varname>Spinach</varname> adds a method to cook it and another to
	  find out if it is cooked.
	 </para>
	 <para>
	  <example>
	   <title>classes.inc</title>
	   <programlisting role="php">
&lt;?php

// base class with member properties and methods
class Vegetable {

	var $edible;
	var $color;

	function Vegetable( $edible, $color=&quot;green&quot; ) {
		$this-&gt;edible = $edible;
		$this-&gt;color = $color;
	}

	function is_edible() {
		return $this-&gt;edible;
	}

	function what_color() {
		return $this-&gt;color;
	}
	
} // end of class Vegetable


// extends the base class
class Spinach extends Vegetable {

	var $cooked = false;

	function Spinach() {
		$this-&gt;Vegetable( true, &quot;green&quot; );
	}

	function cook_it() {
		$this-&gt;cooked = true;
	}

	function is_cooked() {
		return $this-&gt;cooked;
	}
	
} // end of class Spinach

?&gt;
	   </programlisting>
	  </example>
	 </para>
	 <para>
	 We then instantiate 2 objects from these classes and print out
	 information about them, including their class parentage.
	 We also define some utility functions, mainly to have a nice printout
	 of the variables.
	 </para>
	 <para>
	  <example>
	   <title>test_script.php</title>
	   <programlisting role="php">
&lt;pre&gt;
&lt;?php

include &quot;classes.inc&quot;;

// utility functions

function print_vars($obj) {
	$arr = get_object_vars($obj);
	while (list($prop, $val) = each($arr))
		echo &quot;\t$prop = $val\n&quot;;
}

function print_methods($obj) {
	$arr = get_class_methods(get_class($obj));
	foreach ($arr as $method)
		echo &quot;\tfunction $method()\n&quot;;
}

function class_parentage($obj, $class) {
	global $$obj;
	if (is_subclass_of($$obj, $class)) {
		echo &quot;Object $obj belongs to class &quot;.get_class($$obj);
		echo &quot; a subclass of $class\n&quot;;
	} else {
		echo &quot;Object $obj does not belong to a subclass of $class\n&quot;;
	}
}

// instantiate 2 objects

$veggie = new Vegetable(true,&quot;blue&quot;);
$leafy = new Spinach();

// print out information about objects
echo &quot;veggie: CLASS &quot;.get_class($veggie).&quot;\n&quot;;
echo &quot;leafy: CLASS &quot;.get_class($leafy);
echo &quot;, PARENT &quot;.get_parent_class($leafy).&quot;\n&quot;;

// show veggie properties
echo &quot;\nveggie: Properties\n&quot;;
print_vars($veggie);

// and leafy methods
echo &quot;\nleafy: Methods\n&quot;;
print_methods($leafy);

echo &quot;\nParentage:\n&quot;;
class_parentage(&quot;leafy&quot;, &quot;Spinach&quot;);
class_parentage(&quot;leafy&quot;, &quot;Vegetable&quot;);
?&gt;
&lt;/pre&gt;
	   </programlisting>
	  </example>
	 </para>
	 <para>
	  One important thing to note in the example above is that
	  the object <varname>$leafy</varname> is an instance of the class
	  <varname>Spinach</varname> which is a subclass of 
	  <varname>Vegetable</varname>,
	  therefore the last part of the script above will output:
	 </para>
	 <para>
	  <informalexample>
	   <programlisting>
	   [...]
Parentage:
Object leafy does not belong to a subclass of Spinach
Object leafy belongs to class spinach a subclass of Vegetable
	   </programlisting>
	  </informalexample>
	 </para>
	</sect2>
   </sect1>
  </partintro>
  
    <refentry id="function.get-class">
   <refnamediv>
    <refname>get_class</refname>
    <refpurpose>Returns the name of the class of an object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>get_class</function></funcdef>
      <paramdef>object <parameter>obj</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	 This function returns the name of the class of which the
	 object <parameter>obj</parameter> is an instance.
    </para>
	<simpara>
	 See also <function>get_parent_class</function>,
	 <function>is_subclass_of</function>
	</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.get-parent-class">
   <refnamediv>
    <refname>get_parent_class</refname>
    <refpurpose>Returns the name of the parent class of an object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>get_parent_class</function></funcdef>
      <paramdef>object <parameter>obj</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	 This function returns the name of the parent class to
	 the class of which the object <parameter>obj</parameter> 
	 is an instance.
    </para>
	<simpara>
	 See also <function>get_class</function>,
	 <function>is_subclass_of</function>
	</simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.get-class-methods">
   <refnamediv>
    <refname>get_class_methods</refname>
    <refpurpose>
     Liefert die Namen aller Methoden einer Klasse
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_class_methods</function></funcdef>
      <paramdef>string <parameter>class_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion liefert ein String-Array zurück, das mit den Namen
     aller in der Klasse <parameter>class_name</parameter> definerten
     Methoden gefüllt ist.
    </para>
	<simpara>
	 Siehe auch <function>get_class_vars</function>,
	 <function>get_object_vars</function>
	</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.get-class-vars">
   <refnamediv>
    <refname>get_class_vars</refname>
    <refpurpose>
     Liefert die Standard-Elemente einer Klasse
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_class_vars</function></funcdef>
      <paramdef>string <parameter>class_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion liefert ein String-Array zurück, das mit den 
     Standard-Elementen der Klasse <parameter>class_name</parameter> 
     gefüllt ist. Standard-Elemente sind all die Elemente, die bereits 
     in der Klassendefinition mit 'var' definiert wurden.
    </para>
	<simpara>
	 Siehe auch <function>get_class_methods</function>,
	 <function>get_object_vars</function>
	</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.get-object-vars">
   <refnamediv>
    <refname>get_object_vars</refname>
    <refpurpose>Liefert die Elemente eines Objekts als assoziatives Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_object_vars</function></funcdef>
      <paramdef>object <parameter>obj</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion liefert einen assoziatives Array zurück, das mit den
     Namen aller Elemente des in <parameter>obj</parameter> 
     übergebenen Objekts gefüllt ist.
    </para>
	<simpara>
	 Siehe auch <function>get_class_methods</function>,
	 <function>get_class_vars</function>
	</simpara>
   </refsect1>
  </refentry>
  
 <refentry id="function.is-subclass-of">
   <refnamediv>
    <refname>is_subclass_of</refname>
    <refpurpose>
	 Determines if an object belongs to a subclass
	 of the specified class
	</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_subclass_of</function></funcdef>
      <paramdef>object <parameter>obj</parameter></paramdef>
      <paramdef>string <parameter>superclass</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     This function returns true if the object <parameter>obj</parameter>,
	 belongs to a class which is a subclass of
	 <parameter>superclass</parameter>, false otherwise.
    </para>
	<simpara>
	 See also <function>get_class</function>,
	 <function>get_parent_class</function>
	</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.class-exists">
   <refnamediv>
    <refname>class_exists</refname>
    <refpurpose>Checks if the class has been defined</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>class_exists</function></funcdef>
      <paramdef>string <parameter>class_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     This function returns true if the class given by
     <parameter>class_name</parameter> has been defined,
     false otherwise.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.method-exists">
   <refnamediv>
    <refname>method_exists</refname>
    <refpurpose>Prüft, ob Methode in einer Klasse definiert ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>method_exists</function></funcdef>
      <paramdef>object <parameter>object</parameter></paramdef>
      <paramdef>string <parameter>method_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion liefert true, wenn eine Methode mit Namen
     <parameter>method_name</parameter> für das in 
     <parameter>object</parameter> übergebene Objekt definiert 
     wurde, sonst false.
    </para>
    <para>
     Siehe auch <function>function_exists</function>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.get-declared-classes">
   <refnamediv>
    <refname>get_declared_classes</refname>
    <refpurpose>Returns an array with the name of the defined classes</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_declared_classes</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     This function returns an array of the names of the declared classes
	 in the current script.
    </para>
	<note>
	 <para>
	  In PHP 4.0.1pl2, three extra classes are returned at the beginning of
	  the array: <varname>stdClass</varname> (defined in Zend/zend.c),
	  <varname>OverloadedTestClass</varname> (defined in
	  ext/standard/basic_functions.c) and <varname>Directory</varname>
	  (defined in ext/standard/dir.c).
	 </para>
	</note>
   </refsect1>
  </refentry>
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
