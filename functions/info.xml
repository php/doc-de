<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.info">
  <title>PHP Optionen und Informationen</title>
  <titleabbrev>PHP Optionen/Informationen</titleabbrev>
<refentry id="function.assert">
   <refnamediv>
    <refname>assert</refname>
    <refpurpose>Prüft ab, ob eine Bedingung oder Abfrage &false; ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>assert</function></funcdef>
      <paramdef>string|bool <parameter>assertion</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>assert</function> überprüft den übergebenen Parameter
     <parameter>assertion</parameter> und führt ein über die Funktion
     <function>assert_options</function> definiertes Ereignis aus, falls
     die in <parameter>assertion</parameter> Bedingung &false; ist.
    </para>
    <para>
     Wird der Parameter <parameter>assertion</parameter> als String übergeben,
     so wird der String als PHP-Code interpretiert.
     Der Vorteil der Übergabe des Parameters <parameter>assertion</parameter>
     als Zeichenkette liegt darin, dass die ausgegebene Meldung
     die über <parameter>assertion</parameter> übergebene Zeichenkette
     enthält.
    </para>
    <para>
     <function>assert</function> sollte nur zum Debuggen des Codes
     und nicht in Produktionsumgebungen verwendet werden werden, 
     beispielsweise zur Überprüfung von Eingaben.
    </para>
    <para>
     Die Optionen für die <function>assert</function> können über die
     Funktion <function>assert_options</function> oder in den Einstellungen
     der .ini-Datei gesetzt werden.
    </para>
    <para>
     Die Funktion <function>assert_options</function> mit der
     ASSERT_CALLBACK Direktive ermöglicht eine Funktion anzugeben, die bei
     fehlender Überprüfung aufgerufen wird.
    </para>
    <para>
     Callback-Funktionen in Zusammenhang mit <function>assert</function> sind
     nützlich, um beispielsweise automatisierte Tests durchzuführen, da die
     Callback-Funktion pber die Information verfügt, von welcher Stelle sie
     aufgerufen wurde.
    </para>
    <para>
     Die Callback-Funktion wird mit drei Parametern aufgerufen. Der erste
     Der erste Parameter enthält den Namen des Scripts, in dem die Überprüfung
     statt fand, der zweite Parameter die Zeilennummer, und der dritte Paramter
     enthält die über <parameter>assertion</parameter> angegebene Bedingung. 
    </para>
    <para>
     <example>
      <title>Überprüfung mit benutzerdefinierter Funktion</title>
      <programlisting role="php">
<![CDATA[
<?php
// Active assert and make it quiet
assert_options (ASSERT_ACTIVE, 1);
assert_options (ASSERT_WARNING, 0);
assert_options (ASSERT_QUIET_EVAL, 1);

// Create a handler function
function my_assert_handler ($file, $line, $code) {
    echo "<hr>Assertion Failed:
        File '$file'<br>
        Line '$line'<br>
        Code '$code'<br><hr>";
}

// Set up the callback
assert_options (ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert ('mysql_query ("")');
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.assert-options">
   <refnamediv>
    <refname>assert_options</refname>
    <refpurpose>Setzt oder liefert die Assert-Optionen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>assert_options</function></funcdef>
      <paramdef>int <parameter>what</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>value</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>assert_options</function> ermöglicht es, die verschiedenene
     <function>assert</function> Optionen zu setzen, oder abzufragen, welche
     Optionen gesetzt sind.
    </para>
    <table>
     <title>assert Optionen</title>
     <tgroup cols="4">
      <thead>
       <row>
    <entry>Option</entry>
    <entry>Parameter in .ini-Datei</entry>
    <entry>Standardwert</entry>
    <entry>Beschreibung</entry>
       </row>
      </thead>
      <tbody>
       <row>
    <entry>ASSERT_ACTIVE</entry>
    <entry>assert.active</entry>
    <entry>1</entry>
    <entry><function>assert</function> Überprüfung aktivieren</entry>
       </row>
       <row>
    <entry>ASSERT_WARNING</entry>
    <entry>assert.warning</entry>
    <entry>1</entry>
    <entry>gibt eine PHP Warnung für jede fehlgeschlagene Überprüfung an</entry>
       </row>
       <row>
    <entry>ASSERT_BAIL</entry>
    <entry>assert.bail</entry>
    <entry>0</entry>
    <entry>Beendet das Programm bei fehlgeschlagener Überprüfung</entry>
       </row>
       <row>
    <entry>ASSERT_QUIET_EVAL</entry>
    <entry>assert.quiet_eval</entry>
    <entry>0</entry>
    <entry>
     Unterdrückt die Fehlerausgabe während der Überprüfung
    </entry>
       </row>
       <row>
    <entry>ASSERT_CALLBACK</entry>
    <entry>assert_callback</entry>
    <entry>(&null;)</entry>
    <entry>ermöglicht die Angabe einer benuterdefinierten Funktion</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <para>
     <function>assert_options</function> gibt die Einstellung der gesetzten 
     Optionen zurück oder liefert den Wert &false; bei Auftreten eines Fehlers
     zurück.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.extension-loaded">
   <refnamediv>
    <refname>extension_loaded</refname>
    <refpurpose>Zeigt an, ob eine Bibliothek geladen wurde</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>extension_loaded</function></funcdef>
      <paramdef>string <parameter>name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Ist wahr, wenn die Bibliothek, die mit
      <parameter>name</parameter> definiert wurde, geladen ist. Einen
     Überblick über die verschiedenen Bibliotheken erhält man mit
     <function>phpinfo</function>.
    </simpara>
    <para>
     Siehe auch <function>phpinfo</function>.
     <note>
      <para>
       Diese Funktion wurde mit Version 3.0.10 eingeführt.
      </para>
    </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.getenv">
   <refnamediv>
    <refname>getenv</refname>
    <refpurpose>Zeigt den Wert einer Umgebungsvariablen an</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>getenv</function></funcdef>
      <paramdef>string <parameter>varname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zeigt den Wert der Umgebungsvariablen
     <parameter>varname</parameter> an oder &false; bei einem Fehler.
     <informalexample>
      <programlisting role="php">
$ip = getenv ("REMOTE_ADDR"); // get the ip number of the user 
      </programlisting>
     </informalexample>
    </para>
    <para>
     Eine Liste aller Umgebungsvariablen wird mit
     <function>phpinfo</function> angezeigt. Ein Überlick über viele
     Umgebungsvariablen und deren Bedeutung findet sich unter den
     <ulink url="&url.cgispecs;">CGI Spezificationen</ulink>, speziell
     auf der Seite der <ulink url="&url.cgispec;">Umgebungsvariablen
     </ulink>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-cfg-var">
   <refnamediv>
    <refname>get_cfg_var</refname>
    <refpurpose>
     Zeigt den Wert einer Option der PHP-Konfiguration
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>get_cfg_var</function></funcdef>
      <paramdef>string <parameter>varname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Zeigt den derzeitigen Wert der Variablen der PHP-Konfiguration,
     die mit <parameter>varname</parameter> ausgewählt wurde oder
     &false; bei einem Fehler.
    </simpara>
    <simpara>
     Bringt keine Informationen über die Konfiguration, mit der PHP
     kompilert wurde, oder die aus der Apache-Konfiguration gelesen
     wird (mittels der php3_configuration_option Anweisungen).
    </simpara>
    <simpara>
     Um herauszubekommen, ob ein <link
     linkend="configuration.file">configuration file</link>, benutzt
     wird, sollte versucht werden, den Wert der cfg_file_path
     Einstellung zu erhalten. Ist dieser Wert verfügbar, wird eine
     Konfigurationsdatei verwendet.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.get-current-user">
   <refnamediv>
    <refname>get_current_user</refname>
    <refpurpose>
     Den Besitzer des aktuellen PHP-Scripts anzeigen.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>get_current_user</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Zeigt den Namen des Besitzers des aktuellen PHP-Scripts an.
    </simpara>
    <simpara>
     Siehe auch <function>getmyuid</function>,
     <function>getmypid</function>, <function>getmyinode</function>,
     und <function>getlastmod</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.get-magic-quotes-gpc">
   <refnamediv>
    <refname>get_magic_quotes_gpc</refname>
    <refpurpose>
     Zeigt die aktuelle Konfiguration von magic quotes gpc
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>long <function>get_magic_quotes_gpc</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Zeigt die aktuelle Konfiguration von 
     <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>.
     (0 für aus, 1 für an).
    </simpara>
    <simpara>
     Siehe auch <function>get_magic_quotes_runtime</function> und
     <function>set_magic_quotes_runtime</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.get-magic-quotes-runtime">
   <refnamediv>
    <refname>get_magic_quotes_runtime</refname>
    <refpurpose>
     Zeigt die aktuelle Konfiguration von magic_quotes_runtime
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>
       Long <function>get_magic_quotes_runtime</function>
      </funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Zeigt die aktuelle Konfiguration von
     <link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link>.
     (0 für aus, 1 für an).
    </simpara>
    <simpara>
     Siehe auch <function>get_magic_quotes_gpc</function> und
     <function>set_magic_quotes_runtime</function>.
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.getlastmod">
   <refnamediv>
    <refname>getlastmod</refname>
    <refpurpose>
     Zeigt die Uhrzeit der letzten Änderung einer Seite
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>getlastmod</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zeigt die Uhrzeit der letzten Änderung der aktuellen Seite. Der
     Wert wird als Unix-Timestamp angezeigt, welcher für
     <function>date</function> benutzt werden kann. Bringt &false; bei
     einem Fehler.
     <example>
      <title><function>getlastmod</function> Beispiel</title>
      <programlisting role="php">
// outputs e.g. 'Last modified: March 04 1998 20:43:59.'
echo "Last modified: ".date ("F d Y H:i:s.", getlastmod());
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>date</function>,
     <function>getmyuid</function>,
     <function>get_current_user</function>,
     <function>getmyinode</function> und
     <function>getmypid</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.getmyinode">
   <refnamediv>
    <refname>getmyinode</refname>
    <refpurpose>Gibt den Inode des aktuellen Skripts aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beispiel</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>getmyinode</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zeigt den inode des aktuellen Scripts oder &false; bei einem Fehler.
    </para>
    <para>
     Siehe auch <function>getmyuid</function>,
     <function>get_current_user</function>,
     <function>getmypid</function> und
     <function>getlastmod</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.getmypid">
   <refnamediv>
    <refname>getmypid</refname>
    <refpurpose>Zeigt die ID des PHP-Prozesses</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>getmypid</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zeigt die aktuelle ID des PHP-Prozesses oder &false; bei einem
     Fehler.
    </para>
    <para>
     Achtung: Wenn PHP als Server-Modul läuft, ist es nicht
     garantiert, dass Scripts unter verschiedenen PIDs laufen.
    </para>
    <para>
     Siehe auch <function>getmyuid</function>,
     <function>get_current_user</function>,
     <function>getmyinode</function> und
     <function>getlastmod</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.getmyuid">
   <refnamediv>
    <refname>getmyuid</refname>
    <refpurpose>
     Zeigt die UID des Besitzers eines PHP-Scripts
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>getmyuid</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Zeigt die User-ID des aktuellen Scripts oder &false; bei einem
     Fehler.
    </simpara>
    <simpara>
     Siehe auch <function>getmypid</function>,
     <function>get_current_user</function>,
     <function>getmyinode</function> und
     <function>getlastmod</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.getrusage">
   <refnamediv>
    <refname>getrusage</refname>
    <refpurpose>
     Zeigt den aktuellen Ressourcenverbrauch an
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>getrusage</function></funcdef>
      <paramdef>int <parameter><optional>who</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dies ist eine Schnittstlle zu getrusage(2). Stellt ein
     assoziatives Array mit den Daten zur Verfügung, die der
     Systemaufruf ausgibt.  Wenn who 1 ist, wird getusage mit
     RUSAGE_CHILDREN aufgerufen.
    </para>
    <para>
     Alle Einträge können über ihre Dukumentenfeldernamen aufgerufen
     werden.
     <example>
      <title><function>getrusage</function> Beispiel</title>
      <programlisting role="php">
$dat = getrusage();
echo $dat["ru_nswap"];         # number of swaps
echo $dat["ru_majflt"];        # number of page faults
echo $dat["ru_utime.tv_sec"];  # user time used (seconds)
echo $dat["ru_utime.tv_usec"]; # user time used (microseconds)
      </programlisting>
     </example>
     Siehe auch im Handbuch des Betriebssystems für weitere Details. 
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.phpinfo">
   <refnamediv>
    <refname>phpinfo</refname>
    <refpurpose>Zeigt viele Informationen zu PHP</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>phpinfo</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zeigt eine grosse Anzahl von Informationen über die aktuelle
     Konfiguration von PHP an.  Unter anderem die Optionen während der
     Kompilierens und die Erweiterungen, die PHP Version,
     Informationen über den Server, die Umgebung (wenn PHP als Modul
     kompiliert wurde), die PHP Umgebung, Version und Informationen
     zum Betriebssystem, Pfade, Haupt- and lokale Werte der
     Konfigurationsoptionen, HTTP Header, und die GNU Public
     License.
    </para>
    <para>
     Siehe auch <function>phpversion</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.php-logo-guid">
   <refnamediv>
    <refname>php_logo_guid</refname>
    <refpurpose>Die logo guid erhalten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>php_logo_guid</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <note>
      <para>
       Diese Funktion wurde mit Version PHP4 Beta 4 eingeführt.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.php-sapi-name">
   <refnamediv>
    <refname>php_sapi_name</refname>
    <refpurpose>
     Zeigt die Schnittstelle zwischen Webserver und PHP an
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>php_sapi_name</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>php_sapi_name</function> zeigt die Schnittstelle zwischen Webserver und PHP
     (Server API, SAPI) als kleingeschriebene Zeichenkette an. Bei CGI PHP ist diese Zeichenkette "cgi", bei
     mod_php für Apache ist die Zeichenkette "apache" usw.
    </simpara>
    <para>
     <example>
      <title><function>php_sapi_name</function> Beispiel</title>
      <programlisting role="php">
$inter_type = php_sapi_name();
if ($inter_type == "cgi")
    print "Sie benutzen CGI PHP\n";
else
    print "Sie benutzen nicht CGI PHP\n";
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.phpversion">
   <refnamediv>
    <refname>phpversion</refname>
    <refpurpose>
     Zeigt die aktuell installierte PHP-Version
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>phpversion</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zeigt die Version des installierten PHP-Parsers.
     <example role="php">
      <title><function>phpversion</function> Beispiel</title>
      <programlisting>
// Gibt z.B. 'Aktuelle PHP Version: 3.0rel-dev' aus
echo "Aktuelle PHP Version: ".phpversion();
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>phpinfo</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.putenv">
   <refnamediv>
    <refname>putenv</refname>
    <refpurpose>
     Setzt den Wert einer Umgebungsvariablen.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>putenv</function></funcdef>
      <paramdef>string <parameter>setting</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Setzt <parameter>setting</parameter> als Umgebungsvariable.
    </para>
    <para>
     <example>
      <title>Setzen einer Umgebungsvariablen</title>
      <programlisting role="php">
putenv ("UNIQID=$uniqid");
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.set-magic-quotes-runtime">
   <refnamediv>
    <refname>set_magic_quotes_runtime</refname>
    <refpurpose>Setzt magic_quotes_runtime</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>long <function>set_magic_quotes_runtime</function></funcdef>
      <paramdef>int <parameter>new_setting</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Setzt <link
     linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link>.
     (0 für aus, 1 für an).
    </simpara>
    <simpara>
     Siehe auch <function>get_magic_quotes_gpc</function> und
     <function>get_magic_quotes_runtime</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.set-time-limit">
   <refnamediv>
    <refname>set_time_limit</refname>
    <refpurpose>Setzt die maximale Ausführungszeit</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>set_time_limit</function></funcdef>
      <paramdef>int <parameter>seconds</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Legt die Zeit in Sekunden fest, die ein Script laufen darf. Ist
     diese Zeit abgelaufen, wird ein Fehler zurückgegeben.  Der
     Standard liegt bei 30 Sekunden, es sei denn, max_execution_time
     ist <link linkend="configuration.file">configuration file</link>
     eingetragen.  Bei einer Einstellung von 0 Sekunden ist die
     maximale Ausführungszeit nicht begrenzt.
    </simpara>
    <simpara>
     Wenn <function>set_time_limit</function> aufgerufen wird, dann
     startet der Zähler neu. Das heisst, wenn die Standardeinstellung
     30 Sekunden beträgt und nach 25 Sekunden durch ein Script ein
     Aufruf wie z.B. <literal>set_time_limit(20)</literal> erfolgt,
     darf das Script insgesamt 45 Sekunden laufen, bevor eine
     Fehlermeldung ausgegeben wird.
    </simpara>
    <simpara>
     Achtung: Wenn PHP im Safemode läuft, hat
     <function>set_time_limit</function> keinen Effekt. Die einzige
     Möglichkeit, dies zu umgehen, ist den Safemode im <link
     linkend="configuration.file">configuration file</link>
     auszuschalten.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.zend-logo-guid">
   <refnamediv>
    <refname>zend_logo_guid</refname>
    <refpurpose>Zeigt die Zend guid</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>zend_logo_guid</function></funcdef>
      <paramdef>void</paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <note>
      <para>
       Diese Funktion wurde mit Version PHP4 Beta 4 eingeführt.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-loaded-extensions">
   <refnamediv>
    <refname>get_loaded_extensions</refname>
    <refpurpose>
	 Stellt ein Array mit den Namen aller Module, die kompiliert und geladen sind, zur 
         Verfügung
	</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_loaded_extensions</function></funcdef>
      <paramdef>void </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	 Dieser Funktion zeigt die Namen aller Module an, die in den PHP-Interpreter
         kompiliert und geladen wurden
	</para>
	<para>
	 Zum Beispiel gibt diese Zeile
	  <informalexample>
	   <programlisting>
print_r(get_loaded_extensions());
	   </programlisting>
	 </informalexample>
	 eine Liste wie die folgende aus:
	  <informalexample>
	   <programlisting>
Array
(
    [0] =&gt; xml
    [1] =&gt; wddx
    [2] =&gt; standard
    [3] =&gt; session
    [4] =&gt; posix
    [5] =&gt; pgsql
    [6] =&gt; pcre
    [7] =&gt; gd
    [8] =&gt; ftp
    [9] =&gt; db
    [10] =&gt; Calendar
    [11] =&gt; bcmath
)
	   </programlisting>
	 </informalexample>
    </para>
	<para>
	 Siehe auch: <function>get_extension_funcs</function>
	</para>
   </refsect1>
  </refentry>

  <refentry id="function.get-extension-funcs">
   <refnamediv>
    <refname>get_extension_funcs</refname>
    <refpurpose>
	 Stellt ein Array mit den Namen einer Funktion eines Moduls zur Verfügung
	</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Bescheibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_extension_funcs</function></funcdef>
      <paramdef>string <parameter>module_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	 Diese Funktion zeigt die Namen aller Funktionen, die im
	 Modul, welches von <parameter>module_name</parameter> angezeigt wird, an.
	</para>
	<para>
	 Zum Beispiel würden diese Zeilen
	  <informalexample>
	   <programlisting>
print_r(get_extension_funcs(&quot;xml&quot;));
print_r(get_extension_funcs(&quot;gd&quot;));
	   </programlisting>
	 </informalexample>
	 eine Liste von Funktionen in den Modulen <varname>xml</varname>
	 bzw. <varname>gd</varname> ausgeben.
    </para>
	<para>
	 Siehe auch: <function>get_loaded_extensions</function>
	</para>
   </refsect1>
  </refentry>

  <refentry id="function.get-required-files">
   <refnamediv>
    <refname>get_required_files</refname>
    <refpurpose>
	 Stellt ein Array mit den Namen der Dateien zur Verfügung, die über require_once() in einem Script aufgerufen wurden
	</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_required_files</function></funcdef>
      <paramdef>void </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	 Diese Funktion stellt ein assoziatives Array der Namen aller Dateien zur Verfügung,
	 die mit <function>require_once</function> in ein Script geladen wurden. Die Indexe dieses Arrays sind
         die Dateinamen, die in <function>require_once</function> benutzt werden, ohne die Endung
	 &quot;.php&quot;.
	</para>
	<para>
	  Dieses Beispiel
	  <example>
	   <title>Ausgabe der required und included Dateien</title>
	   <programlisting>
&lt;?php

require_once(&quot;local.php&quot;);
require_once(&quot;../inc/global.php&quot;);

for ($i=1; $i&lt;5; $i++)
	include &quot;util&quot;.$i.&quot;php&quot;;

echo &quot;Required_once files\n&quot;;
print_r(get_required_files());

echo &quot;Included_once files\n&quot;;
print_r(get_included_files());
	   </programlisting>
	 </example>
	 wird folgendes ausgeben:
     <informalexample>
	  <programlisting>
Required_once files
Array
(
    [local] =&gt; local.php 
    [../inc/global] =&gt; /full/path/to/inc/global.php
)

Included_once files
Array
(
    [util1] =&gt; util1.php 
    [util2] =&gt; util2.php 
    [util3] =&gt; util3.php 
    [util4] =&gt; util4.php 
)
	  </programlisting>
     </informalexample>
    </para>
	<para>
	 <note>
	  <para>
	   Ab PHP 4.0.1pl2 setzt diese Funktion vorraus, daß die Dateien, die mit
	   <varname>required_once</varname> aufgerufen wurden, die Endung
	   &quot;.php&quot; haben. Andere Endungen funktionieren nicht.
	  </para>
	 </note>
	</para>
	<para>
	 Siehe auch: <function>require_once</function>,
     <function>include_once</function>,
	 <function>get_included_files</function>
	</para>
   </refsect1>
  </refentry>

  <refentry id="function.get-included-files">
   <refnamediv>
    <refname>get_included_files</refname>
    <refpurpose>
	 Stellt ein Array der Dateinamen zur Verfügung, die mittels include_once() in ein Script geladen wurden
	</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_included_files</function></funcdef>
      <paramdef>void </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
	 Diese Funktion stellt ein assoziatives Array der Namen aller Dateien zur Verfügung,
	 die mit <function>include_once</function>  in ein Script geladen wurden. Die Indexe dieses Arrays sind
         die Dateinamen, die in <function>include_once</function> benutzt wurden, ohne die Endung
	 &quot;.php&quot;.
	</para>
	<para>
	 <note>
	  <para>
	   Ab PHP 4.0.1pl2 setzt diese Funktion vorraus, daß die Dateien, die mit
	   <varname>include_once</varname>aufgerufen wurden, die Endung
	   &quot;.php&quot; haben. Andere Endungen funktionieren nicht.
	  </para>
	 </note>
	</para>
	<para>
	 Siehe auch: <function>require_once</function>,
     <function>include_once</function>,
	 <function>get_required_files</function>
	</para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
