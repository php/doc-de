 <reference id="ref.misc">
  <title>Sonstige Funktionen</title>
  <titleabbrev>Sonstiges</titleabbrev>

  <partintro>
   <para>
    Diese Funktionen stehen hier, weil sie in keine andere Kategorie
    passen.
   </para>
  </partintro>

  <refentry id="function.create-function">
   <refnamediv>
    <refname>create_function</refname>
    <refpurpose>
     Erzeugen einer anonymen / temporären (Lambda-Stil) Funktion
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>create_function</function></funcdef>
      <paramdef>string <parameter>args</parameter></paramdef>
      <paramdef>string <parameter>code</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Erzeugt eine anonyme Funktion an Hand der übergebenen Parameter und
     gibt einen eindeutigen Namen für diese zurück. Normalerweise sind
     die <parameter>args</parameter> als mit "'" begrenzte Strings zu
     übergeben. Dies gilt auch für <parameter>code</parameter>. Dadurch
     werden die Variablen vor dem Parsen geschützt. Falls sie """
     verwenden, müssen sie die Variablen-Namen "escapen", wie z.B. 
	   <literal>\$avar</literal>.
	  </para>
	  <para>
     Dieser Befehl kann z.B. verwendet werden, um eine Funktion an Hand
     von Informationen zu erzeugen, die erst zur Laufzeit vorliegen.
     <example>
      <title>
       Erzeugen einer anonymen / temporären Funktion per
       <function>create_function</function>:
      </title>
      <programlisting role="php">
$newfunc = create_function('$a,$b','return "ln($a) + ln($b) = ".log($a * $b);');
echo "Neue Temp-Funktion: $newfunc\n";
echo $newfunc(2,M_E)."\n";
// Ausgabe:
// Neue Temp-Funktion: lambda_1
// ln(2) + ln(2.718281828459) = 1.6931471805599
      </programlisting>
     </example>
     Sie können auch eine allgemeine Handhabungs-Funktion erstellen, die
     einen mehr oder weniger große Anzahl an Operationen mit einer Liste
     von Parametern durchführt.
     <example>
      <title>
       Beispiel zum o.a. Verwendungszweck:
	    </title>
      <programlisting role="php">
function process($var1, $var2, $farr) {
    for ($f=0; $f &lt; count($farr); $f++)
        echo $farr[$f]($var1,$var2)."\n";
}

// Erzeugung eines Bündels an mathematischen Funktionen
$f1 = 'if ($a &gt;=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}';
$f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);";
$f3 = 'if ($a &gt; 0 &amp;&amp; $b != 0) {return "ln(a)/b = ".log($a)/$b;} else {return false;}';
$farr = array(
    create_function('$x,$y', 'return "als trig: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "als Hypotenuse: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', $f1),
    create_function('$a,$b', $f2),
    create_function('$a,$b', $f3)
    );

echo "\nGebrauch des ersten Arrays der anonymen Funktionen\n";
echo "Parameter: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// Erzeugung eines Bündels an String-Behandlungs-Routinen
$garr = array(
    create_function('$b, $a','if (strncmp ($a, $b, 3) == 0) return "** \"$a\" '.
        'und \"$b\"\n** Sieht für mich gleich aus! (ansehen der ersten 3 Zeichen)";'),
    create_function('$a, $b','; return "CRCs: ".crc32($a)." , ".crc32(b);'),
    create_function('$a, $b','; return "ähnlich(a, b) = ".similar_text($a, $b, &$p)."($p%)";')
    );
echo "\nGebrauch des zweiten Arrays der anonymen Funktionen\n";
process("Twas brilling and the slithy toves", "Twas the night", $garr);
	    </programlisting>
     </example>
     wenn sie nun den o.a Code ausführen lassen, wird folgendes
     ausgegeben	 :
     <informalexample>
      <programlisting>
Gebrauch des ersten Arrays der anonymen Funktionen
Parameter: 2.3445, M_PI
als trig: -1.6291725057799
als Hypotenuse: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a/b) = 0.27122299212594

Gebrauch des zweiten Arrays der anonymen Funktionen
** "Twas the night" und "Twas brilling and the slithy toves"
** Sieht für mich gleich aus! (ansehen der ersten 3 Zeichen)
CRCs: -725381282 , 1908338681
ähnlich(a,b) = 11(45.833333333333%)
	    </programlisting>
	   </informalexample>
     Möglicherweise liegt der häufigste Anwendungsfall für Funktionen im
     Lambda-Stil (anonym) bei den Callback-Funktionen, also z.B. beim
     Gebrauch von <function>array_walk</function> oder
     <function>usort</function>.
     <example>
      <title>
       Gebrauch der anonymen Funktionen als Callback-Funktion:
      </title>
	    <programlisting role="php">
$av = array("der ","ein ","dieser ","jener ");
array_walk($av, create_function('&$v,$k','$v = $v."Zug";'));
print_r($av);  // mit PHP3 benutzen sie bitte var_dump()
// Ausgaben:
// Array
// (
//     [0] =&gt; der Zug
//     [1] =&gt; ein Zug
//     [2] =&gt; dieser Zug
//     [3] =&gt; jener Zug
// )

// Ein Array aus Strings nach Länge geordnet
$sv = array("kurz","länger","noch länger","dieser ist am längsten");
print_r($sv);
// Ausgaben:
// Array
// (
//     [0] =&gt; kurz
//     [1] =&gt; länger
//     [2] =&gt; noch länger
//     [3] =&gt; dieser ist am längsten
// )

// Sortierung von lang nach kurz
usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);
// Ausgabe:
// Array
// (
//     [0] =&gt; dieser ist am längsten
//     [1] =&gt; noch länger
//     [2] =&gt; länger
//     [3] =&gt; kurz
// )
	    </programlisting>
	   </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.connection-aborted">
   <refnamediv>
    <refname>connection_aborted</refname>
    <refpurpose>
     Ergibt true, wenn die Client-Verbindung beendet wurde
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>connection_aborted</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt true zurück, wenn der Client nicht mehr verbunden ist.
     Siehe auch die<link linkend="features.connection-handling">
     Connection Handling</link>-Beschreibung im <link
     linkend="features">Features</link>-Kapitel für weitere
     Erläuterungen.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-status">
   <refnamediv>
    <refname>connection_status</refname>
    <refpurpose>Ergibt den Verbindungs-Status als Bit-Feld</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>connection_status</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt den Verbindungs-Status als Bit-Feld zurück.Siehe auch die<link
     linkend="features.connection-handling">
     Connection Handling</link>-Beschreibung im<link linkend="features">
     Features</link>-Kapitel für weitere Erläuterungen.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-timeout">
   <refnamediv>
    <refname>connection_timeout</refname>
    <refpurpose>
     Ergibt true, wenn das Skript seinen Time-Out erreicht hat
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>connection_timeout</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt true zurück, wenn der Time-Out des Skripts erreicht ist.
     Siehe auch die<link linkend="features.connection-handling">
     Connection Handling</link>-Beschreibung im <link
     linkend="features">Features</link>-Kapitel für weitere
     Erläuterungen.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.define">
   <refnamediv>
    <refname>define</refname>
    <refpurpose>Definiert eine Konstante</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>define</function></funcdef>
      <paramdef>string <parameter>name</parameter></paramdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>case_insensitive</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Definiert eine Konstante, ähnlich wie bei Variablen, ausser das:
     <itemizedlist>
      <listitem>
       <simpara>
        Eine Konstante nicht mit einem '$' beginnt;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Auf eine Konstante überall zugegriffen werden kann, ohne
        allerdings den Auswertungsregeln von Variablen zu unterliegen;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Eine Konstante nicht umdefiniert oder zurück gesetzt werden
        kann, wenn sie einmal gesetzt wurde und
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        eine Konstante nur eindimensionale Werte (also keine Arrays)
        enthalten kann.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Der Konstanten-Name wird durch <parameter>name</parameter>
     angegeben. Der Wert wird durch <parameter>value</parameter>
     gesetzt.
    </para>
    <para>
     Wenn der optional mögliche dritte Parameter
     <parameter>case_insensitive</parameter> den Wert
     <emphasis>1</emphasis> hat, wird die Konstante zwischen Groß- und
     Kleinschreibung unterschieden. Das ist auch die Voreinstellung
     (es wird dann also zwischen KONSTANTE und Konstante
     unterschieden).
    </para>
    <para>
     <emphasis>Die Funktionalität des dritten Parameters scheint z.Zt. noch
     nicht richtig umgesetzt worden zu sein (Stand 03/2000).</emphasis>
    </para>
    <para>
     <example>
      <title>Definition von Konstanten:</title>
      <programlisting role="php">
&lt;?php
define ("KONSTANTE", "Hallo Welt.");
echo KONSTANTE; // outputs "Hallo Welt.";
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     <function>Define</function> gibt bei erfolgreicher Zuweisung
     true, sonst false zurück.
    </para>
    <para>
     Siehe auch unter <function>defined</function> und im Abschnitt
     <link linkend="language.constants">Konstanten</link>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.defined">
   <refnamediv>
    <refname>defined</refname>
    <refpurpose>
     Prüft, ob eine angegebene Konstante existiert
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>defined</function></funcdef>
      <paramdef>string <parameter>name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Wenn die angegebene Konstante <parameter>name</parameter>
     existiert, wird true zurück gegeben, ansonsten false.
    </para>
    <para>
     Siehe auch <function>define</function> und den Abschnitt <link
     linkend="language.constants">Konstanten</link>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.die">
   <refnamediv>
    <refname>die</refname>
    <refpurpose>
     Gibt eine Nachricht aus und beendet das aktuelle Skript
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>die</function></funcdef>
      <paramdef>string <parameter>message</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Dieser Sprach-Konstrukt erzeugt eine Meldung und bricht das
     Parsing / die Abarbeitung des Skriptes ab (ohne
     Rückkehrmöglichkeit).
    </simpara>
    <para>
     <example>
      <title>"Die"-Beispiel:</title>
      <programlisting role="php">
&lt;?php
$filename = '/pfad/zu/dateiname';
$file = fopen ($filename, 'r')
    or die ("Kann die Datei ($filename) nicht öffnen.");
?&gt;
      </programlisting>
     </example>
    </para>
    <simpara>
     Beachten sie auch die Funktion <function>exit</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.eval">
   <refnamediv>
    <refname>eval</refname>
    <refpurpose>
     Wertet einen String aus, als wäre er PHP-Code
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>eval</function></funcdef>
      <paramdef>string <parameter>code_str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>Eval</function> versucht, den in
     <parameter>code_str</parameter> enthaltenen String als PHP-Code
     auszuführen. Abgesehen von anderen Zwecken kann dies nützlich
     sein, um Code auszuführen, der aus einer Datenbank ausgelesen
     wird.
    </simpara>
    <simpara>
     Beim Gebrauch von <function>eval</function> gilt es einige
     Faktoren zu beachten. Die Zeichenkette
     <parameter>code_str</parameter> muss gültigen PHP-Code enthalten,
     einschließlich syntaktisch richtiger Begrenzungszeichen (also
     incl. ";"-Abschluss-Zeichen für einzelne Anweisungen, sonst
     bricht der PHP-Parser in der folgenden Zeile mit einem Fehler ab.
     </simpara>
    <simpara>
     Beachten sie, dass die innerhalb von <function>eval</function>
     vorgenommenen Variablen-Zuweisungen nach Abarbeitung auch im
     Hauptskript ihre Gültigkeit behalten.
    </simpara>
    <simpara>
     Eine <literal>return</literal>-Angabe beendet sofort die
     Auswertung des Strings. Mit PHP4 können sie ein
     <literal>return</literal> verwenden, um das Ergebnis der Funktion
     <function>eval</function> zu erhalten. In PHP3 ist
     <function>eval</function> nämlich vom Typ <literal>void</literal>
     und liefert nichts zurück.
    </simpara>
    <para>
     <example>
      <title>
       <function>Eval</function>-Beispiel (einfache Texteinfügung):
      </title>
      <programlisting role="php">
&lt;?php
$string = 'Bierglas';
$name = 'Binding-Lager';
$str = 'Das ist mein $string, voll mit $name.&lt;br&gt';
echo $str;
eval ("\$str = \"$str\";");
echo $str;
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     Das obige Beispiel gibt aus:
     <programlisting>
Das ist mein $string, voll mit $name.
Das ist mein Bierglas, voll mit Binding-Lager.
     </programlisting>
    </para>
    <para>
     Beachten sie bitte das Setzen des Begrenzungs-Zeichens ";" in
     <parameter>code_str</parameter> sowie den Gebrauch des
     "\"-Zeichens.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.exit">
   <refnamediv>
    <refname>exit</refname>
    <refpurpose>Beenden des aktuellen Skripts</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>exit</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Mit <function>exit</function> beenden sie - ohne 
     Möglichkeit der Rückkehr - die Skriptausführung.
    </simpara>
    <simpara>
     Beachten sie auch die Funktion <function>die</function>.
    </simpara>
   </refsect1>
  </refentry> 

  <refentry id="function.func-get-arg">
   <refnamediv>
    <refname>func_get_arg</refname>
    <refpurpose>
     Gibt einen Eintrag aus einer Liste von Argumenten zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>func_get_arg</function></funcdef>
      <paramdef>int <parameter>arg_num</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt das Argument des an der <parameter>arg_num</parameter>
     stehenden Stelle in eine benutzer-definierte Liste zurück.  Der
     Zähler hierfür beginnt bei 0. Der Aufruf von
     <function>func_get_arg</function> ausserhalb einer
     Funktions-Definition erzeugt eine Warnung.
    </simpara>
    <simpara>
     Ist <parameter>arg_num</parameter> grösser als die Anzahl der
     vorhandenen Argumente, wird eine Warnung aus- und false zurück
     gegeben.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
    $numargs = func_num_args();
    echo "Anzahl der Argumente: $numargs&lt;br&gt;\n";
    if ($numargs &gt;= 2) {
        echo "Das 2. Argument ist: " . func_get_arg (1) . "&lt;br&gt;\n";
    }
} 

foo (1, 2, 3);
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_get_arg</function> kann in Verbindung mit
     <function>func_num_args</function> und
     <function>func_get_args</function> gebraucht werden, um
     benutzer-definierte Funktionen mit variabler Argument-Liste zu
     erstellen.
    </simpara>
    <note>
     <simpara>
      <emphasis>Diese Funktion steht ab PHP 4 zur Verfügung.</emphasis>
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.func-get-args">
   <refnamediv>
    <refname>func_get_args</refname>
    <refpurpose>
     Gibt ein Array zurück, das die Liste der einer Funktion übergebenen
     Argumente enthält
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>func_get_args</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     In einem Array wird jedes Element zurück gegeben, das einer
     benutzer-definierten Funktion übergeben wurde. Sollten sie
     dies ausserhalb einer eigenen (benutzer-definierten) Funktion
     anwenden, wird eine Warnung ausgegeben.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
    $numargs = func_num_args();
    echo "Anzahl der Argumente: $numargs&lt;br&gt;\n";
    if ($numargs &gt;= 2) {
        echo "Das 2. Argument ist: " . func_get_arg (1) . "&lt;br&gt;\n";
    }
    $arg_list = func_get_args();
    for ($i = 0; $i &lt; $numargs; $i++) {
        echo "Argument $i ist: " . $arg_list[$i] . "&lt;br&gt;\n";
    }
} 

foo (1, 2, 3);
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>Func_get_args</function> kann in Verbindung mit
     <function>func_num_args</function> und
     <function>func_get_arg</function> verwendet werden, um einer
     benutzer-definierten Funktion eine Argument-Liste mit variabler
     Länge zu übergeben.
    </simpara>
    <note>
     <simpara>
      Diese Funktion steht ab PHP 4 zur Verfügung.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.func-num-args">
   <refnamediv>
    <refname>func_num_args</refname>
    <refpurpose>
     Gibt die Anzahl der einer Funktion übergebenen Argumente zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>func_num_args</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Die einer benutzer-definierten Funktion übergebene Anzahl an
     Argumenten wird zurück gegeben. Falls
     <function>func_num_args</function> ausserhalb einer
     benutzer-definierten Funktion Verwendung findet, wird eine
     Warnung ausgegeben.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
    $numargs = func_num_args();
    echo "Anzahl der Argumente: $numargs\n";
} 

foo (1, 2, 3);  // Ausgabe: 'Anzahl der Argumente: 3'
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_num_args</function> kann in Verbindung mit
     <function>func_get_arg</function> und
     <function>func_get_args</function> benutzt werden, um einer
     benutzer-definerten Funktion eine variable Anzahl von Argumenten
     zu übergeben.
    </simpara>
    <note>
     <simpara>
      Diese Funktion wurde in PHP 4 hinzu gefügt.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.function-exists">
   <refnamediv>
    <refname>function_exists</refname>
    <refpurpose>
     Falls die angegebene Funktion definiert ist, wird true zurück
     gegeben
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>function_exists</function></funcdef>
      <paramdef>string <parameter>function_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Prüft die Liste der definierten Funktionen auf das Vorhanden sein
     der Funktion mit dem Namen <parameter>function_name</parameter> .
     Sofern vorhanden wird true, sonst false zurück gegeben.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.get-browser">
   <refnamediv>
    <refname>get_browser</refname>
    <refpurpose>
     Ermittelt die Möglichkeiten des Browsers eines Benutzers
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>get_browser</function></funcdef>
      <paramdef>string 
       <parameter><optional>user_agent</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>Get_browser</function> ermittelt die Möglichkeiten des
     auf das PHP-Skript zugreifenden Browsers. Dies geschieht durch
     Auslesen der zum Browser vorhandenen Werte aus der Datei
     <filename>browscap.ini</filename>. Per Voreinstellung wird der
     Wert von $HTTP_USER_AGENT als Browser-Typ benutzt. Dieses
     Verhalten können sie ändern (so z.B. den Namen der INI-Datei),
     indem sie den optionalen
     <parameter>user_agent</parameter>-Parameter an die
     <function>get_browser</function>-Funktion übergeben.
    </simpara>
    <simpara>
     Die zurück gegebene Information ist ein Objekt, das verschiedene
     Datenelemente enthält. Dazu gehören z.B. die Haupt- und
     Unterversions-Nummer des Browsers sowie true / false-Werte für
     Browser-<emphasis>Fähigkeiten</emphasis> (u.a. Frame-, Java- und
     Cookies-Unterstützung). Nicht gemeint ist hier die aktuell
     vorhandene Nutzung. Ist der Browser so konfiguriert, dass er
     z.Zt.  keine Cookies annehmen soll, wird trotzdem true in Bezug
     auf die Cookie-Fähigkeiten zurückgegeben, wenn in der Datei
     <filename>browscap.ini</filename> der entsprechende Wert true
     ist.
    </simpara>
    <simpara>
     Da in <filename>browscap.ini</filename> Informationen vieler
     Browser stehen, obliegt es dem Skript-Schreiber, diese Datei auf
     dem Laufenden zu halten. Das Format dieser Datei sollte
     selbsterklärend sein.
    </simpara>
    <para>
     Das folgende Beispiel zeigt, wie man alle verfügbaren
     Informationen zu einem gerade benutzten Browser anzeigen könnte:
     <example>
      <title><function>Get_browser</function>-Beispiel:</title>
      <programlisting role="php">
&lt;?php
function list_array ($array) {
    while (list ($key, $value) = each ($array)) {
        $str .= "&lt;b&gt;$key:&lt;/b&gt; $value&lt;br&gt;\n";
    }
    return $str;
}
echo "$HTTP_USER_AGENT&lt;hr&gt;\n";
$browser = get_browser();
echo list_array ((array) $browser);
?&gt;
      </programlisting>
     </example>
    </para>
    <simpara>
     Die Ausgabe des obigen Skripts könnte so aussehen:
    </simpara>
    <programlisting>
Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)&lt;hr&gt;
&lt;b&gt;browser_name_pattern:&lt;/b&gt; Mozilla/4\.5.*&lt;br&gt;
&lt;b&gt;parent:&lt;/b&gt; Netscape 4.0&lt;br&gt;
&lt;b&gt;platform:&lt;/b&gt; Unknown&lt;br&gt;
&lt;b&gt;majorver:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;minorver:&lt;/b&gt; 5&lt;br&gt;
&lt;b&gt;browser:&lt;/b&gt; Netscape&lt;br&gt;
&lt;b&gt;version:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;frames:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;tables:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;cookies:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;backgroundsounds:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;vbscript:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;javascript:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;javaapplets:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;activexcontrols:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;beta:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;crawler:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;authenticodeupdate:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;msn:&lt;/b&gt; &lt;br&gt;
    </programlisting>
    <simpara>
     Damit dieses Skript richtig funktioniert, muss die <link
     linkend="ini.sect.browscap">browscap</link>-Einstellung ihrer
     Konfigurations-Datei auf die richtige
     <filename>browscap.ini</filename>-Datei zeigen.
    </simpara>
    <simpara>
     Weitere Informationen (incl. Bezugsquellen für
     <filename>browscap.ini</filename>-Dateien) finden sie in der
     PHP-FAQ unter <ulink
     url="&url.php.faq;">&url.php.faq;</ulink>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ignore-user-abort">
   <refnamediv>
    <refname>ignore_user_abort</refname>
    <refpurpose>
     Stellt ein, ob der Verbindungsabbruch eines Clients die
     Skript-Ausführung abbrechen soll
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ignore_user_abort</function></funcdef>
      <paramdef>int 
       <parameter><optional>setting</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Mit dieser Funktion wird der Wert dafür gesetzt, ob der Abbruch
     einer Client-Verbindung die weitere Abarbeitung eines Skripts
     beenden soll. Es wird der vorherige Wert zurück gegeben. Die
     Funktion kann auch ohne Argument aufgerufen werden, um nur die
     aktuelle Einstellung zu erfahren. Die komplette Beschreibung des
     Verbindungs-Handling von PHP können sie im Abschnitt <link
     linkend="features.connection-handling">Connection-Handling</link>
     des Kapitels <link linkend="features">Features</link>
     nachlesen. Dort werden auch die Werte für den optionalen
     Parameter <parameter>setting</parameter> näher erläutert.
    </simpara>
   </refsect1>
  </refentry> 
	
  <refentry id="function.iptcparse">
   <refnamediv>
    <refname>iptcparse</refname>
    <refpurpose>
     Übersetzt einen binären
     IPTC-<ulink url="&url.iptc;">&url.iptc;</ulink>-Block
     in einzelne Tags.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>iptcparse</function></funcdef>
      <paramdef>string <parameter>iptcblock</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Mit dieser Funktion übertragen sie einen binären IPTC-Block in
     seine einzelnen Tags. Es wird ein Array zurück gegeben. In diesem
     bilden die Tag-Markierungen den Index, die Werte stellen den
     Inhalt dar. Bei einem Fehler oder wenn keine IPTC-Daten gefunden
     wurden, wird false zurück gegeben. Unter
     <function>GetImageSize</function> finden sie ein Beispiel.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.leak">
   <refnamediv>
    <refname>leak</refname>
    <refpurpose>Speicher-Verbrauch</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>leak</function></funcdef>
      <paramdef>int <parameter>bytes</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>Leak</function> belegt die angegebene Speichergrösse.
    </simpara>
    <simpara>
     Diese Funktion ist hilfreich beim Debuggen des Speicher-Managers,
     der "leaked"-Speicher nach Abarbeitung aller Anforderungen wieder
     automatisch frei gibt.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.pack">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>Packt Daten in einen Binär-String</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pack</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>args</optional></parameter> ...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion packt ein oder mehrere Argumente - unter Beachtung
     der Argument-Formate - in einen Binär-String. In dem zurück
     gegebenen Binär-String stehen anschließend die Daten.
    </para>
    <para>
     Die Idee entstammt Perl. Alle Formatierungs-Anweisungen
     funktionieren genau wie dort. In PHP fehlen aber einige
     Format-Codes von Perl (z.B. "u"). Der Format-String besteht aus
     Format-Codes, gefolgt von einem optionalen
     Wiederholungs-Argument.  Dieses Argument kann ein Integer-Wert
     oder ein "*" (für Wiederholung bis ans Ende der Daten) sein. Bei
     "a", "A", "h" und dem "H" Format-Code gibt das
     Wiederholungs-Argument an, wie viele gleiche Zeichen folgen. Im
     Zusammenhang mit "@" gibt das Wiederholungs-Argument die absolute
     Position an, ab der das nächste Zeichen steht. Bei allen anderen
     steht der Wiederholungs-Zähler für die Anzahl der benutzten
     Daten-Argumente, die in den Binär-String gepackt werden sollen.
     Z. Zt. sind folgende Codes implementiert:
     <itemizedlist>
      <listitem>
       <simpara>
        a mit NUL gefüllte Zeichenkette (String)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        A mit Leerzeichen (SPACE) gefüllte Zeichenkette (String)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        h Hex Zeichenkette (String), unterer Halbwert zuerst
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        H Hex Zeichenkette (String), höherer Halbwert zuerst
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        c signed char
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        C unsigned char
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        s Short-Typ mit Vorzeichen (immer 16 Bit, Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        S Short-Typ ohne Vorzeichen (immer 16 Bit, Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        n Short-Typ ohne Vorzeichen (immer 16 Bit, big endian byte
        order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        v Short-Typ ohne Vorzeichen (immer 16 Bit, little endian byte
        order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        i Integer mit Vorzeichen (Größe und Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        I Integer-Typ ohne Vorzeichen (Größe und Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        l Long-Typ mit Vorzeichen (immer 32 Bit, Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        L Long-Typ ohne Vorzeichen (immer 32 Bit, Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        N Long-Typ ohne Vorzeichen (immer 32 Bit, big endian Byte-
        Folge)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        V Long-Typ ohne Vorzeichen (immer 32 Bit, little endian Byte-
        Folge)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        f Fließkomma-Typ (maschinenabhängige Größe und Wiedergabe)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        d Double-Typ (maschinenabhängige Größe und Wiedergabe)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        x NUL Byte
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        X Sichern eines Bytes
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        @ NUL-Auffüllung bis zur absoluten Position
       </simpara>
      </listitem>
     </itemizedlist>
     <example>
      <title>Mit Pack formatierter String:</title>
      <programlisting role="php">
$binarydata = pack ("nvc*", 0x1234, 0x5678, 65, 66);
      </programlisting>
      <para>
       Der sich daraus ergebende Binär-String ist 6 Bytes lang und
       enthält: 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
      </para>
     </example>
    </para>
    <para>
     Bedenken sie, dass der Unterschied zwischen vorzeichen-losen und
     vorzeichen-behafteten Werten nur Einfluss auf die Funktion
     <function>unpack</function> hat, wogegen dies bei der Funktion
     <function>pack</function> egal ist.
    </para>
    <para>
     Beachten sie auch, dass PHP intern Ganzzahl-Werte als
     vorzeichen-behaftete Werte speichert, deren Umfang vom
     Maschinen-Typ abhängig ist. Geben sie PHP einen vorzeichen-losen
     Ganzzahl-Wert, der zu groß ist für diese Art der Speicherung,
     wird er ins Double-Format umgesetzt, was oft zu unerwünschten
     Resultaten führt.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.register-shutdown-function">
   <refnamediv>
    <refname>register_shutdown_function</refname>
    <refpurpose>
     Registriert eine Funktion zur Ausführung beim Skript-Abschluss
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int 
       <function>register_shutdown_function</function>
      </funcdef>
      <paramdef>string <parameter>func</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Die mit <parameter>func</parameter> benannte Funktion wird im
     Skript zwecks Ausführung an dessen Ende eingetragen.
    </simpara>
    <para>
     Bekannte Problemfälle:
    </para>
    <simpara>
     Da innerhalb dieser Funktion keinerlei Ausgabe im Browser erzeugt
     werden, können sie die registrierte Funktion nicht mit print oder
     echo usw. debuggen.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>
     Erzeugt ein speicherbares Datenformat
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>serialize</function></funcdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>Serialize</function> gibt eine Zeichenkette (String)
     zurück, die eine Byte-Stream entsprechende Wiedergabe von
     <parameter>value</parameter> enthält und beliebig abgespeichert
     werden kann.
    </simpara>
    <simpara>
     Diese Funktion dient der Speicherung oder Übergabe von
     PHP-Werten, ohne dass diese ihren Wert oder ihre Struktur
     verlieren.
    </simpara>
    <simpara>
     Um eine serialisierte Zeichenkette wieder als PHP-Wert verfügbar
     zu machen steht die <function>unserialize</function>-Funktion zur
     Verfügung. <function>Serialize</function> kann mit den Typen
     <type>integer</type>, <type>double</type>, <type>string</type>,
     <type>array</type> (mehrdimensional) und <type>object</type>
     umgehen. Beim Objekt werden die Eigenschaften serialisiert, die
     Methoden gehen aber verloren.
    </simpara>
    <para>
     <example>
      <title><function>Serialize</function>-Beispiel:</title>
      <programlisting role="php">
// $session_data enthält ein mehrdimensionales Array mit
// Session-Informationen des aktuellen Benutzers. Wir benutzen
// serialize() um diese Infos am Ende der Anfrage in eine
// Datenbank zu speichern.

$conn = odbc_connect ("webdb", "php", "moorhuhn");
$stmt = odbc_prepare ($conn,
                      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata)) {
    $stmt = odbc_prepare ($conn,
                          "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &amp;$sqldata)) {
        /* Etwas lief schief. Fluche, heule und stöhne. */
    }
}
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sleep">
   <refnamediv>
    <refname>sleep</refname>
    <refpurpose>Programmverzögerung</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>sleep</function></funcdef>
      <paramdef>int <parameter>seconds</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Die <function>sleep</function>-Funktion unterbricht die weitere
     Skript-Ausführung für die mit <parameter>seconds</parameter>
     angegebene Anzahl in Sekunden.
    </simpara>
    <simpara>
     Siehe auch <function>usleep</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.uniqid">
   <refnamediv>
    <refname>uniqid</refname>
    <refpurpose>Erzeugt eine eindeutige ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>uniqid</function></funcdef>
      <paramdef>string <parameter>prefix</parameter></paramdef>
      <paramdef>boolean 
       <parameter><optional>lcg</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>Uniqid</function> gibt eine eindeutige ID mit Präfix
     zurück. Diese basiert auf der aktuellen Zeit in Mikrosekunden.
     Das Präfix kann hilfreich sein, wenn sie z. B. auf mehreren
     Servern gleichzeitig ID´s erzeugen, was ja im ungünstigsten Fall
     zur selben Mikrosekunde geschehen kann.  Der
     <parameter>prefix</parameter>-Parameter kann bis zu 114 Zeichen
     lang sein.
    </simpara>
    <simpara>
     Ist der optionale Parameter <parameter>lcg</parameter> true, wird
     <function>uniqid</function> am Ende des Rückgabewertes
     zusätzliche "LCG"-Zustandswerte anfügen, durch die das Ergebnis
     noch eindeutiger wird.
    </simpara>
    <simpara>
     Bei leerem <parameter>prefix</parameter>-Parameter ist der zurück
     gegebene String 13 Zeichen lang. Ist der Parameter
     <parameter>lcg</parameter> true, sind es 23 Zeichen.
    </simpara>
    <note>
     <simpara>
      Der <parameter>lcg</parameter>-Parameter ist erst ab PHP 4
      bzw. PHP 3.0.13 und später verfügbar.
     </simpara>
    </note>
    <para>
     Wenn sie eindeutige ID´s bzw. eindeutige Token benötigen und
     beabsichtigen, diese Token über das Netzwerk an den Benutzer
     weiter zu leiten (z.B. als Session-Cookies), ist es ratsam, wenn
     sie wie folgt vorgehen:
     <informalexample>
      <programlisting role="php">
$token = md5 (uniqid ("")); // kein Zufalls-Anteil = schlecht
$better_token = md5 (uniqid (rand())); // besser, da schwer zu erraten
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Hierdurch wird eine 32-Zeichen-ID (128 Bit-Hex-Wert) erzeugt, die
     nur sehr schwer vorhersehbar ist.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.unpack">
   <refnamediv>
    <refname>unpack</refname>
    <refpurpose>Entpackt die Daten eines Binär-Strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>unpack</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Unpack</function> überträgt die Daten eines
     Binär-Strings in ein Array unter Berücksichtigung des
     <parameter>format</parameter>-Parameters. Das Array
     wird als Ergebnis des Funktionsaufrufs zurück gegeben.
    </para>
    <para>
     <function>Unpack</function> funktioniert etwas anders als man
     es von Perl her kennt, da sich die zurück gegebenen Daten in
     einem assoziativen Array befinden. Dies erreichen sie nur, wenn
     sie die verschiedenen Format-Codes benennen und sie mit
     einem "/" voneinander trennen.
     <example>
      <title><function>Unpack</function> formatierter String</title>
      <programlisting role="php">
$array = unpack ("c2chars/nint", $binarydata);
      </programlisting>
      <para>
       Das resultierende Array wird die Einräge "chars1", "chars2" und
       "int" enthalten.
      </para>
     </example>
    </para>
    <para>
     Die Format-Codes werden unter <function>pack</function> näher
     erläutert.
    </para>
    <para>
     Beachten sie, dass PHP Integer-Werte intern mit Vorzeichen
     speichert. Wenn sie einen grossen vorzeichen-losen Long-Wert
     entpacken und er von der selben Grösse ist, die PHP für dessen
     Speicherung verwendet, wird das Ergebnis ein negativer Wert sein
     (auch wenn sie dieses als vorzeichen-los zu entpacken angegeben
     haben).
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>
     Erzeugt aus einem gespeicherten Datenformat einen Wert in PHP
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>unserialize</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>Unserialize</function> nimmt eine einzelne
     Variable aus einer serialisierten Datenmenge (siehe unter
     <function>serialize</function>) und wandelt sie in einen
     PHP-Wert um. Dieser Wert wird als Funktionsergebnis zurück
     gegeben. Er kann vom Typ <type>integer</type>,
     <type>double</type>, <type>string</type>, <type>array</type>
     oder <type>object</type> sein. Wurde ein Objekt serialisiert,
     können dessen Methoden nicht zurück gegeben werden.
    </simpara>
    <para>
     <example>
      <title><function>Unserialize</function>-Beispiel:</title>
      <programlisting role="php">
// Als Beispiel benutzen wir unserialize() um Daten aus einer
// Datenbank nach $session_data zu laden. Das Beispiel vervollständigt
// das unter serialize() beschriebene.

$conn = odbc_connect ("webdb", "php", "moorhuhn");
$stmt = odbc_prepare ($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array ($PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata) || !odbc_fetch_into ($stmt, &amp;$tmp)) {
    // wenn execute oder fetch fehlschlägt, initialisiere ein leeres Array
    $session_data = array();
} else {
    // die serialisierten Daten sollten nun in $tmp[0] stehen
    $session_data = unserialize ($tmp[0]);
    if (!is_array ($session_data)) {
        // etwas ging schief, also wieder ein leeres Array initialisieren
        $session_data = array();
    }
}
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.usleep">
   <refnamediv>
    <refname>usleep</refname>
    <refpurpose>Programm-Verzögerung in Mikrosekunden</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>usleep</function></funcdef>
      <paramdef>int <parameter>micro_seconds</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Mittels der Funktion <function>sleep</function> verzögern sie die
     weitere Skript-Ausführung um die gegebene Anzahl an
     <parameter>micro_seconds</parameter>.
    </simpara>
    <simpara>
     Beachten sie auch die Funktion <function>sleep</function>.
    </simpara>
    <note>
     <simpara>
      Dies Funktion steht unter Windows-Systemen nicht zur Verfügung.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.highlight-string">
   <refnamediv>
    <refname>highlight_string</refname>
    <refpurpose>Hervorhebung der Syntax eines Strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>highlight_string</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Die Funktion <function>highlight_string</function> gibt den String
     <parameter>str</parameter> mit hervorgehobener Syntax (Syntax 
     highlighting) aus. Dabei werden die Farben des in PHP eingebauten
     Syntax-Highlighter benutzt.
    </simpara>
    <simpara>
     Siehe auch <function>highlight_file</function> und
     <function>show_source</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.highlight-file">
   <refnamediv>
    <refname>highlight_file</refname>
    <refpurpose>Syntax-Hervorhebung für eine Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>highlight_file</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Die Funktion <function>highlight_file</function> erzeugt die 
     Ausgabe des Codes der Datei <parameter>filename</parameter>
     mit hervorgehobener Syntax. Dabei werden die Farben des in PHP
     eingebauten Syntax-Highlighter benutzt.
    </simpara>
    <para>
     <example>
      <title>Erzeugung einer hervorgehobenen URL</title>
      <simpara>
       Zur Erzeugung einer URL, die Code eines ihm übermittelten 
       Skripts hervorgehoben dargestellen kann, machen wir Gebrauch von
       der &quot;ForceType&quot;-Anweisung des Apachen um eine richtige
       URL zu erzeugen. Zusätzlich benutzen wir die Funktion
       <function>highlight_file</function>, um das Code-Listing wie
       gewünscht an zu zeigen.
      </simpara>
      <simpara>
       In ihrer httpd.conf sollten sie folgendes hinzu fügen:
      </simpara>
      <para>
       <informalexample><programlisting>
&lt;Location /source&gt;
    ForceType application/x-httpd-php
&lt;/Location&gt;
       </programlisting></informalexample>
      </para>
      <simpara>
       Jetzt erzeugen sie eine Datei namens &quot;source&quot; und
       speichern es in dem Root-Verzeichnis ihrer Web-Seite.
      </simpara>
      <para>
       <programlisting role="php">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Source Display&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot;&gt;
&lt;?php
    $script = getenv (&quot;PATH_TRANSLATED&quot;);
    if(!$script) {
        echo &quot;&lt;BR&gt;&lt;B&gt;Fehler: Skript-Name nötig&lt;/B&gt;&lt;BR&gt;&quot;;
    } else {
        if (ereg(&quot;(\.php|\.inc)$&quot;,$script)) {
            echo &quot;&lt;H1&gt;Source von: $PATH_INFO&lt;/H1&gt;\n&lt;HR&gt;\n&quot;;
            highlight_file($script);
        } else {
            echo &quot;&lt;H1&gt;ERROR: Nur PHP oder Include-Skripte sind erlaubt&lt;/H1&gt;&quot;; 
        }
    }
    echo &quot;&lt;HR&gt;Erzeugt: &quot;.date(&quot;Y/M/d H:i:s&quot;,time());
?&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
       </programlisting>
      </para>
      <simpara>
       Jetzt können sie die u.a. URL benutzen, um eine farblich
       hervorgehobene Version des Skriptes
       &quot;/path/to/script.php&quot; innerhalb ihrer Web-Seite zu
       zeigen.
      </simpara>
      <para>
       <informalexample>
	<programlisting>
http://ihr.server.de/source/pfad/zu/script.php
	</programlisting>
       </informalexample>
      </para>
     </example>
    </para>
    <simpara>
     Siehe auch <function>highlight_string</function> und
     <function>show_source</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.show-source">
   <refnamediv>
    <refname>show_-source</refname>
    <refpurpose>Syntax-Highlighting einer Datei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>show_source</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Die Funktion <function>show_source</function> erzeugt die 
     Ausgabe des Codes der Datei <parameter>filename</parameter>
     mit hervorgehobener Syntax. Dabei werden die Farben des in PHP
     eingebauten Syntax-Highlighter benutzt.
    </simpara>
    <note>
     <simpara>
      Diese Funktion ist ein Alias der Funktion
      <function>highlight_file</function>.
     </simpara>
    </note>
    <simpara>
     Siehe auch <function>highlight_string</function> und
     <function>highlight_file</function>.
    </simpara>
   </refsect1>
  </refentry>

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
