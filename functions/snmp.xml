<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.snmp">
  <title>SNMP Funktionen</title>
  <titleabbrev>SNMP</titleabbrev>

  <partintro>
   <simpara>
    Um die SNMP Funktionen unter Unix nutzen zu können muss das <ulink url="&url.ucd-snmp;">UCD SNMP</ulink> 
	Paket installiert sein. Unter Windows sind diese Funktionen nur unter NT verfügbar, nicht aber 
	unter Win95/98.
   </simpara>

   <simpara>
    WICHTIG: Um das UCD SNMP Paket zu nutzen muss NO_ZEROLENGTH_COMMUNITY als 1 definiert werden bevor man es kompiliert.
    Nache dem Konfigureieren UCD SNMP muss in der Datei config.h die Zeile mit NO_ZEROLENGTH_COMMUNITY auskommentiert werden.
    Die Zeile sollte danach so aussehen:</simpara>

  <para>
    <programlisting role="c">
<![CDATA[
#define NO_ZEROLENGTH_COMMUNITY 1
]]>
    </programlisting>
   </para>
   <simpara>
    Wenn seltsame "segmentation faults" in Verbindung mit SNMP Kommandos auftauchen,
    wurden die obigen Anweisungen nicht korrekt befolgt.
    Als eine Alternative zum Neukompilieren des Packets, kann mann auch PHP mit der option
    --enable-ucd-snmp-hack kompilieren.</simpara>
    
  </partintro>

  <refentry id="function.snmpget">
   <refnamediv>
    <refname>snmpget</refname>
    <refpurpose>Ein SNMP Objekt holen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>snmpget</function></funcdef>
      <paramdef>string <parameter>hostname</parameter></paramdef>
      <paramdef>string <parameter>community</parameter></paramdef>
      <paramdef>string <parameter>object_id</parameter></paramdef>
      <paramdef>int <parameter><optional>timeout</optional></parameter></paramdef>
      <paramdef>int <parameter><optional>retries</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     Gibt den Wert eines SNMP Objektes zurück, bei Erfolg und &false; bei einem Fehler.</para>

    <para>
     Die <function>snmpget</function> Funktion wird verwendet um den Wert eines SNMP Objekts zu ermitteln,
     das mit <parameter>object_id</parameter> näher bestimmt ist. Der  SNMP "agent" wird mit <parameter>hostname</parameter>
     deklariert und die "read community" wird in <parameter>community</parameter> angegeben.</para>

    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$syscontact = snmpget("127.0.0.1", "public", "system.SysContact.0");
]]>
      </programlisting>
     </informalexample>
    </para>

   </refsect1>
  </refentry>

  <refentry id="function.snmpset">
   <refnamediv>
    <refname>snmpset</refname>
    <refpurpose>Setzt ein SNMP Objekt</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>snmpset</function></funcdef>
      <paramdef>string <parameter>hostname</parameter></paramdef>
      <paramdef>string <parameter>community</parameter></paramdef>
      <paramdef>string <parameter>object_id</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
      <paramdef>int <parameter><optional>timeout</optional></parameter></paramdef>
      <paramdef>int <parameter><optional>retries</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
	 Setzt den angegebenen SNMP Objekt Wert, gibt &true; bei Erfolg
	 und &false; bei einem Fehler zurück.
     Sets the specified SNMP object value, returning &true; on success
   </para>

    <para>
	 Die Funktion <function>snmpset</function> wird benutzt, um den Wert
	 eines SNMP Objekts zu setzen, der mit <parameter>object_id</parameter>
	 angegeben wird. Der SNMP Agent wird bei <parameter>hostname</parameter>
	 angegeben und die Lese-"Community" mit dem <parameter>community</parameter>
	 Parameter.
	</para>

   </refsect1>
  </refentry>

  <refentry id="function.snmpwalk">
   <refnamediv>
    <refname>snmpwalk</refname>
    <refpurpose>Holt alle SNMP Objekte eines Agenten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>snmpwalk</function></funcdef>
      <paramdef>string <parameter>hostname</parameter></paramdef>
      <paramdef>string <parameter>community</parameter></paramdef>
      <paramdef>string <parameter>object_id</parameter></paramdef>
      <paramdef>int <parameter><optional>timeout</optional></parameter>
      </paramdef>
      <paramdef>int <parameter><optional>retries</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
	 Gibt einen Array von SNMP Objekten zurück, der mit der 
     <function>object_id</function> als Wurzel beginn, oder  &false; 
	 bei einem Fehler.
	</para>

    <para> 
     Die <function>snmpwalk</function> Funktion wird verwendet um alle Werte von 
     dem SNMP Agenten zu lesen, der bei <parameter>hostname</parameter> angegebn 
	 wurde. Der <parameter>Community</parameter> Parameter bestimm die Lese-"Community" 
	 für diesen Agenten. Ein &null; <parameter>object_id</parameter> wird als Wurzel des
	 SNMP Objektbaums verwendet und alle Objekts unter diesem Baum als ein Array 
	 zurückgegeben. Wenn <parameter>object_id</parameter> angegeben wird, werden alle 
	 SNMP Objekte unterhalb der <parameter>object_id</parameter> zurückgegeben.

     <informalexample>
      <programlisting role="php"> 
<![CDATA[
$a = snmpwalk("127.0.0.1", "public", ""); 
]]>
      </programlisting>
     </informalexample></para> 

    <para>
     Der obige Funktionsaufruf gibt alle SNMP Objekte des Agenten, der auf
	 localhost läuft, zurück. Man kann mit einer Schleife alle Werte 
	 durchlaufen.

     <informalexample>
      <programlisting role="php">
<![CDATA[
for ($i=0; $i < count($a); $i++) {
    echo $a[$i];
}
]]>
      </programlisting>
     </informalexample></para>
	
   </refsect1>
  </refentry>


  <refentry id="function.snmpwalkoid">
   <refnamediv>
    <refname>snmpwalkoid</refname>
    <refpurpose>Abfrage über einen Baum einer Netzwerkeinheit.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>snmpwalkoid</function></funcdef>
      <paramdef>string <parameter>hostname</parameter></paramdef>
      <paramdef>string <parameter>community</parameter></paramdef>
      <paramdef>string <parameter>object_id</parameter></paramdef>
      <paramdef>int <parameter><optional>timeout</optional></parameter>
      </paramdef>
      <paramdef>int <parameter><optional>retries</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
	 Gibt ein assoziatives Array mit den Objekt Ids und den dazugehörigen
	 Objektwerten zurück, der mit der <parameter>object_id</parameter> als
	 Wurzel beginnt, oder &false; bei einem Fehler.</para>

    <para>
     Die <function>snmpwalkoid</function> Funktion wird verwendet um alle Werte von 
     dem SNMP Agenten zu lesen, der bei <parameter>hostname</parameter> angegebn 
	 wurde. Der <parameter>Community</parameter> Parameter bestimm die Lese-"Community" 
	 für diesen Agenten. Ein &null; <parameter>object_id</parameter> wird als Wurzel des
	 SNMP Objektbaums verwendet und alle Objekts unter diesem Baum als ein Array 
	 zurückgegeben. Wenn <parameter>object_id</parameter> angegeben wird, werden alle 
	 SNMP Objekte unterhalb der <parameter>object_id</parameter> zurückgegeben.</para>

    <para>
	 Die Existenz von <function>snmpwalkoid</function> und
     <function>snmpwalk</function> hat historische Gründe. Beide Funktionen gibt es
	 aus Kompatiblitätsgründen.

         <informalexample>
      <programlisting role="php"> 
<![CDATA[
$a = snmpwalkoid("127.0.0.1", "public", ""); 
]]>
      </programlisting>
     </informalexample></para> 

    <para>
     Der obige Funktionsaufruf gibt alle SNMP Objekte des Agenten, der auf
	 localhost läuft, zurück. Man kann mit einer Schleife alle Werte 
	 durchlaufen.

     <informalexample>
      <programlisting role="php">
<![CDATA[
for ($i=0; $i < count($a); $i++) {
    echo $a[$i];
}
]]>
      </programlisting>
     </informalexample></para>
   </refsect1>
  </refentry>


  <refentry id="function.snmp-get-quick-print">
   <refnamediv>
    <refname>snmp_get_quick_print</refname>
    <refpurpose>Holt den aktuellen Wert der quick_print Einstellung der UCD Bibliothek
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>snmp_get_quick_print</function></funcdef>
      <paramdef>void <parameter></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
	 Gibt den aktuellen Wert von quick_print der UCD Bibliothek zurück.
     quick_print ist standartmäßig abgeschaltet.

     <informalexample>
      <programlisting role="php"> 
<![CDATA[
$quickprint = snmp_get_quick_print();
]]>
      </programlisting>
     </informalexample></para> 

    <para>
	 Der obige Funktionsaufruf gibt <systemitem>&false;</systemitem> zurück, wenn
	 quick_print ausgeschaltet ist und <systemitem>&true;</systemitem>, wenn quick_print
     eingeschaltet ist.</para>

    <para>
     Die <function>snmp_get_quick_print</function> Funktion ist nur bei Verwendung der 
	 SNMP Bibliothek verfügbar, jedoch nicht bei Verwendung der Windows SNMP Bibliothek.</para>

    <para>
     Siehe: <function>snmp_set_quick_print</function> für eine Vollständie Beschreibung was
	 quick_print bewirkt..</para>
	
   </refsect1>
  </refentry>

  <refentry id="function.snmp-set-quick-print">
   <refnamediv>
    <refname>snmp_set_quick_print</refname>
    <refpurpose>Setzt den Wert von quick_print innerhalb der UCD SNMP Bibliothek.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>snmp_set_quick_print</function></funcdef>
      <paramdef>boolean <parameter>quick_print</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
	 Setzt den Wert von quick_print innerhalb der UCD SNMP Bibliothek.
	 Falls esgesetzt ist (1), wird die SNMP Bibliothek 'quick printed' Werte zurückgeben. 
	 Das Bedeutet, dass nur der Wert ausgegeben wird. Wenn quick_print nicht aktiviert ist,
	 (Standarteinstellung) gibt die UCD SNMP Bibliothek extra Informationen aus, die den Typ
	 des Wertes (z.B. IpAddress oder OID) enhalten. Zusätzlich gibt die Bibliothek Hex-Werte 
	 für alle Werte, die weniger als vier Zeichen haben, aus, wenn quick_print nicht aktiviert ist. 
	</para>

    <para>
	 quick_print wird oft verwendet um die Informationen, die zurückgegeben werden, weiterzuverwenden
	 anstatt sie auszugeben.

     <informalexample>
      <programlisting role="php"> 
<![CDATA[
snmp_set_quick_print(0);
$a = snmpget("127.0.0.1", "public", ".1.3.6.1.2.1.2.2.1.9.1");
echo "$a<BR>\n";
snmp_set_quick_print(1);
$a = snmpget("127.0.0.1", "public", ".1.3.6.1.2.1.2.2.1.9.1");
echo "$a<BR>\n";
]]>
      </programlisting>
     </informalexample></para> 

    <para>
     Der erste Wert, der ausgegeben wird, ist:: 'Timeticks: (0) 0:00:00.00', waehrend mit 
     aktiviertem quick_print, nur '0:00:00.00' ausgegeben wird.</para>

    <para>
     Standartmäßig gibt die UCD SNMP umfangreiche Werte zurück, quick_print wird
	 verwendet um nur die Werte zurückzugeben.</para>

    <para>
	 Momentan werden Strings noch mit extra Quotierungen zurückgegeben, dies wird in Zukunft 
	 behoben werden.</para>

    <para>
     Die <function>snmp_set_quick_print</function> Funktion ist nur bei Verwendung der 
	 SNMP Bibliothek verfügbar, jedoch nicht bei Verwendung der Windows SNMP Bibliothek.</para>

   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
