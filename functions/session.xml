 <reference id="ref.session">
  <title>Session Funktionen</title>
  <titleabbrev>Sessions</titleabbrev>

  <partintro>
   <para>
    Die Unterstützung von Sessions in PHP bietet die
    Möglichkeit, bestimmte Daten während einer Folge
    von Aufrufen ihrer Website festzuhalten. Damit können Sie
    persönlichere Applikationen erstellen und Ihre Website
    ansprechender gestalten.
   </para>
   <para>
    Falls sie mit dem Sessionmanagment von PHPLIB vertraut sind,
    werden sie Ähnlichkeiten zu PHP's Session-Unterstützung
    feststellen.
   </para>
   <para>
    Einem Besucher wird beim Aufruf ihrer Website eine einzigartige
    ID, die sogenannte Session-ID, zugeordnet. Diese wird entweder
    benutzerseitig in einem Cookie abgelegt oder in der URL
    übermittelt.
   </para>
   <para>
    Die Unterstützung von Sessions erlaubt Ihnen, eine beliebige
    Anzahl von Variablen zu registrieren und diese über Anfragen
    hinweg zu erhalten. Wenn ein Besucher Ihre Website aufruft,
    überprüft PHP automatisch (falls session.auto_start auf
    1 gesetzt ist) oder auf Anfrage (explizit durch
    <function>session_start</function> oder implizit durch
    <function>session_register</function>), ob mit der Anfrage schon
    eine bestimmte Session-ID gesendet wurde. Wenn dies der Fall ist,
    wird die zuvor gespeicherte Umgebung wiederhergestellt.
   </para>
   <para>
    Alle registrierten Variablen werden serialisiert, nachdem die
    Anfrage beendet ist. Registrierte Variablen, die nicht definiert
    sind, werden als nicht definiert gekennzeichnet. Auch bei
    darauffolgenden Zugriffen werden sie nicht vom Session-Modul
    definiert, außer der Benutzer definiert sie später.
   </para>
   <para>
    Die Konfigurationseinstellungen von <literal>track_vars</literal>
    und <literal>register_globals</literal> beeinflussen, wie die
    Session-Variablen gespeichert und wiederhergestellt werden.
   </para> 
   <para>
    Falls <literal>track_vars</literal> aktiviert und
    <literal>register_globals</literal> deaktiviert ist, können nur Bestandteile
    des globalen assoziativen Arrays $HTTP_SESSION_VARS als Session-Variablen
    registriert werden. Wiederhergestellte Session-Variablen stehen nur im Array
    $HTTP_SESSION_VARS zur Verfügung.
    <example> 
     <title>
      Registrierung einer Variablen bei aktiviertem
      <literal>track_vars</literal>
     </title>
     <programlisting role="php">
&lt;?php
session_register("count");
$HTTP_SESSION_VARS["count"]++;
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    Wenn <literal>register_globals</literal> aktiviert ist, können alle
    globalen Variablen als Session-Variablen registriert werden und die
    Session-Variablen werden als entsprechende globale Variablen
    wiederhergestellt.
  <example> 
     <title>
      Registrierung einer Variablen bei aktiviertem
      <literal>register_globals</literal>
     </title>
     <programlisting role="php">
&lt;?php
session_register("count");
$count++;
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    Wenn sowohl <literal>track_vars</literal> als auch
    <literal>register_globals</literal> aktiviert sind, dann referenzieren die
    globalen Variablen und die Einträge von $HTTP_SESSION_VARS den selben
    Wert.
   </para>
   <para>
    Es gibt zwei Methoden, eine Session-ID zu übermitteln:
    <itemizedlist>
     <listitem>
      <simpara>
       Cookies
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       URL Parameter
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Das Session-Modul unterstützt beide Methoden. Cookies sind
    optimal, aber da sie nicht zuverlässig sind (Clients müssen
    sie nicht unbedingt akzeptieren), können wir uns nicht auf sie
    verlassen. Die zweite Methode hängt die Session-ID direkt an die
    URLs.
   </para>
   <para>
    Wenn PHP mit <literal>--enable-trans-sid</literal> kompiliert wurde,
    kann es dies transparent machen. Wenn sie diese Option aktivieren, werden
    die URIs automatisch geändert, sodass sie die Session-ID enthalten.
    Alternativ können sie die Konstante <literal>SID</literal> verwenden,
    die definiert wird, falls vom Client keinen passendes Cookie gesendet
    wurde. <literal>SID</literal> hat entweder die Form
    <literal>session_name=session_id</literal> oder ist ein leerer String.
   </para>
   <para>
    Das folgende Beispiel demonstriert, wie eine Variable registriert wird und
    wie unter Verwendung einer SID korrekt auf eine andere Seite verwiesen wird.
    <example>
     <title>Zählen der Seitenaufrufe eines einzelnen Benutzers</title>
     <programlisting role="php">
&lt;?php
session_register ("count");
$count++;
?&gt;

Hallo Besucher, Sie haben diese Seite &lt;? echo $count; ?&gt; Mal
aufgerufen.&lt;p&gt;

&lt;?php
# für den Fall, dass der Benutzer Cookies deaktiviert hat,
# ist das &lt;?=SID?&gt; nötig, um die Session-ID zu erhalten
?&gt;

Hier gehts &lt;A HREF="nextpage.php?&lt;?=SID?&gt;"&gt;weiter&lt;/A&gt;
     </programlisting>
    </example>
   </para>
   <para>
    Das <literal>&lt;?=SID?&gt;</literal> ist nicht nötig, wenn PHP mit
    <literal>--enable-trans-sid</literal> kompiliert wurde.
   </para>
   <para>
    To implement database storage, or any other storage method, you
    will need to use <function>session_set_save_handler</function> to
    create a set of user-level storage functions.
   </para>
   <para>
    Das Sessionmanagementsystem unterstützt eine Anzahl von
    Konfigurationsoptionen, die sie in Ihrer php.ini setzen können. Wir
    geben Ihnen dazu einen kleinen Überblick.
    <itemizedlist>
     <listitem>
      <simpara>
       <literal>session.save_handler</literal> definiert den Namen der Prozedur,
       die benutzt wird, um die Daten zu speichern und zurückzuholen, die
       mit der Session in Verbindung stehen. Grundeinstellung
       <literal>files</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.save_path</literal> definiert das Argument, das an
       die Speicherprozedur übergeben wird. Wenn Sie die
       standardmäßige files Prozedur wählen, ist das der Pfad,
       unter dem die Dateien erzeugt werden. Grundeinstellung
       <literal>/tmp</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.name</literal> spezifiziert den Namen der Session, der
       als Cookie-Name verwendet wird. Grundeinstellung
       <literal>PHPSESSID</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.auto_start</literal> spezifiziert, ob das Session-Modul
       zu Beginn einer Anfrage automatisch eine Session startet.
       Grundeinstellung <literal>0</literal> (deaktiviert).
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cookie_lifetime</literal> spezifiziert die
       Cookie-Lebensdauer, die an den Browser geschickt wird, in Sekunden. Der
       Wert 0 bedeutet "bis der Browser geschlossen wird." Grundeinstellung
       <literal>0</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.serialize_handler</literal> definiert den Namen der
       Prozedur, die benutzt wird, um Daten zu serialisieren/deserialisieren.
       Gegenwärtig wird ein internes PHP-Format (Name
       <literal>php</literal>) und WDDX (name <literal>wddx</literal>)
       unterstützt. WDDX steht nur zur Verfügung, wenn PHP mit <link
       linkend="ref.wddx">WDDX support</link> kompiliert wurde.
       Grundeinstellung <literal>php</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.gc_probability</literal> spezifiziert die prozentuale
       Wahrscheinlichkeit, dass die gc (garbage collection)
       Routine bei jeder Anfrage gestartet wird. Grundeinstellung
       <literal>1</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.gc_maxlifetime</literal> spezifiziert die Anzahl der
       Sekunden, nach denen Daten als 'garbage' ('Müll') betrachtet und
       entsorgt werden.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.referer_check</literal> enthält die Zeichenfolge, auf
       die Sie jeden HTTP-Referer überprüfen wollen. Wenn der Referer vom Client
       gesendet und die Zeichenfolge nicht gefunden wurde, wird die eingebettete
       Session-ID als ungültig gekennzeichnet. Grundeinstellung ist eine leere
       Zeichenfolge.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.entropy_file</literal> gibt den Pfad zu einer externen
       Quelle (Datei) an, die bei der Erzeugung einer Session-ID
       als zusätzliche Entropiequelle verwendet wird. Beispiele sind
       <literal>/dev/random</literal> oder <literal>/dev/urandom</literal>, die
       auf vielen Unix-Systemen zur Verfügung stehen.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.entropy_length</literal> spezifiziert die Anzahl der
       Bytes, die von der oben spezifizierten Datei gelesen werden.
       Grundeinstellung <literal>0</literal> (deaktiviert).
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.use_cookies</literal> spezifiziert, ob das Modul Cookies
       verwendet, um die Session-ID clientseitig zu speichern.
       Grundeinstellung <literal>1</literal> (aktiviert).
      </simpara>
     </listitem>
     <listitem>
      <simpara> 
       <literal>session.cookie_path</literal> spezifiziert den Pfad, in dem das
       Session-Cookie gesetzt wird. Grundeinstellung <literal>/</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cookie_domain</literal> spezifiziert die Domain, unter
       der das Session-Cookie gesetzt wird. In der Grundeinstellung
       überhaupt keine.
      </simpara>
     </listitem>
     <listitem> 
      <simpara> 
       <literal>session.cache_limiter</literal> spezifiziert die Methode der
       Cacheverwaltung, die bei Session-Seiten benutzt wird
       (nocache/private/public). Grundeinstellung
       <literal>nocache</literal>.
      </simpara>
     </listitem>
     <listitem> 
      <simpara> 
       <literal>session.cache_expire</literal> spezifiziert in Minuten, wie
       lange Session-Seiten im Cache bleiben. Bei nocache ist diese Angabe
       wirkungslos. Grundeinstellung <literal>180</literal>.
      </simpara>
     </listitem>
    </itemizedlist>
    <note>
     <para>
      Die Behandlung von Sessions wurde in PHP 4.0 eingeführt.
     </para>
    </note>
   </para>
  </partintro>

  <refentry id="function.session-start">
   <refnamediv>
    <refname>session_start</refname>
    <refpurpose>Initialisierung einer Session</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_start</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>session_start</function> erzeugt eine Session (oder nimmt die
     aktuelle, basierend auf der Session-ID, die über eine GET-Variable
     oder ein Cookie übermittelt wurde, wieder auf).
    </simpara>
    <simpara>
     Diese Funktion gibt immer true zurück.
    </simpara>
    <note>
     <para>
      Diese Funktion wurde in PHP 4.0 eingeführt.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.session-destroy">
   <refnamediv>
    <refname>session_destroy</refname>
    <refpurpose>
     Löscht alle in einer Session registrierten Daten
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_destroy</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>session_destroy</function> löscht alle in Verbindung mit der
     aktuellen Session stehenden Daten.
    </simpara>
    <simpara>
     Diese Funktion gibt nach erfolgtem Löschen der Daten true zurück
     und false, wenn dabei ein Fehler auftritt.
    </simpara>
    <note>
     <para>
      Diese Funktion wurde in PHP 4.0 eingeführt.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.session-name">
   <refnamediv>
    <refname>session_name</refname>
    <refpurpose>
     Abfragen und/oder setzen des Namens der aktuellen Session
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>session_name</function></funcdef>
      <paramdef>string 
       <parameter><optional>name</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_name</function> gibt den Namen der aktuellen Session
     zurück. Wenn <parameter>name</parameter> angegeben wird, wird der
     Name der aktuellen Session durch dessen Wert ersetzt.
    </para>
    <para>
     Der Session-Name referenziert die Session-ID in Cookies und URLs. Er sollte
     nur alphanumerische Zeichen enthalten und sollte kurz und beschreibend sein
     (z.B. für Benutzer mit aktivierter Cookie-Warnung). Der Session-Name
     wird auf den Ausgangswert zurückgesetzt, der zu Beginn in
     <literal>session.name</literal> gespeichert wurde. Deshalb muss
     <function>session_name</function> bei jeder Anfrage aufgerufen werden (und
     bevor <function>session_start</function> oder
     <function>session_register</function> aufgerufen wurden).
    </para>
    <example>
     <title><function>session_name</function> Beispiele</title>
     <programlisting role="php">
&lt;?php

# den Session-Namen auf WebsiteID setzen

$previous_name = session_name ("WebsiteID");

echo "Der vorhergehende Session-Name war $previous_name&lt;p&gt;";
?&gt;
     </programlisting>
    </example>
    <note>
     <para>
      Diese Funktion wurde in PHP 4.0 eingeführt.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.session-module-name">
   <refnamediv>
    <refname>session_module_name</refname>
    <refpurpose>
     Abfragen und/oder setzen des aktuellen Session-Moduls
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>session_module_name</function></funcdef>
      <paramdef>string 
       <parameter><optional>module</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_module_name</function> gibt den Namen des aktuellen
     Session-Moduls zurück. Wenn <parameter>module</parameter> angegeben
     wird, wird stattdessen dieses Modul verwendet.
     <note>
      <para>
       Diese Funktion wurde in PHP 4.0 eingeführt.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-save-path">
   <refnamediv>
    <refname>session_save_path</refname>
    <refpurpose>
     Abfragen und/oder setzen des aktuellen session save path
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
      <funcprototype>
      <funcdef>string <function>session_save_path</function></funcdef>
      <paramdef>string 
       <parameter><optional>path</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_save_path</function> gibt den Pfad des aktuellen
     Verzeichnisses zurück, das zum Speichern der Session-Daten verwendet
     wird. Wenn <parameter>path</parameter> angegeben wird, wird der Pfad, unter
     dem Daten gespeichert werden, entsprechend geändert.
     <note>
      <para>
       Unter manchen Betriebssystemen, wollen Sie vielleicht einen Pfad auf
       einem Dateisystem angeben, das sehr viele kleine Dateien effizient
       behandelt. Unter Linux, zum Beispiel, bietet reiserfs eventuell eine
       bessere Performance als ext2fs.
      </para>
     </note>
     <note>
      <para>
       Diese Funktion wurde in PHP 4.0 eingeführt.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-id">
   <refnamediv>
    <refname>session_id</refname>
    <refpurpose>Abfragen und/oder setzen der aktuellen Session-ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>session_id</function></funcdef>
      <paramdef>string <parameter><optional>id</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_id</function> gibt die Session-ID der aktuellen Session
     zurück. Wenn <parameter>id</parameter> angegeben wird, wird die
     die aktuelle Session-ID ersetzt.
    </para>
    <para>
     Die Konstante <systemitem>SID</systemitem> kann auch dazu verwendet werden,
     den aktuellen Namen und Session-ID als String, passend zum Hinzufügen
     zu URLs, zu erhalten.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-register">
   <refnamediv>
    <refname>session_register</refname>
    <refpurpose>
     Eine oder mehrere Variablen in der aktuellen Session registrieren
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_register</function></funcdef>
      <paramdef>mixed <parameter>name</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_register</function> variable Anzahl von Argumenten die
     jeweils entweder ein String sein können, der den Variablennamen
     trägt, oder ein Array, der aus solchen Variablennamen oder anderen
     Arrays besteht. Für jeden Variablennamen registriert
     <function>session_register</function> die globale Variable in der aktuellen
     Session unter diesem Namen.
    </para>
    <para>
     Diese Funktion gibt true zurück, wenn die Variable erfolgreich in der
     Session registriert wurde.
     <note>
      <para>
       Diese Funktion wurde in PHP 4.0 eingeführt.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-unregister">
   <refnamediv>
    <refname>session_unregister</refname>
    <refpurpose>
     Die Aufhebung der Registrierung einer Variablen in der aktuellen Session
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_unregister</function></funcdef>
      <paramdef>string <parameter>name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_unregister</function> hebt die Registrierung der globalen
     Variablen namens <parameter>name</parameter> in der aktuellen Session auf.
    </para>
    <para>
     Diese Funktion gibt true zurück, wenn die Aufhebung der Registrierung
     der Variablen in der Session erfolgt ist.
     <note>
      <para>
       Diese Funktion wurde in PHP 4.0 eingeführt.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-unset">
   <refnamediv>
    <refname>session_unset</refname>
    <refpurpose>
     Befreien aller Session-Variablen
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>session_unset</function>
      </funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>  
     Die Funktion <function>session_unset</function> befreit alle
     Session-Variablen, die gegenwärtig registriert sind.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-is-registered">
   <refnamediv>
    <refname>session_is_registered</refname>
    <refpurpose>
     Überprüfen, ob eine Variable in einer Session registriert ist
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_is_registered</function></funcdef>
      <paramdef>string <parameter>name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_is_registered</function> gibt true zurück, wenn in
     der aktuellen Session eine Variable mit dem Namen
     <parameter>name</parameter> registriert ist.
     <note>
      <para>
       Diese Funktion wurde in PHP 4.0 eingeführt.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.session-get-cookie-params">
   <refnamediv> 
    <refname>session_get_cookie_params</refname>
    <refpurpose>  
     Abfragen der Session-Cookie Parameter
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>
       array <function>session_get_cookie_params</function>
      </funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Die Funktion <function>session_get_cookie_params</function> gibt einen
     Array mit der Information des aktuellen Session-Cookies zurück. Der
     Array enthält folgende Felder:
     <itemizedlist>
      <listitem>      
       <simpara>
        "lifetime" -  Die Lebensdauer des Cookies.
       </simpara>     
      </listitem>
      <listitem>
       <simpara>
        "path" -  Der Pfad, unter dem Informationen gespeichert sind.
       </simpara>
      </listitem>     
      <listitem>
       <simpara>      
        "domain" -  Die Domain des Cookies.
       </simpara>
      </listitem>
     </itemizedlist>   
    </para>
   </refsect1>
  </refentry>  

  <refentry id="function.session-set-cookie-params">
   <refnamediv>
    <refname>session_set_cookie_params</refname>
    <refpurpose>
     Setzen der Session-Cookie Parameter
    </refpurpose>  
   </refnamediv>   
   <refsect1>      
    <title>Beschreibung</title>
    <funcsynopsis>  
     <funcprototype>
      <funcdef>void <function>session_set_cookie_params</function></funcdef>
      <paramdef>
       int <parameter>lifetime</parameter>
      </paramdef>
      <paramdef> 
       string <parameter><optional>path</optional></parameter>
      </paramdef>   
      <paramdef>
       string <parameter><optional>domain</optional></parameter>
      </paramdef>   
     </funcprototype>
    </funcsynopsis>
    <para>
     Setzen der Cookie-Parameter, die in der php.ini definiert sind. Diese
     Funktion wirkt sich nur für die Dauer des Scripts aus.
    </para>
   </refsect1> 
  </refentry>

  <refentry id="function.session-decode">
   <refnamediv>
    <refname>session_decode</refname>
    <refpurpose>Decodiert die Daten einer Session aus einem String</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_decode</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_decode</function> decodiert die Daten der Session in
     <parameter>data</parameter> und setzt die Variablen, die in der Session
     gespeichert sind.
     <note>
      <para>
       Diese Funktion wurde in PHP 4.0 eingeführt.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-encode">
   <refnamediv>
    <refname>session_encode</refname>
    <refpurpose>
     Codiert die Daten der aktuellen Session als String
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>session_encode</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_encode</function> gibt einen String mit dem codierten
     Inhalt der aktuellen Session zurück.
     <note>
      <para>
       Diese Funktion wurde in PHP 4.0 eingeführt.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.session-set-save-handler">
   <refnamediv>
    <refname>session_set_save_handler</refname>
    <refpurpose>
     Sets user-level session storage functions
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void
       <function>session_set_save_handler</function>
      </funcdef>
      <paramdef>string
      <parameter>open</parameter></paramdef><paramdef>string
      <parameter>close</parameter></paramdef><paramdef>string
      <parameter>read</parameter></paramdef><paramdef>string
      <parameter>write</parameter></paramdef><paramdef>string
      <parameter>destroy</parameter></paramdef><paramdef>string
      <parameter>gc</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>session_set_save_handler</function> sets the user-level
     session storage functions which are used for storing and
     retrieving data associated with a session.  This is most useful
     when a storage method other than those supplied by PHP sessions
     is preferred.  i.e. Storing the session data in a local database.
   </para>
    <note>
     <para>
      You must set the configuration option
      <parameter>session.save_handler</parameter> to
      <parameter>user</parameter> in your php.ini file for
      <function>session_set_save_handler</function> to take effect.
     </para>
    </note>
    <para>
     The following example provides file based session
     storage similar to the PHP sessions default save handler
     <parameter>files</parameter>.  This example could easily be
     extended to cover database storage using your favorite PHP
     supported database engine.
    </para>
    <para>
     <example>
      <title>
       <function>session_set_save_handler</function> example
      </title>
      <programlisting role="php">
&lt;?php

function open ($save_path, $session_name) {
  global $sess_save_path, $sess_session_name;
       
  $sess_save_path = $save_path;
  $sess_session_name = $session_name;
  return(true);
}

function close() {
  return(true);
}

function read ($id) {
  global $sess_save_path, $sess_session_name;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "r")) {
    $sess_data = fread($fp, filesize($sess_file));
    return($sess_data);
  } else {
    return("");
  }

}

function write ($id, $sess_data) {
  global $sess_save_path, $sess_session_name;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "w")) {
    return(fwrite($fp, $sess_data));
  } else {
    return(false);
  }

}

function destroy ($id) {
  global $sess_save_path, $sess_session_name;
       
  $sess_file = "$sess_save_path/sess_$id";
  return(@unlink($sess_file));
}

/*********************************************
 * WARNING - You will need to implement some *
 * sort of garbage collection routine here.  *
 *********************************************/
function gc ($maxlifetime) {
  return true;
}

session_set_save_handler ("open", "close", "read", "write", "destroy", "gc");

session_start();

// proceed to use sessions normally

?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
