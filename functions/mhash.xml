 <reference id="ref.mhash">
  <title>Hash Funktionen</title>
  <titleabbrev>mhash</titleabbrev>

  <partintro>
   <para>
    Diese Funktionen arbeiten zusammen mit <ulink
    url="&url.mhash;">mhash</ulink>.
   </para>
   <para>
    Dies ist eine Schnittstelle zu der Mhash Bibliothek. Mhash
    unterstützt eine breite Auswahl an Hash Algorithmen, wie MD5,
    SHA1, GOST, und viele andere.
   </para>
   <para>
    Um sie zu verwenden, muss man die Mhash Distribution von <ulink
    url="&url.mhash;">der Website</ulink> downloaden und der
    beigefügten Instalationsanleitung folgen. PHP muss mit der Option
    <option role="configure">--with-mhash</option> kompiliert werden
    um diese Erweiterung zu aktivieren.
   </para>
   <para>
    Mhash wird verwendet um z.B. Checksummen und Mehr zu erstellen.
   </para>
   <para>
    <example>
     <title>Berechne den SHA1 Schlüssel und gib es als Hex aus</title>
     <programlisting role="php">
&lt;?php
$input = "Lass uns um 9 Uhr an einem geheimen Ort treffen.";
$hash = mhash(MHASH_SHA1, $input);

print "Der Hash ist " . bin2hex($hash)."\n";

?&gt;
     </programlisting>
    </example>
    Die Ausgabe ist:
    <programlisting>
Der Hash ist d3b85d710d8f6e4e5efd4d5e67d041f9cecedafe
    </programlisting>
    Eine komplette Liste aller unterstützen Hashes ist in der
    Dokumentation von Mhash enthalten. Die allgemeine Verwendung ist,
    dass man einen Hash Algorithmus von PHP mit MHASH_HASHNAME
    erreicht. Z.B., um HAVAL zu erreichen benutzt man die PHP
    Konstante MHASH_HAVAL.
   </para>
   <para>
    Hier ist eine Liste von Hashs, die momentan von Mhash unterstützt
    werden.  Wenn ein Hash ist hier nicht aufgeführt ist, aber von
    Mhash, laut Dokumentation, unterstützt wird, ist diese
    Dokumentation als veraltet anzusehen.
    <itemizedlist>
     <listitem>
      <simpara>
       MHASH_MD5
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_SHA1
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_RIPEMD160
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_RIPEMD128
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_SNEFRU
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_TIGER
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_GOST
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_CRC32
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_CRC32B
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </partintro>

  <refentry id="function.mhash-get-hash-name">
   <refnamediv>
    <refname>mhash_get_hash_name</refname>
    <refpurpose>Gibt den Namen eines Hashs zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mhash_get_hash_name</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mhash_get_hash_name</function> wird verwendet um den
     Namen eines Hashes zu erfahren.
    </para>
    <para>
     <function>Mhash_get_hash_name</function> nimmt die Hash Id als
     Argument und gibt den Namen des Hashs zurück oder false, wenn der
     Hash nicht existiert.
    </para>
    <para>
     <example>
      <title>Mhash_get_hash_name Beispiel</title>
      <programlisting role="php">
&lt;?php
$hash = MHASH_MD5;

print mhash_get_hash_name ($hash);
?&gt;
      </programlisting>
     </example>
     Das Beispiel oben gibt aus:
     <programlisting>
MD5
     </programlisting>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mhash-get-block-size">
   <refnamediv>
    <refname>mhash_get_block_size</refname>
    <refpurpose>
     Gibt die Blockgroesse von dem übergebenem Hash zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mhash_get_block_size</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mhash_get_block_size</function> gibt die Groesse des
     übergebenen <parameter>Hashs</parameter>.
    </para>
    <para>
     <function>Mhash_get_block_size</function> nimmt ein Argument, den
     <parameter>Hash</parameter> und gibt die Grösse in Byte oder
     FALSE, wenn <parameter>Hash</parameter> nicht existiert.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mhash-count">
   <refnamediv>
    <refname>mhash_count</refname>
    <refpurpose>Gibt den höchstmöglichen Hash zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mhash_count</function></funcdef>
      <paramdef>void </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mhash_count</function> gibt die höchsten verfügbaren
     Hash Id zurück. Hashes sind von 0 bis zu der Hash Id nummeriert.
    </para>
    <para>
     <example>
      <title>Alle Hashes durchlaufen</title>
      <programlisting role="php">
&lt;?php

$nr = mhash_count();

for ($i = 0; $i &lt;= $nr; $i++) {
    echo sprintf ("Die Blockgrösse von %s ist %d\n",
                  mhash_get_hash_name ($i),
                  mhash_get_block_size ($i));
}
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mhash">
   <refnamediv>
    <refname>mhash</refname>
    <refpurpose>Hash berechnen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mhash</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mhash</function> verwendet eine Hash Funktion abhängig
     von <parameter>hash</parameter> auf <parameter>data</parameter>
     und gibt den resultierenden Hash zurück (wird auch Digest
     genannt).
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->