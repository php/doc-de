<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.21 Maintainer: stefan_saasen Status: ready -->
 <reference id="ref.satellite">
  <title>Satellite CORBA Client Erweiterung</title>
  <titleabbrev>Satellite</titleabbrev>

  <partintro>
   &warn.experimental;
   <para>
    Die Satellite Erweiterung wird für den Zugang zu CORBA Objekten
    benutzt.  Hierzu muss der 'idl_directory' Pfad in der php.ini auf
    das Verzeichnis mit den IDL Dateien zeigen.
   </para>
  </partintro>

  <refentry id="class.orbitobject">
   <refnamediv>
    <refname>OrbitObject</refname>
    <refpurpose>Zugang zu CORBA Objekten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>new <function>OrbitObject</function></funcdef>
      <paramdef>string <parameter>ior</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    &warn.experimental.func;
    <para>
     Diese Klasse ermöglicht den Zugang zu einem CORBA Objekt.  Der
     Parameter <parameter>ior</parameter> muss ein String sein, der
     die IOR (Interoperable Object Reference) enthält, die das
     entfernte Objekt identifiziert.
    </para>
    <para>
     <example>
      <title>IDL Beispieldatei</title>
      <programlisting role="idl">  
<![CDATA[  
interface MyInterface {
    void SetInfo (string info);
    string GetInfo();

    attribute int value;
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>PHP Code um auf MyInterface zuzugreifen</title>
      <programlisting role="php">
<![CDATA[        
<?php
$obj = new OrbitObject ($ior);

$obj->SetInfo ("A 2GooD object");

echo $obj->GetInfo();

$obj->value = 42;

echo $obj->value;
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="class.orbitenum">
   <refnamediv>
    <refname>OrbitEnum</refname>
    <refpurpose>Benutzung von CORBA Enums</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>new <function>OrbitEnum</function></funcdef>
      <paramdef>string <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    &warn.experimental.func;
    <para>
     Diese Klasse stellt die Aufzählung dar, die durch durch den
     Parameter <parameter>id</parameter> gekennzeichnet wird.  Der
     Parameter <parameter>id</parameter> kann entweder der Name der
     Aufzählung (z.B. "MyEnum") oder die komplette Repository Id sein
     (z.B. "IDL:MyEnum:1.0").
    </para>
    <para>
     <example>
      <title>IDL Beispieldatei</title>
      <programlisting role="idl">  
<![CDATA[  
enum MyEnum {
    a,b,c,d,e
};
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>PHP Code für den Zugang zu MyEnum</title>
      <programlisting role="php">
<![CDATA[        
<?php
$enum = new OrbitEnum ("MyEnum");

echo $enum->a;	/* write 0 */
echo $enum->c;	/* write 2 */
echo $enum->e;	/* write 4 */
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="class.orbitstruct">
   <refnamediv>
    <refname>OrbitStruct</refname>
    <refpurpose>Benutzung von CORBA Strukturen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>new <function>OrbitStruct</function></funcdef>
      <paramdef>string <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    &warn.experimental.func;
    <para>
     Diese Klasse stellt die Struktur dar, die durch den Parameter
     <parameter>id</parameter> gekennzeichnet ist.  Der Parameter
     <parameter>id</parameter> kann entweder der Name der Struktur
     (z.B. "MyStruct") oder die komplette Repository Id sein
     (z.B. "IDL:MyStruct:1.0").
    </para>
    <para>
     <example>
      <title>IDL Beispieldatei</title>
      <programlisting role="idl">  
<![CDATA[ 
struct MyStruct {
    short shortvalue;
    string stringvalue;
};

interface SomeInterface {
    void SetValues (MyStruct values);
    MyStruct GetValues();
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>PHP Code für den Zugang zu MyStruct</title>
      <programlisting role="php">
<![CDATA[      
<?php
$obj = new OrbitObject ($ior);

$initial_values = new OrbitStruct ("IDL:MyStruct:1.0");
$initial_values->shortvalue = 42;
$initial_values->stringvalue = "HGTTG";

$obj->SetValues ($initial_values);

$values = $obj->GetValues();

echo $values->shortvalue;
echo $values->stringvalue;
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.satellite-caught-exception">
   <refnamediv>
    <refname>satellite_caught_exception</refname>
    <refpurpose>
     Überprüfung, ob die vorhergehende Funktion eine Exception ausgelöst hat
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool 
       <function>satellite_caught_exception</function>
      </funcdef>
      <paramdef></paramdef>
     </funcprototype>
    </funcsynopsis>
    &warn.experimental.func;
    <para>
     Diese Funktion gibt &true; zurück, wenn eine Exception abgefangen
     wurde.
    </para>
    <para>
     <example>
      <title>IDL Beispieldatei</title>
      <programlisting role="idl">  
<![CDATA[  
/* ++?????++ Out of Cheese Error. Redo From Start. */
exception OutOfCheeseError {
    int parameter;
}

interface AnotherInterface {
    void AskWhy() raises (OutOfCheeseError);
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>PHP Code zur Behandlung von CORBA Exceptions</title>
      <programlisting role="php">
<![CDATA[       
<?php
$obj = new OrbitObject ($ior);

$obj->AskWhy();

if (satellite_caught_exception()) {
    if ("IDL:OutOfCheeseError:1.0" == satellite_exception_id()) {
        $exception = satellite_exception_value();
        echo $exception->parameter;
    }
}
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.satellite-exception-id">
   <refnamediv>
    <refname>satellite_exception_id</refname>
    <refpurpose>
     Gibt die Repository Id der letzten Exception zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string 
       <function>satellite_exception_id</function>
      </funcdef>
      <paramdef></paramdef>
     </funcprototype>
    </funcsynopsis>
    &warn.experimental.func;
    <para>
     Gibt einen String zurück (z.B. "IDL:MyException:1.0".), der die
     Repository Id enthält.  Zur Benutzung siehe das Beispiel zu
     <function>satellite_caught_exception</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.satellite-exception-value">
   <refnamediv>
    <refname>satellite_exception_value</refname>
    <refpurpose>
     Gibt für die letzte Exception eine Exception Struktur zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>OrbitStruct 
       <function>satellite_exception_value</function>
      </funcdef>
      <paramdef></paramdef>
     </funcprototype>
    </funcsynopsis>
    &warn.experimental.func;
    <para>
     Gibt eine Exception Struktur zurück. Zur Benutzung siehe das
     Beispiel zu <function>satellite_caught_exception</function>.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id='function.satellite-object-to-string'> 
   <refnamediv> 
    <refname>satellite_object_to_string</refname> 
    <refpurpose> 
     Konvertiert ein Objekt in die entsprechende String Struktur 
    </refpurpose> 
   </refnamediv> 
   <refsect1> 
    <title>Beschreibung</title> 
    <funcsynopsis> 
     <funcprototype> 
      <funcdef>string <function>satellite_object_to_string</function></funcdef> 
      <paramdef>object <parameter>obj</parameter></paramdef> 
     </funcprototype> 
    </funcsynopsis> 
    <para> 
     &warn.undocumented.func; 
    </para> 
   </refsect1> 
  </refentry> 
  
  <refentry id='function.satellite-load-idl'> 
   <refnamediv> 
    <refname>satellite_load_idl</refname> 
    <refpurpose> 
     Weist den type manager an die entsprechende IDL Datei zu laden, 
     falls diese noch nicht geladen ist.
    </refpurpose> 
   </refnamediv> 
   <refsect1> 
    <title>Beschreibung</title> 
    <funcsynopsis> 
     <funcprototype> 
      <funcdef>bool <function>satellite_load_idl</function></funcdef> 
      <paramdef>string <parameter>file</parameter></paramdef> 
     </funcprototype> 
    </funcsynopsis> 
    <para> 
     &warn.undocumented.func; 
    </para> 
   </refsect1> 
  </refentry> 
  
  <refentry id='function.satellite-get-repository-id'> 
   <refnamediv> 
     <refname>satellite_get_repository_id</refname> 
     <refpurpose> 
       NICHT IMPLEMENTIERT
     </refpurpose> 
    </refnamediv> 
    <refsect1> 
     <title>Beschreibung</title> 
     <funcsynopsis> 
      <funcprototype> 
       <funcdef>int <function>satellite_get_repository_id</function></funcdef> 
       <paramdef>object <parameter>obj</parameter></paramdef> 
      </funcprototype> 
     </funcsynopsis> 
     <para> 
      &warn.undocumented.func; 
     </para> 
    </refsect1> 
   </refentry> 
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si 
vim: et tw=78 syn=sgml 
vi: ts=1 sw=1 
-->

