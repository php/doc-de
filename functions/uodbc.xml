<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.odbc">
  <title>ODBC Funktionen</title>
  <titleabbrev>ODBC</titleabbrev>

  <refentry id="function.odbc-autocommit">
   <refnamediv>
    <refname>odbc_autocommit</refname>
    <refpurpose>Ändert das Autocommit-Verhalten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_autocommit</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>OnOff</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Ohne den Parameter <parameter>OnOff</parameter> gibt
     <function>odbc_autocommit</function> den aktuellen
     autocommit-Status für die Datenbankverbindung
     <parameter>connection_id</parameter> zurück. Wenn autocommit
     aktiviert ist, wird &true; zurückgeliefert,
     &false; wenn es deaktiviert ist oder ein Fehler auftritt.  
    </para>
    <para>
     In der Standardeinstellung ist autocommit für eine
     Datenbankverbindung aktiviert. Das Deaktivieren von autocommit
     enspricht dem Durchführen einer Transaktion.
    </para>
    <simpara>
     Siehe auch <function>odbc_commit</function> und
     <function>odbc_rollback</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-binmode">
   <refnamediv>
    <refname>odbc_binmode</refname>
   <refpurpose>Die Behandlung von Binärdaten</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Beschreibung</title>
   <funcsynopsis>
     <funcprototype>
     <funcdef>int <function>odbc_binmode</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     (Betrifft die ODBC SQL Typen: BINARY, VARBINARY und LONGVARBINARY)
    </para>
    <itemizedlist>
     <listitem>
      <simpara>
       ODBC_BINMODE_PASSTHRU: gibt Binärdaten direkt zum Output durch
      </simpara>
     </listitem> 
     <listitem>
      <simpara>
       ODBC_BINMODE_RETURN: liefert die Binärdaten unverändert zurück
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       ODBC_BINMODE_CONVERT: konvertiert die Binärdaten zu Zeichen und
       liefere sie zurück 
      </simpara>
     </listitem>
    </itemizedlist>
    <para>
     Im <literal>ODBC_BINMODE_CONVERT</literal> werden die Binärdaten
     zu Character-C-data gewandelt. Jedes Byte (8 Bits) der
     ursprünglichen Daten wird zu zwei ASCII-Zeichen, die der
     hexadezimalen Darstellung des Wertes entsprechen. Der Binärwert
     00000001 wird zum Beispiel zu <literal>"01"</literal> gewandelt,
     der Binärwert 11111111 zu <literal>"FF"</literal>.
     <table>
      <title>Die Benutzung von LONGVARBINARY</title>
      <tgroup cols="3">
       <thead>
	<row>
	 <entry>binmode</entry>
	 <entry>longreadlen</entry>
	 <entry>Resultat</entry>
	</row>
       </thead>
       <tbody>
	<row>
	 <entry>ODBC_BINMODE_PASSTHRU</entry>
	 <entry>0</entry>
	 <entry>Direkte Ausgabe</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_RETURN</entry>
	 <entry>0</entry>
	 <entry>Direkte Ausgabe</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_CONVERT</entry>
	 <entry>0</entry>
	 <entry>Direkte Ausgabe</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_PASSTHRU</entry>
	 <entry>0</entry>
	 <entry>Direkte Ausgabe</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_PASSTHRU</entry>
	 <entry>>0</entry>
	 <entry>Direkte Ausgabe</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_RETURN</entry>
	 <entry>>0</entry>
	 <entry>Direkte Ausgabe</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_CONVERT</entry>
	 <entry>>0</entry>
	 <entry>Rückgabe als CHAR-Werte</entry>
	</row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Wenn <function>odbc_fetch_into</function> genutzt wird, wird bei
     direkter Ausgabe ein leerer String als Spaltenwert
     zurückgeliefert.
    </para>
    <para>
     Wenn <parameter>result_id</parameter> gleich <literal>0</literal>
     ist, wird die Einstellung als Defaultwert für die nächsten
     Transaktionen gesetzt.
     <note>
      <simpara> 
       Der Defahltwert für longreadlen ist <literal>4096</literal>,
       für <function>odbc_binmode</function>
       <literal>ODBC_BINMODE_RETURN</literal>, also die unveränderte
       Rückgabe. Das Verhalten von <literal>LONGVARBINARY</literal>
       wird ebenfalls durch die Funktion
       <function>odbc_longreadlen</function> bestimmt.
      </simpara>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-close">
   <refnamediv>
    <refname>odbc_close</refname>
    <refpurpose>Beendet eine ODBC-Verbindung</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>odbc_close</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>odbc_close</function> beendete die Verbindung zum
     Datenbankserver, die durch das Verbindungskennzeichen
     <literal>connection_id</literal> gekennzeichnet wird.
     <note>
      <simpara>
       Diese Funktion scheitert, wenn auf dieser Datenbankverbindung
       noch Transaktionen ausstehen. In diesem Fall bleibt die
       Verbindung bestehen.
      </simpara>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-close-all">
   <refnamediv>
    <refname>odbc_close_all</refname>
    <refpurpose>Beendet alle ODBC-Verbindungen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>odbc_close_all</function></funcdef>
      <void></void>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>odbc_close_all</function> beendet alle bestehenden 
     Verbindungen zu allen Datenbankservern.
     <note>
      <simpara>
       Wie <function>odbc_close</function> scheitert auch dieser
       Befehl, wenn auf einer Datenbankverbindung noch Transaktionen
       ausstehen oder aktiv sind. In diesem Fall bleibt die betroffene
       Verbindung auch nach dem <function>odbc_close_all</function>
       bestehen.  
      </simpara>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-commit">
   <refnamediv>
    <refname>odbc_commit</refname>
    <refpurpose>Führt eine ODBC-Transaktion aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_commit</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt bei Erfolg &true; zurück, bei Mißerfolg
     &false;.  Alle ausstehenden Transaktionen auf
     der Datenbankverbindung <parameter>connection_id</parameter>
     werden ausgeführt.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-connect">
   <refnamediv>
    <refname>odbc_connect</refname>
    <refpurpose>
     Baut die Verbindung zu einer ODBC-Datenquelle auf
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_connect</function></funcdef>
      <paramdef>string <parameter>dsn</parameter></paramdef>
      <paramdef>string <parameter>user</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>cursor_type</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert eine ODBC-Verbindungskennung
     <literal>connection_id</literal> oder 0
     (&false;) bei Fehlfunktion zurück.
    </para>
    <simpara>
     Die Verbindungskennung <literal>connection_id</literal> wird von
     den anderen ODBC-Funktionen benötigt. Es können mehrere
     ODBC-Verbindungen nebeneinander bestehen. Der optionale vierte
     Parameter <literal>cursor_type</literal> setzt die Art des
     Cursors, der für diese Verbindung genutzt werden
     soll. Normalerweise wird er nicht benötigt, kann aber bei manchen
     ODBC-Treiberproblemen nützlich sein.
    </simpara>
    <simpara>
     Es können etwa Probleme bei der Ausführung von komplexen
     Prozeduren auftreten. Die Fehlermeldung lautet dann zum Beispiel
     "Cannot open a cursor on a stored procedure that has anything
     other than a single select statement in it". Dieser Fehler kann
     durch die Verwendung von <literal>SQL_CUR_USE_ODBC</literal> als
     <literal>cursor_type</literal> kann hier helfen. Einige
     ODBC-Treiber unterstützen den optionalen Parameter
     <literal>row_number</literal> in der Funktion
     <function>odbc_fetch_row</function> nicht.  Auch in diesem Fall
     kann <literal>SQL_CUR_USE_ODBC</literal> helfen.
    </simpara>
    <simpara>
     Folgende Konstanten sind als Cursortyp definiert:
    </simpara>
    <para>
     <itemizedlist>
      <listitem>
       <simpara>
	SQL_CUR_USE_IF_NEEDED
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	SQL_CUR_USE_ODBC
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	SQL_CUR_USE_DRIVER
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	SQL_CUR_DEFAULT
       </simpara>
      </listitem> 
    </itemizedlist>
    </para>
    <simpara>
     Für persistente Verbindungen schauen Sie sich bitte
     <function>odbc_pconnect</function> an.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-cursor">
   <refnamediv>
    <refname>odbc_cursor</refname>
    <refpurpose>Findet den Cursornamen heraus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>odbc_cursor</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>odbc_cursor</function> liefert einen Cursornamen für
     die gegebene Ergebniskennung <parameter>result_id</parameter>
     zurück.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-do">
   <refnamediv>
    <refname>odbc_do</refname>
    <refpurpose>
     Ein Synonym für <function>odbc_exec</function>
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_do</function></funcdef>
      <paramdef>int <parameter>conn_id</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>odbc_do</function> führt eine Anfrage auf der gegebenen
     Verbindung durch.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-exec">
   <refnamediv>
    <refname>odbc_exec</refname>
    <refpurpose>
     Bereitet einen SQL-Befehl auf und führt ihn aus
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_exec</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
      <paramdef>string <parameter>query_string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert bei einem Fehler &false; zurück, sonst
     eine ODBC-Ergebniskennung <literal>result_id</literal>.
    </para>
    <para>
     <function>odbc_exec</function> sendet einen SQL-Befehl zu dem
     Datenbankserver, der durch die Verbindungskennung
     <literal>connection_id </literal> bezeichnet wird. Dieser
     Parameter muß durch <function>odbc_connect</function> oder
     <function>odbc_pconnect</function> erzeugt worden sein.
    </para>
    <simpara>
     Siehe auch: <function>odbc_prepare</function> und
     <function>odbc_execute</function> für die gleichzeitige
     Ausführung von mehreren SQL-Befehlen.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-execute">
   <refnamediv>
    <refname>odbc_execute</refname>
    <refpurpose>Führt ein vorbereiteten SQL-Befehl aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_execute</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>array
       <parameter>
        <optional>parameters_array</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Führt ein oder mehrere durch <function>odbc_prepare</function>
     vorbereitete SQL-Befehle aus. Nach erfolgreicher Ausführung wird
     &true; zurückgeliefert, sonst
     &false;.  Das Array
     <parameter>parameters_array</parameter> braucht nur angegeben zu
     werden, wenn im Befehl tatsächlich Parameter vorhanden sind.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-fetch-into">
   <refnamediv>
    <refname>odbc_fetch_into</refname>
    <refpurpose>Eine Ergebniszeile in ein Array stellen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_fetch_into</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>rownumber</optional>
       </parameter>
      </paramdef>
      <paramdef>array <parameter>result_array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert die Anzahl der Ergebnisspalten zurück, bei einem Fehler
     &false;.  Das Zielarray
     <parameter>result_array</parameter> muß immer übergeben werden,
     kann aber einen beliebigen Typ haben - es wird ohnehin zu einem
     Array gemacht. Das Array enthält die Ergebnisspalten beginnend
     mit <literal>0</literal>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-fetch-row">
   <refnamediv>
    <refname>odbc_fetch_row</refname>
    <refpurpose>Liefert eine Datenzeile zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_fetch_row</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>row_number</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Wenn <function>odbc_fetch_row</function> erfolgreich durchgeführt
     wurde (also eine oder mehrere Datenzeilen gefunden wurden), dann
     wird &true; zurückgeliefert. Wenn keine
     (weitere) Zeile vorhanden ist, wird &false;
     zurückgegeben.
    </para>
    <para>
     <function>odbc_fetch_row</function> stellt eine Zeile der von
     <function>odbc_do</function>/<function>odbc_exec</function>
     zurückgegeben Daten bereit. Nachdem
     <function>odbc_fetch_row</function> aufgerufen wurde, können die
     Felder dieser Zeile mit <function>odbc_result</function> genutzt
     werden.
    </para>
    <para>
     Wenn <parameter>row_number</parameter> nicht definiert ist,
     versucht <function>odbc_fetch_row</function> die nächste Zeile
     aus dem Abfrageergebnis <literal>result_id</literal> zu holen.
     <function>odbc_fetch_row</function> kann abwechselnd ohne und mit
     dem Parameter <parameter>row_number</parameter> genutzt werden.
    </para>
    <para>
     Um durch ein Abfrageergebnis mehrfach zu durchlaufen, kann man
     <function>odbc_fetch_row</function> mit
     <parameter>row_number</parameter> gleich 1 aufrufen, um dann wie
     gewohnt mit <function>odbc_fetch_row</function> ohne
     Zeilenparameter fortzufahren.  Wenn der ODBC-Treiber die
     Herausgabe von bestimmten Zeilen nicht unterstützt, wird der
     Parameter ignoriert.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-field-name">
   <refnamediv>
    <refname>odbc_field_name</refname>
    <refpurpose>Liefert die Spaltenbezeichnung</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>odbc_field_name</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>odbc_field_name</function> gibt den Namen der Spalte
     mit der Nummer <literal>field_number</literal> für des
     Abfrageergebnisses <literal> result_id</literal> zurück. Die
     Nummerierung der Spalten beginnt mit 1. Bei einem Fehler wird
     &false; zurückgegeben.  
    </para>
   </refsect1>
  </refentry>

<!--
  <refentry id="function.odbc-field-num">
   <refnamediv>
    <refname>odbc_field_num</refname>
    <refpurpose>
     Liefert die Spaltennummer für eine Spaltenbezeichnung
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_field_num</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>string <parameter>field_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
   <para>
    <function>odbc_field_num</function> will return the number of the
    column slot that corresponds to the named field in the given ODBC
    result identifier.  Field numbering starts at 1.
    &false; is returned on error.
   </para>
   </refsect1>
  </refentry>
-->

  <refentry id="function.odbc-field-type">
   <refnamediv>
    <refname>odbc_field_type</refname>
    <refpurpose>Liefert den Datentyp eines Feldes</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>odbc_field_type</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>odbc_field_type</function> liefert den SQL-Datentyp
     eines Feldes zurück, das in dem Abfrageergebnis
     <parameter>result_id</parameter> an der Stelle
     <parameter>field_number</parameter> zu finden ist.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-field-len">
   <refnamediv>
    <refname>odbc_field_len</refname>
    <refpurpose>Bestimmt die Länge eines Feldes</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_field_len</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>odbc_field_len</function> gibt die Länge eines Feldes
     an.  Das Feld wird durch die Feldnummer
     <parameter>field_number</parameter> im Abfrageergebnis
     <parameter>result_id</parameter> bestimmt. Die Feldnummerierung
     beginnt mit 1.  
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-free-result">
   <refnamediv>
    <refname>odbc_free_result</refname>
    <refpurpose>
     Gibt den durch ein Abfrageergebnis belegten Speicher wieder frei
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_free_result</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt immer &true; zurück. 
    </para>
    <para>
     <function>odbc_free_result</function> braucht nur aufgerufen zu
     werden, wenn Sie einen zu hohen Speicherverbrauch durch das
     aktuell laufende Skript vermeiden wollen. Das gesamte
     Abfrageergebnis wird automatisch nach Beendigung des Skriptes
     gelöscht. Aber wenn Sie sicher sind, dass Sie dieses Ergebnis
     nicht länger benötigen, dann können Sie bei Speicherproblemen die
     Funktion <function>odbc_free_result</function> benutzen. 
    </para>
    <para>
     <note>
      <simpara>
       Wenn autocommit deaktiviert ist (siehe
       <function>odbc_autocommit</function>) und Sie
       <function>odbc_free_result</function> bevor ein Commit gemacht
       wird, werden alle austehenden Transaktionen zurückgenommen.
      </simpara>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-longreadlen">
   <refnamediv>
    <refname>odbc_longreadlen</refname>
   <refpurpose>Steuert die Nutzung von LONG-Spalten</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Beschreibung</title>
   <funcsynopsis>
     <funcprototype>
     <funcdef>int <function>odbc_longreadlen</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>length</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     (Betrifft folgende ODBC-SQL-Typen: LONG, LONGVARBINARY) Die
     Anzahl der an PHP zurückgelieferten Bytes wird von durch den
     Parameter <parameter>length</parameter> bestimmt. Wenn er auf 0
     gesetzt ist, wird der Inhalt von LONG-Spalten direkt an den
     Klienten weitergegeben. 
    </para> 
    <note>
     <simpara> 
      Die Behandlung von LONGVARBINARY-Spalten wird auch von
      <function>odbc_binmode</function> beeinflußt.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-num-fields">
   <refnamediv>
    <refname>odbc_num_fields</refname>
    <refpurpose>Liefert die Anzahl der Ergebnisspalten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_num_fields</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>odbc_num_fields</function> liefert die Anzahl der
     Spalten, die in einem ODBC-Ergebnis vorhanden sind, zurück. Bei
     einem Fehler ergibt <function>odbc_num_fields</function> -1.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-pconnect">
   <refnamediv>
    <refname>odbc_pconnect</refname> 
    <refpurpose>
     Öffnet eine persistente Datenbankverbindung
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_pconnect</function></funcdef>
      <paramdef>string <parameter>dsn</parameter></paramdef>
      <paramdef>string <parameter>user</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>cursor_type</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt eine ODBC-Verbindungskennung zurück, bei einem Fehler 0
     (&false;). Diese Funktion ist
     <function>odbc_connect</function> sehr ähnlich. Der einzige
     Unterschied besteht darin, dass die Verbindung nach dem Ende des
     Skriptes erhalten bleibt.  Folgende Verbindungen mit gleicher
     Datenquelle, Nutzer und Passwort-Kombination über
     <function>odbc_connect</function> oder
     <function>odbc_pconnect</function> können dann die bestehende
     Verbindung weiterbenutzen.
    </para>
    <para>
     <note>
      <simpara>
       Persistente Verbindungen können bei einem CGI-PHP nicht benutzt
       werden.  In diesem Fall entspricht
       <function>odbc_pconnect</function>
       <function>odbc_connect</function>.
      </simpara>
     </note>
    </para>
    <para>
     Für weitere Informationen über den optionalen Parameter
     <parameter>cursor_type</parameter> schauen Sie bitte bei
     <function>odbc_connect</function>. Weitere Informationen über
     persistente Datenbankverbindungen finden Sie in der PHP-FAQ
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-prepare">
   <refnamediv>
    <refname>odbc_prepare</refname>
    <refpurpose>
     Stellt einen SQL-Befehl zur Ausführung bereit
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_prepare</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
      <paramdef>string <parameter>query_string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert bei einem Fehler &false; zurück.
    </para>
    <para>
     Gibt eine ODBC-Ergebniskennung zurück, wenn der SQL-Befehl
     erfolgreich bereitgestellt wurde. Die Ergebniskennung kann später
     zur Ausführung des Befehles mit <function>odbc_execute</function>
     genutzt werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-num-rows">
   <refnamediv>
    <refname>odbc_num_rows</refname>
    <refpurpose>
     Ergibt die Zeilenzahl des Abfrageergebnisses
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_num_rows</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>odbc_num_rows</function> liefert die Anzahl Zeilen
     eines ODBC-Abfrageergebnisses. Tritt ein Fehler auf, ist sie -1.
     Bei INSERT, UPDATE und DELETE-Befehlen wird die Zahl der
     betroffenen Zeilen zurückgegeben. Bei einer SELECT-Abfrage
     <literal>kann</literal> dies die Anzahl der vorhanden Zeilen
     sein.
    </para>
    <note>
     <para>
      Bei vielen Treibern wird -1 als Anzahl möglicher Zeilen nach
      einem SELECT-Befehl zurückgeliefert.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-result">
   <refnamediv>
    <refname>odbc_result</refname>
    <refpurpose>Erlaubt den Zugriff auf die Ergebnisdaten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>odbc_result</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>mixed <parameter>field</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert den Inhalt eines bestimmtes Feldes zurück.
    </para>
    <para>
     Der Feldparameter <parameter>field</parameter> kann entweder der
     Integerwert der Spaltennummer oder ein String mit dem Spaltennamen
     sein. Als Beispiel:
     <informalexample>
      <programlisting>
$produkt_3 = odbc_result ($Query_ID, 3 );
$produkt_wert = odbc_result ($Query_ID, "wert");
      </programlisting>
     </informalexample>
    </para>
    <para>
     Der erste Aufruf von <function>odbc_result</function> liefert den
     Wert des drittes Feldes im aktuellen Datensatz im Abfrageergebnis
     zurück. Der zweite Funktionsaufruf gibt den Wert der Spalte
     "wert" im aktuellen Datensatz zurück. Wenn die Spaltennummer
     kleiner als 1 oder größer als die Spaltenzahl ist, tritt ein
     Fehler auf.  Gleiches gilt für einen Spaltennamen, der im
     Abfrageergebnis nicht vorkommt.
    </para>
    <para>
     Die Spaltennummern beginngen mit 1. Für die Nutzung von
     Binärdaten und LONG-Spalten schauen Sie bitte bei
     <function>odbc_binmode</function> und
     <function>odbc_longreadlen</function> nach.

<!--

If the requested field contains
     binary data or is of datatype LONG, 
longer than 4096 bytes, the contents is not
     returned, instead it is sent directly to the client. Hint: If you
     need to have binary data returned, use the SQL function HEX() to
     retrieve the field in hexadecimal notation.  E.g. "SELECT
     HEX(binary_col) FROM mytable"
-->
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-result-all">
   <refnamediv>
    <refname>odbc_result_all</refname>
    <refpurpose>
     Gibt das aktuelle Abfrageergebnis als HTML-Tabelle aus
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_result_all</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>string 
       <parameter>
        <optional>format</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert die Anzahl Reihen im Abfrageergebnis
     <literal>result_id</literal> zurück, wenn ein Fehler auftritt
     &false;.
    </para>
    <para>
     <function>odbc_result_all</function> gibt alle Reihen eines
     SQL-Abfrageergebnisses <literal>result_id</literal> aus einem
     <function>odbc_exec</function>-Aufruf als HTML-Tabelle aus.  Mit
     dem optionalen String <parameter>format</parameter> kann ein
     allgemeines Tabellenformat angegeben werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-rollback">
   <refnamediv>
    <refname>odbc_rollback</refname>
    <refpurpose>Hebt eine Transaktion wieder auf</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_rollback</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Hebt alle ausstehenden Transaktionen auf der Verbindung
     <parameter>connection_id</parameter> wieder auf. Bei 
     Erfolg wird &true; zurückgegeben, sonst 
     &false;.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-setoption">
   <refnamediv>
    <refname>odbc_setoption</refname> 
    <refpurpose>
     Verändert die ODBC-Einstellungen
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>odbc_setoption</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>function</parameter></paramdef>
      <paramdef>int <parameter>option</parameter></paramdef>
      <paramdef>int <parameter>param</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion erlaubt das Einstellen der ODBC-Optionen für eine
     einzelne Verbindung. Sie soll beim Auffinden und Beheben von
     Problemen mit ODBC-Treibern helfen.  Es empfiehlt sich, diese
     Funktionen nur zu nutzen, wenn man einige Erfahrung mit
     ODBC-Programmierung gesammelt hat und die Wirkungen der einzelnen
     Parameter kennt. Um mit Ihnen zu arbeiten, benötigen Sie eine
     Referenz der aktuellen Treiberversion des eingesetzten
     ODBC-Treibers, denn die Optionen sind von Treiber zu Treiber und
     von Version zu Version unterschiedlich.
    </para>
    <para>
     Weil die Effekte je nach ODBC-Treiber unterschiedlich sind,
     sollte Skripte mit diesen Funktionen nicht veröffentlich werden.
     Einige Optionen stehen nicht zur Verfügung, weil sie vor dem
     Aufbau einer ODBC-Verbindung eingestellt sein müssen.  Wie auch
     immer, in einigen Fällen hilft diese Funktion zu vermeiden, dass
     man von seinem Vorgesetzten gezwungen wird, ein kommerzielles
     Programm einzusetzen - und darauf kommt es doch an ;-) .
    </para>
    <para>
     <parameter>Id</parameter> ist die Verbindungs oder
     Ergebniskennung, deren Optionen geändert werden sollen. Bei
     SQLSetConnectOption() ist es eine Verbindungskennung, bei
     SQLSetStmtOption() eine Ergebniskennung.
    </para>
     <para>
      <parameter>function</parameter> ist die ODBC-Funktion, die
      genutzt werden soll. Die Werte sind 1 für SQLSetConnectOption()
      und 2 für SQLSetStntOption().
    </para>
    <para>
     Der Parameter <parameter>option</parameter> ist die Option, die
     gesetzt werden soll.
    </para>
    <para>
     Der Parameter <parameter>param</parameter> ist der Wert für die
     gegebene <parameter>option</parameter>.
     <example>
      <title>odbc.setoption Beispiele</title>
      <programlisting role="php">
// 1. Option 102 von SQLSetConnectOption() ist SQL_AUTOCOMMIT.
//    Wert 1 für SQL_AUTOCOMMIT entspricht SQL_AUTOCOMMIT_ON.
//    Dieses Beispiel hat denselben Effekt wie
//    odbc_autocommit($conn, true);

odbc_setoption ($conn, 1, 102, 1);

// 2. Option 0 von SQLSetStmtOption() ist SQL_QUERY_TIMEOUT.
//    Dieses Beispiel setzt den Timeout auf 30 Sekunden.

$result = odbc_prepare ($conn, $sql);
odbc_setoption ($result, 2, 0, 30);
odbc_execute ($result);
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
