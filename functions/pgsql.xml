<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.pgsql">
  <title>PostgreSQL Funktionen</title>
  <titleabbrev>PostgreSQL</titleabbrev>
  
  <partintro>
   <para> 
    Postgres, ursprünglich entwickelt im UC Berkeley Computer Science
    Department, hat Pionierarbeit bei objektrelationalen
    Datenbankkonzepten geleistet, die jetzt Einzug in kommerzielle
    Datenbanken halten. Postgres bietet SQL92/SQL3
    Sprachunterstützung, Transaktionen und erweiterbare
    Typenklassen. PostgreSQL ist eine Public Domain und Open Source
    Weiterentwicklung des ursprünglichen Berkeley-Codes.
   </para>
   <para>
    PostgreSQL ist kostenlos. Die aktuelle Version ist erhältlich bei
    <ulink url="&url.pgsql;">www.PostgreSQL.org</ulink>.
   </para>
   <para>
    Seit Version 6.3 (03/02/1998) benutzt PostgreSQL Unix Domain
    Sockets, siehe folgende Tabelle. Der Socket ist in
    <filename>/tmp/.s.PGSQL.5432</filename> zu finden. Der Schalter
    -i, der dem <command>postmaster</command> mitgegeben werden kann,
    weist diesen an, sowohl über TCP/IP als auch über UNIX Domain
    Sockets eine Verbindung bereitzustellen.
    <table>
     <title>Postmaster und PHP</title>
     <tgroup cols="3">
      <thead> 
       <row>
	<entry>Postmaster</entry>
	<entry>PHP</entry>
	<entry>Status</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry>postmaster &</entry>
	<entry>pg_connect("dbname=MyDbName");</entry>
	<entry>OK</entry>
       </row>
       <row>
	<entry>postmaster -i &</entry>
	<entry>pg_connect("dbname=MyDbName");</entry>
	<entry>OK</entry>
       </row>
       <row>
	<entry>postmaster &</entry>
	<entry>pg_connect("host=localhost dbname=MyDbName");</entry>
	<entry>	 
	 Unable to connect to PostgreSQL server: connectDB() failed:
	 Is the postmaster running and accepting TCP/IP (with -i)
	 connection at 'localhost' on port '5432'? in
	 /path/to/file.php3 on line 20.
	</entry>
       </row>
       <row>
	<entry>postmaster -i &</entry>
	<entry>pg_connect("host=localhost dbname=MyDbName");</entry>
	<entry>OK</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Eine Verbindung läßt sich auch mit folgendem Befehl herstellen:
    <command>$conn = pg_Connect("host=myHost port=myPort tty=myTTY
    options=myOptions user=myUser password=myPassword dbname=myDB");
    </command>
   </para>
   <para>
    Die bisherige Syntax:
    <command>$conn = pg_connect ("host", "port", "options", "tty",
    "dbname")
    </command>
    ist veraltet und sollte nicht weiter verwendet werden.
   </para>
   <para>
    Um die Large Object-Schnittstelle zu benutzen, ist es nötig, diese
    in einem Transaktionsblock einzuschließen. Ein Transaktionsblock
    beginnt mit einem <command>begin</command> und endet, wenn die
    Transaktion gültig war, mit <command>commit</command>
    oder <command>end</command>.  Wenn die Transaktion fehlschlägt,
    sollte sie mit <command>abort</command> oder
    <command>rollback</command> geschlossen werden.
    <example>
     <title>Grosse Objekte benutzen</title>
     <programlisting role="php">
&lt;?php
    $database = pg_Connect ("", "", "", "", "jacarta");
    pg_exec ($database, "begin");
    $oid = pg_locreate ($database);
    echo ("$oid\n");
    $handle = pg_loopen ($database, $oid, "w");
    echo ("$handle\n");
    pg_lowrite ($handle, "gaga");
    pg_loclose ($handle);
    pg_exec ($database, "commit")
?>
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.pg-close">
   <refnamediv>
    <refname>pg_Close</refname>
    <refpurpose>Schließt eine PostgreSQL-Verbindung</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_close</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert &false; zurück, wenn die Verbindung zur Datenbank keine
     gültige Kennung hat, ansonsten ist der Rückgabewert
     &true;.  Schließt eine PostgreSQL Datenbank-Verbindung mit der
     angegebenen Verbindungskennung.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-cmdtuples">
   <refnamediv>
    <refname>pg_cmdTuples</refname>
    <refpurpose>
     Gibt die Anzahl betroffener Tupel zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_cmdtuples</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_cmdTuples</function> gibt die Anzahl der
     Tupel (instances) einer INSERT, UPDATE oder DELETE Abfrage
     zurück. Die Funktion liefert 0 zurück, wenn die Abfrage keinen
     Tupel liefert.
     <example>
      <title>pg_cmdtuples</title>
      <programlisting role="php"
>&lt;?php
$result = pg_exec($conn, "INSERT INTO verlag VALUES ('Autor')");
$cmdtuples = pg_cmdtuples($result);
echo $cmdtuples . " &lt;- cmdtuples affected.";
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-connect">
   <refnamediv>
    <refname>pg_Connect</refname>
    <refpurpose>Öffnet eine Verbindung</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_connect</function></funcdef>
      <paramdef>string <parameter>conn_string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Öffnet eine Verbindung zu einer PostgreSQL-Datenbank und liefert
     bei Erfolg die Verbindungskennung zurück - oder &false;, falls
     keine Verbindung hergestellt werden konnte. 
     Alle Verbindungsdaten sind in dem String
     <parameter>conn_string</parameter> zusammengefasst.
     <example>
     <title>Gebrauch von <function>pg_connect</function></title>
     <programlisting role="php">
&lt;?php
$dbconn = pg_Connect ("dbname=mary");
//connect to a database named "mary"
$dbconn2 = pg_Connect ("host=localhost port=5432 dbname=mary");
//connect to a database named "mary" on "localhost" at port "5432"
$dbconn3 = pg_Connect ("user=lamb passwd=baaaa dbname=mary ");
//connect to a database named "mary" with a username and password
?>
     </programlisting>
     </example>
     Die von dieser Funktion
     zurückgelieferte Verbindungskennung wird von anderen
     PostgreSQL-Funktionen benötigt.  Es ist auch möglich, mehrere
     Verbindungen gleichzeitig zu öffnen.
    </para>
    <para>
     Die möglichen Argumente der Verbindungsdaten sind
     <parameter>dbname</parameter> 
     <parameter>port</parameter>, <parameter>host</parameter>, 
     <parameter>tty</parameter>, <parameter>options</parameter>,
     <parameter>user</parameter>, und <parameter>password</parameter>.
    </para>
    <para>
     Die alte Syntax
     <funcsynopsis>
      <funcprototype>
       <funcdef>int <function>pg_connect</function></funcdef>
       <paramdef>string <parameter>host</parameter></paramdef>
       <paramdef>string <parameter>port</parameter></paramdef>
       <paramdef>string <parameter>options</parameter></paramdef>
       <paramdef>string <parameter>tty</parameter></paramdef>
       <paramdef>string <parameter>dbname</parameter></paramdef>
      </funcprototype>
     </funcsynopsis>
     sollte nicht mehr verwendet werden.
    </para>
    <para>
     Siehe auch <function>pg_pConnect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-dbname">
   <refnamediv>
    <refname>pg_DBname</refname>
    <refpurpose>Name der Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_dbname</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt den Namen der Datenbank, deren Verbindungskennung übergeben
     wurde, aus - oder &false;, wenn es sich um eine ungültige Kennung
     handelt.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-end-copy">
   <refnamediv>
    <refname>pg_end_copy</refname>
    <refpurpose>Syncronisation mit dem PostgreSQL backend</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_end_copy</function></funcdef>
      <paramdef>resource
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_end_copy</function> syncronisiert das PostgreSQL
     frontend mit dem
     backend nach einer Kopier-Operation. Die Funktion muss aufgerufen werden,
     damit das backend mit dem frontend synchronisiert bleibt.
     Liefert &true; im Erfolgsfall, sonst &false;.
    </para>
    <para>
     Weiter Details und ein Beispiel finden Sie bei der Funktion
     <function>pg_put_line</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-errormessage">
   <refnamediv>
    <refname>pg_ErrorMessage</refname>
    <refpurpose>Fehlermeldung</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_errormessage</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert einen String, der die Fehlermeldung enthält oder &false;
     bei Versagen.  Details über den Fehler können aber eher
     nicht durch pg_errormessage bezogen werden. Wenn der Fehler bei
     der letzten Datenbank-Aktion, für die eine gültige Kennung
     existierte, auftrat, liefert die Funktion einen String mit der
     Fehlermeldung des Backend-Servers aus.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-exec">
   <refnamediv>
    <refname>pg_Exec</refname>
    <refpurpose>Führt eine Abfrage aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_exec</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt eine Ergebniskennung zurück, wenn die Abfrage ausgeführt
     wurde oder &false; bei gescheiterter Abfrage oder ungültiger
     Verbindungskennung. (Details über den Fehler kann man bei
     gültiger Verbindung durch den Gebrauch von
     <function>pg_ErrorMessage</function> erhalten).  Diese Funktion
     sendet ein SQL-Statement an die durch die Verbindungskennung
     spezifizierte PostgreSQL Datenbank. Die Verbindung muß eine
     gültige, durch <function>pg_Connect</function> zurückgegebene
     Kennung haben.  Der Rückgabewert dieser Funktion ist eine
     Kennung, die dazu verwendet kann, das Abfrageergebnis mit anderen
     PostgreSQL-Funktionen anzusprechen.
     <note>
      <simpara>
       PHP/FI lieferte als Rückgabewert 1, wenn die Abfrage kein
       Ergebnis liefern würde (beispielsweise INSERTs oder UPDATEs),
       und sogar einen Wert größer 1 bei SELECTs, die nichts
       zurückgaben. Dies trifft für PHP nicht mehr zu.
      </simpara>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-array">
   <refnamediv>
    <refname>pg_Fetch_Array</refname>
    <refpurpose>Holt eine Datenbankreihe als Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>pg_fetch_array</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>result_type</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Rückgabewert: Ein Array, das mit der eingelesenen Reihe identisch
     ist, oder &false;, wenn keine Reihe mehr gelesen werden kann.
    </para>
    <para>
     <function>pg_fetch_array</function> ist eine erweiterte Version
     von <function>pg_fetch_row</function>. Zusätzlich zur Speicherung
     der Daten in einem aufgezählten Array speichert diese Funktion
     die Daten in assoziativen Indexen, indem es den Feldnamen als
     Schlüssel verwendet.
    </para>
    <para>
     Das dritte optionale Argument <parameter>result_type</parameter>
     in <function>pg_fetch_array</function> ist eine Konstante, die
     folgende Werte annehmen kann: PGSQL_ASSOC, PGSQL_NUM und
     PGSQL_BOTH.
     <note>
      <para>
       <parameter>Result_type</parameter> wurde in PHP 4.0
       hinzugefügt.
      </para>
     </note>
    </para>
    <para>
     Wichtig zu bemerken ist, daß <function>pg_fetch_array</function>
     nicht wesentlich langsamer als <function>pg_fetch_row</function>
     ist, obwohl eine umfassendere Funktion zur Verfügung gestellt
     wird.
    </para>
    <para>
     Für weitere Einzelheiten siehe auch
     <function>pg_fetch_row</function>
    </para>
    <example>
     <title>PostgreSQL fetch array</title>
     <programlisting role="php">
&lt;?php 
$conn = pg_pconnect("","","","","verlag");
if (!$conn) {
    echo "Es ist ein Fehler aufgetreten.\n";
    exit;
}

$result = pg_Exec ($conn, "SELECT * FROM autoren");
if (!$result) {
    echo "Es ist ein Fehler aufgetreten.\n";
    exit;
}

$arr = pg_fetch_array ($result, 0);
echo $arr[0] . " &lt;- array\n";
$arr = pg_fetch_array ($result, 1);
echo $arr["autor"] . " &lt;- array\n";
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-object">
   <refnamediv>
    <refname>pg_Fetch_Object</refname>
    <refpurpose>Holt einen Datensatz als Objekt</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>pg_fetch_object</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>result_type</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Rückgabewert: Ein Objekt, dessen Eigenschaften mit denen der
     Felder des erhaltenen Datensatzes übereinstimmen oder &false;, wenn
     kein Datensatz mehr zurückgegeben wird.
    </para>
    <para>
     <function>pg_fetch_object</function> ist
     <function>pg_fetch_array</function> ähnlich, mit einem
     Unterschíed: Statt eines Arrays wird ein Objekt zurückgegeben.
     Indirekt heißt das, dass man die Daten nur über die Feldnamen und
     nicht über ihre Offsets ansprechen kann (Zahlen sind nicht
     erlaubte Eigenschaftsnamen).
    </para>
    <para>
     Das dritte, optionale Argument <parameter>result_type</parameter>
     in <function>pg_fetch_object</function> ist eine Konstante und
     kann die folgenden Werte annehmen: PGSQL_ASSOC, PGSQL_NUM, and
     PGSQL_BOTH.
     <note>
      <para>
       <parameter>Result_type</parameter> wurde in PHP 4.0 hinzugefügt
      </para>
     </note>
    </para>
    <para>
     Von der Geschwindigkeit her ist die Funktion mit
     <function>pg_fetch_array</function> identisch und fast so schnell
     wie <function>pg_fetch_row</function> (Der Unterschied ist
     unwesentlich).
    </para>
    <para>
     Siehe auch: <function>pg_fetch_array</function> und
     <function>pg_fetch_row</function>.
     <example>
      <title>Postgres fetch object</title>
      <programlisting role="php">
&lt;?php 
$database = "verlag";
$db_conn = pg_connect ("localhost", "5432", "", "", $database);
if (!$db_conn): ?>
    &lt;H3>Konnte keine Datenbankverbindung zu
    &lt;? echo $database ?> herstellen.&lt;/H3> &lt;?
    exit;
endif;

$qu = pg_exec ($db_conn, "SELECT * FROM verlag ORDER BY autor");
$row = 0; // postgres needs a row counter other dbs might not 

while ($data = pg_fetch_object ($qu, $row)):
    echo $data->autor." (";
    echo $data->jahr ."): ";
    echo $data->titel."&lt;BR>";
    $row++;
endwhile; ?>

&lt;PRE>&lt;?php
$fields[] = Array ("autor", "Autor");
$fields[] = Array ("jahr",  " Jahr");
$fields[] = Array ("titel", " Titel");
$row= 0; // postgres needs a row counter other dbs might not

while ($data = pg_fetch_object ($qu, $row)):
    echo "----------\n";
    reset ($fields);
    while (list (,$item) = each ($fields)):
        echo $item[1].": ".$data->$item[0]."\n";
    endwhile;
    $row++;
endwhile;
echo "----------\n"; ?>
&lt;/PRE> &lt;?php
pg_freeResult ($qu);
pg_close ($db_conn);
?> 
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-row">
   <refnamediv>
    <refname>pg_Fetch_Row</refname>
    <refpurpose>
     Holt einen Datensatz als numerisches Array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>pg_fetch_row</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Rückgabewert: Ein Array, das mit dem gelesenen Datensatz
     übereinstimmt oder &false;, wenn kein Datensatz mehr zurückgegeben
     wird.
    </para>
    <para>
     <function>pg_fetch_row</function> holt eine Datensatz aus dem
     duch die Kennung festgelegten Ergebnis. Der Datensatz wird als
     numerisches Array zurückgegeben. Jedes Ergebnisfeld wird in einem
     Array-Offset gespeichert, angefangen bei Offset 0.
    </para>
    <para>
     Ein nachfolgender Aufruf von <function>pg_fetch_row</function>
     wird den nächste Datensatz im Ergebnissatz ausgeben, oder &false;,
     wenn keine auszugebender Datensatz mehr vorhanden ist.
    </para>
    <para>
     Siehe auch: <function>pg_fetch_array</function>,
     <function>pg_fetch_object</function>,
     <function>pg_result</function>.
     <example>
      <title>Postgres fetch row</title>
      <programlisting role="php">
&lt;?php
 $conn = pg_pconnect("","","","","verlag");
if (!$conn) {
    echo "Es ist ein Fehler aufgetreten.\n";
    exit;
}

$result = pg_Exec ($conn, "SELECT * FROM autoren");
if (!$result) {
    echo "Es ist ein Fehler aufgetreten.\n";
    exit;
}

$row = pg_fetch_row ($result, 0);
echo $row[0] . " &lt;- row\n";

$row = pg_fetch_row ($result, 1);
echo $row[0] . " &lt;- row\n";

$row = pg_fetch_row ($result, 2);
echo $row[1] . " &lt;- row\n";
?>
      </programlisting>    
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldisnull">
   <refnamediv>
    <refname>pg_FieldIsNull</refname>
    <refpurpose>Prüft, ob ein Feld &null; ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldisnull</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>mixed <parameter>field</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Prüft, ob ein Feld &null; ist oder nicht. Die Funktion liefert 0
     zurück, wenn das Feld in der übergebenen Reihe nicht &null; ist und
     1, wenn das Feld &null; ist.  Das zu prüfende Feld kann als Nummer
     oder Feldname angegeben werden. Die Numerierung der Felder eines
     Datensatzes beginnt bei 0.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldname">
   <refnamediv>
    <refname>pg_FieldName</refname>
    <refpurpose>Gibt den Namen eines Feldes zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_fieldname</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldName</function> gibt den Feldnamen des Feldes,
     das zu der übergebenen Feldnummer gehört, aus dem durch die
     Kennung zu definierenden Ergebnis aus.  Die Feldnummerierung
     beginnt bei 0.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldnum">
   <refnamediv>
    <refname>pg_FieldNum</refname>
    <refpurpose>Liefert die Feldnummer eines Feldes</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldnum</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>string <parameter>field_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldNum</function> gibt die Nummer der Spalte aus,
     die zu dem übergebenen Feldnamen in dem duch die Kennung
     definierten Ergebnis gehört. Die Feldnumerierung beginnt bei 0.
     Diese Funktion gibt bei einem Fehler -1 aus.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldprtlen">
   <refnamediv>
    <refname>pg_FieldPrtLen</refname>
    <refpurpose>Liefert die angegebene Feldlänge</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldprtlen</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>row_number</parameter></paramdef>
      <paramdef>string <parameter>field_name</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldPrtLen</function> gibt die aktuelle Länge
     (Anzahl der Zeichen) eines bestimmten Wertes in einem Postgres
     SQL-Ergebnis aus. Die Feldnumerierung beginnt bei 0.  Die Funktion
     liefert bei einem Fehler -1 zurück.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldsize">
   <refnamediv>
    <refname>pg_FieldSize</refname>
     <refpurpose>
     Liefert die interne Speichergröße des benannten Felds
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_fieldsize</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldSize</function> liefert die interne
     Speichergröße (in Bytes) des angegebenen Feldes in dem durch die
     Kennung definierten Ergebnis. Die Feldnumerierung beginnt
     bei 0. Eine Feldgröße von -1 deutet auf ein Feld mit variabler
     Länge hin.  Diese Funktion gibt im Fehlerfall &false;
     zurück.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldtype">
   <refnamediv>
    <refname>pg_FieldType</refname>
     <refpurpose>
     Liefert den Feldtyp der entsprechenden Feldnummer
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_fieldtype</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>field_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FieldType</function> liefert einen String, der den
     Feldtyp des bezeichneten Feldes aus einem definierten Ergebnis
     enthält. Die Feldnumerierung beginnt bei 0.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-freeresult">
   <refnamediv>    
    <refname>pg_FreeResult</refname>
    <refpurpose>
     Gibt durch Ergebnisse belegten Speicher frei
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_freeresult</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_FreeResult</function> braucht nur aufgerufen werden,
     wenn man befürchten muss, dass während des Skriptablaufes zu viel
     Speicher verbraucht wird.  Der Speicher, den Ergebnisse belegen,
     wird automatisch nach Beendigung des Skriptes freigegeben.  Wer
     allerdings sicher ist, die Ergebnisdaten innerhalb des Skriptes
     nicht mehr zu benötigen, kann <function>pg_FreeResult</function>
     mit der Ergebniskennung als Argument aufrufen, und der
     entsprechende Speicher wird freigegeben.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-getlastoid">
   <refnamediv>
    <refname>pg_GetLastOid</refname>
     <refpurpose>Gibt die letzte Objektkennung aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_getlastoid</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_GetLastOid</function> kann verwendet werden, um die
     einem eingefügten Tupel zugeordnete OID zu erhalten, wenn die
     Ergebniskennung vom letzten mit <function>pg_Exec</function>
     ausgeführten Befehls benutzt wird und dieser ein SQL INSERT war.
     Die Funktion gibt ein positives Integer zurück, wenn eine gültige
     OID existiert. -1 wird zurückgegeben, wenn ein Fehler aufgetreten
     ist oder der letzte mit <function>pg_Exec</function> abgesetzte
     Befehl kein INSERT war.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-host">
   <refnamediv>
    <refname>pg_Host</refname>
     <refpurpose>Gibt den Hostnamen zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_host</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_Host</function> liefert den Hostnamen des
     Datenbankservers, der durch die übergebene Kennung verbunden ist.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loclose">
   <refnamediv>
    <refname>pg_loclose</refname>
    <refpurpose>Schließt ein großes Objekt</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pg_loclose</function></funcdef>
      <paramdef>int <parameter>fd</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loclose</function> schließt ein Inversion Large
     Object. <parameter>fd</parameter> ist der Dateibeschreiber des mit
     <function>pg_loopen</function> geöffneten Objekts.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-locreate">
   <refnamediv>
    <refname>pg_locreate</refname>
    <refpurpose>Erstellt ein großes Objekt</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_locreate</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_locreate</function> erstellt ein Inversion Large
     Object und liefert dessen OID zurück.
     <parameter>conn</parameter> bezeichnet eine gültige
     Datenbankverbindung.  Die PostgresSQL Zugriffsmöglichkeiten
     INV_READ, INV_WRITE und INV_ARCHIVE werden nicht unterstützt, das
     Objekt wird stets mit Lese- und Schreibzugriff
     erstellt. INV_ARCHIVE wird seit Version 6.3 und höher von
     PostgresSQL selbst nicht mehr unterstützt.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loexport">
   <refnamediv>
    <refname>pg_loexport</refname>
    <refpurpose>export a large object to file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_loexport</function></funcdef>
      <paramdef>int
       <parameter>oid</parameter>
      </paramdef>
      <paramdef>int
       <parameter>file</parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>connection_id</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     The <parameter>oid</parameter> argument specifies the object id
     of the large object to export and the <parameter>filename</parameter>
     argument specifies the pathname of the file. Returns &false; if an error
     occurred, &true; otherwise. Remember that handling large objects in
     PostgreSQL must happen inside a transaction.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loimport">
   <refnamediv>
    <refname>pg_loimport</refname>
    <refpurpose>import a large object from file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_loimport</function></funcdef>
      <paramdef>int
       <parameter>file</parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>connection_id</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     The <parameter>filename</parameter> argument specifies the pathname
     of the file to be imported as a large object. Returns &false; if an error
     occurred, object id of the just created large object otherwise. Remember
     that handling large objects in PostgreSQL must happen inside
     a transaction.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loopen">
   <refnamediv>
    <refname>pg_loopen</refname>
    <refpurpose>Öffnet ein grosses Objekt</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_loopen</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
      <paramdef>int <parameter>objoid</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loopen</function> öffnet ein Inversion Large Object
     und liefert einen Dateibeschreiber des großen Objektes. Dieser
     beinhaltet Informationen über die Verbindung.  Der
     Dateibeschreiber des großen Objektes sollte daher geschlossen
     werden, bevor die Verbindung beendet wird.
     <parameter>objoid</parameter> definiert die gültige OID eines
     grossen Objektes und <parameter>mode</parameter> kann "r", "w"
     oder "rw" sein.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loread">
   <refnamediv>
    <refname>pg_loread</refname>
    <refpurpose>Liest ein grosses Objekt</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_loread</function></funcdef>
      <paramdef>int <parameter>fd</parameter></paramdef>
      <paramdef>int <parameter>len</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loread</function> liest höchstens
     <parameter>len</parameter> Bytes eines grossen Objektes und gibt
     dies als String zurück.  <parameter>fd</parameter> legt einen
     gültigen Dateibeschreiber fest und <parameter>len</parameter>
     definiert die maximal erlaubte Grösse des Segmentes des großen
     Objektes.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loreadall">
   <refnamediv>
    <refname>pg_loreadall</refname>
    <refpurpose>Liest ein grosses Objekt vollständig</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pg_loreadall</function></funcdef>
      <paramdef>int <parameter>fd</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_loreadall</function> liest ein grosses Objekt und
     reicht es sofort nach dem Senden der entsprechenden Header an
     den Browser weiter. Wird hauptsächlich für Binärdaten wie Bilder
     oder Sound genutzt.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-lounlink">
   <refnamediv>
    <refname>pg_lounlink</refname>
    <refpurpose>Ein grosses Objekt löschen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>pg_lounlink</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
      <paramdef>int <parameter>lobjid</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_lounlink</function> löscht das durch den
     <parameter>lobjid</parameter> Dateibeschreiber festgelegte grosse
     Objekt.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-lowrite">
   <refnamediv>
    <refname>pg_lowrite</refname>
    <refpurpose>Schreibt in ein grosses Objekt</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_lowrite</function></funcdef>
      <paramdef>int <parameter>fd</parameter></paramdef>
      <paramdef>string <parameter>buf</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_lowrite</function> schreibt aus einer Variablen
     höchstens <parameter>buf</parameter> in ein grosses Objekt und
     liefert die Anzahl der tasächlich geschriebenen Bytes zurück,
     oder &false;, wenn ein Fehler auftritt.  <parameter>fd</parameter>
     ist der Dateibeschreiber des grossen Objektes aus
     <function>pg_loopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-numfields">
   <refnamediv>
    <refname>pg_NumFields</refname>
    <refpurpose>Gibt die Anzahl der Felder aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_numfields</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_NumFields</function> liefert die Anzahl der Felder
     (Spalten) eines PostgreSQL-Ergebnisses. Das Argument ist eine
     gültige Ergebniskennung, die von <function>pg_Exec</function>
     zurückgegeben wurde.  Diese Funktion gibt im Fehlerfall -1 aus.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-numrows">
   <refnamediv>
    <refname>pg_NumRows</refname>
     <refpurpose>Gibt die Anzahl der Zeilen aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_numrows</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_NumRows</function> liefert die Anzahl der Zeilen
     in einem PostgreSQL-Ergebnis. Das Argument ist eine gültige
     Ergebniskennung, die von <function>pg_Exec</function>
     zurückgegeben wurde. Diese Funktion gibt im Fehlerfall -1 aus.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-options">
   <refnamediv>
    <refname>pg_Options</refname>
     <refpurpose>Liefert Verbindungsoptionen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_options</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_Options</function> liefert einen String, der die
     Optionen einer durch die Kennung bestimmtenn Verbindung enthält.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-pconnect">
   <refnamediv>
    <refname>pg_pConnect</refname>
    <refpurpose>Stellt eine persistente Datenbankverbindung her</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_pconnect</function></funcdef>
      <paramdef>string <parameter>conn_string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Öffnet eine persistente Verbindung zu einer PostgreSQL-Datenbank
     und liefert bei Erfolg die Verbindungskennung zurück - oder &false;,
     falls keine Verbindung hergestellt werden konnte. 
     Alle Verbindungsdaten sind in dem String
     <parameter>conn_string</parameter> zusammengefasst.
    </para>
    <para>
     Die von dieser Funktion
     zurückgelieferte Verbindungskennung wird von anderen
     PostgreSQL-Funktionen benötigt.  Es ist auch möglich, mehrere
     Verbindungen gleichzeitig zu öffnen.
    </para>
    <para>
     Die möglichen Argumente der Verbindungsdaten sind
     <parameter>dbname</parameter> 
     <parameter>port</parameter>, <parameter>host</parameter>, 
     <parameter>tty</parameter>, <parameter>options</parameter>,
     <parameter>user</parameter>, und <parameter>password</parameter>.
    </para>
    <para>
     Die alte Syntax
     <funcsynopsis>
      <funcprototype>
       <funcdef>int <function>pg_pconnect</function></funcdef>
       <paramdef>string <parameter>host</parameter></paramdef>
       <paramdef>string <parameter>port</parameter></paramdef>
       <paramdef>string <parameter>options</parameter></paramdef>
       <paramdef>string <parameter>tty</parameter></paramdef>
       <paramdef>string <parameter>dbname</parameter></paramdef>
      </funcprototype>
     </funcsynopsis>
     sollte nicht mehr verwendet werden.
    </para>
    <para>
     Siehe auch <function>pg_connect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-port">
   <refnamediv>
    <refname>pg_Port</refname>
    <refpurpose>Gibt die Portnummer aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_port</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_Port</function> Gibt die Portnummer der
     durch die Kennung bezeichneten PostgresSQL-Verbindung aus.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-put-line">
   <refnamediv>
    <refname>pg_put_line</refname>
    <refpurpose>Sendet eine NULL-terminierte Zeichenkette zum PostgreSQL backend</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_put_line</function></funcdef>
      <paramdef>resource
       <parameter><optional>connection_id</optional></parameter>
      </paramdef>
      <paramdef>string <parameter>Daten</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_put_line</function> sendet eine NULL-terminierte
     Zeichenkette 
     an den  PostgreSQL backend server. Nützliche ist die Funktion um
     bespielsweise Daten mit hoher Geschnwindigkeit in eine Datenbanktabelle
     einzufügen, wenn dieser Vorgang mit einer PostgreSQL copy-Operation
     begonnen wurde. 
     Der abschließende NULL-character
     wird automatisch hinzugefügt. Liefert &true; im Erfolgsfall, sonst &false;.
    </para>
    <note>
     <para>
      Beachten sie, dass die Anwendung explizit die beiden Zeichen "\."
      in der letzten Zeile senden muss, um damit dem backend das Datenende
      anzuzeigen.
     </para>
    </note>
    <para>
     <example>
      <title>Schnelles Einfügen von Daten in eine Tabelle</title>
      <programlisting role="php">
&lt;?php 
    $conn = pg_pconnect ("dbname=foo");
    pg_exec($conn, "create table bar (a int4, b char(16), d float8)");
    pg_exec($conn, "copy bar from stdin");
    pg_put_line($conn, "3\thello world\t4.5\n");
    pg_put_line($conn, "4\tgoodbye world\t7.11\n");
    pg_put_line($conn, "\\.\n");
    pg_end_copy($conn);
?>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>pg_end_copy</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-result">
   <refnamediv>
    <refname>pg_Result</refname>
    <refpurpose>Liefert Werte eines bezeichneten Ergebnisses</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>pg_result</function></funcdef>
      <paramdef>int <parameter>result_id</parameter></paramdef>
      <paramdef>int <parameter>row_number</parameter></paramdef>
      <paramdef>mixed <parameter>fieldname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_Result</function> liefert Werte aus einem durch
     <function>pg_Exec</function> produzierten Ergebnis, dessen
     Kennung übergeben werden muß.
     <parameter>row_number</parameter> und
     <parameter>fieldname</parameter> geben an, welche Zelle der
     Ergebnistabelle zurückgegeben werden soll. Die Zeilennumerierung
     beginnt bei 0. Anstatt des Feldnamens kann auch der Feldindex als
     Zahl ohne Anführungszeichen angegeben werden. Der Feldindex
     beginnt bei 0.
    </para>
    <para>
     PostgreSQL hat viele eingebaute Typen, und nur die grundlegenden
     werden hier direkt unterstützt. Alle Formen von Interger, Boolean
     und OID-Typen werden als Integer-Werte zurückgegeben, alle Formen
     von float und real als double.  Alle anderen Formen,
     einschließlich der Arrays, werden als Strings in der durch den
     <command>psql</command>-Befehl bekannten
     PostgreSQL-Standardformatierung zurückgeliefert.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-set-client-encoding">
   <refnamediv>
    <refname>pg_set_client_encoding</refname>
    <refpurpose>
     Set the client encoding
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pg_set_client_encoding</function></funcdef>
      <paramdef>int 
       <parameter><optional>connection</optional></parameter>
      </paramdef>
      <paramdef>string <parameter>encoding</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     The function set the client encoding and return 0 if success or
     -1 if error.
    </para>
    <para>
     <parameter>encoding</parameter> is the client
     encoding and can be either :
     SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE,
     MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT,
     SJIS, BIG5, WIN1250.
    </para>
    <note>
     <para>
      This function requires PHP-4.0.2 or higher and PostgreSQL-7.0 or
      higher.
     </para>
     <para>
      The function used to be called
      <function>pg_setclientencoding</function>.
     </para>
    </note>
    <para>
     See also <function>pg_client_encoding</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-client-encoding">
   <refnamediv>
    <refname>pg_client_encoding</refname>
    <refpurpose>
     Get the client encoding
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>      
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_client_encoding</function></funcdef>
      <paramdef>int 
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     The functions returns the client encoding as the string. The
     returned string should be either :
     SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE,
     MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT,
     SJIS, BIG5, WIN1250. 
    </para>
    <note>
     <para>
      This function requires PHP-4.0.2 or higher and PostgreSQL-7.0 or
      higher.
     </para>
     <para>
      The function used to be called
      <function>pg_clientencoding</function>.
     </para>
    </note>
    <para>
     See also <function>pg_set_client_encoding</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-trace">
   <refnamediv>
    <refname>pg_trace</refname>
    <refpurpose>Trace a connection to PostgreSQL server</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_trace</function></funcdef>
      <paramdef>string
       <parameter>filename</parameter>
      </paramdef>
      <paramdef>string
       <parameter><optional>mode</optional></parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Enables tracing of the PostgreSQL frontend/backend communication
     to a debugging file. To fully understand the results one needs to be
     familiar with the internals of PostgreSQL communication protocol.
     For those who are not, it can still be useful for tracing errors in
     queries sent to the server, you could do for example
     'grep '^To backend' trace.log' and see what queriew actually were sent
     to the PostgreSQL server.
    </para>
    <para>
     <parameter>filename</parameter> and <parameter>mode</parameter> are the
     same as in <function>fopen</function> (<parameter>mode</parameter> defaults
     to 'w'), <parameter>connection</parameter> specifies the connection to
     trace and defaults to the last one opened.
    </para>
    <para>
     Returns &true; if <parameter>filename</parameter> could be opened for
     logging, &false; otherwise.
    </para>
    <para>
     Siehe auch <function>fopen</function> and <function>pg_untrace</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-tty">
   <refnamediv>
    <refname>pg_tty</refname>
    <refpurpose>Gibt den tty-Namen aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>pg_tty</function></funcdef>
      <paramdef>int <parameter>connection_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pg_tty</function> gibt den tty-Namen aus, an den die
     serverseitigen Debuggermeldungen der durch die Kennung
     definierten Verbindung geschickt werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-untrace">
   <refnamediv>
    <refname>pg_untrace</refname>
    <refpurpose>Stop tracing a connection to PostgreSQL server</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>pg_untrace</function></funcdef>
      <paramdef>int
       <parameter><optional>connection</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Stop tracing started by <function>pg_trace</function>.
     <parameter>connection</parameter> specifies the connection that was
     traced and defaults to the last one opened.
    </para>
    <para>
     Returns always &true;.
    </para>
    <para>
     Siehe auch <function>pg_trace</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
