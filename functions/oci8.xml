<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.oci8">
  <title>Oracle 8 Funktionen</title>
  <titleabbrev>OCI8</titleabbrev>
  <partintro>
   <para>
    Diese Funktionen gestatten den Zugriff auf Oracle7 und Oracle8 Datenbanken.
    Es wird hierbei das Oracle8 Call-Interface (OCI8) verwendet, welches
    installierte Oracle8 Client Bibliotheken (Libraries) benötigt.
   </para>
   <para>
    Diese Schnittstelle ist flexibler als die Standard Oracle Funktionen.
    Es unterstützt Binding von localen und globalen PHP Variablen an
    Oracle Platzhalter und hat volle LOB,FILE und ROWID Unterstützung und
    gestattet dem Benutzer die Verwendung von Variablendefines.
   </para>
   <para>
    Vor der Benutzung dieser Erweiterung sollten Sie sicherstellen die folgenden
    Umgebungsvariablen für den Webserveruser VOR dem Start des Webservers 
    gesetzt zu haben.
    <itemizedlist>
     <listitem>
      <simpara>
       ORACLE_HOME
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       ORACLE_SID
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       LD_PRELOAD
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       LD_LIBRARY_PATH
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       NLS_LANG
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       ORA_NLS33
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Nachdem Sie die Umgebungsvariablen festgelegt haben, stellen Sie sicher, 
    das die Dateien im ORACLE_HOME/network/admin für den Webserver lesbar sind.
   </para>
   <note>
    <title>Wenn der Webserver abstürzt nach dem Start, oder nicht startet</title>
    <para>
     Überprüfen Sie, ob der Apache gegen -lpthread gelink ist:
    </para>
    <para>
     <informalexample>
      <programlisting>
# ldd /www/apache/bin/httpd 
    libpthread.so.0 => /lib/libpthread.so.0 (0x4001c000)
    libm.so.6 => /lib/libm.so.6 (0x4002f000)
    libcrypt.so.1 => /lib/libcrypt.so.1 (0x4004c000)
    libdl.so.2 => /lib/libdl.so.2 (0x4007a000)
    libc.so.6 => /lib/libc.so.6 (0x4007e000)
    /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
      </programlisting>
     </informalexample>
    </para>
    <para>
     Wenn libpthread hier nicht gelistet ist, dann muss der Webserver
     neu übersetzt werden:
    </para>
    <para>
     <informalexample>
      <programlisting>
# cd /usr/src/apache_1.3.xx
# make clean
# LIBS=-lpthread ./config.status
# make
# make install
      </programlisting>
     </informalexample>
    </para>
   </note>
   <para>
    <example>
     <title>OCI Hinweise</title>
      <programlisting role="php">
&lt;?php
// by sergo@bacup.ru

// Die Option OCI_DEFAULT führt die Anweisung in einer Transaktion aus 
OCIExecute($stmt, OCI_DEFAULT);

// for retrieve data use (after fetch):

$result = OCIResult($stmt, $n);
if (is_object ($result)) $result = $result-&gt;load();

// For INSERT or UPDATE statement use:

$sql = "insert into table (field1, field2) values (field1 = 'value',
 field2 = empty_clob()) returning field2 into :field2";
OCIParse($conn, $sql);
$clob = OCINewDescriptor($conn, OCI_D_LOB);
OCIBindByName ($stmt, ":field2", &amp;$clob, -1, OCI_B_CLOB);
OCIExecute($stmt, OCI_DEFAULT);
$clob-&gt;save ("some text");
OCICommit($conn);

?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    Man kann auf Stored Procedures auf einfache Weise zugreifen.
    <example>
     <title>Stored Procedures benutzen</title>
      <programlisting role="php">
&lt;?php
// by webmaster@remoterealty.com
$sth = OCIParse ( $dbh, "begin sp_newaddress( :address_id, '$firstname',
 '$lastname', '$company', '$address1', '$address2', '$city', '$state',
 '$postalcode', '$country', :error_code );end;" );

// This calls stored procedure sp_newaddress, with :address_id being an
// in/out variable and :error_code being an out variable. 
// Then you do the binding:

   OCIBindByName ( $sth, ":address_id", $addr_id, 10 );
   OCIBindByName ( $sth, ":error_code", $errorcode, 10 );
   OCIExecute ( $sth );

?&gt;
     </programlisting>
    </example>
   </para>
  </partintro>	

  <refentry id="function.ocidefinebyname">
   <refnamediv>
    <refname>OCIDefineByName</refname>
    <refpurpose>Definiert eine PHP Variable als Platzhalter für die Werte eines SELECTs</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIDefineByName</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>string <parameter>Spaltenname</parameter></paramdef>
      <paramdef>mixed &<parameter>Variable</parameter></paramdef>
      <paramdef>int <parameter><optional>Typ</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIDefineByName</function> legt eine PHP Variable
     als Ziel für den Inhalt einer Spalte nach dem Fetchen fest.
     Es ist zu beachten, dass Oracle alle Spalten GROSSBUCHSTABIG ausliefert.
     Daher erwartet <function>OCIDefineByName</function> den Parameter
     <parameter>Spaltenname</parameter> grossbuchstabig.
     Wird ein <parameter>Spaltenname</parameter> benutzt, der nicht im
     SELECT vorhanden ist, wird keine Fehlermeldung ausgegeben.
    </para>
    <para>
     Soll ein abstrakter Datentyp (LOB/ROWID/BFILE) definiert werden,
     so muss er zuerst angefordert werden mit der <function>OCINewDescriptor</function>
     Funktion. In diesem Zusammenhang ist auch die <function>OCIBindByName</function>
     zu beachten.
    </para>
     <example>
      <title>OCIDefineByName</title>
      <programlisting>
&lt;?php
/* OCIDefineByPos example thies@thieso.net (980219) */

$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"select empno, ename from emp");

/* the define MUST be done BEFORE ociexecute! */

OCIDefineByName($stmt,"EMPNO",&$empno);
OCIDefineByName($stmt,"ENAME",&$ename);

OCIExecute($stmt);

while (OCIFetch($stmt)) {
    echo "empno:".$empno."\n";
    echo "ename:".$ename."\n";
}

OCIFreeStatement($stmt);
OCILogoff($conn);
?></programlisting></example>

   </refsect1>
  </refentry>

  <refentry id="function.ocibindbyname">
   <refnamediv>
    <refname>OCIBindByName</refname>
    <refpurpose>Bindet eine PHP-Variable an einen Oracle Platzhalter</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIBindByName</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>string <parameter>Platzhaltername</parameter></paramdef>
      <paramdef>mixed &<parameter>Variable</parameter></paramdef>
      <paramdef>int<parameter>Länge</parameter></paramdef>
      <paramdef>int <parameter><optional>Typ</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIBindByName</function> bindet die PHP Variable
     <parameter>variable</parameter> an den Oracle Platzhalter
     <parameter>ph_name</parameter>.  Es wird genutzt um den benötigten
     Speicherplatz fuer die Ein/Ausgabe zu Laufzeit festzulegen.
     <parameter>length</parameter> gibt dabei die maximale Grösse
     des Speicherplatzes an. Wenn <parameter>length</parameter> auf -1
     gesetzt wird, nimmt <function>OCIBindByName</function> die Grösse des 
     Inhalts von <parameter>variable</parameter> als maximale Grösse.
    </para>
    <para>
     Wenn ein abstrakter Datentyp wie (LOB/ROWID/BFILE) gebunden werden soll,
     muss zuerst <function>OCINewDescriptor</function> verwendet werden.
     <parameter>length</parameter> gilt nicht für abstrakte Datentypen und 
     sollte denn auf -1 gesetzt sein.
     <parameter>type</parameter> zeigt Oracle, welchen Typ wir binden wollen.
     Mögliche Typen sind: OCI_B_FILE (Binärdatei), OCI_B_CFILE (Textdatei),
     OCI_B_CLOB (Text-LOB), OCI_B_BLOB (Binär-LOB) and OCI_B_ROWID (ROWID).
    </para>
     <example>
      <title>OCIDefineByName</title>
      <programlisting>
&lt;?php
/* OCIBindByPos example thies@thieso.net (980221)

  trägt 3 Datensätze in emp ein und benutzt ROWID für das UPDATE nach dem
  INSERT
*/

$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"insert into emp (empno, ename) ".
					   "values (:empno,:ename) ".
					   "returning ROWID into :rid");

$data = array(1111 => "Larry", 2222 => "Bill", 3333 => "Jim");

$rowid = OCINewDescriptor($conn,OCI_D_ROWID);

OCIBindByName($stmt,":empno",&$empno,32);
OCIBindByName($stmt,":ename",&$ename,32);
OCIBindByName($stmt,":rid",&$rowid,-1,OCI_B_ROWID);

$update = OCIParse($conn,"update emp set sal = :sal where ROWID = :rid");
OCIBindByName($update,":rid",&$rowid,-1,OCI_B_ROWID);
OCIBindByName($update,":sal",&$sal,32);

$sal = 10000;

while (list($empno,$ename) = each($data)) {
	OCIExecute($stmt);
	OCIExecute($update);
} 

$rowid->free();

OCIFreeStatement($update);
OCIFreeStatement($stmt);

$stmt = OCIParse($conn,"select * from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
while (OCIFetchInto($stmt,&$arr,OCI_ASSOC)) {
	var_dump($arr);
}
OCIFreeStatement($stmt);

/* delete our "junk" from the emp table.... */
$stmt = OCIParse($conn,"delete from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
OCIFreeStatement($stmt);

OCILogoff($conn);
?></programlisting></example>
   </refsect1>
  </refentry>

  <refentry id="function.ocilogon">
   <refnamediv>
    <refname>OCILogon</refname>
    <refpurpose>Baut eine OCI-Verbindung auf</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCILogon</function></funcdef>
      <paramdef>string <parameter>Benutzername</parameter></paramdef>
      <paramdef>string <parameter>Passwort</parameter></paramdef>
      <paramdef>string <parameter><optional>Datenbankname</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCILogon</function> gibt bei erfolgreicher Verbindung einen
     Verbindungsindex zurück. Bei einem Fehler &false;. Der optionale
     dritte Parameter kann auf die lokale Oracleinstanz gesetzt werden oder
     auf die, zu welcher sich verbunden werden soll. Diese sollte in der
     tnsnames.ora aufgeführt sein. Wird der dritte Parameter nicht gesetzt
     nimmt PHP automatisch den Wert aus der Umgebungsvariable ORACLE_SID oder
     TWO_TASK. 
    </para>
    <para>Verbindungen werden gemeinsam wärend eines Skriptes genutzt, wenn
     <function>OCILogon</function> benutzt wird. Das heisst, dass commits und
     rollbacks sich auf alle offenen Transaktionen im Skript auswirken, ausser
     wenn explizit mehrere Verbindungen aufgebaut werden.
    </para>
    <para>
     Dies Beispiel zeigt, wie die Verbindungen gemeinsam genutzt werden.
     <example>
      <title>OCILogon</title>
      <programlisting>
&lt;?php
print "&lt;HTML>&lt;PRE>";
$db = "";

$c1 = ocilogon("scott","tiger",$db);
$c2 = ocilogon("scott","tiger",$db);

function create_table($conn)
{ $stmt = ociparse($conn,"create table scott.hallo (test
varchar2(64))");
  ociexecute($stmt);
  echo $conn." created table\n\n";
}

function drop_table($conn)
{ $stmt = ociparse($conn,"drop table scott.hallo");
  ociexecute($stmt);
  echo $conn." dropped table\n\n";
}

function insert_data($conn)
{ $stmt = ociparse($conn,"insert into scott.hallo values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}

function delete_data($conn)
{ $stmt = ociparse($conn,"delete from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}

function commit($conn)
{ ocicommit($conn);
  echo $conn." commited\n\n";
}

function rollback($conn)
{ ocirollback($conn);
  echo $conn." rollback\n\n";
}

function select_data($conn)
{ $stmt = ociparse($conn,"select * from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt))
    echo $conn." &lt;".ociresult($stmt,"TEST").">\n\n";
  echo $conn."----done\n\n";
}

create_table($c1);
insert_data($c1);   // trägt eine Zeile ein und benutzt dabei c1
insert_data($c2);   // trägt eine Zeile ein und benutzt dabei c2

select_data($c1);   // die Ergebnisse beider Eintragungen wird zurückgegeben
select_data($c2);   

rollback($c1);      // Rollback benutzt c1

select_data($c1);   // ein Rollback auf beide Eintragungen
select_data($c2);   

insert_data($c2);   // trägt eine Zeile ein und benutzt dabei c2
commit($c2);        // der commit für c2

select_data($c1);   // das Ergebnis der Eintragung über c2 wird zurückgegeben

delete_data($c1);   // löschen aller Zeilen über c1
select_data($c1);   // keine Zeile zurückgegeben
select_data($c2);   // keine Zeile zurückgegeben
commit($c1);        // commit für c1

select_data($c1);   // keine Zeile zurückgegeben
select_data($c2);   // keine Zeile zurückgegeben


drop_table($c1);
print "&lt;/PRE>&lt;/HTML>";
?></programlisting></example></para>
    <simpara>
     Bitte beachte auch <function>OCIPLogon</function> und
     <function>OCINLogon</function>.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociplogon">
   <refnamediv>
    <refname>OCIPLogon</refname>
    <refpurpose>Logt sich persistent in die Oracle Datenbank ein und erzeugt eine
    neue Oracle Session.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIPLogon</function></funcdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string <parameter><optional>Datenbank</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIPLogon</function> gibt bei erfolgreicher Öffnung einer persistenten 
     Verbindung einen Verbindungsindex zurück. Bei einem Fehler &false;. Der optionale
     dritte Parameter kann auf die lokale Oracleinstanz gesetzt werden oder
     auf die, zu welcher sich verbunden werden soll. Diese sollte in der
     tnsnames.ora aufgeführt sein. Wird der dritte Parameter nicht gesetzt
     nimmt PHP automatisch den Wert aus der Umgebungsvariable ORACLE_SID oder
     TWO_TASK.
    </para>
    <simpara>
     Bitte ebenfalls beachten <function>OCILogon</function> und
     <function>OCINLogon</function>.</simpara>
   </refsect1></refentry>

  <refentry id="function.ocinlogon">
   <refnamediv>
    <refname>OCINLogon</refname>
    <refpurpose>Logt sich in die Oracle Datenbank ein und erzeugt dabei eine neue
    Oracle Session.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCINLogon</function></funcdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string <parameter><optional>db</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCINogon</function> gibt bei erfolgreicher Verbindung einen
     Verbindungsindex zurück. Bei einem Fehler &false;. Der optionale
     dritte Parameter kann auf die lokale Oracleinstanz gesetzt werden oder
     auf die, zu welcher sich verbunden werden soll. Diese sollte in der
     tnsnames.ora aufgeführt sein. Wird der dritte Parameter nicht gesetzt
     nimmt PHP automatisch den Wert aus der Umgebungsvariable ORACLE_SID oder
     TWO_TASK. 
    </para>
    <para>
     <function>OCINLogon</function> erzeugt eine neue Verbindung mit einer
     neuen Oracle Session, dies ist zum Beispiel erforderlich, wenn 
     man mit voneinander getrennten Transaktionen arbeitet.
     Normalerweise wird die Oracle Session gemeinsam genutzt, wenn man
     <function>OCILogon</function> oder auf Webserverebene <function>OCIPLogon</function>
     . Wenn man allerdings unterschiedliche Verbindungen mit 
     <function>OCINLogon</function> öffnet, beeinflussen sich die 
     Commits und Rollbacks der einzelnen Datenbankverbindungen nicht.
    </para>
    <para>
     Dieses Beispiel zeigt, das es sich um unterschiedliche Verbindungen handelt:
     <example>
      <title>OCINLogon</title>
      <programlisting>
&lt;?php
print "&lt;HTML>&lt;PRE>";
$db = "";

$c1 = ocilogon("scott","tiger",$db);
$c2 = ocinlogon("scott","tiger",$db);

function create_table($conn)
{ $stmt = ociparse($conn,"create table scott.hallo (test
varchar2(64))");
  ociexecute($stmt);
  echo $conn." created table\n\n";
}

function drop_table($conn)
{ $stmt = ociparse($conn,"drop table scott.hallo");
  ociexecute($stmt);
  echo $conn." dropped table\n\n";
}

function insert_data($conn)
{ $stmt = ociparse($conn,"insert into scott.hallo values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}

function delete_data($conn)
{ $stmt = ociparse($conn,"delete from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}

function commit($conn)
{ ocicommit($conn);
  echo $conn." commited\n\n";
}

function rollback($conn)
{ ocirollback($conn);
  echo $conn." rollback\n\n";
}

function select_data($conn)
{ $stmt = ociparse($conn,"select * from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt))
    echo $conn." &lt;".ociresult($stmt,"TEST").">\n\n";
  echo $conn."----done\n\n";
}

create_table($c1);
insert_data($c1);

select_data($c1);   
select_data($c2);   

rollback($c1);      

select_data($c1);   
select_data($c2);   

insert_data($c2);   
commit($c2);        

select_data($c1);   

delete_data($c1);   
select_data($c1);   
select_data($c2);   
commit($c1);        

select_data($c1);
select_data($c2);


drop_table($c1);
print "&lt;/PRE>&lt;/HTML>";
?></programlisting></example></para>
    <simpara>
     Bitte beachten <function>OCILogon</function> und
     <function>OCIPLogon</function>.</simpara>
   </refsect1></refentry>

  <refentry id="function.ocilogoff">
   <refnamediv>
    <refname>OCILogOff</refname>
    <refpurpose>Schliesst eine Datenbankverbindung zu Oracle</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCILogOff</function></funcdef>
      <paramdef>int <parameter>Verbindungskennung</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCILogOff</function> schliesst die Verbindung zu Oracle.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ociexecute">
   <refnamediv>
    <refname>OCIExecute</refname>
    <refpurpose>führt ein Statement aus.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIExecute</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
      <paramdef>int <parameter><optional>mode</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIExecute</function> führt ein vorbereitetes Statement aus
     (beachte <function>OCIParse</function>). Der optionale Parameter <parameter>mode</parameter>
     ermöglicht die Wahl des Ausführungsmodus. Voreingestellt ist OCI_COMMIT_ON_SUCCESS,
     wenn das Statement aber nicht gleich endgültig gemacht werden soll, ist OCI_DEFAULT
     zu verwenden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocicommit">
   <refnamediv>
    <refname>OCICommit</refname>
    <refpurpose>Committet eine ausstehende Transaktion.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCICommit</function></funcdef>
      <paramdef>int <parameter>Verbindungskennung</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCICommit</function> schreibt alle Datenbankänderungen seit dem
     letzten implizit oder explizitem Commit der <parameter>Verbindungskennung</parameter> fest.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocirollback">
   <refnamediv>
    <refname>OCIRollback</refname>
    <refpurpose>Macht ausstehende Transaktionen rückgängig</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIRollback</function></funcdef>
      <paramdef>int <parameter>Verbindungskennung</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIRollback</function> macht alle Änderungen seid dem letzten Commit
     rückgängig und gibt auch Sperren auf den Tabellen frei.
     Mit der <parameter>Verbindungskennung</parameter> legt man die Datenbankverbindung fest,
     für welche diese Aktion gelten soll.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocinewdescriptor">
   <refnamediv>
    <refname>OCINewDescriptor</refname>
    <refpurpose>Initialize a new empty descriptor LOB/FILE (LOB is default)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCINewDescriptor</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int <parameter><optional>type</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCINewDescriptor</function> Allocates storage to hold descriptors or LOB locators.   
      Valid values for the valid <parameter>type</parameter> are OCI_D_FILE, OCI_D_LOB, OCI_D_ROWID.
      For LOB desriptors, the methods load, save, and savefile are associated with the descriptor,
      for BFILE only the load method exists. See the second example usage hints.

    </para>
     <example>
      <title>OCINewDescriptor</title>
      <programlisting>
&lt;?php   
    /* This script is designed to be called from a HTML form.
     * It expects $user, $password, $table, $where, and $commitsize
     * to be passed in from the form.  The script then deletes
     * the selected rows using the ROWID and commits after each
     * set of $commitsize rows. (Use with care, there is no rollback)
     */
    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn,"select rowid from $table $where");
    $rowid = OCINewDescriptor($conn,OCI_D_ROWID);
    OCIDefineByName($stmt,"ROWID",&$rowid);   
    OCIExecute($stmt);
    while ( OCIFetch($stmt) ) {      
       $nrows = OCIRowCount($stmt);
       $delete = OCIParse($conn,"delete from $table where ROWID = :rid");
       OCIBindByName($delete,":rid",&$rowid,-1,OCI_B_ROWID);
       OCIExecute($delete);      
       print "$nrows\n";
       if ( ($nrows % $commitsize) == 0 ) {
           OCICommit($conn);      
       }   
    }
    $nrows = OCIRowCount($stmt);   
    print "$nrows deleted...\n";
    OCIFreeStatement($stmt);  
    OCILogoff($conn);
?>  
   </programlisting><programlisting>
&lt;?php
    /* This script demonstrates file upload to LOB columns
     * The formfield used for this example looks like this
     * &lt;form action="upload.php3" method="post" enctype="multipart/form-data">
     * &lt;input type="file" name="lob_upload">
     * ...
     */
  if(!isset($lob_upload) || $lob_upload == 'none'){
?>
&lt;form action="upload.php3" method="post" enctype="multipart/form-data">
Upload file: &lt;input type="file" name="lob_upload">&lt;br>
&lt;input type="submit" value="Upload"> - &lt;input type="reset">
&lt;/form>
&lt;?php
  } else {
     // $lob_upload contains the temporary filename of the uploaded file
     $conn = OCILogon($user, $password);
     $lob = OCINewDescriptor($conn, OCI_D_LOB);
     $stmt = OCIParse($conn,"insert into $table (id, the_blob) values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
     OCIBindByName($stmt, ':the_blob', &$lob, -1, OCI_B_BLOB);
     OCIExecute($stmt);
     if($lob->savefile($lob_upload)){
        OCICommit($conn);
        echo "Blob successfully uploaded\n";
     }else{
        echo "Couldn't upload Blob\n";
     }
     OCIFreeDescriptor($lob);
     OCIFreeStatement($stmt);
     OCILogoff($conn);
  }
?>
   </programlisting></example>

   </refsect1>
  </refentry>
  <refentry id="function.ocirowcount">
   <refnamediv>
    <refname>OCIRowCount</refname>
    <refpurpose>Gibt die Anzahl der betroffenen Zeilen zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIRowCount</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIRowCounts</function> gibt die Anzahl der betroffenen Zeilen
     zum Beispiel einer UPDATE Aktion zurück. Sie gibt nicht die Anzahl der
     zurückgelieferten Zeilen von einem SELECT Statements zurück!
    </para>
    <para>
     <example>
      <title>OCIRowCount</title>
      <programlisting>
&lt;?php
    print "&lt;HTML>&lt;PRE>";
    $conn = OCILogon("scott","tiger");
    $stmt = OCIParse($conn,"create table emp2 as select * from emp");
    OCIExecute($stmt);
    print OCIRowCount($stmt) . " rows inserted.&lt;BR>";
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn,"delete from emp2");
    OCIExecute($stmt);
    print OCIRowCount($stmt) . " rows deleted.&lt;BR>";
    OCICommit($conn);
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn,"drop table emp2");
    OCIExecute($stmt);
    OCIFreeStatement($stmt);
    OCILogOff($conn);
    print "&lt;/PRE>&lt;/HTML>";
?> </programlisting></example></para>
 
   </refsect1>
  </refentry>

  <refentry id="function.ocinumcols">
   <refnamediv>
    <refname>OCINumCols</refname>
    <refpurpose>Gibt die Anzahl der Spalten in einem Statement zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCINumCols</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCINumCols</function> gibt die Anzahl der Spalten in einem Statement zurück.</para>
     <example>
      <title>OCINumCols</title>
      <programlisting>
&lt;?php   
    print "&lt;HTML>&lt;PRE>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    while ( OCIFetch($stmt) ) {
        print "\n";   
        $ncols = OCINumCols($stmt);
        for ( $i = 1; $i <= $ncols; $i++ ) {
            $column_name  = OCIColumnName($stmt,$i);
            $column_value = OCIResult($stmt,$i);
            print $column_name . ': ' . $column_value . "\n";
        }
        print "\n";
    }
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    print "&lt;/PRE>";
    print "&lt;/HTML>\n"; 
?>   </programlisting></example>

   </refsect1>
  </refentry>
 
  <refentry id="function.ociresult">
   <refnamediv>
    <refname>OCIResult</refname>
    <refpurpose>Gibt einen Spaltenwert für das gefetchte Statement zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>OCIResult</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
      <paramdef>mixed <parameter>Spaltenname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIResult</function> gibt den Inhalt der Spalte mit dem 
	 <parameter>Spaltenname</parameter> in der aktuellen Zeile zurück (dazu wichtig 
	 <function>OCIFetch</function>).<function>OCIResult</function> gibt alles als
         Zeichenkette zurück, ausser es sind abstrakte Datentypen (ROWIDs, LOBs and FILEs).
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifetch">
   <refnamediv>
    <refname>OCIFetch</refname>
    <refpurpose>Fetcht die nächste Ergebniszeile in den Ergebnispuffer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIFetch</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFetch</function> fetcht die nächste Ergebniszeile eines SELECTs in den 
     internen Ergebnispuffer.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifetchinto">
   <refnamediv>
    <refname>OCIFetchInto</refname>
    <refpurpose>Fetcht die nächste Zeile eines Ergebnisses in ein Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIFetchInto</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>array &<parameter>result</parameter></paramdef>
      <paramdef>int <parameter><optional>mode</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFetchInto</function> fetcht die nächste Zeile eines SELECT Ergebnisses
         in das <parameter>result</parameter> Array. <function>OCIFetchInto</function>
         überschreibt dabei den Inhalt in <parameter>result</parameter>.
         Voreingestellt beinhaltet dann <parameter>result</parameter> ein bei 0
         beginnendes indiziertes Array mit allen Spalten, welche nicht &null; sind.
    </para>
	<para>
	 Der <parameter>mode</parameter> Parameter erlaubt die Art der Form
         des <parameter>result</parameter> Arrays zu ändern.
         Dabei können verschiedene Parameter benutzt werden, es reicht, diese
         einfach zu addieren (z.B. OCI_ASSOC+OCI_RETURN_NULLS).
         Verfügbare Parameter sind:

     <simplelist>
      <member><literal>OCI_ASSOC</literal> Gibt ein assoziatives Array zurück.</member>
      <member><literal>OCI_NUM</literal> Gibt ein indiziertes Array zurück, beginnend
	   bei 0. (voreingestellt)</member>
      <member><literal>OCI_RETURN_NULLS</literal> Gibt auch leere Spalten zurück.</member>
      <member><literal>OCI_RETURN_LOBS</literal> Gibt den Wert eines LOBs zurück, anstatt
           nur des Descriptors.</member>
     </simplelist>

	</para>
	<para>
	</para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifetchstatement">
   <refnamediv>
    <refname>OCIFetchStatement</refname>
    <refpurpose>Fetcht die Ergebnisse in ein Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIFetchStatement</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>array &<parameter>variable</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFetchStatement</function> fetcht alle zurückgelieferten Reihen
     eines SELECT in ein Array. Dabei liefert <function>OCIFetchStatement</function>
     die Anzahl der zurückgelieferten Zeilen zurück.
    </para>
     <example>
      <title>OCIFetchStatement</title>
      <programlisting>
&lt;?php
/* OCIFetchStatement example mbritton@verinet.com (990624) */

$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"select * from emp");

OCIExecute($stmt);

$nrows = OCIFetchStatement($stmt,$results);
if ( $nrows > 0 ) {
   print "&lt;TABLE BORDER=\"1\">\n";
   print "&lt;TR>\n";
   while ( list( $key, $val ) = each( $results ) ) {
      print "&lt;TH>$key&lt;/TH>\n";
   }
   print "&lt;/TR>\n";
   
   for ( $i = 0; $i &lt; $nrows; $i++ ) {
      reset($results);
      print "&lt;TR>\n";
      while ( $column = each($results) ) {   
         $data = $column['value'];
         print "&lt;TD>$data[$i]&lt;/TD>\n";
      }
      print "&lt;/TR>\n";
   }
   print "&lt;/TABLE>\n";
} else {
   echo "No data found&lt;BR>\n";
}      
print "$nrows Records Selected&lt;BR>\n";
 
OCIFreeStatement($stmt);
OCILogoff($conn);

?></programlisting></example>

   </refsect1>
  </refentry>
  <refentry id="function.ocicolumnisnull">
   <refnamediv>
    <refname>OCIColumnIsNULL</refname>
    <refpurpose>Testet eine Spalte ob deren Inhalt &null; ist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIColumnIsNULL</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>mixed <parameter>column</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <function>OCIColumnIsNULL</function> gibt &true; zurück, wenn die Spalte 
    <parameter>col</parameter> vom Statement <parameter>stmt</parameter> &null; ist.
     Für den Parameter <parameter>column</parameter> kann wahlweise die Splatennummer
     (beginnend bei 1) oder der Spaltenname genommen werden.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.ocicolumnsize">
   <refnamediv>
    <refname>OCIColumnSize</refname>
    <refpurpose>Gibt die Grösse einer Spalte zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIColumnSize</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>mixed <parameter>column</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIColumnSize</function> gibt die grösse einer Oracle Spalte zurück.
     Für den Parameter <parameter>column</parameter> kann wahlweise die Splatennummer
     (beginnend bei 1) oder der Spaltenname genommen werden.
    </para>
    <para>
     <example>
      <title>OCIColumnSize</title>
      <programlisting>
&lt;?php   
    print "&lt;HTML>&lt;PRE>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "&lt;TABLE BORDER=\"1\">";
    print "&lt;TR>";
    print "&lt;TH>Name&lt;/TH>";
    print "&lt;TH>Type&lt;/TH>";
    print "&lt;TH>Length&lt;/TH>";
    print "&lt;/TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i <= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "&lt;TR>";
        print "&lt;TD>$column_name&lt;/TD>";
        print "&lt;TD>$column_type&lt;/TD>";
        print "&lt;TD>$column_size&lt;/TD>";
        print "&lt;/TR>";
    }
    print "&lt;/TABLE>";
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    print "&lt;/PRE>";
    print "&lt;/HTML>\n"; 
?>   </programlisting></example></para>
    <simpara>
     Beachte bitte auch <function>OCINumCols</function>, <function>OCIColumnName</function>, 
     und <function>OCIColumnSize</function>.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociserverversion">
   <refnamediv>
    <refname>OCIServerVersion</refname>
    <refpurpose>Return a string containing server version information.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCIServerVersion</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <example>
      <title>OCIServerVersion</title>
      <programlisting>
&lt;?php
   $conn = OCILogon("scott","tiger");
   print "Server Version: " . OCIServerVersion($conn);
   OCILogOff($conn);
?></programlisting></example></para>

   </refsect1>
  </refentry>

  <refentry id="function.ocistatementtype">
   <refnamediv>
    <refname>OCIStatementType</refname>
    <refpurpose>Gibt den Typ eine Statements zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCIStatementType</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIStatementType</function> kann folgende Werte liefern:
     <orderedlist>
      <listitem><simpara>			"SELECT"</simpara></listitem>
      <listitem><simpara>			"UPDATE"</simpara></listitem>
      <listitem><simpara>			"DELETE"</simpara></listitem>
      <listitem><simpara>			"INSERT"</simpara></listitem>
      <listitem><simpara>			"CREATE"</simpara></listitem>
      <listitem><simpara>			"DROP"</simpara></listitem>
      <listitem><simpara>			"ALTER"</simpara></listitem>
      <listitem><simpara>			"BEGIN"</simpara></listitem>
      <listitem><simpara>			"DECLARE"</simpara></listitem>
      <listitem><simpara>			"UNKNOWN"</simpara></listitem>
     </orderedlist></para>
    <para>
     <example>
      <title>Beispiel:</title>
      <programlisting>
&lt;?php
    print "&lt;HTML>&lt;PRE>";
    $conn = OCILogon("scott","tiger");
    $sql  = "delete from emp where deptno = 10";
   
    $stmt = OCIParse($conn,$sql);
    if ( OCIStatementType($stmt) == "DELETE" ) {
        die "You are not allowed to delete from this table&lt;BR>";
    }
   
    OCILogoff($conn);
    print "&lt;/PRE>&lt;/HTML>";
?>
</programlisting></example></para>

   </refsect1>
  </refentry>

  <refentry id="function.ocinewcursor">
   <refnamediv>
    <refname>OCINewCursor</refname>
    <refpurpose>return a new cursor (Statement-Handle) - use this to bind ref-cursors!</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCINewCursor</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCINewCursor</function> allocates a new statement handle on the specified
     connection.
    </para>
    <para>
     <example>
      <title>Using a REF CURSOR from a stored procedure</title>
      <programlisting>
&lt;?php   
// suppose your stored procedure info.output returns a ref cursor in :data

$conn = OCILogon("scott","tiger");
$curs = OCINewCursor($conn);
$stmt = OCIParse($conn,"begin info.output(:data); end;");

ocibindbyname($stmt,"data",&$curs,-1,OCI_B_CURSOR);
ociexecute($stmt);
ociexecute($curs);

while (OCIFetchInto($curs,&$data)) {
    var_dump($data);
}
 
OCIFreeCursor($stmt);
OCIFreeStatement($curs);
OCILogoff($conn);
?></programlisting></example></para>

    <para>
     <example>
      <title>Using a REF CURSOR in a select statement</title>
      <programlisting>
&lt;?php   
print "&lt;HTML>&lt;BODY>";
$conn = OCILogon("scott","tiger");
$count_cursor = "CURSOR(select count(empno) num_emps from emp " .
                "where emp.deptno = dept.deptno) as EMPCNT from dept";
$stmt = OCIParse($conn,"select deptno,dname,$count_cursor");

ociexecute($stmt);
print "&lt;TABLE BORDER=\"1\">";
print "&lt;TR>";
print "&lt;TH>DEPT NAME&lt;/TH>";
print "&lt;TH>DEPT #&lt;/TH>";
print "&lt;TH># EMPLOYEES&lt;/TH>";
print "&lt;/TR>";

while (OCIFetchInto($stmt,&$data,OCI_ASSOC)) {
    print "&lt;TR>";
    $dname  = $data["DNAME"];
    $deptno = $data["DEPTNO"];
    print "&lt;TD>$dname&lt;/TD>";
    print "&lt;TD>$deptno&lt;/TD>";
    ociexecute($data[ "EMPCNT" ]);
    while (OCIFetchInto($data[ "EMPCNT" ],&$subdata,OCI_ASSOC)) {
        $num_emps = $subdata["NUM_EMPS"];
        print  "&lt;TD>$num_emps&lt;/TD>";
    }
    print "&lt;/TR>";
}
print "&lt;/TABLE>";
print "&lt;/BODY>&lt;/HTML>";
OCIFreeStatement($stmt);
OCILogoff($conn);
?></programlisting></example></para>

   </refsect1>
  </refentry>

  <refentry id="function.ocifreestatement">
   <refnamediv>
    <refname>OCIFreeStatement</refname>
    <refpurpose>Gibt alle mit dem Statement verbundenen Ressourcen frei.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIFreeStatement</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFreeStatement</function> gibt &true; zurück, wenn es 
     erfolgreich war, &false;, wenn nicht.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocifreecursor">
   <refnamediv>
    <refname>OCIFreeCursor</refname>
    <refpurpose>Gibt alle mit dem cursor verbundenen Ressourcen frei.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIFreeCursor</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>OCIFreeCursor</function> gibt &true; zurück, wenn die Aktion
     erfolgreich war, &false;, wenn nicht.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumnname">
   <refnamediv>
    <refname>OCIColumnName</refname>
    <refpurpose>Liefert den Namen der Spalte zurück.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCIColumnName</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>int <parameter>col</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIColumnName</function> liefert den Name einer Spalte zurück  
      passend zu der Spaltennummer (beginnend bei 1).</simpara>

    <para>
     <example>
      <title>OCIColumnName</title>
      <programlisting>
&lt;?php   
    print "&lt;HTML>&lt;PRE>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "&lt;TABLE BORDER=\"1\">";
    print "&lt;TR>";
    print "&lt;TH>Name&lt;/TH>";
    print "&lt;TH>Type&lt;/TH>";
    print "&lt;TH>Length&lt;/TH>";
    print "&lt;/TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i <= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "&lt;TR>";
        print "&lt;TD>$column_name&lt;/TD>";
        print "&lt;TD>$column_type&lt;/TD>";
        print "&lt;TD>$column_size&lt;/TD>";
        print "&lt;/TR>";
    }
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    print "&lt;/PRE>";
    print "&lt;/HTML>\n"; 
?>   </programlisting></example></para>
    <simpara>
     Bitte beachten Sie auch <function>OCINumCols</function>, <function>OCIColumnType</function>, 
     und <function>OCIColumnSize</function>.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumntype">
   <refnamediv>
    <refname>OCIColumnType</refname>
    <refpurpose>Liefert den Datentyp einer Spalte zurück.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>OCIColumnName</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>int <parameter>col</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIColumnType</function> liefert den Datentyp einer Spalte zurück  
      passend zu der Spaltennummer (beginnend bei 1).</simpara>

    <para>
     <example>
      <title>OCIColumnType</title>
      <programlisting>
&lt;?php   
    print "&lt;HTML>&lt;PRE>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "&lt;TABLE BORDER=\"1\">";
    print "&lt;TR>";
    print "&lt;TH>Name&lt;/TH>";
    print "&lt;TH>Type&lt;/TH>";
    print "&lt;TH>Length&lt;/TH>";
    print "&lt;/TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i <= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "&lt;TR>";
        print "&lt;TD>$column_name&lt;/TD>";
        print "&lt;TD>$column_type&lt;/TD>";
        print "&lt;TD>$column_size&lt;/TD>";
        print "&lt;/TR>";
    }
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    print "&lt;/PRE>";
    print "&lt;/HTML>\n"; 
?>   </programlisting></example></para>
    <simpara>
     Bitte beachten Sie auch <function>OCINumCols</function>, <function>OCIColumnName</function>, 
     und <function>OCIColumnSize</function>.</simpara>

   </refsect1>
  </refentry>
  <refentry id="function.ociparse">
   <refnamediv>
    <refname>OCIParse</refname>
    <refpurpose>Analysiert eine Abfrage und gibt eine Anweisung zurück.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIParse</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
      <paramdef>strint <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIParse</function> analysiert die <parameter>query</parameter> 
     und benutzt dabei die  <parameter>conn</parameter>.  Es liefert &true; zurück, wenn
     die Abfrage gültig ist, &false;, wenn nicht. <parameter>query</parameter> kann jede Form 
     einer gültigen SQL Anfrage sein.</simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ocierror">
   <refnamediv>
    <refname>OCIError</refname>
    <refpurpose>Gibt den letzten Fehler von stmt|conn|global zurück oder &false;,  wenn
     kein Fehler aufgetreten ist. 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>OCIError</function></funcdef>
      <paramdef>array <parameter><optional>stmt|conn</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIError</function> liefert den letzten Fehler.  Ist der optionale Parameter
      <parameter>stmt|conn</parameter> nicht angegeben, wird der zuletzt aufgetretene Fehler
      zurückgeliefert.  Ist kein Fehler gefunden, gibt <function>OCIError</function> &false; zurück.
      <function>OCIError</function> gibt den Fehler als assoziatives Array zurück, wobei
      <parameter>code</parameter> den Oracle Fehlercode und <parameter>message</parameter> den
      Fehlerstring beinhaltet.</simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ociinternaldebug">
   <refnamediv>
    <refname>OCIInternalDebug</refname>
    <refpurpose>Aktiviert oder deaktiviert die interne Debugausgabe. Die Voreinstellung ist deaktiviert.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>OCIInternalDebug</function></funcdef>
      <paramdef>int <parameter>onoff</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCIInternalDebug</function> aktiviert die interne Debugausgabe.  <parameter>onoff</parameter>
     kann auf 0 gesetzt werden, um die Ausgabe abzuschalten und auf 1,  um sie anzuschalten.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicancel">
   <refnamediv>
    <refname>OCICancel</refname>
    <refpurpose>bricht das lesen von einem cursor ab</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCICancel</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Wenn keine weiteren Zeilen gefetched werden sollen, kann
     der Cursor durch <function>OCICancel</function> abgebrochen werden.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocisetprefetch">
   <refnamediv>
    <refname>OCISetPrefetch</refname>
    <refpurpose>setzt die Anzahl der Zeilen die vorab gefetcht werden sollen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCISetPrefetch</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>int <parameter>rows</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>OCISetPrefetch</function> setzt sie Anzahl der Zeilen fest, welche 
     bereits vorab gefetcht werden sollen. Der Grundwert ist 1.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociwritelobtofile">
   <refnamediv>
    <refname>OCIWriteLobToFile</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>OCIWriteLobToFile</function></funcdef>
      <paramdef>object <parameter>lob</parameter></paramdef>
      <paramdef>string <parameter><optional>filename</optional></parameter></paramdef>
      <paramdef>int <parameter><optional>start</optional></parameter></paramdef>
      <paramdef>int <parameter><optional>lenght</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocisavelobfile">
   <refnamediv>
    <refname>OCISaveLobFile</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCISaveLobFile</function></funcdef>
      <paramdef>object <parameter>lob</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocisavelob">
   <refnamediv>
    <refname>OCISaveLob</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCISaveLob</function></funcdef>
      <paramdef>object <parameter>lob</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ociloadlob">
   <refnamediv>
    <refname>OCILoadLob</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCILoadLob</function></funcdef>
      <paramdef>object <parameter>lob</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumnscale">
   <refnamediv>
    <refname>OCIColumnScale</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIColumnScale</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>int <parameter>col</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumnprecision">
   <refnamediv>
    <refname>OCIColumnPrecision</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>OCIColumnPrecision</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>int <parameter>col</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolumntyperaw">
   <refnamediv>
    <refname>OCIColumnTypeRaw</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>OCIColumnTypeRaw</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>int <parameter>col</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocinewcollection">
   <refnamediv>
    <refname>OCINewCollection</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCINewCollection</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
      <paramdef>string <parameter>tdo</parameter></paramdef>
      <paramdef>string <parameter><optional>shema</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocifreecollection">
   <refnamediv>
    <refname>OCIFreeCollection</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCIFreeCollection</function></funcdef>
      <paramdef>object <parameter>lob</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollassign">
   <refnamediv>
    <refname>OCICollAssign</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCICollAssign</function></funcdef>
      <paramdef>object <parameter>collection</parameter></paramdef>
      <paramdef>object <parameter>object</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollassignelem">
   <refnamediv>
    <refname>OCICollAssignElem</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCICollAssignElem</function></funcdef>
      <paramdef>object <parameter>collection</parameter></paramdef>
      <paramdef>string <parameter>ndx</parameter></paramdef>
      <paramdef>string <parameter>val</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollgetelem">
   <refnamediv>
    <refname>OCICollGetElem</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCICollGetElem</function></funcdef>
      <paramdef>object <parameter>collection</parameter></paramdef>
      <paramdef>string <parameter>ndx</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollmax">
   <refnamediv>
    <refname>OCICollMax</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCICollMax</function></funcdef>
      <paramdef>object <parameter>collection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicollsize">
   <refnamediv>
    <refname>OCICollSize</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCICollSize</function></funcdef>
      <paramdef>object <parameter>collection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ocicolltrim">
   <refnamediv>
    <refname>OCICollTrim</refname>
    <refpurpose>Kommt noch.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>OCICollTrim</function></funcdef>
      <paramdef>object <parameter>collection</parameter></paramdef>
      <paramdef>int <parameter>num</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Kommt noch.
    </simpara>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
