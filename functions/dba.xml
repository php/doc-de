<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.dba">
  <title>dba Datenbank (dbm-style) Abstraktions-Funktionen</title>
  <titleabbrev>dba</titleabbrev>

  <partintro>
   <para>
    Diese Funktionen bilden die Basis f&uuml;r den Zugriff auf
    Datenbanken vom Typ "Berkeley DB".
   </para>
   <para>
    "dba" implementiert eine generelle Abstraktionsschicht f&uuml;r
    verschiedene dateibasierte Datenbanken.
    Der Funktionsumfang ist daher beschr&auml;nkt auf eine
    gemeinsame Teilmenge des Funktionsumfangs aktueller Datenbanken
    (zum Beispiel
    <ulink url="&url.sleepycat;">Sleepycat Software's DB2</ulink>,
    nicht zu verwechseln mit IBM's DB2 Software, 
    die &uuml;ber die <link linkend="ref.odbc">ODBC Funktionen</link>
    unterst&uuml;tzt wird).
   </para>
   <para>
    Das Verhalten der dba-Funktionen ist teilweise abh&auml;ngig von
    der Implementation des zugrundeliegenden Datenbanksystems.
    Funktionen wie zum Beispiel <function>dba_optimize</function>
    und <function>dba_sync</function> funktionieren vielleicht bei
    einer Datenbank, und tun gar nichts bei einer Anderen.
   </para>
   <para>
    Beim Aufruf von <function>dba_open</function> oder
    <function>dba_popen</function> muss einer der verf&uuml;gbaren
    Handler-Namen aus der nachfolgenden Handler-Tabelle angegeben
    werden.  Die tats&auml;chlich verf&uuml;gbaren Handler in
    Ihrer PHP-Installation k&ouml;nnen Sie mit der Funktion
    <function>phpinfo</function> anzeigen lassen.  (Um zum
    Zeitpunkt der PHP-Generierung die Unterst&uuml;tzung f&uuml;r
    einen der folgenden Handler verf&uuml;gbar zu machen,
    f&uuml;gen Sie bitte den jeweils angegebenen
    <literal>--with-XXXX</literal> Compilerschalter in ihren
    PHP-Konfigurations-Aufruf ein.)
    <table>
     <title>Liste der DBA-Handler</title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Handler</entry>
	<entry>Hinweise</entry>
       </row>
      </thead>
      <tbody>
       <row>
	 <entry><literal>dbm</literal></entry>
        <entry>
         Dbm ist der urspr&uuml;ngliche und &auml;lteste Typ der
         "Berkeley DB" Datenbanken. Sie sollten diesen Typ
         wenn m&ouml;glich vermeiden. 
         Die in DB2 und gdbm enthaltenen dbm-Kompatibilit&auml;tsfunktionen
         werden ebenfalls nicht unterst&uuml;tzt, da sie nur auf
         Quellcode-Basis kompatibel sind, aber Dateien im originalen
         dbm-Format nicht bearbeiten k&ouml;nnen.
         (<literal>--with-dbm</literal>)
        </entry>
       </row>

       <row>
	 <entry><literal>ndbm</literal></entry>
        <entry>
         Ndbm ist neuer und flexibler als Dbm. Es hat jedoch 
         die meisten Einschr&auml;nkungen von Dbm &uuml;bernommen
         und ist daher ebenfalls nicht empfehlenswert.
         (<literal>--with-ndbm</literal>)
        </entry>
       </row>

       <row>
	 <entry><literal>gdbm</literal></entry>
        <entry>
         Gdbm ist der <ulink url="&url.gdbm;">GNU Datenbank Manager</ulink>.
         (<literal>--with-gdbm</literal>)
        </entry>
       </row>

       <row>
	 <entry><literal>db2</literal></entry>
        <entry>
         DB2 ist <ulink url="&url.sleepycat;">Sleepycat Software's
         DB2</ulink>. Es wird beschrieben als "Werkzeugsatz f&uuml;r
         eingebaute Unterst&uuml;tzung von Hochleistungs-Datenbanken
         f&uuml;r Standalone- und Client/Server- Applikationen".
         (<literal>--with-db2</literal>)
        </entry>
       </row>

       <row>
	 <entry><literal>db3</literal></entry>
        <entry>
         DB3 ist <ulink url="&url.sleepycat;">Sleepycat Software's
         DB3</ulink>.  (<literal>--with-db3</literal>) 
        </entry>
       </row>

       <row>
	 <entry><literal>cdb</literal></entry>
        <entry>
         Cdb ist "ein schnelles, zuverl&auml;ssiges und kompaktes
         Paket zum Erstellen und Auslesen konstanter Datenbanken."
         Es stammt vom Autor von qmail und kann <ulink url="&url.cdb;">
         hier</ulink> heruntergeladen werden. Da es f&uuml;r konstante
         Daten ausgelegt ist, werden nur Lese-Operationen unterst&uuml;tzt.
         (<literal>--with-cdb</literal>)
        </entry>
       </row>

      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    <example>
     <title>DBA Beispiel</title>
     <programlisting role="php">
&lt;?php

$id = dba_open ("/tmp/test.db", "n", "db2");

if (!$id) {
    echo "dba_open schlug fehl\n";
    exit;
}

dba_replace ("key", "Dies ist ein Beispiel!", $id);

if (dba_exists ("key", $id)) {
    echo dba_fetch ("key", $id);
    dba_delete ("key", $id);
}

dba_close ($id);
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    DBA arbeitet bin&auml;rsicher und besitzt keine willk&uuml;rlichen Limits.
    Es erbt allerdings alle Einschr&auml;nkungen von der
    zugrundeliegenden Datenbank-Implementation.
   </para>
   <para>
    Alle dateibasierten Datenbanken m&uuml;ssen einen Weg zur
    Verf&uuml;gung stellen, um den Dateimodus einer neu erstellten
    Datenbank zu bestimmen, soweit dies &uuml;berhaupt m&ouml;glich ist.
    Der Dateimodus wird gew&ouml;hnlich als viertes Argument
    an die Funktionen <function>dba_open</function> oder
    <function>dba_popen</function> &uuml;bergeben.
   </para>
   <para>
    Sie k&ouml;nnen auf alle Eintr&auml;ge in einer Datenbank 
    sequentiell durch die Verwendung von <function>dba_firstkey</function>
    und <function>dba_nextkey</function> zugreifen. W&auml;hrend die
    Datenbank so durchlaufen wird, darf sie nicht ver&auml;ndert werden.
   </para> 
   <para>
    <example>
     <title>Durchlaufen einer Datenbank</title>
     <programlisting role="php">
&lt;?php

# ...Oeffnen der Datenbank...

$key = dba_firstkey ($id);

while ($key != false) {
    if (...) { # den Schluessel fuer spaetere Aktionen merken
        $handle_later[] = $key;
    }
    $key = dba_nextkey ($id);
}

for ($i = 0; $i &lt; count($handle_later); $i++)
    dba_delete ($handle_later[$i], $id);

?&gt;
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.dba-close">
   <refnamediv>
    <refname>dba_close</refname>
    <refpurpose>Datenbank schlie&szlig;en</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>dba_close</function></funcdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_close</function> schlie&szlig;t die offene
     Datenbank, die durch <parameter>handle</parameter>
     festgelegt wird, und gibt alle zugeh&ouml;rigen Ressourcen frei.
    </para>
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>
    <para>
     <function>dba_close</function> besitzt keinen R&uuml;ckgabewert.
    </para>
    <para>
     Siehe auch <function>dba_open</function> und
     <function>dba_popen</function>
    </para>     
   </refsect1>
  </refentry>

  <refentry id="function.dba-delete">
   <refnamediv>
    <refname>dba_delete</refname>
    <refpurpose>L&ouml;schen des zu key geh&ouml;rigen Eintrages</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dba_delete</function></funcdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_delete</function> l&ouml;scht den Eintrag mit dem
     Schl&uuml;sel <parameter>key</parameter> aus der durch
     <parameter>handle</parameter> spezifizierten Datenbank.
    </para>
    <para>
     <parameter>key</parameter> ist der Schl&uuml;ssel des Eintrags,
     der gel&ouml;scht wird.
    </para>
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>
    <para>
     <function>dba_delete</function> hat als R&uuml;ckgabewert
     &true; oder &false;,
     abh&auml;ngig davon, ob der L&ouml;schvorgang erfolgreich war
     oder nicht.
    </para>
    <para>
     Siehe auch <function>dba_exists</function>,
     <function>dba_fetch</function>, <function>dba_insert</function>,
     und <function>dba_replace</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-exists">
   <refnamediv>
    <refname>dba_exists</refname>
    <refpurpose>&Uuml;berpr&uuml;fen, ob Datensatz mit Schl&uuml;ssel key existiert</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dba_exists</function></funcdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_exists</function> &uuml;berpr&uuml;ft, ob 
     ein Datensatz mit dem Schl&uuml;ssel <parameter>key</parameter>
     in der durch <parameter>handle</parameter> spezifizierten Datenbank
     existiert.
    </para>
    <para>
     <parameter>Key</parameter> ist der Schl&uuml;ssel, dessen
     Existenz &uuml;berpr&uuml;ft werden soll.
    </para>
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>
    <para>
     <function>dba_exists</function> hat als R&uuml;ckgabewert 
     &true; oder &false;,
     abh&auml;ngig davon, ob der Schl&uuml;ssel gefunden
     wurde oder nicht.
    </para>
    <para>
     Siehe auch <function>dba_fetch</function>,
     <function>dba_delete</function>, <function>dba_insert</function>,
     und <function>dba_replace</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-fetch">
   <refnamediv>
    <refname>dba_fetch</refname>
    <refpurpose>Datensatz f&uuml;r Schl&uuml;ssel "key" auslesen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dba_fetch</function></funcdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_fetch</function> liest die durch den Schl&uuml;ssel
     <parameter>key</parameter> festgelegten Daten
     aus der durch <parameter>handle</parameter> spezifizierten
     Datenbank aus.
    </para>
    <para>
     <parameter>Key</parameter> ist der Schl&uuml;ssel, mit dem
     die Daten identifizert werden.
    </para>
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>

    <para>
     <function>dba_fetch</function> hat als R&uuml;ckgabewert
     entweder den zum Schl&uuml;ssel <parameter>key</parameter>
     passenden Werte-String oder &false;,
     abh&auml;ngig davon, ob das Schl&uuml;ssel/Wert-Paar
     gefunden wurde oder nicht.
    </para>
    <para>
     Siehe auch <function>dba_exists</function>,
     <function>dba_delete</function>, <function>dba_insert</function>,
     und <function>dba_replace</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-firstkey">
   <refnamediv>
    <refname>dba_firstkey</refname>
    <refpurpose>Ersten Schl&uuml;ssel bestimmen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dba_firstkey</function></funcdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_firstkey</function> gibt den ersten Schl&uuml;ssel
     aus der durch <parameter>handle</parameter>
     spezifizierten Datenbank zur&uuml;ck und setzt den internen
     Schl&uuml;ssel-Zeiger zur&uuml;ck. Dies erlaubt in Verbindung mit
     <function>dba_nextkey</function> eine sequentielle Suche durch
     die gesamte Datenbank.
    </para>
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>
    <para>
     <function>dba_firstkey</function> liefert als R&uuml;ckgabewert
     den Schl&uuml;ssel oder &false;,
     abh&auml;ngig davon, ob die Aktion erfolgreich war oder fehlschlug.
    </para>
    <para>
     Siehe auch
     <function>dba_nextkey</function>
     und Beispiel 2 im <link linkend="ref.dba">DBA-&Uuml;berblick</link>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-insert">
   <refnamediv>
    <refname>dba_insert</refname>
    <refpurpose>Datensatz einf&uuml;gen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dba_insert</function></funcdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>value</parameter></paramdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_insert</function> f&uuml;gt den Datensatz, der
     durch <parameter>key</parameter> und <parameter>value</parameter>
     beschrieben wird, in die durch <parameter>handle</parameter>
     spezifizierte Datenbank ein. Die Aktion
     schl&auml;gt fehl, wenn es bereits einen Eintrag mit dem gleichen
     <parameter>key</parameter> in der Datenbank gibt.
    </para>
    <para>
     <parameter>key</parameter> ist der Schl&uuml;ssel des Eintrags,
     der eingef&uuml;gt werden soll.
    </para>
    <para>
     <parameter>value</parameter> ist der Wert, der eingef&uuml;gt
     werden soll.
    </para>
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>
    <para>
     <function>dba_insert</function> hat als R&uuml;ckgabewert
     &true; oder &false;,
     abh&auml;ngig davon, ob die Aktion erfolgreich
     war oder nicht.
    </para>
    <para>
     Siehe auch
     <function>dba_exists</function>
     <function>dba_delete</function>
     <function>dba_fetch</function>
     <function>dba_replace</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-nextkey">
   <refnamediv>
    <refname>dba_nextkey</refname>
    <refpurpose>Nachfolgenden Schl&uuml;ssel bestimmen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dba_nextkey</function></funcdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_nextkey</function> gibt den nachfolgenden
     Schl&uuml;ssel aus der durch 
     <parameter>handle</parameter> spezifizierten Datenbank zur&uuml;ck
     und erh&ouml;ht den internen Schl&uuml;ssel-Zeiger.
    </para> 
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>
    <para>
     <function>dba_nextkey</function> hat als R&uuml;ckgabewert den
     Schl&uuml;ssel oder &false;,
     abh&auml;ngig davon, ob die Aktion erfolgreich war oder nicht.
    </para>
    <para>
     Siehe auch
     <function>dba_firstkey</function>
     und Beispiel 2 im <link linkend="ref.dba">DBA-&Uuml;berblick</link>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-popen">
   <refnamediv>
    <refname>dba_popen</refname>
    <refpurpose>Persistente Datenbank-Verbindung &ouml;ffnen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dba_popen</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter>handler</parameter></paramdef>
      <paramdef><parameter><optional>...</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     <function>dba_popen</function> stellt eine persistente
     Datenbankinstanz f&uuml;r <parameter>path</parameter> mit
     <parameter>mode</parameter> her und benutzt dabei den Handler
     <parameter>handler</parameter>.
    </para>
    <para>
     <parameter>path</parameter> ist ein
     g&uuml;ltiger Pfad in Ihrem Dateisystem.
    </para>
    <para>
     Das <parameter>mode</parameter> Argument beschreibt den Modus,
     mit dem die Datenbank ge&ouml;ffnet werden soll.
     Es gibt 4 M&ouml;glichkeiten, eine DBA Datenbank zu &ouml;ffnen:
     <variablelist>
      <varlistentry>
       <term>"r" (read-only)</term>
       <listitem><para>
        Eine existierende Datenbank soll nur lesend
        ge&ouml;ffnet werden.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>"n" (new)</term>
       <listitem><para>
        Eine neue Datenbank soll angelegt werden.
        Diese wird automatisch als read-write ge&ouml;ffnet.
        Eine existierende Datenbank wird inhaltlich
        gel&ouml;scht.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>"c" (create)</term>
       <listitem><para>
        Eine neue Datenbank soll angelegt werden.
        Diese wird automatisch als read-write ge&ouml;ffnet.
        Im Gegensatz zu "n" wird eine bereits existierende
        Datenbank inhaltlich nicht gel&ouml;scht, sondern nur
        f&uuml;r Lese- und Schreibzugriff ge&ouml;ffnet.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>"w" (read-write)</term>
       <listitem><para>
        Eine existierende Datenbank soll lesend und
        schreibend ge&ouml;ffnet werden.</para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <parameter>handler</parameter> ist der
     <link linkend="ref.dba">Name des Handlers</link>, der f&uuml;r
     den Zugriff auf <parameter>path</parameter> benutzt werden soll.
     Die (oben durch <parameter><optional>...</optional></parameter>
     gekennzeichneten) optionalen Argumente der Funktion
     <function>dba_popen</function> werden an ihn &uuml;bergeben.
    </para>
    <para>
     <function>dba_popen</function> liefert als R&uuml;ckgabewert eine
     positive Zugriffs-"handle" oder &false;,
     abh&auml;ngig davon, ob die Verbindung hergestellt werden
     konnte oder nicht.
    </para>
    <para>
     Siehe auch
     <function>dba_open</function>
     <function>dba_close</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-open">
   <refnamediv>
    <refname>dba_open</refname>
    <refpurpose>Verbindung zu einer Datenbank &ouml;ffnen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dba_open</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter>handler</parameter></paramdef>
      <paramdef><parameter><optional>...</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_open</function> stellt eine Datenbankinstanz 
     f&uuml;r <parameter>path</parameter> mit <parameter>mode</parameter>
     her und benutzt dabei <parameter>handler</parameter>.
    </para>
    <para>
     <parameter>path</parameter> ist ein
     g&uuml;ltiger Pfad in Ihrem Dateisystem.
    </para>
    <para>
     Das <parameter>mode</parameter> Argument beschreibt den Modus,
     mit dem die Datenbank ge&ouml;ffnet werden soll.
     Es gibt 4 M&ouml;glichkeiten, eine DBA Datenbank zu &ouml;ffnen:
     <variablelist>
      <varlistentry>
       <term>"r" (read-only)</term>
       <listitem><para>
        Eine existierende Datenbank soll nur lesend
        ge&ouml;ffnet werden.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>"n" (new)</term>
       <listitem><para>
        Eine neue Datenbank soll angelegt werden.
        Diese wird automatisch als read-write ge&ouml;ffnet.
        Eine existierende Datenbank wird inhaltlich
        gel&ouml;scht.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>"c" (create)</term>
       <listitem><para>
        Eine neue Datenbank soll angelegt werden.
        Diese wird automatisch als read-write ge&ouml;ffnet.
        Im Gegensatz zu "n" wird eine bereits existierende
        Datenbank inhaltlich nicht gel&ouml;scht, sondern nur
        f&uuml;r Lese- und Schreibzugriff ge&ouml;ffnet.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>"w" (read-write)</term>
       <listitem><para>
        Eine existierende Datenbank soll lesend und
        schreibend ge&ouml;ffnet werden.</para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <parameter>handler</parameter> ist der
     <link linkend="ref.dba">Name des Handlers</link>, der f&uuml;r
     den Zugriff auf <parameter>path</parameter> benutzt werden soll.
     Die (oben durch <parameter><optional>...</optional></parameter>
     gekennzeichneten) optionalen Argumente der Funktion
     <function>dba_open</function> werden an ihn &uuml;bergeben.
    </para>
    <para>
     <function>dba_open</function> liefert als R&uuml;ckgabewert eine
     positive Zugriffs-"handle" oder &false;,
     abh&auml;ngig davon, ob die Verbindung hergestellt werden
     konnte oder nicht.
    </para>
    <para>
     Siehe auch
     <function>dba_popen</function>
     <function>dba_close</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-optimize">
   <refnamediv>
    <refname>dba_optimize</refname>
    <refpurpose>Optimieren einer Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dba_optimize</function></funcdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_optimize</function> optimiert die zugrunde
     liegende Datenbank, die durch <parameter>handle</parameter>
     spezifiziert wird.
    </para>
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>
    <para>
     <function>dba_optimize</function> hat als R&uuml;ckgabewert
     &true; oder &false;,
     abh&auml;ngig davon, ob die Optimierung
     erfolgreich war oder ob sie fehlschlug.
    </para>
    <para>
     Siehe auch
     <function>dba_sync</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-replace">
   <refnamediv>
    <refname>dba_replace</refname>
    <refpurpose>Datensatz ersetzen oder einf&uuml;gen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dba_replace</function></funcdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>value</parameter></paramdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_replace</function> ersetzt oder f&uuml;gt
     in der durch <parameter>handle</parameter>
     spezifizierten Datenbank einen Datensatz ein,
     der durch den Schl&uuml;ssel <parameter>key</parameter> und
     den Wert <parameter>value</parameter> beschrieben wird.
    </para> 
    <para>
     <parameter>key</parameter> ist der Schl&uuml;ssel des Eintrags,
     der eingef&uuml;gt werden soll.
    </para>
    <para>
     <parameter>value</parameter> ist der Wert, der eingef&uuml;gt
     werden soll.
    </para>
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>
    <para>
     <function>dba_replace</function> liefert als R&uuml;ckgabewert
     &true; oder &false;,
     abh&auml;ngig davon, ob die Aktion erfolgreich war oder nicht.
    </para>
    <para>
     Siehe auch <function>dba_exists</function>,
     <function>dba_delete</function>, <function>dba_fetch</function>,
     und <function>dba_insert</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dba-sync">
   <refnamediv>
    <refname>dba_sync</refname>
    <refpurpose>Datenbank synchronisieren</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dba_sync</function></funcdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>dba_sync</function> synchronisiert die Datenbank,
     die durch <parameter>handle</parameter> spezifiziert wird.
     Dies kann m&ouml;glicherweise einen physikalischen
     Schreibvorgang auf den Datentr&auml;ger ausl&ouml;sen, falls
     dies unterst&uuml;tzt wird.     
    </para>
    <para>
     <parameter>handle</parameter> ist ein Datenbankhandle, das von
     <function>dba_open</function> zur&uuml;ckgegeben wurde.
    </para>
    <para>
     <function>dba_sync</function> hat als R&uuml;ckgabewert
     &true; oder &false;,
     abh&auml;ngig davon, ob die Aktion erfolgreich war oder nicht.
    </para>
    <para>
     Siehe auch <function>dba_optimize</function>
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
