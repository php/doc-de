<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.dbase">
  <title>dBase Funktionen</title>
  <titleabbrev>dBase</titleabbrev>

  <partintro>
   <simpara>
    Diese Funktionen erlauben ihnen den Zugriff auf Datensätze, die
    im dBase-Format (also in dBase-Datenbanken) (dbf) vorliegen.
   </simpara>
   <simpara>
    Es gibt keine Unterstützug für Indizes oder Memo-Felder. Auch
    Sperrfunktionen für Datensätze / -banken sind nicht vorhanden.
    Zwei gleichzeitig ablaufende Webserver-Prozesse, die die
    selbe dBase-Datei bearbeiten, werden ihre Datenbank zerstören.
   </simpara>
   <simpara>
    Anders als bei SQL-Datenbanken können in dBase-"Datenbanken" die
    Felddefinitionen nicht nachträglich geändert werden. Nachdem die
    dbf-Datei erzeugt wurde, sind die Definitionen festgelegt. Es
    werden keine Index-Funktionen unterstützt, die Abfragen
    beschleunigen oder etwa ihre Datenorganisation unterstützen.
    dBase-Dateien sind einfache sequentielle Dateien mit fester
    Datensatzlänge. Neue Datensätze werden am Dateiende angehängt
    und gelöschte Datensätze werden beibehalten, bis sie
    <function>dbase_pack</function> aufrufen.
   </simpara>
   <simpara>
    Wir empfehlen, keine Produktions-DBF-Datenbanken zu benutzen.
    Wählen sie zur Nutzung von Produktions-Daten mit PHP nur echte
    SQL-Server-Datenbanken; MySQL oder Postgres sind dabei eine gute
    Wahl. dBase-Unterstützung durch PHP dient hauptsächlich dem Im-
    und Export von Daten zu oder aus ihrer Web-Datenbank, wobei das
    DBF-Datei-Format vor allem wegen der Windows-Tabellenkalulationen
    und -Organizer unterstützt wird. Im- und Export ist der einzige
    Grund für die dBase-Unterstützung durch PHP.
   </simpara>
  </partintro>

  <refentry id="function.dbase-create">
   <refnamediv>
    <refname>dbase_create</refname>
    <refpurpose>Erzeugt eine dBase-Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dbase_create</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>array <parameter>fields</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Der <parameter>fields</parameter>-Parameter ist ein Array,
     das aus weiteren Arrays besteht. Jedes Array beschreibt das
     Format eines Feldes der Datenbank. Jedes Feld-Array besteht
     aus einem Namen, einem Zeichen zur Festlegung des Feldtyps,
     der Länge und dem Wert für die Anzahl der Nachkommastellen.
    </para>
    <para>
     Die verfügbaren Feldtypen sind:
     <variablelist>
      <varlistentry>
       <term>L</term> 
       <listitem>
	<simpara> 
	 Boolean. Diese haben keine Länge oder Nachkommstellen.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>M</term>
       <listitem>
	<simpara>
	 Memo. (Beachten sie, dass diese von PHP nicht unterstützt
	 werden.)  Auch diese haben keine Länge oder Nachkommastellen.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>D</term>
       <listitem>
	<simpara>
	 Datum (gespeichert als JJJJMMTT). Ebenfalls keine Länge und
	 Nachkommastellen.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>N</term>
       <listitem>
	<simpara>
	 Zahl. Diese haben sowohl eine Angabe der Länge als auch der
	 Nachkommastellen.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>C</term>
       <listitem>
	<simpara>
	 Zeichenkette / String / Charakter. Hier ist eine Längenangabe
	 erforderlich.
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     Konnte die Datenbank erfolgreich erzeugt werden, wird ein
     dbase_identifier zurück gegeben, anderenfalls &false; / falsch.
     <example>
      <title>Erzeugen einer dBase-Datenbank-Datei</title>
      <programlisting role="php">
       // "Datenbank"-Name
       $dbname = "/tmp/test.dbf";

       // Datenbank-"Definitionen"
       $def =
           array(
             array("Datum",       "D"),
             array("Name",        "C",  50),
             array("Alter",       "N",   3, 0),
             array("Email",       "C", 128),
             array("IstMitglied", "L")
           );

       // Erzeugung
       if (!dbase_create($dbname, $def))
         print "&lt;strong>Error!&lt;/strong>";
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbase-open">
   <refnamediv>
    <refname>dbase_open</refname>
    <refpurpose>Öffnet eine dBase-Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dbase_open</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>int <parameter>flags</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Die Flags entsprechen denen des open()-Systemaufrufs
     (normalerweise bedeutet 0 Nur-Lesen, 1 Nur-Schreiben und 2
     Lesen und Schreiben).
    </para>
    <para>
     Gibt einen dbase_identifier für die geöffnete Datenbank zurück
     oder &false; / falsch, wenn die Datenbank nicht geöffnet werden
     konnte.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbase-close">
   <refnamediv>
    <refname>dbase_close</refname>
    <refpurpose>Schließt eine dBase-Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dbase_close</function></funcdef>
      <paramdef>int <parameter>dbase_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Schließt die durch <parameter>dbase_identifier</parameter>
     angegebene Datenbank.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbase-pack">
   <refnamediv>
    <refname>dbase_pack</refname>
    <refpurpose>
     Entfernt die als gelöscht markierten Datensätze aus der Datenbank
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dbase_pack</function></funcdef>
      <paramdef>int <parameter>dbase_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Entfernt die in der angegebenen Datenbank als gelöscht markierten
     Datensätze endgültig (physisch).  Betroffen sind alle vorher per
     <function>dbase_delete_record</function> als gelöscht markierten
     Datensätze.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.dbase-add-record">
   <refnamediv>
    <refname>dbase_add_record</refname>
    <refpurpose>
     Hängt einen neuen Datensatz an eine dBase-Datenbank an
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dbase_add_record</function></funcdef>
      <paramdef>int <parameter>dbase_identifier</parameter></paramdef>
      <paramdef>array <parameter>record</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Hängt den per <parameter>record</parameter> definierten Datensatz
     an die Datenbank an. Wenn die Anzahl der Einträge im angegebenen
     Record nicht gleich der Anzahl der Felder in der Datenbank ist,
     wird dieser Befehl scheitern und &false; / falsch zurück geben.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbase-replace-record">
   <refnamediv>
    <refname>dbase_replace_record</refname>
    <refpurpose>
     Ersetzt einen Datensatz in einer dBase-Datenbank
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dbase_replace_record</function></funcdef>
      <paramdef>int <parameter>dbase_identifier</parameter></paramdef>
      <paramdef>array <parameter>record</parameter></paramdef>
      <paramdef>int <parameter>dbase_record_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Überschreibt die Daten des Datensatzes
     <parameter>record_number</parameter> mit den Daten aus
     <parameter>record</parameter> in der Datenbank. Falls die Anzahl
     der definierten Einträge ungleich der Anzahl der Datenfelder in
     dem angesprochenen Datensatz ist, wird die Ausführung dieses
     Befehls abgewiesen und &false; / falsch zurück gegeben.
    </simpara>
    <simpara>
     <parameter>dbase_record_number</parameter> ist ein Integer-Wert,
     der von 1 bis zur Anzahl der Datensatz-Anzahl der Datenbank
     reicht (wie er bei Aufruf der Funktion
     <function>dbase_numrecords</function> zurück gegeben wird).
    </simpara>
   </refsect1>
  </refentry>
  
  <refentry id="function.dbase-delete-record">
   <refnamediv>
    <refname>dbase_delete_record</refname>
    <refpurpose>Markiert einen Datensatz als gelöscht</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Bschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>dbase_delete_record</function></funcdef>
      <paramdef>int <parameter>dbase_identifier</parameter></paramdef>
      <paramdef>int <parameter>record</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Markiert den Datensatz <parameter>record</parameter> in der
     Datenbank als gelöscht.  Um ihn wirklich (physisch) zu entfernen,
     müssen sie noch die Funktion <function>dbase_pack</function>
     aufrufen.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbase-get-record">
   <refnamediv>
    <refname>dbase_get_record</refname>
    <refpurpose>
     Liest einen Datensatz aus einer dBase-Datenbank
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>dbase_get_record</function></funcdef>
      <paramdef>int <parameter>dbase_identifier</parameter></paramdef>
      <paramdef>int <parameter>record</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt die Daten von <parameter>record</parameter> in einem Array
     zurück. Das Array hat einen bei 0 beginnenden Index und enthält
     einen zusätzlichen Bereich der mit 'deleted' bezeichnet wird.
     Dieser ist auf 1 gesetzt, wenn der Datensatz als gelöscht
     markiert ist (siehe <function>dbase_delete_record</function>).
    </para>
    <para>
     Jedes Feld wird in den entsprechenden PHP-Typ umgesetzt
     (Datumsangaben werden zu Zeichenketten / Strings).
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbase-get-record-with-names">
   <refnamediv>
    <refname>dbase_get_record_with_names</refname>
    <refpurpose>
     Gibt einen Datensatz einer dBase-Datenbank als assoziatives
     Array zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array 
       <function>dbase_get_record_with_names</function>
      </funcdef>
      <paramdef>int <parameter>dbase_identifier</parameter></paramdef>
      <paramdef>int <parameter>record</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt die Daten von <parameter>record</parameter> in einem
     assoziativen Array zurück. Das Array enthält auch einen
     assoziativen Bereich, der 'deleted' heisst und auf 1 steht, wenn
     der Datensatz als gelöscht markiert ist (siehe
     <function>dbase_delete_record</function>).
    </para>
    <para>
     Jedes Feld wird in den entsprechenden PHP-Typ konvertiert
     (Datumsangaben werden zu Zeichenketten / Strings).
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbase-numfields">
   <refnamediv>
    <refname>dbase_numfields</refname>
    <refpurpose>
     Stellt fest, wieviele Felder eine dBase-Datenbank hat
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dbase_numfields</function></funcdef>
      <paramdef>int <parameter>dbase_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt die Anzahl der Datenfelder (Spalten) in der angegebenen
     Datenbank zurück. Feld-Nummern sind Werte zwischen 0 und
     dbase_numfields($db)-1, wogegen die Datensatz-Werte zwischen 1 
     und dbase_numrecords($db) sein können.
     <example>
      <title>Gebrauch von <function>dbase_numfields</function></title>
      <programlisting role="php">
       $rec = dbase_get_record($db, $recno);
       $nf  = dbase_numfields($db);
       for ($i=0; $i &lt; $nf; $i++) {
         print $rec[$i]."&lt;br>\n";
       }
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dbase-numrecords">
   <refnamediv>
    <refname>dbase_numrecords</refname>
    <refpurpose>
     Ermittelt die Anzahl der Datensätze einer dBase-Datenbank
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>dbase_numrecords</function></funcdef>
      <paramdef>int <parameter>dbase_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt die Anzahl der Datensätze (Zeilen) in der angegebenen
     Datenbank zurück. Datensatz-Nummern können Werte zwischen 1 und
     dbase_numrecords($db) sein, wogegen Feld-Werte zwischen 0 und
     dbase_numfields($db)-1 sein können.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
