 <reference id="ref.mysql">
  <title>MySQL Funktionen</title>
  <titleabbrev>MySQL</titleabbrev>
  <partintro>
   <simpara>
    Diese Funktionen erlauben den Zugriff auf einen MySQL Datenbank-Server.
   </simpara>
   <simpara>
    Weiter Informationen zu MySQL gibt es unter <ulink
    url="&url.mysql;">&url.mysql;</ulink>.
   </simpara>
   <para>
    In diesem Dokument werden ein Reihe von Begriffen benutzt, die
    hier kurz erläutert werden sollen.

    <variablelist>
     <varlistentry><term>Anfrageergebnis, Ergebnis</term> 
      <listitem>
       <para>
	Die Rückgabe auf eine Anfrage an den Datenbankserver. Anfragen
	können sowohl Datenbankanfragen sein, die Teile des
	Datenbankinhalts umfassen oder Informationen über eine
	Datenbank oder den Datenbankserver liefern. Ist das Ergebnis
	eine Datenbankanfrage kann man es sich als Tabelle vorstellen,
	in der die Zeilen die Datensätze sind und die Felder den
	Spalten ensprechen. Ein Ergebnis besteht aus 0 oder beliebig
	vielen Datensätzen.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry><term>Ergebnis-Kennung</term>
      <listitem>
       <para>
	Eine Referenz auf ein Ergebnis. Über diese Kennung erfolgt
	grundsätzlich der Zugriff auf das Ergebnis.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry><term>Datensatz</term>
      <listitem>
       <para>
	Eine Zeile aus einem Anfrageergebnis bestehend aus den Werten
	der einzelnen Felder.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry><term>Datensatzzeiger</term>
      <listitem>
       <para>
	Ein interner Zeiger auf einen Datensatz in einem
	Anfrageergebnis. Dieser Zeiger bestimmt auf welchen Datensatz
	zugegriffen wird. Der Zeiger kann sowohl impliziet als auch
	expliziet verändert werden.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry><term>Feld</term>
      <listitem>
       <para>
	Entspricht einer Spalte im Anfrageergebnis.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry><term>Feldzeiger</term>
      <listitem>
       <para>
	Wie Datensatzzeiger bei Zugriffen auf Felder eines
	Anfrageergebnisses.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry><term>Verbindungs-Kennung</term>
      <listitem>
       <para>
	Eine Referenz auf eine Verbindung zum Datenbank-Server. Mit
	dieser Verbindung ist beispielsweise die Datenbank, der
	Benutzer, der Rechnername auf dem die Datenbank läuft und
	weiters verknüpft. Jeder Zugriff auf den Server nutzt diese
	Kennung. Wenn die Kennung beim Aufruf einer Funktion nicht
	angegeben wird, so wird die aktuelle Verbindungs-Kennung
	verwendet, die intern von PHP verwaltet wird.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </partintro>

  <refentry id="function.mysql-affected-rows">
   <refnamediv>
    <refname>mysql_affected_rows</refname> 
    <refpurpose>
     Liefert die Anzahl betroffener Datensätze einer vorhergehenden
     MySQL Operation
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_affected_rows</function></funcdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     <function>Mysql_affected_rows</function> liefert die Anzahl
     betroffener Datensätze durch die letzte INSERT, UPDATE oder
     DELETE Anfrage an den Server, der mit der angegebenen
     Verbindungskennung assoziiert wird. Wenn die Verbindungskennung
     nicht angegeben wird, wird die zur Zeit offene Verbindung
     verwendet.
    </para>
    <para>
     Wenn die letzte Anfrage ein DELETE ohne WHERE-Anweisung war,
     wurden alle Datensätze aus der Tabelle gelöscht, die Funktion
     wird aber trotzdem Null zurückliefern.
    </para>
    <para>
     Diese Funktion macht keinen Sinn bei SELECT-Anfragen, sondern nur
     wenn Datensätze modifiziert wurden. Um die Anzahl der gelieferten
     Datensätze einer SELECT-Anfrage zu erhalten, benutzen Sie die
     Funktion <function>mysql_num_rows</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-change-user">
   <refnamediv>
    <refname>mysql_change_user</refname> 
    <refpurpose>
     Ändert den zur Zeit angemeldeten Benutzer
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_change_user</function></funcdef>
      <paramdef>string <parameter>Benutzername</parameter></paramdef>
      <paramdef>string <parameter>Kennwort</parameter></paramdef>
      <paramdef>string <parameter><optional>Datenbank</optional></parameter></paramdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     <function>Mysql_change_user</function> ändert den angemeldeten
     Benutzer der Datenbank-Verbindung in den Benutzer mit dem
     übergebenen Namen und Kennwort.  Fehlt die Verbindungs-Kennung
     wird die Änderung für die aktive Verbindung vorgenommen.  If a
     database is specified, this will default or current database
     after the user has been changed.  Wenn die Anmeldung als neuer
     Benutzer mit dem angegebenen Kennwort fehlschlägt, bleibt der
     aktuelle Benutzer aktiv.
    </para>
    <note>
     <para>
      <graphic fileref="../images/note.gif"/>
      Diese Funktion wurde mit PHP 3.0.13 eingeführt und erfordert
      MySQL 3.23.3 oder höher.  
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-close">
   <refnamediv>
    <refname>mysql_close</refname>
    <refpurpose>Schließt eine Verbindung zum Datenbank-Server</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_close</function></funcdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Rückgabewert: true im Erfolgsfall, false im Fehlerfall.
    </para>
    <para> 
     <function>Mysql_close</function> schließt die Verbindung zur
     MySQL-Datenbank, die zur Verbindungs-Kennung gehört.  Wenn die
     <parameter>Verbindungs-Kennung</parameter> nicht angegeben wird,
     wird die aktuelle Verbindung geschlossen.
    </para>
    <note>
     <graphic fileref="../images/note.gif"/>
     <para> 
      Dies ist für gewöhnlich nicht notwendig, weil nichtpersistente
      offene Verbindungen automatisch mit Beendigung des PHP-Skripts
      geschlossen werden.  
     </para>
    </note> 
    <para>
     <function>mysql_close</function> schließt keine persistenten
     Verbindungen, die mit <function>mysql_pconnect</function>
     geöffnet wurden.
    </para>
    <example>
     <title>Verbindung zum Datenbankserver schließen</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_connect ("kraemer", "marliesle", "secret")
        or die ("Could not connect");
    print ("Connected successfully");
    mysql_close ($link);
?>
     </programlisting>
    </example>
    <para> 
     Siehe auch: <function>mysql_connect</function> und
     <function>mysql_pconnect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-connect">
   <refnamediv>
    <refname>mysql_connect</refname>
    <refpurpose>Öffnet eine Verbindung zum Datenbank-Server</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_connect</function></funcdef>
      <paramdef>string <parameter><optional>hostname<optional>:port</optional><optional>:/path/to/socket</optional></optional></parameter></paramdef>
      <paramdef>string <parameter><optional>Benutzername</optional></parameter></paramdef>
      <paramdef>string <parameter><optional>Kennwort</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Rückgabewert: Eine Verbindungs-Kennung im Erfolgsfall oder false
     im Fehlerfall.
    </para>
    <para> 
     <function>Mysql_connect</function> öffnet eine Verbindung zu einem
     MySQL server.  Alle Argumente sind optional, und wenn alle fehlen
     wird ('localhost', Benutzername des Benutzers dem der Server-Prozess
     gehört, leeres Kennwort) angenommen.
    </para>  
    <para>
     Der Parameter <parameter>hostname</parameter> kann zudem die
     Portnummer enthalten, z.B.  &quot;hostname:port&quot; oder den
     Pfad zu einem Socket z.B. &quot;:/path/to/socket&quot; für
     Zugriffe auf dem lokalen Rechner.
     <note>
      <para>
       Unterstützung für &quot;:port&quot; wurde in PHP 3.0B4
       hinzugefügt.
      </para>
      <para>
       Unterstützung für &quot;:/path/to/socket&quot; wurde in PHP
       3.0.10 hinzugefügt.
      </para>
      <para>
       Fehlermeldung können unterdrückt werden, wenn dem Funktionsname
       ein '@' voran gestellt wird.
      </para>
     </note>
    </para>
    <para> 
     Für den Fall, dass ein Aufruf von
     <function>mysql_connect</function> mit den gleichen Argumenten
     erfolgt, wird keine neue Verbindung aufgebaut, sondern die
     Verbindungs-Kennung der schon bestehenden Verbindung
     zurückgeliefert.
    </para>
    <para>
     Die Verbindung zum Datenbank-Server wird geschlossen, sobald das
     PHP-Skript beendet wird oder <function>mysql_close</function>
     aufgerufen wird.  
    </para>
    <example>
     <title>Verbindung zum Datenbanksserver öffnen</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_connect ("kraemer", "marliesle", "secret")
        or die ("Could not connect");
    print ("Connected successfully");
    mysql_close ($link);
?>
     </programlisting>
    </example>
    <para> 
     Siehe auch <function>mysql_pconnect</function> und
     <function>mysql_close</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-create-db">
   <refnamediv>
    <refname>mysql_create_db</refname>
    <refpurpose>Erzeugt eine Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_create_db</function></funcdef>
      <paramdef>string <parameter>Datenbankname</parameter></paramdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     <function>mysql_create_db</function> versucht eine neue Datenbank
     auf dem Server mit der angegebenen Verbindungs-Kennung zu
     erzeugen.
    </para>
    <example>
     <title>Erzeugen einer Datenbank</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_pconnect ("kron", "jutta", "geheim")
        or die ("Could not connect");
    if (mysql_create_db ("my_db")) {
        print ("Database created successfully\n");
    } else {
        printf ("Error creating database: %s\n", mysql_error ());
    }
?>
     </programlisting>
    </example>
    <para> 
     Für Rückwärtskompatibilität kann auch
     <function>mysql_createdb</function> verwendet werden.
    </para>
    <para> 
     Siehe auch: <function>mysql_drop_db</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-data-seek">
   <refnamediv>
    <refname>mysql_data_seek</refname>
    <refpurpose>Bewegt internen Datensatz-Zeiger</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_data_seek</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter>Datensatznummer</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Rückgabewert: true im Erfolgsfall, false im Fehlerfall.
    </para>
    <para> 
     <function>mysql_data_seek</function> bewegt den internen
     Datensatz-Zeiger eines Anfrageergebnisses zum Datensatz mit der
     übergebenen Nummer. Der nächste Aufruf von
     <function>mysql_fetch_row</function> liefert den entsprechenden
     Datensatz.
    </para>
    <para>
     Das Argument <parameter>Datensatznummer</parameter> ist 0 oder
     größer.
    </para>
    <example>
     <title>Positionieren des Datensatzzeigers</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_pconnect ("kron", "jutta", "geheim")
        or die ("Could not connect");

    mysql_select_db ("samp_db")
        or die ("Could not select database");

    $query = "SELECT last_name, first_name FROM friends";
    $result = mysql_query ($query)
        or die ("Query failed");

    # fetch rows in reverse order

    for ($i = mysql_num_rows ($result) - 1; $i >=0; $i--) {
        if (!mysql_data_seek ($result, $i)) {
            printf ("Cannot seek to row %d\n", $i);
            continue;
        }

        if(!($row = mysql_fetch_object ($result)))
            continue;

        printf ("%s %s&lt;BR>\n", $row->last_name, $row->first_name);
    }

    mysql_free_result ($result);
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-db-query">
   <refnamediv>
    <refname>mysql_db_query</refname>
    <refpurpose>Absetzen einer Anfrage an die Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_db_query</function></funcdef>
      <paramdef>string <parameter>Datenbank</parameter></paramdef>
      <paramdef>string <parameter>Anfrage</parameter></paramdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Rückgabewert: Eine Ergebnis-Kennung als Referenz auf das
     Anfrageergebnis, oder false im Fehlerfall.
    </para>
    <para> 
     <function>Msql_db_query</function> wählt eine Datenbank und führt
     eine Anfrage darauf aus. Wenn der optionale Parameter
     <parameter>Verbindungs-Kennung</parameter> nicht angegeben ist,
     wird versucht die aktuelle Verbindung zu nutzen. Wenn auch dies
     fehlschlägt, wird weiter versucht die Verbindung aufzubauen, wie
     dies mit <function>mysql_connect</function> ohne Angabe von
     Argumenten geschehen würde.
    </para>
    <para> 
     Für Rückwärtskompatibilität kann auch <function>mysql</function>
     verwendet werden.
    </para>
    <para> 
     Siehe auch <function>mysql_connect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-drop-db">
   <refnamediv>
    <refname>mysql_drop_db</refname>
    <refpurpose>Entfernt eine Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_drop_db</function></funcdef>
      <paramdef>string <parameter>Datenbankname</parameter></paramdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Rückgabewert: true im Erfolgsfall, false ein Fehlerfall.
    </para>  
    <para> 
     <function>mysql_drop_db</function> versucht eine komplette Datenbank
     vom Server mit der übergebenen Verbindungs-Kennung zu entfernen.
    </para>
    <para> 
     Siehe auch: <function>mysql_create_db</function>. Für
     Rückwärtskompatibilität kann auch
     <function>mysql_dropdb</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-errno">
   <refnamediv>
    <refname>mysql_errno</refname> 
    <refpurpose>
     Liefert die Fehlernummer einer zuvor ausgeführten Operation
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_errno</function></funcdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Fehler, die vom MySQL Server kommen, führen nicht zu einer
     Ausgabe von Warnungen. Stattdessen, sollte diese Funktion
     verwendet werden, um die Fehlernummer zu erhalten.
     <informalexample>
      <programlisting role="php">
&lt;?php
mysql_connect("marliesle");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
mysql_select_db("nonexistentdb");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
$conn = mysql_query("SELECT * FROM nonexistenttable");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
?>
      </programlisting>
     </informalexample>
    </para>
    <para> 
     Siehe auch: <function>mysql_error</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-error">
   <refnamediv>
    <refname>mysql_error</refname>
    <refpurpose>
     Liefert den Fehlertext der zuvor ausgeführten MySQL Operation
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_error</function></funcdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Fehler, die vom MySQL Server kommen, führen nicht zu einer
     Ausgabe von Warnungen. Stattdessen, sollte diese Funktion
     verwendet werden, um den Fehlertext zu erhalten.
     <informalexample>
      <programlisting role="php">
&lt;?php
mysql_connect("marliesle");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
mysql_select_db("nonexistentdb");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
$conn = mysql_query("SELECT * FROM nonexistenttable");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
?>
      </programlisting>
     </informalexample>
    </para>
    <para> 
     Siehe auch: <function>mysql_errno</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-array">
   <refnamediv>
    <refname>mysql_fetch_array</refname> 
    <refpurpose>
     Liefert einen Datensatz als assoziatives Array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mysql_fetch_array</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter><optional>Ergebnistyp</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Liefert ein Array der den aktuellen Datensatz enthält oder false,
     wenn keine weiteren Datensätze vorliegen.
    </para>
    <para>
     <function>Mysql_fetch_array</function> ist eine erweiterte
     Version von <function>mysql_fetch_row</function>.  Der Datensatz
     wird in einem assoziativen Array abgelegt, in dem die Schlüssel
     den Namen der Datensatzfelder entsprechen.
    </para>
    <para>
     Wenn zwei oder mehrere Felder des Ergebnisses den gleichen
     Feldnamen haben, dann wird der Wert des letzten Feldes im Array
     unter dem Feldnamen abgelegt.  Um auch auf die anderen Felder mit
     dem gleichen Namen zugreifen zu können, müssen Sie den
     numerischen Index des Arrays verwenden oder einen Alias für das
     Feld erzeugen.
     <informalexample>
      <programlisting>
select t1.f1 as foo t2.f1 as bar from t1, t2
      </programlisting>
     </informalexample>
    </para>
    <para>
     Zu betonen ist, dass der Gebrauch von
     <function>mysql_fetch_array</function> NICHT signifikant
     langsamer ist als <function>mysql_fetch_row</function>, obwohl
     die Funktion einen sichtlichen Mehrwert bedeutet.
    </para>
    <para>
     Das optionale zweite Argumente <parameter>Ergebnistyp</parameter>
     in <function>mysql_fetch_array</function> ist eine Konstante und
     kann die folgenden Werte annehmen: MYSQL_ASSOC, MYSQL_NUM und
     MYSQL_BOTH. (Diese Eigenschaft wurde in PHP 3.0.7 hinzugefügt.)
    </para>
    <para>
     Für weitere Details, siehe auch
     <function>mysql_fetch_row</function>.
    </para>
    <example>
     <title><function>Mysql_fetch_array</function></title>
     <programlisting role="php">
&lt;?php 
mysql_connect ($host, $user, $password);
$result = mysql_db_query ("database","select * from table");
while ($row = mysql_fetch_array ($result)) {
    echo $row["user_id"];
    echo $row["fullname"];
}
mysql_free_result ($result);
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-field">
   <refnamediv>
    <refname>mysql_fetch_field</refname>
    <refpurpose>
     Liefert ein Objekt mit Feldinformationen aus einem Anfrageergebnis
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>mysql_fetch_field</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter><optional>Feld-Offset</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert ein Objekt mit Feldinformationen.
    </para>  
    <para>
     <function>Mysql_fetch_field</function> kann gebraucht werden, um
     Feldinformationen über Felder in einem Anfrageergebnis zu
     erhalten.  Wenn der Feld-Offset nicht angegeben wird, werden die
     Information des nächsten noch nicht mit
     <function>mysql_fetch_field</function> erfragten Feldes
     geliefert.
    </para>
    <para>
     Des Eigenschaften des Objekts sind:
     <itemizedlist>
      <listitem>
       <simpara>
	name - Feldname
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	table - Name der Tabelle zu der das Feld gehört
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	max_length - maximale Länge des Feldes
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	not_null - 1, wenn das Feld nicht Null sein kann 
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	primary_key - 1, wenn das Feld ein 'primary key' ist
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	unique_key - 1, wenn das Feld ein 'unique key' ist
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	multiple_key - 1, wenn das Feld ein 'non-unique key' ist
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	numeric - 1, wenn das Feld vom Typ 'numeric' ist
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	blob - 1, wenn das Feld vom Typ 'BLOB' ist
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	type - der Typ des Feldes
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	unsigned - 1, wenn das Feld vorzeichenlos ist
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	zerofill - 1, wenn das Feld 'zero-filled' ist
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <example>
     <title><function>Mysql_fetch_field</function></title>
     <programlisting role="php">
&lt;?php 
mysql_connect ($host,$user,$password)
    or die ("Could not connect");
$result = mysql_db_query ("database", "select * from table")
    or die ("Query failed");
# get column metadata
$i = 0;
while ($i &lt; mysql_num_fields ($result)) {
    echo "Information for column $i:&lt;BR>\n";
    $meta = mysql_fetch_field ($result);
    if (!$meta) {
        echo "No information available&lt;BR>\n";
    }
    echo "&lt;PRE>
blob:         $meta -> blob
max_length:   $meta -> max_length
multiple_key: $meta -> multiple_key
name:         $meta -> name
not_null:     $meta -> not_null
numeric:      $meta -> numeric
primary_key:  $meta -> primary_key
table:        $meta -> table
type:         $meta -> type
unique_key:   $meta -> unique_key
unsigned:     $meta -> unsigned
zerofill:     $meta -> zerofill
&lt;/PRE>";
    $i++;
}
mysql_free_result ($result);
?>
     </programlisting>
    </example>
    <para>
     Siehe auch <function>mysql_field_seek</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-lengths">
   <refnamediv>
    <refname>mysql_fetch_lengths</refname> 
    <refpurpose>
     Liefert die Länge eines jeden Feldes in einem Datensatz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mysql_fetch_lengths</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Rückgabewert: Ein Array, das die Längen eines jeden Feldes in dem
     zuletzt geholten Datensatz enthält, oder false im Fehlerfall.
    </para>  
    <para>
     <function>Mysql_fetch_lengths</function> liefert die Längen eines
     jeden Feldes in dem mit <function>mysql_fetch_row</function>,
     <function>mysql_fetch_array</function> oder
     <function>mysql_fetch_object</function> zuletzt geholten
     Datensatzes, in einem Array.  
    </para> 
    <para> 
     Siehe auch: <function>mysql_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-object">
   <refnamediv>
    <refname>mysql_fetch_object</refname>
    <refpurpose>Liefert einen Datensatz als Objekt</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>mysql_fetch_object</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter><optional>Ergebnistyp</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Liefert ein Objekt mit Eigenschaften, die den Felder des geholten
     Datensatz entsprechen, oder false when keine weiteren Datensätze
     vorhanden sind.
    </para>
    <para> 
     <function>Mysql_fetch_object</function> ist ähnlich zu
     <function>mysql_fetch_array</function>, mit einem Unterschied -
     ein Objekt wird zurück geliefert, anstatt eines Arrays. Indirekt
     bedeutet dies, das Sie die Felder nur mit ihren Feldnamen und
     nicht mir dem Offset ansprechen können.  (Nummer sind ungültige
     Namen für Eigenschaften).
    </para>
    <para>
     Das optionale zweite Argumente <parameter>Ergebnistyp</parameter>
     in <function>mysql_fetch_array</function> ist eine Konstante und
     kann die folgenden Werte annehmen: MYSQL_ASSOC, MYSQL_NUM und
     MYSQL_BOTH.
    </para>
    <para>
     Unter Berücksichtigung der Ausführungsgeschwindigkeit ist diese
     Funktion identisch zu <function>mysql_fetch_array</function> und
     fast so schnell wie <function>mysql_fetch_row</function> (der
     Unterschied ist unwesentlich).
     <example>
      <title>mysql fetch object</title>
      <programlisting role="php">
&lt;?php 
mysql_connect ($host, $user, $password);
$result = mysql_db_query ("database", "select * from table");
while ($row = mysql_fetch_object ($result)) {
    echo $row->user_id;
    echo $row->fullname;
}
mysql_free_result ($result);
?>
      </programlisting>
     </example>
    </para>
    <para> 
     Siehe auch: <function>mysql_fetch_array</function> und
     <function>mysql_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-row">
   <refnamediv>
    <refname>mysql_fetch_row</refname>
    <refpurpose>Liefert einen Datensatz als indiziertes Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mysql_fetch_row</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Rückgabewert: Ein Array mit dem geholten Datensatz oder false
     wenn keine weiteren Datensätze verfügbar sind.
    </para>
    <para>
     <function>Mysql_fetch_row</function> liefert einen Datensatz aus
     dem Anfrageergebnis mit der übergebenen Kennung. Der Datensatz
     wird als Array geliefert. Jeder Feldwert ist als ein Element
     abgelegt.
    </para>
    <para>
     Folgende Aufrufe von <function>mysql_fetch_row</function> liefern
     die weiteren Datensätze des Anfrageergebnisses oder false, wenn keine
     weiteren Datensätze verfügbar sind.
    </para>
    <para>
     Siehe auch: <function>mysql_fetch_array</function>,
     <function>mysql_fetch_object</function>,
     <function>mysql_data_seek</function>,
     <function>mysql_fetch_lengths</function> und
     <function>mysql_result</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-name">
   <refnamediv>
    <refname>mysql_field_name</refname> 
    <refpurpose>
     Liefert den Namen eines Feldes in einem Anfrageergebnis
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_field_name</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter>Feldindex</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mysql_field_name</function> liefert den Namen eines
     Feldes in einem Anfrageergebnis. Argumente der Funktion ist die
     Kennung des Anfrageergebnisses und der Feldindex, z.B.
     <literal>mysql_field_name($result,2);</literal>
    </para>
    <para>
     Dies liefert den Namen des zweiten Feldes im Anfrageergebnis.
    </para>
    <para>
     Für Rückwärtskompatibilität kann
     <function>mysql_fieldname</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-seek">
   <refnamediv>
    <refname>mysql_field_seek</refname>
    <refpurpose>
     Setzt den Feldzeiger auf ein bestimmtes Feld
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_field_seek</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter>Feldoffset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Setzt den Feldzeiger auf den angegeben Feldoffset. Wenn mit dem
     nächste Aufruf von <function>mysql_fetch_field</function> keinen
     Feldoffset übergeben wird, wird das Feld auf den der Zeiger
     verweist zurückgeliefert.
    </para>
    <para>
     Siehe auch: <function>mysql_fetch_field</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-table">
   <refnamediv>
    <refname>mysql_field_table</refname>
    <refpurpose>
     Liefert den Namen der Tabelle, die das genannte Feld enthält
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_field_table</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter>Feldoffset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Liefert den Namen der Tabelle, die das genannte Feld enthält.
     Für Rückwärtskompatibilität kann 
     <function>mysql_fieldtable</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-type">
   <refnamediv>
    <refname>mysql_field_type</refname>
    <refpurpose>
     Liefert den Typ eines Feldes in einem Anfrageergebnis
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_field_type</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter>Feldoffset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mysql_field_type</function> ist ähnlich zu
     <function>mysql_field_name</function>. Die Argumente sind
     identisch, aber der Feldtyp wird zurückgeliefert. Dieser kann
     einer von "int", "real", "string", "blob", oder anderen sein, wie
     in der Dokumentation zu MySQL angegeben.
     <example>
      <title>Mysql Field Types</title>
      <programlisting role="php">
&lt;?php 
mysql_connect ("localhost:3306");
mysql_select_db ("wisconsin");
$result = mysql_query ("SELECT * FROM onek");
$fields = mysql_num_fields ($result);
$rows   = mysql_num_rows ($result);
$i = 0;
$table = mysql_field_table ($result, $i);
echo "Your '".$table."' table has ".$fields." fields and ".$rows." records &lt;BR>";
echo "The table has the following fields &lt;BR>"; 
while ($i &lt; $fields) {
    $type  = mysql_field_type  ($result, $i);
    $name  = mysql_field_name  ($result, $i);
    $len   = mysql_field_len   ($result, $i);
    $flags = mysql_field_flags ($result, $i);
    echo $type." ".$name." ".$len." ".$flags."&lt;BR>";
    $i++;
}
mysql_close();
?>
      </programlisting>
     </example>
    </para>
    <para> 
     Für Rückwärtskompatibilität kann
     <function>mysql_fieldtype</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-flags">
   <refnamediv>
    <refname>mysql_field_flags</refname>
    <refpurpose>
     Liefert die Flags eines Feldes in einem Anfrageergebnis
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_field_flags</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter>Feldoffset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     <function>Mysql_field_flags</function> liefert die Flags des
     Feldes mit dem übergeben Offset. Die Flags werden als einzelne
     Worte pro Flag und Leerzeichen getrennt geliefert, so dass sie
     leicht mit <function>explode</function> getrennt werden können.
    </para>
    <para>
     Die folgenden Flags werden geliefert, wenn Ihre Version von MySQL
     diese unterstützt: "not_null", "primary_key", "unique_key",
     "multiple_key", "blob", "unsigned", "zerofill", "binary", "enum",
     "auto_increment", "timestamp".
    </para>
    <para> 
     Für Rückwärtskompatibilität kann
     <function>mysql_fieldflags</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-len">
   <refnamediv>
    <refname>mysql_field_len</refname> 
    <refpurpose>
     Liefert die Länge eines Feldes
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_field_len</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter>Feldoffset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mysql_field_len</function> liefert die Länge des Feldes
     mit dem übergebenen Feldoffset. Für Rückwärtskompatibilität kann
     <function>mysql_fieldlen</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-free-result">
   <refnamediv>
    <refname>mysql_free_result</refname>
    <refpurpose>Gibt den belegten Speicher wieder frei</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_free_result</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mysql_free_result</function> entfernt ein Ergebnis und
     gibt den belegten Speicher frei. Die Funktion muss nur dann
     aufgerufen werden, wenn der Speicherbedarf zur Laufzeit des
     PHP-Skripts zu hoch wird. Nach Ablauf des PHP-Skripts wird der
     Speicher ohnehin freigegeben.
    </para>
    <para>
     Für Rückwärtskompatibilität kann
     <function>mysql_freeresult</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-insert-id">
   <refnamediv>
    <refname>mysql_insert_id</refname>
    <refpurpose>
     Liefert die Kennung einer vorherigen INSERT-Operation
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_insert_id</function></funcdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     <function>Mysql_insert_id</function> liefert die Kennung (ID),
     die bei der letzten INSERT-Operation für eine automatisch
     inkrementiertes Feld (AUTO_INCREMENTED) vergeben wurde.  Wenn die
     <parameter>Verbindungs-Kennung</parameter> nicht angegeben wird,
     wird die aktuelle Verbindung verwendet.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-fields">
   <refnamediv>
    <refname>mysql_list_fields</refname>
    <refpurpose>Listet die Felder einer Tabelle auf</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_list_fields</function></funcdef>
      <paramdef>string <parameter>Datenbankname</parameter></paramdef>
      <paramdef>string <parameter>Tabellenname</parameter></paramdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mysql_list_fields</function> fordert Information über
     eine Tabelle an.  Argumente sind der Datenbankname und der
     Tabellenname.  the table name. Die zurückgelieferte
     Ergebnis-Kennung kann von den Funktionen
     <function>mysql_field_flags</function>,
     <function>mysql_field_len</function>,
     <function>mysql_field_name</function> und
     <function>mysql_field_type</function> verwendet werden.
    </para>
    <para>
     Die Erbebnis-Kennung ist ein positiver ganzzahliger Wert.  Die
     Funktion liefert -1 im Fehlerfall. Eine mögliche Fehlermeldung
     wird in der Variablen <literal>$phperrmsg</literal> abgelegt, es
     sei denn die Funktion wurde als <literal>@mysql()</literal>
     aufgerufen.  In diesem Fall wird die Fehlermeldung ausgegeben.
    </para>
    <para>
     Für Rückwärtskompatibilität kann
     <function>mysql_listfields</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-dbs">
   <refnamediv>
    <refname>mysql_list_dbs</refname> 
    <refpurpose>
     Liefert eine Liste der verfügbaren Datenbanken auf dem Server
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_list_dbs</function></funcdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mysql_list_dbs</function> liefert die Kennung eines
     Ergebnisses, dass alle Datenbanken auf dem Datenbankserver
     enthält.  Benutzen Sie die Funktion
     <function>mysql_tablename</function>, um das Ergebnis zu
     durchlaufen.
    </para>
    <para>
     Für Rückwärtskompatibilität kann
     <function>mysql_listdbs</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-tables">
   <refnamediv>
    <refname>mysql_list_tables</refname>
    <refpurpose>Liefert eine Liste der Tabellen in einer Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_list_tables</function></funcdef>
      <paramdef>string <parameter>Datenbankname</parameter></paramdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     <function>Mysql_list_tables</function> liefert eine Liste der
     Datenbank mit dem übergegebenen Namen, ähnlich wie die Funktion
     <function>mysql_db_query</function> bei Datenbankanfragen. Die
     Funktion <function>mysql_tablename</function> sollte genutzt
     werden, um die tatsächlichen Namen der Tabellen im Ergebnis zu
     erfragen.
    </para>
    <para>
     Für Rückwärtskompatibilität kann
     <function>mysql_listtables</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-num-fields">
   <refnamediv>
    <refname>mysql_num_fields</refname>
    <refpurpose>Liefert die Anzahl der Felder in einem Ergebnis</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_num_fields</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     <function>Mysql_num_fields</function> liefert die Anzahl der
     Felder in einem Ergebnis.
    </para>
    <para> 
     Siehe auch: <function>mysql_db_query</function>,
     <function>mysql_query</function>,
     <function>mysql_fetch_field</function> und
     <function>mysql_num_rows</function>.
    </para>
    <para>
     Für Rückwärtskompatibilität kann
     <function>mysql_numfields</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-num-rows">
   <refnamediv>
    <refname>mysql_num_rows</refname>
    <refpurpose>Liefert die Anzahl der Datensätze im Ergebnis</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_num_rows</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mysql_num_rows</function> liefert die Anzahl der
     Datensätze im Ergebnis.
    </para>
    <para>
     Siehe auch: <function>mysql_db_query</function>,
     <function>mysql_query</function> und
     <function>mysql_fetch_row</function>.
    </para>
    <para>
     Für Rückwärtskompatibilität kann
     <function>mysql_numrows</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-pconnect">
   <refnamediv>
    <refname>mysql_pconnect</refname> 
    <refpurpose>
     Öffnete eine persistente Verbindung zum MySQL Server
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_pconnect</function></funcdef>
      <paramdef>string <parameter><optional>hostname<optional>:port</optional><optional>:/path/to/socket</optional></optional></parameter></paramdef>
      <paramdef>string <parameter><optional>Benutztername</optional></parameter></paramdef>
      <paramdef>string <parameter><optional>Benutzerkennwort</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Rückgabewert: Eine gültige Verbindung-Kennung im Erfolgsfall oder
     false im Fehlerfall.
    </para>
    <para>
     <function>Mysql_pconnect</function> baut eine Verbindung zum
     MySQL Server auf.  Alle Argumente sind optional, und wenn alle
     fehlen wird ('localhost', Benutzername des Benutzers dem der
     Server-Prozess gehört, leeres Kennwort) angenommen.  
    </para>
    <para>
     Der Parameter <parameter>hostname</parameter> kann zudem die
     Portnummer enthalten, z.B.  &quot;hostname:port&quot; oder den
     Pfad zu einem Socket z.B. &quot;:/path/to/socket&quot; für
     Zugriffe auf dem lokalen Rechner.
     <note>
      <para>
       Unterstützung für &quot;:port&quot; wurde in PHP 3.0B4 hinzugefügt.
      </para>
      <para>
       Unterstützung für &quot;:/path/to/socket&quot; wurde in
       PHP 3.0.10 hinzugefügt.
      </para>
     </note>
    </para>     
    <para>
     <function>Mysql_pconnect</function> verhält sich sehr ähnlich zu
     <function>mysql_connect</function>, weist aber zwei wesentliche
     Unterschiede auf.
    </para>
    <para> 
     Erstens, vor dem Verbindungsaufbau wird zunächst versucht eine
     (persistente) Verbindung zum gleichen Host und mit dem gleichen
     Benutzernamen und Kennwort zu finden. Wenn dies der Fall ist,
     wird die Verbindungskennung dieser Verbindung zurückgeliefert und
     keine neue Verbindung geöffnet.
    </para>
    <para> 
     Zweitens, die Verbindung zum SQL Server wird nicht mit Beendigung
     des PHP-Skripts geschlossen. Sie bleibt bestehen für einen
     möglichen, zukünftigen Verbindungsaufbau.
     (<function>Mysql_close</function> schließt keine mit
     <function>mysql_pconnect</function> geöffnete Verbindungen).
    </para>
    <para> 
     Dieser Verbindungstyp wird daher 'persistent' genannt.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-query">
   <refnamediv>
    <refname>mysql_query</refname>
    <refpurpose>Sendet eine SQL Anfrage zum Datenbankserver</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_query</function></funcdef>
      <paramdef>string <parameter>Anfrage</parameter></paramdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     <function>Mysql_query</function> sendet eine Anfrage zu der zur
     Zeit aktiven Datenbank-Verbindung oder der Verbindung mit der
     übergegebenen Kennung.  Wenn keine offene Verbindung besteht,
     wird versucht eine Verbindung aufzubauen, als ob
     <function>mysql_connect</function> ohne Argumente aufgerufen
     wird.
    </para>
    <para>
     Die Anfrage sollte nicht mit einem Semikolon enden.
    </para>
    <para>
     <function>Mysql_query</function> liefert TRUE (non-zero) oder
     FALSE, um anzuzeigen, ob die Anfrage erfolgreich war oder nicht.
     Wird im Erfolgsfall TRUE zurückgeliefert, dann sagt dies nichts
     über die Zahl veränderter oder gelieferter Datensätze aus.  Es
     ist durchaus möglich, dass eine Anfrage erfolgreich ist, ohne
     einen einzigen Datensatz zur verändern oder zu liefern.
    </para>
    <para>
     Die folgende Anfrage ist syntaktisch falsch, deshalb liefert
     <function>mysql_query</function> FALSE zurück:
     <example>
      <title><function>Mysql_query</function></title>
      <programlisting role="php">
&lt;?php
$result = mysql_query ("SELECT * WHERE 1=1")
    or die ("Invalid query");
?>
      </programlisting>
     </example>
    </para>
    <para>
     Die folgende Anfrage ist semantisch falsch, wenn
     <literal>my_col</literal> ist kein Feld in der Tabelle
     <literal>my_tbl</literal>. Deshalb schlägt
     <function>mysql_query</function> fehl und liefert FALSE:
     <example>
      <title><function>Mysql_query</function></title>
      <programlisting role="php">
&lt;?php
$result = mysql_query ("SELECT my_col FROM my_tbl")
    or die ("Invalid query");
?>
      </programlisting>
     </example>
    </para>
    <para>
     <function>Mysql_query</function> schlägt ebenso fehl und liefert
     FALSE, wenn Sie keinen Zugriff auf die Tabelle(n) haben.
    </para>
    <para>
     Angenommen eine Anfrage ist erfolgreich, dann können Sie mit
     <function>mysql_affected_rows</function> herausfinden wieviele
     Datensätze beeinflusst wurden (für DELETE, INSERT, REPLACE, oder
     UPDATE Anweisungen). Bei SELECT Anweisungen, liefert
     <function>mysql_query</function> eine Ergebnis-Kennung, die man
     mit <function>mysql_result</function> weiter verarbeiten kann.
     Wenn das Ergebnis nicht mehr gebraucht wird, können die belegten
     Resourcen mit <function>mysql_free_result</function> freigegeben
     werden.
    </para>
    <para>
     Siehe auch: <function>mysql_affected_rows</function>,
     <function>mysql_db_query</function>,
     <function>mysql_free_result</function>,
     <function>mysql_result</function>,
     <function>mysql_select_db</function> und
     <function>mysql_connect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-result">
   <refnamediv>
    <refname>mysql_result</refname>
    <refpurpose>Liefert Ergebnis</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_result</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter>Datensatz-Index</parameter></paramdef>
      <paramdef>mixed <parameter><optional>Feld</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>Mysql_result</function> liefert den Inhalt eines Feldes
     aus einem Anfrageergebnis. Das Argument
     <parameter>Feld</parameter> kann der Feldname, der Feldoffset ein
     Bezeichner in der Form 'Feldname.Tabellenname' sein. Wenn das
     Feld einen Alias besitzt ('select foo as bar from...') muss der
     Alias anstatt des Feldnamens verwendet werden.
    </para>
    <para>
     Wenn auf Anfrageergebnisse mit vielen Datensätzen zugegriffen
     werden soll, sollten Sie die Funktionen, die auf ganze Datensätze
     zugreifen, in Betracht ziehen (siehe unten). Diese Funktionen
     sind sehr viel schneller als
     <function>mysql_result</function>. Beachten Sie auch, dass die
     Angabe eines numerischen Offsets für das Feld sehr viel schneller
     ist als die übrigen möglichen Angaben.
    </para>
    <para>
     Aufrufe von <function>mysql_result</function> sollten nicht mit
     Aufruf anderen Funktion, die auch auf das Ergebnis zugreifen,
     verschachtelt werden.
    </para>
    <para>
     Empfohlende, leistungsfähigere Alternativen:
     <function>mysql_fetch_row</function>,
     <function>mysql_fetch_array</function> und
     <function>mysql_fetch_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-select-db">
   <refnamediv>
    <refname>mysql_select_db</refname>
    <refpurpose>Wählt eine Datenbank aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_select_db</function></funcdef>
      <paramdef>string <parameter>Datenbankname</parameter></paramdef>
      <paramdef>int <parameter><optional>Verbindungs-Kennung</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Rückgabewert: true im Erfolgsfall, false im Fehlerfall.
    </para>
    <para> 
     <function>Mysql_select_db</function> setzt die aktuelle Datenbank
     auf dem Server zu dem die Verbindung mir der übergegebenen
     Verbindungs-Kennung besteht.  Fehlt die Verbindungs-Kennung wird
     die aktive Verbindung genommen.  Wenn auch diese nicht existiert,
     wird weiter versucht die Verbindung aufzubauen, wie dies mit
     <function>mysql_connect</function> ohne Angabe von Argumenten
     geschehen würde.
    </para>
    <para>
     Jeder weitere Aufruf von <function>mysql_query</function> nutzt
     die aktive Verbindung.
    </para>
    <para> 
     Siehe auch: <function>mysql_connect</function>,
     <function>mysql_pconnect</function> und
     <function>mysql_query</function>.
    </para>
    <para>
     Für Rückwärtskompatibilität kann
     <function>mysql_selectdb</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-tablename">
   <refnamediv>
    <refname>mysql_tablename</refname>
    <refpurpose>Liefert den Namen einer Tabelle</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_tablename</function></funcdef>
      <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
      <paramdef>int <parameter>i</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     <function>Mysql_tablename</function> ermittelt aus einem
     Ergbenis, das von <function>mysql_list_tables</function>
     geliefert wurde sowie einem Index <parameter>i</parameter> den
     Namen der Tabelle.  Die Funktion
     <function>mysql_num_rows</function> kann verwendet werden, um die
     Anzahl der Tabellen im Erbebnis zu ermitteln.
     <example>
      <title><function>Mysql_tablename</function> Bespiel</title>
      <programlisting role="php">
&lt;?php 
mysql_connect ("localhost:3306");
$result = mysql_list_tables ("wisconsin");
$i = 0;
while ($i &lt; mysql_num_rows ($result)) {
    $tb_names[$i] = mysql_tablename ($result, $i);
    echo $tb_names[$i] . "&lt;BR>";
    $i++;
}
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
