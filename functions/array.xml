<!-- EN-Revision: 1.86 Maintainer: tom Status: ready -->
 <reference id="ref.array">
  <title>Array Funktionen</title>
  <titleabbrev>Arrays</titleabbrev>
  <partintro>
   <simpara>
    Diese Funktionen erlauben es, Arrays auf verschiedene Arten zu
    manipulieren bzw. mit ihnen zu interagieren. Arrays sind wichtig,
    um Gruppen von Variablen zu verwalten, zu bearbeiten, oder zu
    speichern.
   </simpara>
   <simpara>
    Es werden einfache und mehrdimensionale Arrays unterstützt, welche
    entweder vom Benutzer oder von einer anderen Funktion erstellt
    werden können. Es gibt bestimmte Datenbankfunktionen, welche die
    Ergebnisse aus Datenbankabfragen in Arrays speichern, und
    verschiedene andere Funktionen, die Arrays als Rückgabewerte
    haben.
   </simpara>
  <para>
   In der Sektion <link linkend="language.types.array">Arrays</link>
   finden Sie eine detailierte Erklärung, wie Arrays in PHP
   implementiert sind und wie sie benutzt werden.
  </para>
   <para>
    Siehe auch <function>is_array</function>,
    <function>explode</function>, <function>implode</function>,
    <function>split</function> und <function>join</function>.
   </para>
  </partintro>

  <refentry id="function.array">
   <refnamediv>
    <refname>array</refname>
    <refpurpose>
     Erstellt ein Array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array</function></funcdef>
      <paramdef>mixed 
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt ein den Parametern entsprechendes Array zurück. Mit dem
     <literal>=&gt;</literal> Operator können die Parameter indiziert werden.
    </para>
    <para>
     <note>
      <para>
       <function>array</function> ist keine richtige Funktion sondern ein 
       Sprachkonstrukt, das zur Erzeugung eines Wertefeldes genutzt wird.
      </para>
     </note>
    </para>
    <para>
     Die Syntax "Index =&gt; Werte", durch Kommas getrennt, definiert
     Index und Werte. Index kann vom Typ String oder numerisch sein.
     Wird der Index weggelassen, erstellt die Funktion automatisch
     einen numerischen Index, der bei 0 beginnt. Ist der Index als
     Integer-Wert angegeben, wird der nächste generierte Index der
     größte Integer Index + 1. Beachten Sie, dass wenn zwei identische
     Indexe definiert sind, der letzte den ersten überschreibt.
    </para>
    <para>
     Das folgende Beispiel zeigt wie man ein zweidimensionales Array 
     erstellt, wie man Schlüssel für assoziative Arrays festlegt, und 
     wie man numerische Indizes in normalen Arrays überspringt und 
     fortsetzt.
     <example>
      <title><function>array</function></title>
      <programlisting role="php">
$fruechte = array (
    "fruechte"  =&gt; array ("a"=&gt;"orange", "b"=&gt;"banane", "c"=&gt;"apfel"),
    "zahlen" =&gt; array (1, 2, 3, 4, 5, 6),
    "loecher"   =&gt; array ("erstes", 5 =&gt; "zweites", "drittes")
);
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Automatischer Index mit <function>array</function></title>
      <programlisting role="php">
$array = array( 1, 1, 1, 1,  1, 8=>1,  4=>1, 19, 3=>13);
print_r($array);
      </programlisting>
     </example>
     wird folgendes anzeigen: 
     <informalexample>
      <programlisting>
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
      </programlisting>
     </informalexample>
     Beachten Sie, dass Index '3' doppelt definiert ist, und den letzten 
     definierten Wert 13 behält. Index 4 wurde nach dem Index 8 definiert, 
     und der nächste generierte Index (Wert 19) ist 9, da der größte Index 
     8 war.
    </para>
    <para>
     Dieses Beispiel erstellt ein auf dem Index 1 basierendes Array.
     <example>
      <title>1-basierter Index mit <function>array</function></title>
      <programlisting role="php">
$erstesquartal  = array(1 => 'Januar', 'Februar', 'März');
print_r($erstesquartal);
      </programlisting>
     </example>
     wird folgendes ausgeben: 
     <informalexample>
      <programlisting>
Array 
(
    [1] => 'Januar'
    [2] => 'Februar'
    [3] => 'März'
)
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch: <function>list</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-count-values">
   <refnamediv>
    <refname>array_count_values</refname>
    <refpurpose>Zählt die Werte eines Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_count_values</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_count_values</function> gibt ein Array zurück, in
     dem die Werte des Arrays <parameter>input</parameter> als
     Schlüssel, und deren Anzahl als Werte angegeben sind.
    </para>
    <para>
     <example>
      <title><function>array_count_values</function></title>
      <programlisting role="php">
$array = array (1, "hello", 1, "world", "hello");
array_count_values ($array); // liefert array (1=&gt;2, "hello"=&gt;2, "world"=&gt;1)
      </programlisting>
     </example>     
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-diff">
   <refnamediv>
    <refname>array_diff</refname>
    <refpurpose>Ermittelt die Unterschiede von Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_diff</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional> ...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_diff</function> gibt ein Array mit allen Werten von 
     <parameter>array1</parameter>, welche in keinem der anderen Argumente 
     enthalten sind, zurück. Beachten Sie, dass Schlüssel erhalten bleiben.
    </para>
    <para>
     <example>
      <title><function>array_diff</function></title>
      <programlisting role="php">
$array1 = array ("a" =&gt; "grün", "rot", "blau");
$array2 = array ("b" =&gt; "grün", "gelb", "rot");
$result = array_diff ($array1, $array2);
      </programlisting>
     </example>
    </para>     
    <para>
     Dies speichert <literal>array("blau");</literal> in
     <varname>$result</varname>.  Mehrfache Vorkommen in $array1
     werden auf die gleiche Weise behandelt.
    </para>
    <para>
     Siehe auch <function>array_intersect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-filter">
   <refnamediv>
    <refname>array_filter</refname>
    <refpurpose>
     Filtert Elemente eines Arrays mittels einer Callback-Funktion
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_filter</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>callback</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_filter</function> gibt ein Array mit den mittels
     der Callback-Funktion gefilterten Elementen von
     <parameter>input</parameter> zurück. Ist
     <parameter>input</parameter> ein assoziatives Array, bleiben die
     Schlüssel erhalten.
    </para>
    <para>
     <example>
      <title><function>array_filter</function></title>
      <programlisting role="php">
function ungerade($var) {
    return ($var % 2 == 1);
}

function gerade($var) {
    return ($var % 2 == 0); 
}

$array1 = array ("a"=&gt;1, "b"=&gt;2, "c"=&gt;3, "d"=&gt;4, "e"=&gt;5);
$array2 = array (6, 7, 8, 9, 10, 11, 12);

$ungerade_arr = array_filter($array1, "ungerade");
$gerade_arr = array_filter($array2, "gerade");
      </programlisting>
     </example>
    </para>     
    <para>
     Dies speichert <literal>array ("a"=&gt;1, "c"=&gt;3,
     "e"=&gt;5);</literal> in <varname>$ungerade_arr</varname>, und
     <literal>array (6, 8, 10, 12);</literal> in
     <varname>$gerade_arr</varname>.
    </para>
    <para>
     Siehe auch <function>array_map</function>,
     <function>array_reduce</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-flip">
   <refnamediv>
    <refname>array_flip</refname>
    <refpurpose>
     Vertauscht Werte und Schlüssel in einem Array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_flip</function></funcdef>
      <paramdef>array <parameter>trans</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_flip</function> Gibt ein Array in umgekehrter
     Reihenfolge zurück, d.h. Schlüssel von
     <parameter>trans</parameter> werden Werte, und umgekehrt werden
     die Werte zu Schlüsseln. Beachten Sie, dass
     <function>array_flip</function> nur mit den Typen Integer und
     String arbeitet und eine Fehlermeldung ausgibt, wenn ein
     ungültiger Schlüssel oder Wert entdeckt wird (z.B. vom Typ Array,
     Double, Object, Boolean).
    </para>
    <para>
     Kommt ein Wert mehrmals vor, wird der letzte Schlüssel mit seinem
     Wert vertauscht, und alle anderen Schlüssel- Wertepaare gehen
     verloren.
    </para>
    <para>
     <function>array_flip</function> gibt im Fehlerfall 
     &false; zurück.
    </para>
    <para>
     <example>
      <title><function>array_flip</function> Beispiel</title>
      <programlisting role="php">
$trans = array_flip ($trans);
$original = strtr ($str, $trans);
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title><function>array_flip</function> Beispiel: Kollision</title>
      <programlisting role="php">
$trans = array ("a" => 1, "b" => 1, "c" => 2);
$trans = array_flip ($trans);
// nun enthält $trans : array(1 => "b", 2 => "c");
      </programlisting>
     </example>
    </para>
    </refsect1>
  </refentry>

  <refentry id="function.array-intersect">
   <refnamediv>
    <refname>array_intersect</refname>
    <refpurpose>Ermittelt die Schnittmenge von Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_intersect</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_intersect</function> gibt ein Array mit allen Werten
     von <parameter>array1</parameter>, die auch in allen anderen 
     Argumenten enthalten sind, zurück. Beachten Sie, dass die Schlüssel 
     erhalten bleiben. 
    </para>
    <para>
     <example>
      <title><function>array_intersect</function> Beispiel</title>
      <programlisting role="php">
$array1 = array ("a" =&gt; "grün", "rot", "blau");
$array2 = array ("b" =&gt; "grün", "gelb", "rot");
$result = array_intersect ($array1, $array2);
      </programlisting>
     </example>
    </para>     
    <para>
     Dies speichert <literal>array ("a" =&gt; "grün", "rot");</literal> in
     <varname>$result</varname>
    </para>
    <para>
     Siehe auch <function>array_diff</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-keys">
   <refnamediv>
    <refname>array_keys</refname>
    <refpurpose>Liefert alle Schlüssel eines Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_keys</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>mixed
       <parameter>
        <optional>search_value</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_keys</function> gibt die Schlüssel (numerisch und 
     String) des Arrays <parameter>input</parameter> zurück.
    </para>
    <para>
     Ist der optionale Parameter <parameter>search_value</parameter> 
     angegeben, werden nur die Schlüssel für diesen Wert zurückgegeben. 
     Andernfalls werden all Schlüssel von <parameter>input</parameter> 
     zurückgegeben.
    </para>
    <para>
     <example>
      <title><function>array_keys</function></title>
      <programlisting role="php">
$array = array (0 =&gt; 100, "farbe" =&gt; "rot");
array_keys ($array);       // liefert array (0, "farbe")

$array = array ("blau", "rot", "grün", "blau", "blau");
array_keys ($array, "blau");  //  liefert array (0, 3, 4) 

$array = array ("farbe" =&gt; array("blau", "rot", "grün"), "grösse" =&gt; array("klein", "mittel", "gross"));
array_keys ($array);  //  liefert array ("farbe", "grösse") 
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Diese Funktion wurde in PHP 4 eingeführt, nachstehend finden Sie eine 
      Implementierung für Benutzer von PHP 3.
      <example>
       <title>
	Implementierung von <function>array_keys</function> für
	Benutzer von PHP 3:
       </title>
       <programlisting role="php">
function array_keys ($arr, $term="") {
    $t = array();
    while (list($k,$v) = each($arr)) {
        if ($term &amp;&amp; $v != $term) {
            continue;
            $t[] = $k;
        }
        return $t;
    }
}
       </programlisting>
      </example>
     </para>
    </note>
    <para>
     Siehe auch <function>array_values</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-map">
   <refnamediv>
    <refname>array_map</refname>
    <refpurpose>
     Wendet eine Callback-Funktion auf die Elemente von Arrays an
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_map</function></funcdef>
      <paramdef>mixed <parameter>callback</parameter></paramdef>
      <paramdef>array <parameter>arr1</parameter></paramdef>
      <paramdef>array
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_map</function> wendet die Callback-Funktion auf
     alle Elemente von <parameter>arr1</parameter> an, und gibt ein
     Array mit den modifizierten Werten zurück.
    </para>
    <para>
     <example>
      <title><function>array_map</function></title>
      <programlisting role="php">
function cube($n) {
    return $n*$n*$n;
}

$a = array(1, 2, 3, 4, 5);
$b = array_map("cube", $a);
      </programlisting>
     </example>
    </para>
    <para>
     Dies speichert <literal>array (1, 8, 27, 64, 125);</literal> 
     in <varname>$b</varname>.     
    </para>
    <para>
     <example>
      <title>
       <function>array_map</function> - Verwendung mehrerer Arrays
      </title>
      <programlisting role="php">
function show_Spanish($n, $m) {
    return "Die Zahl $n heißt auf Spanisch $m";
}

function map_Spanish($n, $m) {
    return array ($n => $m);
}

$a = array(1, 2, 3, 4, 5);
$b = array("uno", "dos", "tres", "cuatro", "cinco");

$c = array_map("show_Spanish", $a, $b);

print_r($c);

// will output:
// Array
// (
//     [0] => Die Zahl 1 heißt auf Spanisch uno
//     [1] => Die Zahl 2 heißt auf Spanisch dos
//     [2] => Die Zahl 3 heißt auf Spanisch tres
//     [3] => Die Zahl 4 heißt auf Spanisch cuatro
//     [4] => Die Zahl 5 heißt auf Spanisch cinco
// )

$d = array_map("map_Spanish", $a , $b);

print_r($d);

// will output:
// Array
// (
//     [0] => Array
//         (
//             [1] => uno
//         )
// 
//     [1] => Array
//         (
//             [2] => dos
//         )
// 
//     [2] => Array
//         (
//             [3] => tres
//         )
// 
//     [3] => Array
//         (
//             [4] => cuatro
//         )
// 
//     [4] => Array
//         (
//             [5] => cinco
//         )
// 
// )
      </programlisting>
     </example>
    </para>
    <para>
     Bei Verwendung von zwei oder mehr Arrays sollten diese gewöhnlich
     die gleiche Länge besitzen, da die Callback-Funktion parallel auf
     die entsprechenden Elemente angewandt wird.  Haben die Arrays
     unterschiedliche Längen, wird das kürzeste um leere Elemente
     erweitert.
    </para>
    <para>
     Eine interessante Anwendung dieser Funktion ist die Konstruktion
     eines Arrays bestehend aus Arrays, was mit &null; als Name der
     Callback-Funktion leicht realisiert werden kann.
    </para>
    <para>
     <example>
      <title>
       <function>array_map</function> - Erstellen eines Arrays mit
       Arrays
      </title>
      <programlisting role="php">
$a = array(1, 2, 3, 4, 5);
$b = array("one", "two", "three", "four", "five");
$c = array("uno", "dos", "tres", "cuatro", "cinco");

$d = array_map(null, $a, $b, $c);
print_r($d);

// will output:
// Array
// (
//     [0] => Array
//         (
//             [0] => 1
//             [1] => one
//             [2] => uno
//         )
// 
//     [1] => Array
//         (
//             [0] => 2
//             [1] => two
//             [2] => dos
//         )
// 
//     [2] => Array
//         (
//             [0] => 3
//             [1] => three
//             [2] => tres
//         )
// 
//     [3] => Array
//         (
//             [0] => 4
//             [1] => four
//             [2] => cuatro
//         )
// 
//     [4] => Array
//         (
//             [0] => 5
//             [1] => five
//             [2] => cinco
//         )
// 
// )
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>array_filter</function> und
     <function>array_reduce</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-merge">
   <refnamediv>
    <refname>array_merge</refname>
    <refpurpose>Führt zwei oder mehr Arrays zusammen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_merge</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_merge</function> fügt die Elemente von zwei oder
     mehr Arrays zusammen, indem die Werte des einen an das Ende des
     anderen angehängt werden. Das daraus resultierende Array wird
     zurückgegeben.
    </para>
    <para>
     Haben die angegebenen Arrays die selben String-Schlüssel, dann
     wird der hintere Wert dieses Schlüssels den vorhergehenden
     überschreiben. Haben die Arrays den gleichen numerischen
     Schlüssel, dann wird der hintere Wert den vorhergehenden nicht
     überschreiben, sondern an den vorderen angehängt.
    </para>
    <para>
     <example>
      <title><function>array_merge</function></title>
      <programlisting role="php">
$array1 = array ("farbe" =&gt; "rot", 2, 4);
$array2 = array ("a", "b", "farbe" =&gt; "grün", "form" =&gt; "trapezoid", 4);
array_merge ($array1, $array2);
      </programlisting>
     </example>
    </para>
    <para>
     Das resultierende Array wird <literal>array("farbe" =&gt; "grün",
     2, 4, "a", "b", "form" =&gt; "trapezoid", 4)</literal>.
    </para>
    <para>
     Siehe auch <function>array_merge_recursive</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-merge-recursive">
   <refnamediv>
    <refname>array_merge_recursive</refname>
    <refpurpose>
     Führt zwei oder mehr Arrays rekursiv zusammen
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_merge_recursive</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_merge_recursive</function> fügt die Elemente von
     zwei oder mehr Arrays zusammen, so dass die Werte des einen
     Arrays an die des vorigen angehängt werden. Das daraus
     resultierende Array wird zurückgegeben.
    </para>
    <para>
     Haben die angegebenen Arrays die selben String-Schlüssel, dann
     wird der hintere Wert dieses Schlüssels den vorhergehenden
     überschreiben. Haben die Arrays den gleichen numerischen
     Schlüssel, dann wird der hintere Wert den vorhergehenden nicht
     überschreiben, sondern an den vorderen angehängt.
    </para>
    <para>
     <example>
      <title><function>array_merge_recursive</function></title>
      <programlisting role="php">
$ar1 = array ("color" =&gt; array ("favorite" =&gt; "red"), 5);
$ar2 = array (10, "color" =&gt; array ("favorite" =&gt; "green", "blue"));
$result = array_merge_recursive ($ar1, $ar2);
      </programlisting>
     </example>
    </para>
    <para>
     Resulting array will be <literal>array ("color" =&gt; array
     ("favorite" =&gt; array ("red", "green"), "blue"), 5,
     10)</literal>.
    </para>
    <para>
     See also <function>array_merge</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-multisort">
   <refnamediv>
    <refname>array_multisort</refname>
    <refpurpose>
     Sortiert mehrere oder multidimensionale Arrays
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>array_multisort</function></funcdef>
      <paramdef>array <parameter>ar1</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>arg</optional></parameter>
      </paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
      <paramdef>array
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_multisort</function> wird zum Sortieren von
     entweder mehreren Arrays auf einmal, oder eines
     multidimensionalen Arrays (entsprechend einer von mehreren
     Dimensionen) benutzt. Bei der Sortierung werden die
     Schlüsselassoziationen beibehalten.
    </para>
    <para>
     Die angegebenen Arrays werden als Spalten einer Tabelle
     behandelt, welche nach Reihen sortiert werden - ähnlich der SQL
     Klausel ORDER BY.  Das erste Array ist auch das erste in der
     Sortierreihenfolge. Die in diesem Array gleichen Zeilen (Werte)
     werden anhand des nächsten angegebenen Arrays sortiert, usw.
    </para>
    <para>
     Die Struktur der Argumente ist etwas ungewöhnlich, aber
     flexibel. Das allererste Argument muss ein Array sein. Die
     nachfolgenden Argumente können entweder ein Array oder eines der
     folgenden Sortierflags sein.
    </para>
    <para>
     Flags für Sortierreihenfolge:
     <itemizedlist>
      <listitem>
       <simpara>
	SORT_ASC - sortiere in aufsteigender Reihenfolge
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	SORT_DESC - sortiere in absteigender Reihenfolge
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Flags für Sortiertypen:
     <itemizedlist>
      <listitem>
       <simpara>SORT_REGULAR - vergleiche Felder normal</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_NUMERIC - vergleiche Felder numerisch</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_STRING - vergleiche Felder als Strings</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Es kann nur ein Sortierflag des selben Typs nach jedem Array
     spezifiziert werden. Sortierflags nach einem Array Argument
     gelten nur für dieses Array, und werden vor jedem neuen Array
     Argument zu den Defaultflags SORT_ASC und SORT_REGULAR
     zurückgesetzt.
    </para>
    <para>
     Liefert bei Erfolg &true;, und im Fehlerfall 
     &false;.
    </para>
    <para>
     <example>
      <title>Sortieren mehrerer Arrays</title>
      <programlisting role="php">
$ar1 = array ("10", 100, 100, "a");
$ar2 = array (1, 3, "2", 1);
array_multisort ($ar1, $ar2);
      </programlisting>
     </example>
    </para>
    <para>
     In diesem Beispiel enthält das erste Array nach dem Sortieren 10,
     "a", 100, 100. Das zweite Array wird 1, 1, "2", 3 enthalten. Die
     Einträge des zweiten Arrays, welche den identischen Einträgen des
     ersten Arrays entsprechen (100 und 100) wurden ebenfalls
     sortiert.
    </para>
    <para>
     <example>
      <title>Sortieren eines mehrdimensionalen Arrays</title>
      <programlisting role="php">
$ar = array (array ("10", 100, 100, "a"), array (1, 3, "2", 1));
array_multisort ($ar[0], SORT_ASC, SORT_STRING, 
                 $ar[1], SORT_NUMERIC, SORT_DESC);
      </programlisting>
     </example>
    </para>
    <para>
     In diesem Beispiel enthält das erste Array nach dem Sortieren 10,
     100, 100, "a" (wurde als Strings in aufsteigender Reihenfolge
     sortiert), und das zweite enthält 1, 3, "2", 1 (numerisch und
     absteigender Reihenfolge sortiert).
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-pad">
   <refnamediv>
    <refname>array_pad</refname>
    <refpurpose>
     Vergrößert ein Array auf die spezifizierte Länge mit einem Wert
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_pad</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>int <parameter>pad_size</parameter></paramdef>
      <paramdef>mixed <parameter>pad_value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_pad</function> liefert eine Kopie von
     <parameter>input</parameter>, welche auf die von
     <parameter>pad_size</parameter> spezifizierte Größe mit dem Wert
     <parameter>pad_value</parameter> erweitert wurde. Ist der
     Parameter <parameter>pad_size</parameter> positiv, wird das Array
     rechts erweitert, ist er negativ, dann erfolgt die Erweiterung
     links. Ist der absolute Wert von <parameter>pad_size</parameter>
     kleiner oder gleich der Länge von <parameter>input</parameter>,
     erfolgt keine Erweiterung.
    </para>
    <para>
     <example>
      <title><function>array_pad</function></title>
      <programlisting role="php">
$input = array (12, 10, 9);

$result = array_pad ($input, 5, 0);
// result is array (12, 10, 9, 0, 0)

$result = array_pad ($input, -7, -1);
// result is array (-1, -1, -1, -1, 12, 10, 9)

$result = array_pad ($input, 2, "noop");
// not padded
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-pop">
   <refnamediv>
    <refname>array_pop</refname>
    <refpurpose>Liefert das letzte Element eines Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_pop</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_pop</function> liefert den letzten Wert von
     <parameter>array</parameter>, und verkürzt
     <parameter>array</parameter> um ein Element. Ist
     <parameter>array</parameter> leer (oder kein Array), wird &null;
     zurückgegeben.
    </para>
    <para>
     <example>
      <title><function>array_pop</function></title>
      <programlisting role="php">
$stack  = array ("Orange", "Apfel", "Himbeere");
$frucht = array_pop ($stack);
      </programlisting>
     </example>
    </para>
    <para>
     Danach hat <varname>$stack</varname> nur 2 Elemente:
     "Orange" und "Apfel", und <varname>$frucht</varname> enthält 
     "Himbeere".
    </para>
    <para>
     Seihe auch <function>array_push</function>,
     <function>array_shift</function>, und
     <function>array_unshift</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-push">
   <refnamediv>
    <refname>array_push</refname>
    <refpurpose>
     Fügt ein oder mehr Elemente an das Ende eines Arrays
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>array_push</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_push</function> behandelt
     <parameter>array</parameter> als Stapel (Stack), und fügt die
     übergebenen Variablen an das Ende von
     <parameter>array</parameter>.  Die Länge von
     <parameter>array</parameter> wird dabei um die Anzahl der
     angefügten Variablen erhöht. Dies hat den selben Effekt wie:
     <programlisting role="php">
$array[] = $var;
     </programlisting>
     für jede Variable <parameter>var</parameter> wiederholt.
    </para>
    <para>
     Liefert die neue Anzahl Elemente des Arrays.
    </para>
    <para>
     <example>
      <title><function>array_push</function></title>
      <programlisting role="php">
$stack = array (1, 2);
array_push ($stack, "+", 3);
      </programlisting>
     </example>
    </para>
    <para>
     Nach diesem Beispiel hat <varname>$stack</varname> 4 Elemente:
     1, 2, "+", and 3.
    </para>
    <para>
     Siehe auch: <function>array_pop</function>,
     <function>array_shift</function>, und
     <function>array_unshift</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-rand">
   <refnamediv>
    <refname>array_rand</refname>
    <refpurpose>
     Liefert einen oder mehrere zufällige Einträge eines Arrays
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_rand</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>int
       <parameter><optional>num_req</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_rand</function> ist ziemlich nützlich, wenn Sie
     einen oder mehrere zufällige Einträge eines Arrays auswählen
     möchten. Die Funktion übernimmt das Array
     <parameter>input</parameter>, und ein optionales Argument
     <parameter>num_req</parameter>, welches die gewünschte Anzahl
     Einträge spezifiziert. Ist <parameter>num_req</parameter> nicht
     angegeben, wird ein Defaultwert von 1 angenommen.
    </para>
    <para>
     Wenn Sie nur einen Eintrag auswählen, liefert
     <function>array_rand</function> den Schlüssel eines zufälligen
     Eintrages.  Andernfalls wird ein Array mit den Schlüsseln der
     zufälligen Einträge zurückgegeben. Dies hat den Zweck, dass Sie
     zufällige Schlüssel und auch Werte aus dem Array auswählen
     können.
    </para>
    <para>
     Vergessen Sie bitte nicht, mittels <function>srand</function> den
     Startwert für den Zufallsgenerator festzulegen.
    </para>
    <para>
     <example>
      <title><function>array_rand</function></title>
      <programlisting role="php">
srand ((double) microtime() * 10000000);
$input = array ("Neo", "Morpheus", "Trinity", "Cypher", "Tank");
$rand_keys = array_rand ($input, 2);
print $input[$rand_keys[0]]."\n";
print $input[$rand_keys[1]]."\n";
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.array-reverse">
   <refnamediv>
    <refname>array_reverse</refname>
    <refpurpose>
     Liefert ein Array mit umgekehrter Reihenfolge der Elemente
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_reverse</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>bool 
       <parameter><optional>preserve_keys</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_reverse</function> liefert ein Array mit der
     umgekehrten Reihenfolge der Elemente von
     <parameter>array</parameter>. Ist der optionale Parameter
     <parameter>preserve_keys</parameter> &true;, bleibt die
     Reihenfolge der Schlüssel aufrecht.
    </para>
    <para>
     <example>
      <title><function>array_reverse</function></title>
      <programlisting role="php">
$input = array ("php", 4.0, array ("green", "red"));
$result = array_reverse ($input);
$result_keyed = array_reverse ($input, TRUE);
      </programlisting>
     </example>
    </para>
    <para>
     Dies speichert in <varname>$result</varname> und
     <varname>$result_keyed</varname> <literal>array(array ("green",
     "red"), 4.0, "php")</literal>, allerdings ist
     <varname>$result_keyed[0]</varname> noch immer
     <literal>"php"</literal>.
    </para>
    <note>
     <para>
      Der zweite Parameter wurde in PHP 4.0.3 hizugefügt.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.array-reduce">
   <refnamediv>
    <refname>array_reduce</refname>
    <refpurpose>
     Iterative Reduktion eines Arrays zu einem Wert mittels einer
     Callback Funktion
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_reduce</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>mixed <parameter>callback</parameter></paramdef>
      <paramdef>int
       <parameter><optional>initial</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_reduce</function> wendet die
     <parameter>callback</parameter> Funktion iterativ bei den
     Elementen des Arrays <parameter>input</parameter> so an, dass das
     Array auf einen einzigen Wert reduziert wird. Ist der optionale
     Parameter <parameter>intial</parameter> angegeben, wird er am
     Beginn des Prozesses, benutzt oder als Resultat verwendet, sollte
     das Array leer sein.
    </para>
    <para>
     <example>
      <title><function>array_reduce</function></title>
      <programlisting role="php">
function rsum($v, $w) {
    $v += $w;
        return $v;
}

function rmul($v, $w) {
    $v *= $w;
        return $v;
}

$a = array(1, 2, 3, 4, 5);
$x = array();
$b = array_reduce($a, "rsum");
$c = array_reduce($a, "rmul", 10);
$d = array_reduce($x, "rsum", 1);
      </programlisting>
     </example>
    </para>
    <para>
     Hier enthält <varname>$b</varname> <literal>15</literal>, 
     <varname>$c</varname> <literal>1200</literal> (= 1*2*3*4*5*10), 
     und <varname>$d</varname> enthält <literal>1</literal>.
    </para>
    <para>
     Siehe auch <function>array_filter</function>,
     <function>array_map</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-shift">
   <refnamediv>
    <refname>array_shift</refname>
    <refpurpose>
     Liefert ein Element vom Beginn eines Arrays
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_shift</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_shift</function> liefert den ersten Wert von
     <parameter>array</parameter>, verschiebt die anderen Werte
     hinunter, und verkürzt <parameter>array</parameter> um ein
     Element.  Ist <parameter>array</parameter> leer (oder kein
     Array), wird &null; zurückgegeben.
    </para>
    <para>
     <example>
      <title><function>array_shift</function></title>
      <programlisting role="php">
$args = array ("-v", "-f");
$opt = array_shift ($args);
      </programlisting>
     </example>
    </para>
    <para>
     Hier enthält <varname>$args</varname> noch das Element "-f", 
     und <varname>$opt</varname> enthält "-v".
    </para>
    <para>
     Siehe auch <function>array_unshift</function>,
     <function>array_push</function>, and
     <function>array_pop</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-slice">
   <refnamediv>
    <refname>array_slice</refname>
    <refpurpose>Extrahiert einen Ausschnitt eines Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_slice</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int <parameter>offset</parameter></paramdef>
      <paramdef>int
       <parameter>
        <optional>length</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_slice</function> liefert eine mittels 
     <parameter>offset</parameter> und <parameter>length</parameter> 
     spezifizierte Sequenz von Elementen des Arrays 
     <parameter>array</parameter> 
    </para>
    <para>
     Ist <parameter>offset</parameter> positiv, beginnt die Sequenz bei 
     diesem Offset in dem <parameter>array</parameter>. Ist 
     <parameter>offset</parameter> negativ, beginnt die Sequenz 
     <parameter>offset</parameter> Elemente vor dem Ende von 
     <parameter>array</parameter>.
    </para>
    <para>
     Ist <parameter>length</parameter> positiv, enthält die Sequenz
     genauso viele Elemente. Ist <parameter>length</parameter>
     negativ, enthält die Sequenz alle Elemente des Arrays von
     <parameter>offset</parameter> bis <parameter>length</parameter>
     Elemente vor dem Ende des Arrays. Ist
     <parameter>length</parameter> nicht angegeben, enthält die
     Sequenz alle Elemente von <parameter>offset</parameter> bis zum
     Ende von <parameter>array</parameter>.
    </para>
    <para>
     <example>
      <title><function>array_slice</function></title>
      <programlisting role="php">
$input = array ("a", "b", "c", "d", "e");

$output = array_slice ($input, 2);      // liefert "c", "d", and "e"
$output = array_slice ($input, 2, -1);  // liefert "c", "d"
$output = array_slice ($input, -2, 1);  // liefert "d"
$output = array_slice ($input, 0, 3);   // liefert "a", "b", and "c"
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>array_splice</function>.
    </para>     
   </refsect1>
  </refentry>

  <refentry id="function.array-splice">
   <refnamediv>
    <refname>array_splice</refname>
    <refpurpose>
     Entfernt einen Teil eines Arrays und ersetzt ihn durch etwas
     anderes
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_splice</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>int <parameter>offset</parameter></paramdef>
      <paramdef>int
       <parameter><optional>length</optional></parameter>
      </paramdef>
      <paramdef>array
       <parameter>
        <optional>replacement</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_splice</function> entfernt die durch
     <parameter>offset</parameter> und <parameter>length</parameter>
     angegebenen Elemente des Arrays <parameter>input</parameter>, und
     ersetzt diese durch die Elemente des Arrays
     <parameter>replacement</parameter>, wenn angegeben.
    </para>
    <para>
     Ist <parameter>offset</parameter> positiv, beginnt der zu
     entfernende Bereich bei diesem Offset vom Anfang des Arrays
     <parameter>input</parameter>. Ist <parameter>offset</parameter>
     negativ, beginnt der zu entfernende Bereich
     <parameter>offset</parameter> Elemente vor dem Ende des Arrays
     <parameter>input</parameter>.
    </para>
    <para>
     Ist <parameter>length</parameter> nicht angegeben, wird alles von
     <parameter>offset</parameter> bis zum Ende des Arrays
     entfernt. Ist <parameter>length</parameter> positiv, wird die
     angegebene Anzahl Elemente entfernt. Ist
     <parameter>length</parameter> negativ, dann wird der Bereich von
     <parameter>length</parameter> Elementen vor dem Ende, bis zum
     Ende des Arrays entfernt. Tipp: Um alles von
     <parameter>offset</parameter> bis zum Ende des Arrays zu
     entfernen wenn <parameter>replacement</parameter> ebenfalls
     angegeben ist, verwenden Sie <literal>count($input)</literal> als
     <parameter>length</parameter>.
    </para>
    <para>
     Ist das Array <parameter>replacement</parameter> angegeben,
     werden die entfernten Elemente durch die Elemente dieses Arrays
     ersetzt. Sind <parameter>offset</parameter> und
     <parameter>length</parameter> so angegeben dass nichts entfernt
     wird, werden die Elemente von <parameter>replacement</parameter>
     an der von <parameter>offset</parameter> spezifizierten Stelle
     eingefügt. Tip: Soll die Ersetzung durch nur ein Element erfolgen
     ist es nicht nötig ein Array zu anzugeben es sei denn, dieses
     Element ist selbst ein Array.
    </para>
    <para>
     Hier einige Entsprechungen:
     <programlisting>
array_push ($input, $x, $y)     array_splice ($input, count ($input), 0, 
                                             array ($x, $y))
array_pop ($input)              array_splice ($input, -1)
array_shift ($input)            array_splice ($input, 0, 1)
array_unshift ($input, $x, $y)  array_splice ($input, 0, 0, array ($x, $y))
$a[$x] = $y                     array_splice ($input, $x, 1, $y)
     </programlisting>
    </para>
    <para>
     Returns the array consisting of removed elements.
    </para>
    <para>
     <example>
      <title><function>array_splice</function> Beispiele</title>
      <programlisting role="php">
$input = array ("rot", "grün", "blau", "gelb");
array_splice ($input, 2);
// $input ist nun array ("rot", "grün")

$input = array ("rot", "grün", "blau", "gelb");
array_splice ($input, 1, -1);
// $input ist nun array ("rot", "gelb")

$input = array ("rot", "grün", "blau", "gelb");
array_splice ($input, 1, count($input), "orange");  
// $input ist nun array ("rot", "orange")

$input = array ("rot", "grün", "blau", "gelb");
array_splice ($input, -1, 1, array("schwarz", "braun")); 
// $input ist nun array ("rot", "grün", "blau", "schwarz", "braun")
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>array_slice</function>.
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.array-sum">
   <refnamediv>
    <refname>array_sum</refname>
    <refpurpose>
     Liefert die Summe der Werte in einem Array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_sum</function></funcdef>
      <paramdef>array <parameter>arr</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_sum</function> liefert die Summe der Werte eines 
     Arrays als Integer oder Float.
    </para>
    <para>
     <example>
      <title><function>array_sum</function></title>
      <programlisting role="php">
$a = array(2,4,6,8);
echo "sum(a) = ".array_sum($a)."\n";
// Ausgabe: sum(a) = 20

$b = array("a"=>1.2,"b"=>2.3,"c"=>3.4);
echo "sum(b) = ".array_sum($b)."\n";
// Ausgabe: sum(b) = 6.9
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-unique">
   <refnamediv>
    <refname>array_unique</refname>
    <refpurpose>Entfernt doppelte Werte aus einem Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_unique</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_unique</function> nimmt
     <parameter>array</parameter> und gibt ein neues Array zurück, aus
     dem alle doppelten Einträge entfernt wurden.
    </para>
    <para>
     Beachten Sie, dass Schlüssel erhalten bleiben.
     <function>array_unique</function> erhält den ersten gefundenen
     Schlüssel, für jeden Wert, und ignoriert alle folgenden
     Schlüssel.
    </para>
    <para>
     <example>
      <title><function>array_unique</function> example</title>
      <programlisting role="php">
$input = array ("a" =&gt; "grün", "rot", "b" =&gt; "grün", "blau", "rot");
$result = array_unique ($input);
print_r($result);
// this will output :
//Array
//(
//    [a] => grün
//    [0] => rot
//    [1] => blau
//)
      </programlisting>
     </example>
    </para>
    <para>
     Beachten Sie, dass <function>array_unique</function> den Typ des
     Wertes berücksichtigt. Dies ist normalerweise nicht so wichtig,
     außer wenn Zahlen verglichen werden, welche unterschiedlichen
     Typs sein können.  Dies könnte zu vewirrenden Ergebnissen führen:
    </para>
    <para>
     <example>
      <title><function>array_unique</function> und Typen</title>
      <programlisting role="php">
$input = array (4,"3",3,"4",4,4);
$result = array_unique ($input);
print_r($result);
// Ausgabe :
//Array
//(
//  [0] => 3
//  [1] => 3
//  [2] => 4
//  [3] => 4
//)
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-unshift">
   <refnamediv>
    <refname>array_unshift</refname>
    <refpurpose>
     Fügt ein oder mehr Elemente am Anfang eines Arrays ein
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>array_unshift</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>mixed
       <parameter>
        <optional>...</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_unshift</function> fügt die übergebenen Elemente
     am Anfang von <parameter>array</parameter> ein. Beachten Sie,
     dass die Liste von Elementen als Ganzes eingefügt wird, sodass
     die eingefügten Elemente die selbe Reihenfolge haben.
    </para>
    <para>
     Diese Funktion gibt die neue Anzahl der in
     <parameter>array</parameter> enthaltenen Elemente zurück.
    </para>
    <para>
     <example>
      <title><function>array_unshift</function></title>
      <programlisting role="php">
$queue = array ("p1", "p3");
array_unshift ($queue, "p4", "p5", "p6");
      </programlisting>
     </example>
    </para>
    <para>
     Als Ergebnis enthält <varname>$queue</varname> nun 5
     Elemente: "p4", "p5", "p6", "p1", and "p3".
    </para>
    <para>
     Siehe auch <function>array_shift</function>,
     <function>array_push</function>, und
     <function>array_pop</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-values">
   <refnamediv>
    <refname>array_values</refname>
    <refpurpose>Liefert alle Werte eines Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_values</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_values</function> liefert alle Werte des Arrays 
     <parameter>input</parameter>.
    </para>
    <para>
     <example>
      <title><function>array_values</function></title>
      <programlisting role="php">
$array = array ("size" =&gt; "XL", "color" =&gt; "gold");
array_values ($array);    // Liefert array ("XL", "gold")
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Diese Funktion wurde in PHP 4 hinzugefügt, nachstehend findet
      sich eine Implementation für Benutzer von PHP 3.
      <example>
       <title>
	Implementation von <function>array_values</function> für PHP 3
	Benutzer
       </title>
       <programlisting role="php">
function array_values ($arr) {
    $t = array();
    while (list($k, $v) = each ($arr)) {
        $t[] = $v;
    }
    return $t;
}
       </programlisting>
      </example>
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.array-walk">
   <refnamediv>
    <refname>array_walk</refname>
    <refpurpose>
     Wendet eine Benutzerfunktion an jedem Element eines Arrays an
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>array_walk</function></funcdef>
      <paramdef>array <parameter>arr</parameter></paramdef>
      <paramdef>string <parameter>func</parameter></paramdef>
      <paramdef>mixed <parameter>userdata</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Wendet die mittels <parameter>func</parameter> angegebene
     Benutzerfunktion für jedes Element von <parameter>arr</parameter>
     an. <parameter>func</parameter> wird der Wert als erster, und der
     Schlüssel als zweiter Parameter übergeben. Sofern angegeben, wird
     <parameter>userdata</parameter>, als dritter Parameter an die
     Funktion <parameter>func</parameter> übergeben.
     <parameter>func</parameter> muss eine vom Benutzer definierte
     Funktion sein, und nicht eine native PHP Funktion. Deshalb können
     Sie <function>array_walk</function> nicht direkt mit
     <function>str2lower</function> benutzen, sondern müssen erst eine
     eigene Funktion damit erstellen, und diese Funktion als Argument
     übergeben.
    </simpara>
    <simpara>
     Sollte <parameter>func</parameter> mehr als zwei oder drei
     Argumente verlangen, wird - abhängig von
     <parameter>userdata</parameter> - bei jedem Aufruf von
     <parameter>func</parameter> seitens
     <function>array_walk</function> eine Warnmeldung generiert. Diese
     Warnmeldungen können unterdrückt werden, indem man dem
     Funktionsaufruf von <function>array_walk</function> ein '@'
     Zeichen voranstellt, oder mittels der Verwendung von
     <function>error_reporting</function>.
    </simpara>
    <note>
     <para>
      Wenn <parameter>func</parameter> mit den Werten des Arrays
      direkt arbeiten soll, geben Sie an, dass der erste Parameter von
      <parameter>func</parameter> als Referenz übergeben werden muss.
      Dann werden alle Änderungen an diesen Elementen direkt in dem
      selbst durchgeführt.
     </para>
    </note>
    <note>
     <para>
      Die Übergabe des Schlüssels und von
      <parameter>userdata</parameter> an <parameter>func</parameter>
      wurde mit PHP 4.0 eingeführt.
     </para>
     <para>
      In PHP 4 muss <function>reset</function> aufgerufen werden, da
      <function>array_walk</function> den internen Zeiger nicht
      selbsttätig wieder auf das erste Element zurücksetzt.
     </para>
    </note>
    <para>
     <example>
      <title><function>array_walk</function></title>
      <programlisting role="php">
$fruits = array ("d"=&gt;"Zitrone", "a"=&gt;"Orange", "b"=&gt;"Banane", "c"=&gt;"Apfel");

function test_alter (&amp;$item1, $key, $prefix) {
    $item1 = "$prefix: $item1";
}

function test_print ($item2, $key) {
    echo "$key. $item2&lt;br&gt;\n";
}

array_walk ($fruits, 'test_print');
reset ($fruits);
array_walk ($fruits, 'test_alter', 'fruit');
reset ($fruits);
array_walk ($fruits, 'test_print');
      </programlisting>
     </example>
    </para>
    <simpara>
     Siehe auch <function>each</function> und
     <function>list</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.arsort">
   <refnamediv>
    <refname>arsort</refname>
    <refpurpose>
     Sortiert ein Array in umgekehrter Reihenfolge und behält die
     Verbindung zum Index
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>arsort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>sort_flags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion sortiert ein Array so, dass der Zusammenhang zwischen 
     den Indizes und den entsprechenden Arrayelementen erhalten bleibt. 
     Dies wird hauptsächlich bei assoziativen Arrays verwendet, bei denen 
     die aktuelle Reihenfolge der Elemente bedeutend ist.
     <example>
      <title><function>arsort</function></title>
      <programlisting role="php">
$fruits = array ("d"=&gt;"Zitrone", "a"=&gt;"Orange", "b"=&gt;"Banane", "c"=&gt;"Apfel");
arsort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "$key = $val\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel würde folgendes ausgeben:
    </para>
    <para>
     <informalexample>
      <programlisting>
fruits[a] = Zitrone
fruits[d] = Orange
fruits[b] = Banane
fruits[c] = Apfel
      </programlisting>
     </informalexample>
    </para>
    <para>
     Die Früchte wurden in umgekehrter alphabetischer Reihenfolge
     sortiert, und die Zuordnung zwischen Index und Element blieb
     beibehalten.
    </para>
    <para>
     Sie können das Verhalten der Sortierung mittels dem optionalen
     Parameter <parameter>sort_flags</parameter> beeinflussen, für
     Details siehe <function>sort</function>.
    </para>
    <para>
     Siehe auch: <function>asort</function>,
     <function>rsort</function>, <function>ksort</function>, und
     <function>sort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.asort">
   <refnamediv>
    <refname>asort</refname>
    <refpurpose>
     Sortiert ein Array und behält die Indexverbindungen
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>asort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>sort_flags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion sortiert ein Array so, dass der Zusammenhang
     zwischen den Indizes und den entsprechenden Arrayelementen
     erhalten bleibt.  Dies wird hauptsächlich bei assoziativen Arrays
     verwendet, bei denen die aktuelle Reihenfolge der Elemente
     bedeutend ist.
     <example>
      <title><function>asort</function> example</title>
      <programlisting role="php">
$fruits = array ("d"=&gt;"Zitrone", "a"=&gt;"Orange", "b"=&gt;"Banane", "c"=&gt;"Apfel");
asort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "$key = $val\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel würde folgendes ausgeben:
    </para>
    <para>
     <informalexample>
      <programlisting>
fruits[c] = Apfel
fruits[b] = Banane
fruits[d] = Orange
fruits[a] = Zitrone
      </programlisting>
     </informalexample>
    </para>
    <para>
     Die Früchte wurden alphabetisch sortiert, und die Zuordnung
     zwischen Index und Element blieb beibehalten
    </para>
    <para>
     Sie können das Verhalten der Sortierung mittels dem optionalen
     Parameter <parameter>sort_flags</parameter> beeinflussen, für
     Details siehe <function>sort</function>.
    </para>
    <para>
     Siehe auch <function>arsort</function>,
     <function>rsort</function>, <function>ksort</function>, und
     <function>sort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.compact">
   <refnamediv>
    <refname>compact</refname>
    <refpurpose>
     Erstellt ein Array mit Variablen und deren Werten
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>compact</function></funcdef>
      <paramdef>mixed <parameter>varname</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>compact</function> übernimmt eine variable Anzahl von
     Parametern. Jeder Parameter kann entweder ein String mit einem
     Variablennamen, oder ein Array mit Variablennamen sein. Dieses
     Array kann auch andere Arrays mit Variablennamen enthalten;
     <function>compact</function> behandelt sie rekursiv.
    </para>
    <para>
     Für alle diese sucht <function>compact</function> nach einer
     Variablen in der aktuellen Symboltabelle, und fügt diese dem
     zurückzugebenden Array hinzu, wobei der Variablenname als
     Schlüssel, und der Inhalt der Variablen als Wert gespeichert
     wird. Kurz, diese Funktion tut das Gegenteil von
     <function>extract</function>. Sie gibt ein Array mit allen
     Variablen zurück.
    </para>
    <para>
     Strings, welche nicht gesetzt sind, werden einfach ignoriert.
    </para>
    <para>
     <example>
      <title><function>compact</function></title>
      <programlisting role="php">
$city = "San Francisco";
$state = "CA";
$event = "SIGGRAPH";

$location_vars = array ("city", "state");

$result = compact ("event", "nothing_here", $location_vars);
      </programlisting>
      <para>
       Hier wird <literal>array ("event" =&gt; "SIGGRAPH", "city"
       =&gt; "San Francisco", "state" =&gt; "CA")</literal> in
       <varname>$result</varname> gespeichert.
      </para>
     </example>
    </para>
    <para>
     Siehe auch <function>extract</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.count">
   <refnamediv>
    <refname>count</refname>
    <refpurpose>Zählt die Elemente einer Variable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>count</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert die Anzahl von Elementen in <parameter>var</parameter>,
     welche typischerweise ein Array ist (da alles andere ein Element
     enthält).
    </para>
    <para>
     Gibt 1 zurück, wenn die Variable kein Array ist.
    </para>
    <para>
     Gibt 0 zurück, wenn die Variable nicht gesetzt, oder ein leeres
     Array ist.
     <warning>
      <para>
       <function>count</function> kann 0 zurückgeben wenn die Variable 
       nicht gesetzt ist, aber sie könnte ebenfalls 0 zurückgeben, wenn 
       eine Variable als leeres Array initialisiert wurde. Verwenden Sie 
       <function>isset</function> um zu testen, ob eine Variable gesetzt 
       ist.
      </para>
     </warning>
    </para>
    <para>
     In der Sektion <link linkend="language.types.array">Arrays</link>
     finden Sie eine detailierte Erklärung, wie Arrays in PHP
     implementiert sind und wie sie benutzt werden.
    </para>
    <para>
     <example>
      <title><function>count</function></title>
      <programlisting role="php">
$a[0] = 1; 
$a[1] = 3; 
$a[2] = 5; 
$result = count ($a);
//$result == 3

$b[0] = 7;
$b[5] = 9;
$b[10] = 11;
$result = count ($b);
// $result == 3;
      </programlisting>
     </example>
    </para>
    <note>
     <para>
     Die Funktion <function>sizeof</function> ist ein Alias für
     <function>count</function>.
     </para>
    </note>
    <para>
     Siehe auch: <function>sizeof</function>,
     <function>isset</function> und
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.current">
   <refnamediv>
    <refname>current</refname>
    <refpurpose>Liefert das aktuelle Element eines Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>current</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Jedes Array hat einen internen Zeiger auf sein "aktuelles"
     Element, welcher auf das erste in das Array eingefügte Element
     initialisiert wird.
    </para>
    <para>
     Die Funktion <function>current</function> liefert das Array
     Element, auf das gerade vom internen Zeiger gezeigt wird. Sie
     bewegt den Zeiger in keinster Weise. Zeigt der interne Zeiger
     hinter das Ende der Elementenliste, gibt
     <function>current</function> &false; zurück.
     <warning>
      <para> 
       Enthält das Array leere Elemente (0 oder "", den leeren
       String), gibt diese Funktion auch für diese Elemente &false;
       zurück. Das macht es unmöglich, unter Verwendung von
       <function>current</function> herauszufinden, ob das wirklich am
       Ende der Liste sind. Um ein Array, das leere Elemente enthalten
       könnte richtig durchzugehen, verwenden Sie die Funktion
       <function>each</function>.
      </para>
     </warning>
    </para>
    <para>
     Siehe auch: <function>end</function>, <function>next</function>,
     <function>prev</function> und <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.each">
   <refnamediv>
    <refname>each</refname> 
    <refpurpose>
     Liefert das nächste Paar (Schlüssel und Wert) eines Arrays
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>each</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert das aktuelle Schlüssel- Wertepaar des Arrays
     <parameter>array</parameter>, und erhöht den Array Cursor. Dieses
     Paar wird als Array mit 4 Elementen zurückgegeben, und zwar mit
     den Schlüsseln <emphasis>0</emphasis>, <emphasis>1</emphasis>,
     <emphasis>key</emphasis>, and <emphasis>value</emphasis>. Die
     Elemente <emphasis>0</emphasis> und <emphasis>key</emphasis>
     enthalten den Namen des Schlüssels, <emphasis>1</emphasis> and
     <emphasis>value</emphasis> den Wert.
    </para>
    <para>
     Zeigt der interne Zeiger hinter das Ende der Array-Inhalte, gibt
     <function>each</function> &false; zurück.
    </para>
    <para>
     <example>
      <title><function>each</function> Beispiele</title>
      <programlisting role="php">
$foo = array ("bob", "fred", "jussi", "jouni", "egon", "marliese");
$bar = each ($foo);
      </programlisting>
      <para>
       <varname>$bar</varname> enthält nun die folgenden Schlüssel/Wert
       Paare:
       <itemizedlist spacing="compact">
        <listitem><simpara>0 =&gt; 0</simpara></listitem>
        <listitem><simpara>1 =&gt; 'bob'</simpara></listitem>
        <listitem><simpara>key =&gt; 0</simpara></listitem>
        <listitem><simpara>value =&gt; 'bob'</simpara></listitem>
       </itemizedlist>
       <programlisting role="php">
$foo = array ("Robert" =&gt; "Bob", "Seppo" =&gt; "Sepi");
$bar = each ($foo);
       </programlisting>
      </para>
      <para>
       <varname>$bar</varname> enthält nun die folgenden Schlüssel/Wert
       Paare:
       <itemizedlist spacing="compact">
        <listitem><simpara>0 =&gt; 'Robert'</simpara></listitem>
        <listitem><simpara>1 =&gt; 'Bob'</simpara></listitem>
        <listitem><simpara>key =&gt; 'Robert'</simpara></listitem>
        <listitem><simpara>value =&gt; 'Bob'</simpara></listitem>
       </itemizedlist>
      </para>
     </example>
    </para>
    <para>
     <function>each</function> wird typischerweise in Verbindung mit
     <function>list</function> verwendet, um ein Array durchzugehen;
     zum Beispiel <varname>$HTTP_POST_VARS</varname>:
     <example>
      <title>
       Durchgehen aller <varname>$HTTP_POST_VARS</varname> mit
       <function>each</function>
      </title>
      <programlisting role="php">
echo "Werte, die mit der POST Methode übertragen wurden:&lt;br&gt;";
reset ($HTTP_POST_VARS);
while (list ($key, $val) = each ($HTTP_POST_VARS)) {
    echo "$key =&gt; $val&lt;br&gt;";
}
      </programlisting>
     </example>
    </para>
    <para>
     Nachdem <function>each</function> ausgeführt wurde, bleibt der 
     Array Cursor beim nächsten Element des Arrays, oder wenn am Ende 
     des Arrays angelangt, bei dem letzten Element.
    </para>
    <para>
     Siehe auch <function>key</function>, <function>list</function>,
     <function>current</function>, <function>reset</function>,
     <function>next</function> und <function>prev</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.end">
   <refnamediv>
    <refname>end</refname>
    <refpurpose>
     Positioniert den internen Zeiger eines Arrays auf dessen letztes Element
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>end</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>end</function> rückt den internen Zeiger von 
     <parameter>array</parameter> bis zum letzten Element vor, und gibt
     dieses Element zurück.
    </para>
    <para>
     Siehe auch: <function>current</function>,
     <function>each</function>, <function>end</function>,
     <function>next</function> und <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.extract">
   <refnamediv>
    <refname>extract</refname>
    <refpurpose>
     Importiert Variablen in die Symboltabelle eines Arrays
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>extract</function></funcdef>
      <paramdef>array <parameter>var_array</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>extract_type</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>prefix</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion wird verwendet, um Variablen eines Arrays in die
     aktuelle Symboltabelle zu importieren. Es behandelt die Schlüssel
     des assoziativen Arrays <parameter>var_array</parameter> als
     Variablennamen, und die Werte als Variablenwerte. Für jedes Paar
     Schlüssel/Wert wird - abhängig von den Parametern
     <parameter>extract_type</parameter> und
     <parameter>prefix</parameter> - eine Variable in der aktuellen
     Symboltabelle eingetragen.
    </para>
    <note>
     <para>
      Seit Version 4.0.5 gibt diese Funktion die Anzahl der
      extrahierten Variablen zurück.
     </para>
    </note>
    <para>
     <function>extract</function> prüft jeden Schlüssel, ob dieser
     einen gültigen Variablennamen ergibt, und auch auf eventuelle
     Kollisionen mit existierenden Variablen in der Symboltabelle. Die
     Art, wie ungültige/numerische Schlüssel und Kollisionen behandelt
     werden, wird mit <parameter>extract_type</parameter>
     spezifiziert. Es kann einen der folgenden Werte annehmen:
     <variablelist>
      <varlistentry>
       <term>EXTR_OVERWRITE</term>
       <listitem>
        <simpara>
         Im Falle einer Kollision wird die existierende Variable 
         überschrieben.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_SKIP</term>
       <listitem>
        <simpara>
         Im Falle einer Kollision wird die existierende Variable 
         nicht überschrieben.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_SAME</term>
       <listitem>
        <simpara>Im Falle einer Kollision wird dem Variablennamen 
        <parameter>prefix</parameter> vorangestellt.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_ALL</term>
       <listitem>
        <simpara>
         Allen Variablennamen wird <parameter>prefix</parameter>
         vorangestellt.  Seit PHP 4.0.5 gilt dies auch für numerische
         Schlüssel.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_INVALID</term>
       <listitem>
        <simpara>
         Nur ungültigen/numerischen Variablennamen wird
         <parameter>prefix</parameter> vorangestellt. Dieser Flag
         wurde mit PHP 4.0.5 eingeführt.
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     Ist <parameter>extract_type</parameter> nicht spezifiziert, so wird
     EXTR_OVERWRITE angenommen.
    </para>
    <para>
     Beachten Sie, dass <parameter>prefix</parameter> nur dann nötig
     ist, wenn <parameter>extract_type</parameter> EXTR_PREFIX_SAME,
     EXTR_PREFIX_ALL, oder EXTR_PREFIX_INVALID ist. Ist das Resultat
     trotz Präfix kein gültiger Variablenname, wird es nicht in die
     Symboltabelle importiert.
    </para>
    <para>
     <function>extract</function> gibt die Anzahl erfolgreich in die 
     Symboltabelle importierter Variablen zurück.
    </para>
    <para>
     Eine mögliche Verwendung für extract ist der Import der Variablen 
     in einem von <function>wddx_deserialize</function> gelieferten 
     assoziativen Array in die Symboltabelle.
    </para>
    <para>
     <example>
      <title><function>extract</function></title>
      <programlisting role="php">
&lt;?php

/* Annahme: $var_array ist ein von wddx_deserialize 
   zurückgegebenes Array */

$size = "large";
$var_array = array ("color" =&gt; "blue",
                    "size"  =&gt; "medium",
                    "shape" =&gt; "sphere");
extract ($var_array, EXTR_PREFIX_SAME, "wddx");

print "$color, $size, $shape, $wddx_size\n";

?>
      </programlisting>
     </example>
    </para>
    <para>
     Das obige Beispiel wird folgendes ausgeben:
     <programlisting>
blue, large, sphere, medium
     </programlisting>
    </para>
    <para>
     <varname>$size</varname> wurde nicht überschrieben, da wir
     EXTR_PREFIX_SAME spezifiziert haben, was im Anlegen von
     <varname>$wddx_size</varname> endete. Wäre EXTR_SKIP spezifiziert
     worden, dann wäre $wddx_size nicht angelegt
     worden. EXTR_OVERWRITE hätte <varname>$size</varname> mit dem
     Wert "medium" überschrieben, und EXTR_PREFIX_ALL hätte die neuen
     Variablen <varname>$wddx_color</varname>,
     <varname>$wddx_size</varname>, und <varname>$wddx_shape</varname>
     angelegt.
    </para>
    <para>
     Sie müssen assoziative Arrays benutzen, numerisch indizierte
     Arrays liefern keine Resultate.
    </para>
    <para>
     Siehe auch: <function>compact</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.in-array">
   <refnamediv>
    <refname>in_array</refname>
    <refpurpose>
     Prüft, ob ein Wert in einem Array existiert
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>in_array</function></funcdef>
      <paramdef>mixed <parameter>needle</parameter></paramdef>
      <paramdef>array <parameter>haystack</parameter></paramdef>
      <paramdef>bool 
       <parameter><optional>strict</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion sucht in <parameter>haystack</parameter> nach
     <parameter>needle</parameter> und gibt bei Erfolg &true; zurück,
     andernfalls &false;.
    </para>
    <para>
     Ist der dritte Parameter <parameter>strict</parameter> auf &true;
     gesetzt, prüft <function>in_array</function> auch die Typen von
     <parameter>needle</parameter> in <parameter>haystack</parameter>.
    </para>
    <para>
     <example>
      <title><function>in_array</function></title>
      <programlisting role="php">
$os = array ("Mac", "NT", "Irix", "Linux");
if (in_array ("Irix", $os)) {
    print "Irix gefunden";
}
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title><function>in_array</function> mit strict</title>
      <programlisting role="php">
&lt;?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, TRUE))
    echo &quot;'12.4' found with strict check\n&quot;;
if (in_array(1.13, $a, TRUE))
    echo &quot;1.13 found with strict check\n&quot;;
?&gt;

// Dies wird folgendes ausgeben:

1.13 found with strict check
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch: <function>array_search</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-search">
   <refnamediv>
    <refname>array_search</refname>
    <refpurpose>
     Durchsucht ein Array nach einem Wert liefert bei Erfolg den
     Schlüssel
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title> 
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_search</function></funcdef>
      <paramdef>mixed <parameter>needle</parameter></paramdef>
      <paramdef>array <parameter>haystack</parameter></paramdef>
      <paramdef>bool <parameter>strict</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion durchsucht <parameter>haystack</parameter> nach 
     <parameter>needle</parameter> und gibt bei Erfolg den Schlüssel 
     zurück, andernfalls &false;.
    </para>
    <para>
     Ist der dritte Parameter <parameter>strict</parameter> auf 
     &true; gesetzt, prüft <function>in_array</function>
     auch dir Typen von <parameter>needle</parameter> in 
     <parameter>haystack</parameter>.
    </para>
    <para>
     Siehe auch: <function>in_array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.key">
   <refnamediv>
    <refname>key</refname>
    <refpurpose>
     Liefert einen Schlüssel eines assoziativen Arrays
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>key</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>key</function> liefert das Index Element der aktuellen
     Position im Array.
    </para>
    <para>
     Siehe auch: <function>current</function> und
     <function>next</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.krsort">
   <refnamediv>
    <refname>krsort</refname>
    <refpurpose>
     Sortiert ein Array nach Schlüsseln in umgekehrter Reihenfolge
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>krsort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>sort_flags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Sortiert ein Array nach Schlüsseln in umgekehrter Reihenfolge,
     wobei die Zuordnungen zwischen Schlüssel und Wert erhalten
     bleiben. Dies ist hauptsächlich bei assoziativen Arrays
     hilfreich.
     <example>
      <title><function>krsort</function></title>
      <programlisting role="php">
$fruits = array ("d"=&gt;"Zitrone", "a"=&gt;"Orange", "b"=&gt;"Banane", "c"=&gt;"Apfel");
krsort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "$key -&gt; $val\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel würde folgendes ausgeben:
    </para>
    <para>
     <informalexample>
      <programlisting>
fruits[d] = Zitrone
fruits[c] = Apfel
fruits[b] = Banane
fruits[a] = Orange
      </programlisting>
     </informalexample>
    </para>
    <para>
     Sie können das Verhalten der Sortierung mittels dem optionalen
     Parameter <parameter>sort_flags</parameter> beeinflussen, für
     Details siehe <function>sort</function>.
    </para>
    <simpara>
     Siehe auch: <function>asort</function>,
     <function>arsort</function>, <function>ksort</function>
     <function>sort</function>, <function>natsort</function> und
     <function>rsort</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ksort">
   <refnamediv>
    <refname>ksort</refname>
    <refpurpose>Sortiert ein Array nach Schlüsseln</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ksort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>sort_flags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Sortiert ein Array nach Schlüsseln, wobei die Zuordnungen
     zwischen Schlüssel und Wert erhalten bleiben. Dies ist
     hauptsächlich bei assoziativen Arrays hilfreich.
     <example>
      <title><function>ksort</function></title>
      <programlisting role="php">
$fruits = array ("d"=&gt;"Zitrone", "a"=&gt;"Orange", "b"=&gt;"Banane", "c"=&gt;"Apfel");
ksort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "$key -&gt; $val\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel würde folgendes ausgeben:
    </para>
    <para>
     <informalexample>
      <programlisting>
fruits[a] = Orange
fruits[b] = Banane
fruits[c] = Apfel
fruits[d] = Zitrone
      </programlisting>
     </informalexample>     
    </para>
    <para>
     Sie können das Verhalten der Sortierung mittels dem optionalen
     Parameter <parameter>sort_flags</parameter> beeinflussen, für
     Details siehe <function>sort</function>.
    </para>
    <simpara>
     Siehe auch: <function>asort</function>,
     <function>arsort</function>, <function>sort</function>,
     <function>natsort</function> und <function>rsort</function>.
    </simpara>
    <note>
     <para>
      Der zweite Parameter wurde mit PHP 4 eingeführt.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.list">
   <refnamediv>
    <refname>list</refname>
    <refpurpose>
     Weist Variablen zu, als wären sie ein Array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>list</function></funcdef>
      <varargs/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Wie <function>array</function> ist auch dies keine wirkliche
     Funktion, sondern ein Sprachkonstrukt. <function>list</function>
     wird verwendet, um eine Liste von Variablen innerhalb einer
     Operation zuzuweisen.
     <example>
      <title><function>list</function></title>
      <programlisting role="php">
&lt;table>
 &lt;tr>
  &lt;th>Employee name&lt;/th>
  &lt;th>Salary&lt;/th>
 &lt;/tr>

&lt;?php

$result = mysql_query ($conn, "SELECT id, name, salary FROM employees");
while (list ($id, $name, $salary) = mysql_fetch_row ($result)) {
    print (" &lt;tr>\n".
           "  &lt;td>&lt;a href=\"info.php3?id=$id\">$name&lt;/a>&lt;/td>\n".
           "  &lt;td>$salary&lt;/td>\n".
           " &lt;/tr>\n");
}

?>

&lt;/table>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch: <function>each</function> und
     <function>array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.natsort">
   <refnamediv>
    <refname>natsort</refname>
    <refpurpose>
     Sortiert ein Array in "natürlicher Reihenfolge"
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>natsort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion implementiert einen Sortieralgorithmus, welcher
     alphanumerische Zeichenketten reiht, wie es auch ein Mensch tun
     würde. Hier ein Beispiel für den Unterschied zwischen diesem und
     dem normalen Sortieralgorithmus für Strings eines Computers
     (verwendet in <function>sort</function>):
    </para>
    <para>
     <example>
      <title><function>natsort</function></title>
      <programlisting role="php">
$array1 = $array2 = array ("img12.png", "img10.png", "img2.png", "img1.png");
sort ($array1);
echo "Standard sorting\n";
print_r ($array1);

natsort ($array2);
echo "\nNatural order sorting\n";
print_r ($array2);
      </programlisting>
     </example>
    </para>
    <para>
     Der obige Code wird folgendes anzeigen:
    </para>
    <para>
     <informalexample>
      <programlisting>
Standard sorting
Array
(
    [0] =&gt; img1.png
    [1] =&gt; img10.png
    [2] =&gt; img12.png
    [3] =&gt; img2.png
)

Natural order sorting
Array
(
    [3] =&gt; img1.png
    [2] =&gt; img2.png
    [1] =&gt; img10.png
    [0] =&gt; img12.png
)
      </programlisting>
     </informalexample>
     Detailliertere Informationen finden Sie auf Martin Pool's <ulink
     url="&url.strnatcmp;">Natural Order String Comparison</ulink>
     Seite.
    </para>
    <para>
     Siehe auch <function>natcasesort</function>,
     <function>strnatcmp</function> und
     <function>strnatcasecmp</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.natcasesort">
   <refnamediv>
    <refname>natcasesort</refname>
    <refpurpose>
     Sortiert ein Array in "natürlicher Reihenfolge",
     Groß/Kleinschreibung wird ignoriert
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>natcasesort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion implementiert einen Sortieralgorithmus, welcher
     alphanumerische Zeichenketten reiht, wie es auch ein Mensch tun
     würde. Das wird als "natürliche Reihenfolge" bezeichnet.
    </para>
    <para>
     <function>natcasesort</function> arbeitet wie
     <function>natsort</function>, nur dass es die
     Groß/Kleinschreibung ignoriert. Ein Beispiel für den Unterschied
     zwischen diesem und dem normalen Sortieralgorithmus für Strings
     eines Computers finden Sie in <function>natsort</function>.
    </para>
    <para>
     Detailliertere Informationen finden Sie auf Martin Pool's <ulink
     url="&url.strnatcmp;">Natural Order String Comparison</ulink>
     Seite.
    </para>
    <para>
     Siehe auch <function>sort</function>,
     <function>natsort</function>, <function>strnatcmp</function> und
     <function>strnatcasecmp</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.next">
   <refnamediv>
    <refname>next</refname>
    <refpurpose>
     Rückt den internen Zeiger eines Arrays vor
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>next</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion gibt das nächste Element des Arrays zurück, auf
     das der interne Zeiger des Arrays gerade zeigt. Sind keine
     Elemente mehr vorhanden, wird &false; zurückgegeben.
    </para>
    <para>
     <function>next</function> verhält sich ähnlich wie
     <function>current</function>, mit einem Unterschied. Der interne
     Zeiger wird um ein Element vorgerückt, bevor das Element
     zurückgegeben wird, d.h. es wird das nächste Element
     zurückgegeben, und der interne Zeiger um eins erhöht. Zeigt der
     interne Zeiger hinter das Ende der Elementliste, wird &false;
     zurückgegeben.
     <warning>
      <para>
       Enthält das Array leere Elemente oder Elemente mit dem
       Schlüssel 0, wird für diese Elemente ebenfalls &false;
       zurückgegeben. Um ein Array, das leere Elemente oder Elemente
       mit dem Schlüssel 0 enthalten könnte richtig durchzugehen,
       verwenden Sie die Funktion <function>each</function>.
      </para>
     </warning>
    </para>
    <para>
     Siehe auch: <function>current</function>,
     <function>end</function>, <function>prev</function> und
     <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pos">
   <refnamediv>
    <refname>pos</refname>
    <refpurpose>Liefert das aktuelle Element eines Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>pos</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Dies ist nur ein Alias für die Funktion
     <function>current</function>.
    </simpara>
    <para>
     Siehe auch:
     <function>end</function>, <function>next</function>,
     <function>prev</function> und <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.prev">
   <refnamediv>
    <refname>prev</refname>
    <refpurpose>
     Verkleinert den internen Zeiger eines Arrays
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>prev</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Liefert das Element vor der Position des Arrays, auf die der
     interne Zeiger gerade zeigt. Sind keine Elemente mehr vorhanden,
     wird &false; zurückgegeben.
     <warning>
      <para>
       Enthält das Array leere Elemente, wird für diese ebenfalls
       &false; zurückgegeben. Um ein Array mit leeren Elementen
       richtig durchzugehen, verwenden Sie die Funktion
       <function>each</function>.
      </para>
     </warning>
    </para>
    <para> 
     <function>prev</function> verhält sich wie
     <function>next</function>, nur dass hier der interne Zeiger um
     eine Position zurück, und nicht nach vorne gerückt wird.
    </para>
    <para>
     Siehe auch: <function>current</function>,
     <function>end</function>, <function>next</function> und
     <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.range">
   <refnamediv>
    <refname>range</refname>
    <refpurpose>
     Erstellt ein Array mit einem Bereich von Elementen
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>range</function></funcdef>
      <paramdef>mixed <parameter>low</parameter></paramdef>
      <paramdef>mixed <parameter>high</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>range</function> gibt ein Array mit Elementen im
     Bereich von <parameter>low</parameter> bis
     <parameter>high</parameter> zurück. Wenn low > high, wird die
     Sequenz von high nach low sein.
     <example>
      <title><function>range</function> Beispiele</title>
      <programlisting role="php">
foreach (range(0,9) as $number) {
    echo $number;
}
foreach (range('a','z') as $letter) {
    echo $letter;
}
foreach (range('z','a') as $letter) {
    echo $letter;
}
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Vor der Version 4.1.0 hat die Funktion
      <function>range</function> nur aufsteigende Integer Arrays
      erstellt. Die Unterstützung für Zeichenfolgen und Arrays in
      absteigender Reihenfolge wurde in 4.1.0 hinzugefügt.
     </para>
    </note>
    <para>
     Siehe <function>shuffle</function> für ein weiteres
     Anwendungsbeispiel.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.reset">
   <refnamediv>
    <refname>reset</refname>
    <refpurpose>
     Setzt den internen Zeiger eines Arrays auf sein erstes Element
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>reset</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>reset</function> setzt den internen Zeiger von
     <parameter>array</parameter> auf das erste Element zurück.
    </para>
    <para>
     <function>reset</function> gibt den Wert des ersten Arrayelements 
     zurück.
    </para>
    <para>
     Siehe auch: <function>current</function>,
     <function>each</function>, <function>next</function> und
     <function>prev</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rsort">
   <refnamediv>
    <refname>rsort</refname>
    <refpurpose>
     Sortiert ein Array in umgekehrter Reihenfolge
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>rsort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>sort_flags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion sortiert ein Array in umgekehrter Reihenfolge (vom
     höchsten zum niedrigsten Wert).
     <example>
      <title><function>rsort</function></title>
      <programlisting role="php">
$fruits = array ("Zitrone", "Orange", "Banane", "Apfel");
rsort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "$key -&gt; $val\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel würde folgendes ausgeben:
    </para>
    <para>
     <informalexample>
      <programlisting>
fruits[0] = Orange
fruits[1] = Zitrone
fruits[2] = Banane
fruits[3] = Apfel
      </programlisting>
     </informalexample>
    </para>
    <para>
     Die Früchte wurden in umgekehrter alphabetischer Reihenfolge
     sortiert.
    </para>
    <para>
     Sie können das Verhalten der Sortierung mittels dem optionalen
     Parameter <parameter>sort_flags</parameter> beeinflussen, für
     Details siehe <function>sort</function>.
    </para>
    <para>
     Siehe auch: <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>sort</function> und <function>usort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.shuffle">
   <refnamediv>
    <refname>shuffle</refname>
    <refpurpose>Mischt die Elemente eines Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>shuffle</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion mischt die Reihenfolge der Elemente eines Arrays
     zufällig (shuffle). Benutzen Sie <function>srand</function>, um
     den Startwert für den Zufallsgenerator festzulegen.
     <example>
      <title><function>shuffle</function></title>
      <programlisting role="php">
$numbers = range (1,20);
srand ((double)microtime()*1000000);
shuffle ($numbers);
while (list (, $number) = each ($numbers)) {
    echo "$number ";
}
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch: <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>rsort</function>, <function>sort</function> und
     <function>usort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sizeof">
   <refnamediv>
    <refname>sizeof</refname>
    <refpurpose>
     Liefert die Anzahl Elemente einer Variable
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>sizeof</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Die Funktion <function>sizeof</function> ist ein Alias für
     <function>count</function>.
    </para>
    <para>
     Siehe auch <function>count</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sort">
   <refnamediv>
    <refname>sort</refname>
    <refpurpose>Sortiert ein Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>sort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>sort_flags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion sortiert ein Array. Die Elemente werden
     aufsteigend vom niedrigsten zum höchsten Wert sortiert.
     <example>
      <title><function>sort</function></title>
      <programlisting role="php">
&lt;?php

$fruits = array ("Zitrone", "Orange", "Banane", "Apfel");
sort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "fruits[".$key."] = ".$val; 
}
 
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel würde folgendes anzeigen:
    </para>
    <para>
     <informalexample>
      <programlisting>
fruits[0] = Apfel
fruits[1] = Banane
fruits[2] = Orange
fruits[3] = Zitrone
      </programlisting>
     </informalexample>
    </para>
    <para>
     Die Früchte wurden in alphabetischer Reihenfolge sortiert.
    </para>
    <para>
     Der optionale zweite Parameter <parameter>sort_flags</parameter>
     kann benutzt werden, um das Sortierverhalten mit den folgenden
     Flags zu beeinflussen.
    </para>
    <para>
     Flags für Sortiertypen:
     <itemizedlist>
      <listitem>
       <simpara>SORT_REGULAR - Vergleiche Einträge normal</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_NUMERIC - Vergleiche Einträge numerisch</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_STRING - Vergleiche Einträge als Strings</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Siehe auch: <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>natsort</function>, <function>natcasesort</function>,
     <function>rsort</function>, <function>usort</function>,
     <function>array_multisort</function> und
     <function>uksort</function>.
    </para>
    <note>
     <para>
      Der zweite Parameter wurde in PHP 4 eingeführt.
     </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.uasort">
   <refnamediv>
    <refname>uasort</refname>
    <refpurpose>
     Sortiert ein Array mittels einer benutzerdefinierten
     Vergleichsfunktion und behält Indexassoziationen bei.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>uasort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>function 
       <parameter>cmp_function</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion sortiert ein Array so, dass die Beziehung der
     Indices zu den Arrayelementen beibehalten bleibt. Dies wird
     hauptsächlich bei assoziativen Arrays angewandt, wenn die
     aktuelle Reihenfolge der Arrayelemente signifikant ist. Die
     Vergleichsfunktion wird vom Benutzer definiert.
    </para>
    <note>
     <para>
      Siehe <function>usort</function> und <function>uksort</function>
      für Beispiele von benutzerdefinierten Vergleichsfunktionen
     </para>
    </note>
    <para>
     Siehe auch: <function>usort</function>,
     <function>uksort</function>, <function>sort</function>,
     <function>asort</function>, <function>arsort</function>,
     <function>ksort</function> und <function>rsort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.uksort">
   <refnamediv>
    <refname>uksort</refname>
    <refpurpose>
     Sortiert ein Array nach Schlüsseln mittels einer
     benutzerdefinierten Vergleichsfunktion.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>uksort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>function <parameter>cmp_function</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion sortiert die Schlüssel eines Arrays mittels einer
     benutzerdefinierten Vergleichsfunktion. Soll das Array nach nicht
     trivialen Kriterien sortiert werden, sollten Sie diese Funktion
     verwenden.
    </para>
    <para>
     <example>
      <title><function>uksort</function></title>
      <programlisting role="php">
function cmp ($a, $b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}

$a = array (4 =&gt; "four", 3 =&gt; "three", 20 =&gt; "twenty", 10 =&gt; "ten");

uksort ($a, "cmp");

while (list ($key, $value) = each ($a)) {
    echo "$key: $value\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel würde folgendes ausgeben:
    </para>
    <para>
     <informalexample>
      <programlisting>
20: twenty
10: ten
4: four
3: three
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch: <function>usort</function>,
     <function>uasort</function>, <function>sort</function>,
     <function>asort</function>, <function>arsort</function>,
     <function>ksort</function>, <function>natsort</function> und
     <function>rsort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.usort">
   <refnamediv>
    <refname>usort</refname>
    <refpurpose>
     Sortiert ein Array nach Werten mittels einer benutzerdefinierten
     Vergleichsfunktion.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>usort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>string <parameter>cmp_function</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion sortiert ein Array nach seinen Werten mittels
     einer benutzerdefinierten Vergleichsfunktion. Soll das Array nach
     nicht trivialen Kriterien sortiert werden, sollten Sie diese
     Funktion verwenden.
    </para>
    <para>
     Die Vergleichsfunktion muss einen Integer zurückgeben, der
     kleiner, gleich, oder größer ist als &null;, wenn für das erste
     Argument auch angenommen wird, dass es kleiner, gleich, oder
     größer ist als das zweite. Sind zwei Elemente gleich, ist deren
     Reihenfolge nicht definiert.
    </para>
    <para>
     <example>
      <title><function>usort</function></title>
      <programlisting role="php">
function cmp ($a, $b) {   
    if ($a == $b) return 0;
    return ($a &lt; $b) ? -1 : 1;
}

$a = array (3, 2, 5, 6, 1);

usort ($a, "cmp");

while (list ($key, $value) = each ($a)) {
    echo "$key: $value\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel würde folgendes anzeigen:
    </para>
    <para>
     <informalexample>
      <programlisting>
0: 6
1: 5
2: 3
3: 2
4: 1
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Offensichtlich würde <function>rsort</function> für diesen
      einfachen Fall besser passen.
     </para>
    </note>
    <para>
     <example>
      <title>
       <function>usort</function> Beispiel mit einem mehrdimensionalen
       Array
      </title>
      <programlisting role="php">
function cmp ($a, $b) {
    return strcmp($a["fruit"],$b["fruit"]);
} 

$fruits[0]["fruit"] = "Zitronen";
$fruits[1]["fruit"] = "Äpfel";
$fruits[2]["fruit"] = "Trauben";

usort($fruits, "cmp"); 

while (list ($key, $value) = each ($fruits)) {
    echo "\$fruits[$key]: " . $value["fruit"] . "\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     Wird ein mehrdimensionales Array sortiert, enthalten $a und $b
     Referenzen zu dem ersten Index des Arrays.
    </para>
    <para>
     Dieses Beispiel würde folgendes anzeigen:
    </para>
    <para>
     <informalexample>
      <programlisting>
$fruits[0]: Äpfel
$fruits[1]: Trauben
$fruits[2]: Zitronen
      </programlisting>
     </informalexample>
    </para>
    <para>
     <warning>
      <para>
       Die zugrundeliegende quicksort Funktion in machen C
       Bibliotheken (wie z.B. Solaris Systeme) könnte einen PHP Crash
       verursachen, wenn die Vergleichsfunktion keine gleichbleibenden
       Werte zurückgibt.
      </para>
     </warning>
    </para>
    <para>
     Siehe auch: <function>uasort</function>,
     <function>uksort</function>, <function>sort</function>,
     <function>asort</function>,
     <function>arsort</function>,<function>ksort</function>,
     <function>natsort</function> und <function>rsort</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim: ts=1 sw=1 et syntax=sgml
-->
