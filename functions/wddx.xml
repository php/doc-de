 <reference id="ref.wddx">
  <title>WDDX functions</title>
  <titleabbrev>WDDX</titleabbrev>

  <partintro>
   <para>
   Diese Funktionen arbeiten mit <ulink url="&url.wddx;">WDDX</ulink> zusammen.</para>

   <para>
    Es ist zu beachten, dass alle Funktionen, die Variablen serialisieren,
    immer das erste Element eines Arrays verwenden um festzustellen ob der
    Array in einen Array oder eine 'Structure' serialisiert wird.
    Wenn das erste Element eine String Schlüssel hat, dann wir er in eine
    'Structure' serialisiert, andernfalls in einen Array.

    <example>
     <title>Einen einzelnen String serialisieren</title>
     <programlisting role="php">
&lt;?php
print wddx_serialize_value("PHP to WDDX packet example", "PHP packet");
?&gt;
     </programlisting>
    </example></para>

   <para>
    dieses Beispiel erzeugt:
    <informalexample>
     <programlisting role="php">
&lt;wddxPacket version='0.9'&gt;&lt;header comment='PHP packet'/&gt;&lt;data&gt;
&lt;string&gt;PHP to WDDX packet example&lt;/string&gt;&lt;/data&gt;&lt;/wddxPacket&gt;
     </programlisting>
    </informalexample>

    <example>
     <title>Die Verwendung von inkrementierenden Paketen</title>
     <programlisting role="php">
&lt;?php
$pi = 3.1415926;
$packet_id = wddx_packet_start("PHP");
wddx_add_vars($packet_id, "pi");

/* So tun, als ob $cities aus einer Datenbank kommt ;-) */
$cities = array("Austin", "Novato", "Seattle");
wddx_add_vars($packet_id, "cities");

$packet = wddx_packet_end($packet_id);
print $packet;
?&gt;
     </programlisting>
    </example></para>

   <para>
    Diese Beispiel wird erzeugen:

    <informalexample>
     <programlisting role="php">
&lt;wddxPacket version='0.9'&gt;&lt;header comment='PHP'/&gt;&lt;data&gt;&lt;struct&gt;
&lt;var name='pi'&gt;&lt;number&gt;3.1415926&lt;/number&gt;&lt;/var&gt;&lt;var name='cities'&gt;
&lt;array length='3'&gt;&lt;string&gt;Austin&lt;/string&gt;&lt;string&gt;Novato&lt;/string&gt;
&lt;string&gt;Seattle&lt;/string&gt;&lt;/array&gt;&lt;/var&gt;&lt;/struct&gt;&lt;/data&gt;&lt;/wddxPacket&gt;
     </programlisting>
    </informalexample></para>

  </partintro>

  <refentry id="function.wddx-serialize-value">
   <refnamediv>
    <refname>wddx_serialize_value</refname>
    <refpurpose>Serialisiert einen einzelnen Wert in ein WDDX Packet</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string
      <function>wddx_serialize_value</function></funcdef>
      <paramdef>mixed <parameter>wert</parameter></paramdef>
      <paramdef>string
      <parameter><optional>kommentar</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     <function>wddx_serialize_value</function> wird verwendet, um
     einen einzelnen Wert in ein WDDX Packet zu serialisieren.
     Übergeben wird der Wert in <parameter>wert</parameter>, und ein
     optionaler <parameter>kommentar</parameter> der im Header des
     Packets angegeben wird und gibt das WDDX Paket zurück.</para>

   </refsect1>
  </refentry>

  <refentry id="function.wddx-serialize-vars">
   <refnamediv>
    <refname>wddx_serialize_vars</refname>
    <refpurpose>Serialisiert variablen in WDDX Pakete</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>wddx_serialize_vars</function></funcdef>
      <paramdef>mixed <parameter>var_name</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     <function>wddx_serialize_vars</function> wird verwendet um ein
     WDDX Paket mit einer 'Structure', das eine serialsierte Representation
     der übergebenen Variablen.</para>

    <para>
     <function>wddx_serialize_vars</function> übernimmt eine variable
     Zahl an Argumenten. Jedes kann entweder eine String Benennung, eine
     Variable oder ein Array, der Strings enthält, die die Variablen
     benennen, oder einen weiteren Array, etc.</para>

    <para>
     <example>
      <title>wddx_serialize_vars example</title>
      <programlisting>
&lt;?php
$a = 1;
$b = 5.5;
$c = array("blue", "orange", "violet");
$d = "colors";

$clvars = array("c", "d");
print wddx_serialize_vars("a", "b", $clvars);
?&gt;
      </programlisting>
     </example></para>

    <para>
     Das obige Script erzeugt:
     <programlisting>
&lt;wddxPacket version='0.9'&gt;&lt;header/&gt;&lt;data&gt;&lt;struct&gt;&lt;var name='a'&gt;&lt;number&gt;1&lt;/number&gt;&lt;/var&gt;
&lt;var name='b'&gt;&lt;number&gt;5.5&lt;/number&gt;&lt;/var&gt;&lt;var name='c'&gt;&lt;array length='3'&gt;
&lt;string&gt;blue&lt;/string&gt;&lt;string&gt;orange&lt;/string&gt;&lt;string&gt;violet&lt;/string&gt;&lt;/array&gt;&lt;/var&gt;
&lt;var name='d'&gt;&lt;string&gt;colors&lt;/string&gt;&lt;/var&gt;&lt;/struct&gt;&lt;/data&gt;&lt;/wddxPacket&gt;
     </programlisting></para>

   </refsect1>
  </refentry>

  <refentry id="function.wddx-packet-start">
   <refnamediv>
    <refname>wddx_packet_start</refname>
    <refpurpose>Beginnt ein neue WDDX Packet mit einer 'Structure' darin</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>wddx_packet_start</function></funcdef>
      <paramdef>string
      <parameter><optional>kommentar</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     <function>wddx_packet_start</function> wird verwendet um ein neues
     WDDX Paket beginnen um die Variablen nachhinein zu ergänzen.
     Ein optionaler <parameter>kommentar</parameter> String kann angegeben werden.
     Es wird eine Packet ID zurückgegeben, die in später in Funktionen
     verwendet werden kann. Desweiteren wird automatisch 'Structure'
     Definition erzeugt um die Variablen aufnehmen zu können.</para>

   </refsect1>
  </refentry>

  <refentry id="function.wddx-packet-end">
   <refnamediv>
    <refname>wddx_packet_end</refname>
    <refpurpose>Schliesst das WDDX Packet mit der angegebenen ID</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>wddx_packet_end</function></funcdef>
      <paramdef>int <parameter>packet_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     <function>wddx_packet_end</function> schliesst das WDDX Packet,
     dass mit mit <parameter>packet_id</parameter> identifiziert wird
     und gibt einen String mit dem Packet zurück.</para>

   </refsect1>
  </refentry>

  <refentry id="function.wddx-add-vars">
   <refnamediv>
    <refname>wddx_add_vars</refname>
    <refpurpose>Fügt dem WDDX Packet mit der ID Werte hinzu</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>wddx_add_vars</function></funcdef>
      <paramdef>int <parameter>packet_id</parameter></paramdef>
      <paramdef>mixed <parameter>name_var</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     <function>wddx_add_vars</function> wird verwendet um die übergebenen
     Werte zu serialisiern und diese an das Packet anzuhängen, das mit
     <parameter>packet_id</parameter> identifiziert wird.
     Die Werteübergabe funktioniert genauso wie bei
     <function>wddx_serialize_vars</function>.</para>

   </refsect1>
  </refentry>

  <refentry id="function.wddx-deserialize">
   <refnamediv>
    <refname>wddx_deserialize</refname>
    <refpurpose>Deserialisiert ein WDDX Packet</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>wddx_deserialize</function></funcdef>
      <paramdef>string <parameter>packet</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     <function>wddx_deserialized</function> übernimmt einen
     <parameter>packet</parameter> String and deserialisiert es.
     Es wird entweder ein String, eine Nummer, oder Array als Ergebnis
     zurückgegeben. 'Structures' werden in assoziative Arrays
     deserialisiert.</para>

   </refsect1>
  </refentry>
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->