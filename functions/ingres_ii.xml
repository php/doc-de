<?xml encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
 <reference id="ref.ingres">
  <title>Ingres II Funktionen</title>
  <titleabbrev>Ingres II</titleabbrev>
  <partintro>
   &warn.experimental;
   <simpara>
    Mit diesen Funktionen können Sie auf einen Ingres II Datenbankserver
    zugreifen.
   </simpara>
   <simpara>
    Damit Ihnen diese Funktionen zur Verfügung stehen, müssen Sie php
    mit der Ingres-Unterstützung kompilieren, indem Sie die Option
    <option role="configure">--with-ingres</option> angeben. Ausserdem
    brauchen  Sie die Open API Bibliothek sowie header Dateien, die in
    Ingres II eingebunden werden. Falls die II_SYSTEM Umgebungsvariable
    nicht korrekt gesetzt ist, müssen Sie vielleicht
    <option role="configure">--with-ingres=DIR</option> benutzen, um
    Ihr Inges Installationsverzeichnis anzugeben.
   </simpara>
   <simpara>
    Wenn Sie diese Erweiterung mit Apache benutzen, und Ihr Apache
    fährt nicht hoch, sondern bringt die Fehlermeldung: "PHP Fatal error:
    Unable to start ingres_ii module in Unknown on line 0", dann
    vergewissern Sie sich, dass die  Umgebungsvariable II_SYSTEM korrekt
    gesetzt ist. Wenn Sie im Startskript für den Apache "export
    II_SYSTEM="/home/ingres/II" angeben, gerade bevor httpd gestartet
    wird, sollte dieses Problem gelöst sein.
   </simpara>
   <note>
    <para>
     Falls Sie schon andere PHP Erweiterungen zum Zugriff auf andere
     Datenbankserver benutzt haben, sollten Sie beachten, dass Sie mit
     Ingres keine konkurrierenden Abfragen und/oder Transaktionen über
     eine Verbindung durchführen können. Darum finden Sie in dieser
     Erweiterung keine Ergebnis- oder Transaktions-Handler. Die
     Ergebnisse einer Abfrage müssen verarbeitet werden, bevor eine
     neue Abfrage an den Datenbankserver geschickt wird und eine
     Transaktion muss commited oder zurückgesetzt (roll-back) werden,
     bevor eine neue Transaktion geöffnet wird (die Transaktion wird
     automatisch geöffnet, wenn die erste Abfrage gesendet wird).
    </para>
   </note>
  </partintro>

  <refentry id="function.ingres-connect">
   <refnamediv>
    <refname>ingres_connect</refname>
    <refpurpose>Eine Verbindung zu einem Ingres II Datenbankserver öffnen.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>ingres_connect</function></funcdef>
      <paramdef>string
       <parameter><optional>database</optional></parameter>
      </paramdef>
      <paramdef>string
       <parameter><optional>username</optional></parameter>
      </paramdef>
      <paramdef>string
       <parameter><optional>password</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     Gibt bei Erfolg eine Ingres II Verbindungskennung zurück, oder
     &false;, wenn ein Fehler auftritt.
    </para>
    <para>
     <function>ingres_connect</function> öffnet eine Verbindung zu dem
     Ingres Datenbankserver, der im <parameter>database</parameter>
     Argument angegeben ist und die Syntax
     <parameter>[node_id::]dbname[/svr_class]</parameter> hat.
    </para>
    <para>
     Wenn einige Parameter fehlen, benutzt
     <function>ingres_connect</function> die Werte, die in der
     <filename>php.ini</filename> für
     <parameter>ingres.default_database</parameter>,
     <parameter>ingres.default_user</parameter> und
     <parameter>ingres.default_password</parameter> eingetragen sind.
    </para>
    <para>
     Die Verbindung wird geschlossen, wenn das Skript zuende ist oder
     wenn die Funktion <function>ingres_close</function> mit der
     aktuellen Verbindungskennung aufgerufen wird.
    </para>
    <para>
     Alle anderen Ingres-Funktionen benutzen standardmässig die zuletzt
     geöffnete Verbindung, so dass Sie den Rückgabewert nur dann
     speichern müssen, wenn Sie mehr als eine Verbindung zur gleichen
     Zeit benutzen.
    </para>
    <example>
     <title><function>ingres_connect</function> Beispiel</title>
     <programlisting>
&lt;?php
    $link = ingres_connect ("mydb", "user", "pass")
        or die ("Verbindung fehlgeschlagen");
    print ("Verbindungsaufbau erfolgreich");
    ingres_close ($link);
?>
     </programlisting>
    </example>
    <example>
     <title><function>ingres_connect</function> Beispiel mit
      der aktuellen Verbindungskennung</title>
     <programlisting>
&lt;?php
    ingres_connect ("mydb", "user", "pass")
        or die ("Verbindung fehlgeschlagen");
    print ("Verbindungsaufbau erfolgreich");
    ingres_close ();
?>
     </programlisting>
    </example>
    <para> Siehe auch
     <function>ingres_pconnect</function>, und
     <function>ingres_close</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-pconnect">
   <refnamediv>
    <refname>ingres_pconnect</refname>
    <refpurpose>
     Öffnet eine persistente Verbindung zu einem Ingres II Datenbankserver.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>ingres_pconnect</function></funcdef>
      <paramdef>string
       <parameter><optional>database</optional></parameter>
      </paramdef>
      <paramdef>string
       <parameter><optional>username</optional></parameter>
      </paramdef>
      <paramdef>string
       <parameter><optional>password</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     Gibt bei Erfolg eine Ingres II Verbindungskennung zurück oder
     oder &false;, wenn ein Fehler aufgetreten ist.
    </para>
    <para>
     Zu den Details über die Parameter siehe
     <function>ingres_connect</function> und die Beispiele . Es gibt
     nur zwei Unterschiede zwischen den Funktionen
     <function>ingres_pconnect</function> und
     <function>ingres_connect</function> :
     Zum ersten: beim Verbindungsaufbau schaut die Funktion zuerst,
     ob schon eine geöffnete persistente Verbindung besteht, die mit
     denselben Parametern geöffnet wurde. Falls eine gefunden wird,
     wird ein Identifizierer zurückgegeben, anstatt eine neue Verbindung
     zu öffnen.
     Zum zweiten: Die Verbindung zum Ingres Server wird nicht geschlossen
     wenn die Ausführung des Skripts beendet ist, sondern die Verbindung
     bleibt zum weiteren Gebrauch offen
     (<function>ingres_close</function> schliesst die Verbindungen, die
     mit <function>ingres_pconnect</function> geöffnet wurden nicht).
     Darum wird diese Art der Verbindung 'persistent' genannt.
    </para>
    <para> Siehe auch
     <function>ingres_connect</function>, und
     <function>ingres_close</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-close">
   <refnamediv>
    <refname>ingres_close</refname>
    <refpurpose>Schliesst eine Ingres II Datenbankverbindung</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>ingres_close</function></funcdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     Gibt bei Erfolg &true; zurück, bei einem Fehler &false;.
    </para>
    <para>
     <function>ingres_close</function> schliesst die Verbindung zu dem
     Ingres Datenbankserver, der mit der übergebenen Verbindunkskennung
     verknüpft ist. Falls der Parameter <parameter>link</parameter>
     nicht angegeben wurde, wird die zuletzt geöffnete Verbindung
     geschlossen.
    </para>
    <para>
     <function>ingres_close</function> ist normalerweise nicht nötig,
     weil es keine persistenten Verbindungen schliesst und weil alle
     nicht-persistenten Verbindungen automatisch zum Ende des Skripts
     geschlossen werden.
    </para>
    <para> Siehe auch
     <function>ingres_connect</function>, und
     <function>ingres_pconnect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-query">
   <refnamediv>
    <refname>ingres_query</refname>
    <refpurpose>Sendet eine SQL Abfrage an den Ingres II Server</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>ingres_query</function></funcdef>
      <paramdef>string
       <parameter>query</parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     Gibt bei Erfolg &true; zurück und bei einem Fehler &false;.
    </para>
    <para>
     <function>ingres_query</function> sendet die übergebene
     <parameter>query</parameter> an den Ingres Server. Diese Abfrage
     muss ein gültiger SQL-String sein (Siehe die Ingres Dokumentation).
    </para>
    <para>
     Die Abfrage wird zu einem Teil der aktuell offenen Transaktion.
     Falls keine Transaktion geöffnet ist, öffnet
     <function>ingres_query</function> eine neue Transaktion. Um diese
     zu schliessen, können Sie entweder
     <function>ingres_commit</function> aufrufen, um die gemachten
     Änderungen in die Datenbank zu schreiben, oder Sie rufen
     <function>ingres_rollback</function> auf, um diese Änderungen
     zrückzusetzen. Wenn das Skript beendet wird, wird jede offene
     Transaktion zurückgesetzt (indem die Funktion
     <function>ingres_rollback</function> aufgerufen wird). Sie können
     auch die Funktion <function>ingres_autocommit</function> benutzen,
     bevor Sie eine neue Transaktion öffnen, damit werden alle einzelnen
     SQL-Abfrage sofort gesendet.
    </para>
    <para>
     Einige SQL Abfragen können mit dieser Funktion nicht gesendet
     werden:
     <itemizedlist>
      <listitem>
       <simpara>close (siehe <function>ingres_close</function>).</simpara>
      </listitem>
     <listitem>
       <simpara>commit (siehe <function>ingres_commit</function>).</simpara>
      </listitem>
      <listitem>
       <simpara>connect (siehe <function>ingres_connect</function>).</simpara>
      </listitem>
      <listitem>
       <simpara>disconnect (siehe <function>ingres_close</function>).</simpara>
      </listitem>
      <listitem><simpara>get dbevent</simpara></listitem>
      <listitem><simpara>prepare to commit</simpara></listitem>
      <listitem>
       <simpara>
        rollback (siehe <function>ingres_rollback</function>).
       </simpara>
      </listitem>
      <listitem><simpara>savepoint</simpara></listitem>
      <listitem>
       <simpara>
        set autocommit (siehe <function>ingres_autocommit</function>).
       </simpara>
      </listitem>
      <listitem>
       <simpara>und alle Abfragen, die Cursors benutzen, werden
       nicht unterstützt.</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     <example>
      <title><function>ingres_query</function> example</title>
      <programlisting role="php">
&lt;?php
ingres_connect ($database, $user, $password);

ingres_query ("select * from table");
while ($row = ingres_fetch_row()) {
    echo $row[1];
    echo $row[2];
}
?>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch
     <function>ingres_fetch_array</function>,
     <function>ingres_fetch_object</function>,
     <function>ingres_fetch_row</function>,
     <function>ingres_commit</function>,
     <function>ingres_rollback</function> und
     <function>ingres_autocommit</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-num-rows">
   <refnamediv>
    <refname>ingres_num_rows</refname>
    <refpurpose>
     Gibt die Anzahl der Datensätze der Ergebnismenge zurück oder die
     Anzahl der von der letzten Abfrage betroffenen Datensätze.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ingres_num_rows</function></funcdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     Bei delete-, insert- or update-queries, gibt
     <function>ingres_num_rows</function>  die Anzahl der durch diese
     Abfragen betroffenen Datensätze zurück. Bei den anderen Abfragen
     gibt <function>ingres_num_rows</function> die Anzahl der Datensätze
     in der Ergebnismenge zurück.
    </para>
    <para>
     <note>
      <simpara>
       Diese Funktion dient hauptsächlich dazu, die Anzahl der
       veränderten Datensätze in einer Datenbank festzustellen.
       Wenn diese Funktion aufgerufen wird, bevor
       <function>ingres_fetch_array</function>,
       <function>ingres_fetch_object</function> oder
       <function>ingres_fetch_row</function> aufgerufen wurde, löscht
       der Server die Ergebnisdaten so dass das Skript sie nicht
       auslesen kann.
      </simpara>
      <simpara>
       Sie sollten stattdessen die Daten der Ergebnismenge mit einer
       dieser fetch-Funktionen in einer Schleife auslesen, solange, bis
       keine Datensätze mehr zum Lesen da sind und damit die
       Schleifenbedingung &false; wird.
      </simpara>
     </note>
    </para>
    <para>
     Siehe auch
     <function>ingres_query</function>,
     <function>ingres_fetch_array</function>,
     <function>ingres_fetch_object</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-num-fields">
   <refnamediv>
    <refname>ingres_num_fields</refname>
    <refpurpose>
     Gibt die Anzahl der Felder der letzten Abfrage zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ingres_num_fields</function></funcdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_num_fields</function> liefert die Anzahl der Felder
     in der Ergebnismenge zurück, die vom Ingres Server nach einem Aufruf
     von <function>ingres_query</function> zurückgegeben wurde.
    </para>
    <para>
     See also
     <function>ingres_query</function>,
     <function>ingres_fetch_array</function>,
     <function>ingres_fetch_object</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-field-name">
   <refnamediv>
    <refname>ingres_field_name</refname>
    <refpurpose>Holt den Namen eines Feldes in einer Ergebnismenge. </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ingres_field_name</function></funcdef>
      <paramdef>int
       <parameter>index</parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_field_name</function> gibt den Namen eines Feldes
     in einer Ergebnismenge zurück oder &false;, falls ein Fehler
     aufgetreten ist.
    </para>
    <para>
     <parameter>index</parameter> gibt die Nummer des Feldes an und muss
     zwischen 1 und dem Wert, der von
     <function>ingres_num_fields</function> zurückgegeben wird, liegen.
    </para>
    <para>
     Siehe auch
     <function>ingres_query</function>,
     <function>ingres_fetch_array</function>,
     <function>ingres_fetch_object</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-field-type">
   <refnamediv>
    <refname>ingres_field_type</refname>
    <refpurpose>Gibt den Typ eines Feldes in einer Ergebnismenge zurück.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ingres_field_type</function></funcdef>
      <paramdef>int
       <parameter>index</parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_field_type</function> gibt den Typ eines Feldes in
     einer Ergebnismenge zurück oder &false;, wenn ein Fehler aufgetreten
     ist. Beispiele von Rückgabewerten sind: "IIAPI_BYTE_TYPE",
     "IIAPI_CHA_TYPE", "IIAPI_DTE_TYPE", "IIAPI_FLT_TYPE",
     "IIAPI_INT_TYPE", "IIAPI_VCH_TYPE". Einige dieser Typen können, in
     Abhängigkeit von der Feldlänge, mehrere SQL Typen umfassen.
     (siehe <function>ingres_field_length</function>). Beispielsweise kann
     "IIAPI_FLT_TYPE" entweder float4 oder float8 sein. Genauere
     Informationen darüber finden Sie in dem  Ingres/OpenAPI User Guide -
     Appendix C.
    </para>
    <para>
     <parameter>index</parameter> ist die Feldnummer und muss zwischen 1
     und dem Wert liegen, den die Funktion
     <function>ingres_num_fields</function> zurückgibt.
    </para>
    <para>
     See also
     <function>ingres_query</function>,
     <function>ingres_fetch_array</function>,
     <function>ingres_fetch_object</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-field-nullable">
   <refnamediv>
    <refname>ingres_field_nullable</refname>
    <refpurpose>Prüft, ob für ein Feld NULL-Werte zugelassen sind.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>ingres_field_nullable</function></funcdef>
      <paramdef>int
       <parameter>index</parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_field_nullable</function> gibt &true; zurück, falls
     in dieser Spalte &null;-Werte zugelasssen sind und &false;, falls
     das nicht erlaubt ist.
    </para>
    <para>
     <parameter>index</parameter> ist die Feldnummer und muss zwischen 1
     und dem Wert liegen, den die Funktion
     <function>ingres_num_fields</function> zurückgibt.
    </para>
    <para>
     See also
     <function>ingres_query</function>,
     <function>ingres_fetch_array</function>,
     <function>ingres_fetch_object</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-field-length">
   <refnamediv>
    <refname>ingres_field_length</refname>
    <refpurpose>Gibt die Länge eines Feldes zurück.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ingres_field_length</function></funcdef>
      <paramdef>int
       <parameter>index</parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_field_length</function> gibt die Länge eines Feldes
     zurück. Das ist die Anzahl der Bytes, die der Server zum Speichern
     des Feldes belegt. Für genauere Informationen schauen sie in den
     Ingres/OpenAPI User Guide - Appendix C.
    </para>
    <para>
     <parameter>index</parameter> ist die Feldnummer und muss zwischen 1
     und dem Wert liegen, den die Funktion
     <function>ingres_num_fields</function> zurückgibt.
    </para>
    <para>
     See also
     <function>ingres_query</function>,
     <function>ingres_fetch_array</function>,
     <function>ingres_fetch_object</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-field-precision">
   <refnamediv>
    <refname>ingres_field_precision</refname>
    <refpurpose>Gibt die Genauigkeit eines Feldes zurück.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ingres_field_precision</function></funcdef>
      <paramdef>int
       <parameter>index</parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_field_precision</function> gibt die Genauigkeit
     eines Feldes zurück. Dieser Rückgabewert wird nur für
     Dezimalzahlen, Fliesskommazahlen und monetäre SQL Datentypen
     benutzt. Wenn Sie es genauer wissen wollen, schauen Sie sich den
     Ingres/OpenAPI User Guide - Appendix C an.
    </para>
    <para>
     <parameter>index</parameter> ist die Feldnummer und muss zwischen 1
     und dem Wert liegen, den die Funktion
     <function>ingres_num_fields</function> zurückgibt.
    </para>
    <para>
     Siehe auch
     <function>ingres_query</function>,
     <function>ingres_fetch_array</function>,
     <function>ingres_fetch_object</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-field-scale">
   <refnamediv>
    <refname>ingres_field_scale</refname>
    <refpurpose>Gibt den Skalar eines Feldes zurück.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ingres_field_scale</function></funcdef>
      <paramdef>int
       <parameter>index</parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_field_scale</function> gibt den Skalar eines Feldes
     zurück.Dieser Rückgabewert wird nur für Dezimalzahlen,
     Fliesskommazahlen und monetäre SQL Datentypen benutzt. Für nähere
     Informationen schauen Sie sich den Ingres/OpenAPI User Guide -
     Appendix C an.
    </para>
    <para>
     <parameter>index</parameter> ist die Feldnummer und muss zwischen 1
     und dem Wert liegen, den die Funktion
     <function>ingres_num_fields</function> zurückgibt.
    </para>
    <para>
     Siehe auch
     <function>ingres_query</function>,
     <function>ingres_fetch_array</function>,
     <function>ingres_fetch_object</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-fetch-array">
   <refnamediv>
    <refname>ingres_fetch_array</refname>
    <refpurpose>Liest eine Zeile der Ergebnismenge in ein Array ein.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>ingres_fetch_array</function></funcdef>
      <paramdef>int
       <parameter><optional>result_type</optional></parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_fetch_array</function> Gibt ein Array zurück, das
     die die entsprechende Zeile der Ergebnismenge enthält oder &false;
     falls das die Ergebnismenge keine Zeilen mehr enthält.
    </para>
    <para>
     Diese Funktion ist eine erweiterte Version der Funktion
     <function>ingres_fetch_row</function>. Zusätzlich zur Speicherung
     der Daten unter numerischen Indizes  werden die Daten auch unter
     assoziativen Indizes im Ergebnisarray gespeichert, in dem die
     Feldnamen als Schlüssel benutzt werden.
    <para>
     Falls eine oder mehrere Spalten der Ergebnismenge dieselben
     Feldnamen haben, bekommt die letzte Spalte die Priorität. Um auf die
     anderen Spalten zuzugreifen, müssen sie entweder den numerischen
     Index der Spalte benutzen oder Aliase für die Spalten machen.
     <informalexample>
      <programlisting>
ingres_query(select t1.f1 as foo t2.f1 as bar from t1, t2);
$result = ingres_fetch_array();
$foo = $result["foo"];
$bar = $result["bar"];
      </programlisting>
     </informalexample>
    </para>
    <para>
     <parameter>result_type</parameter> kann INGRES_NUM für ein
     numerisches Array sein oder INGRES_ASSOC für ein assoziatives
     Array, oder INGRES_BOTH (Standard).
    </para>
    <para>
     Von der Geschwindigkeit her ist diese Funktion identisch zu
     <function>ingres_fetch_object</function>, und fast so schnell wie
     <function>ingres_fetch_row</function> (der Unterschied ist zu
     vernachlässigen).
    </para>
    <para>
     <example>
      <title><function>ingres_fetch_array</function> Beispiel</title>
      <programlisting role="php">
&lt;?php
ingres_connect ($database, $user, $password);

ingres_query ("select * from table");
while ($row = ingres_fetch_array()) {
    echo $row["user_id"];  # benutzt ein assoziatives Array
    echo $row["fullname"];
    echo $row[1];          # benutzt ein numerisches Array
    echo $row[2];
}
?>
      </programlisting>
     </example>
    </para>
    <para>
     See also
     <function>ingres_query</function>,
     <function>ingres_num_fields</function>,
     <function>ingres_field_name</function>,
     <function>ingres_fetch_object</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-fetch-row">
   <refnamediv>
    <refname>ingres_fetch_row</refname>
    <refpurpose>Holt eine Zeile aus einer Ergebnismenge in ein numerisches Array.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>ingres_fetch_row</function></funcdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_fetch_row</function> gibt ein Array zurück, das
     die entsprechende Zeile der Ergebnismenge enthält oder &false;,
     falls es keine Zeilen mehr in der Ergebnismenge gibt. Jede Spalte
     ist unter einem Array-Offset, beginnend mit 1, gespeichert.
    </para>
    <para>
     Aufeinanderfolgende Aufrufe von
     <function>ingres_fetch_row</function> würden immer die nächste Zeile
     der Ergebnismenge zurückgeben oder &false;, wenn es keine Zeilen
     mehr gibt.
    </para>
    <para>
     <example>
      <title><function>ingres_fetch_row</function> Beispiel</title>
      <programlisting role="php">
&lt;?php
ingres_connect ($database, $user, $password);

ingres_query ("select * from table");
while ($row = ingres_fetch_row()) {
    echo $row[1];
    echo $row[2];
}
?>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch
     <function>ingres_num_fields</function>,
     <function>ingres_query</function>,
     <function>ingres_fetch_array</function> und
     <function>ingres_fetch_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-fetch-object">
   <refnamediv>
    <refname>ingres_fetch_object</refname>
    <refpurpose>Holt eine Zeile als Objekt.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>ingres_fetch_object</function></funcdef>
      <paramdef>int
       <parameter><optional>result_type</optional></parameter>
      </paramdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_fetch_object</function> Gibt ein Objekt zurück,
     das mit der geholten Zeile einer Ergebnismenge korrespondiert oder
     &false;, wenn es keine Zeilen mehr in der Egebnismenge gibt.
    </para>
    <para>
     Diese Funktion ist ähnlich zu
     <function>ingres_fetch_array</function>, mit einem Unterschied -
     ein Objekt wird anstelle eines Arrays zurückgegeben. Indirekt
     heisst das, dass Sie die Daten nur über ihre Feldnamen ansprechen
     können und nicht über ihre Offsets (Zahlen sind unzulässige
     Namen für Objekteigenschaften).
    </para>
    <para>
     Das optionale Argument <parameter>result_type</parameter> ist eine
     Konstante, die die folgenden Werte annehmen kann: INGRES_ASSOC,
     INGRES_NUM und INGRES_BOTH.
    </para>
    <para>
     Diese Funktion ist von der Geschwindigkeit her identisch zu
     <function>ingres_fetch_array</function>, und fast so schnell wie
     <function>ingres_fetch_row</function> (der Unterschied ist zu
     vernachlässigen).
    </para>
    <para>
     <example>
      <title><function>ingres_fetch_object</function> Beispiel</title>
      <programlisting role="php">
&lt;?php
ingres_connect ($database, $user, $password);
ingres_query ("select * from table");
while ($row = ingres_fetch_object()) {
    echo $row->user_id;
    echo $row->fullname;
}
?>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch
     <function>ingres_query</function>,
     <function>ingres_num_fields</function>,
     <function>ingres_field_name</function>,
     <function>ingres_fetch_array</function> und
     <function>ingres_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-rollback">
   <refnamediv>
    <refname>ingres_rollback</refname>
    <refpurpose>Setzt eine Transaktion zurück.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>ingres_rollback</function></funcdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_rollback</function> setzt die aktuell geöffnete
     Transaktion zurück und macht alle Änderungen, die in der Transaktion
     bereits durchgeführt wurden, wieder rückgängig.
    </para>
    <para>
     Diese Funktion schliesst die Transaktion. Eine Neue Transaktion kann
     geöffnet werden, wenn man mit <function>ingres_query</function> eine
     neue Abfrage an den Datenbankserver schickt.
    </para>
    <para>
     Siehe auch
     <function>ingres_query</function>,
     <function>ingres_commit</function> und
     <function>ingres_autocommit</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-commit">
   <refnamediv>
    <refname>ingres_commit</refname>
    <refpurpose>Schliesst eine Transaktion ab.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>ingres_commit</function></funcdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_commit</function> schliesst die aktuell offene
     Transaktion ab, indem alle Veränderungen in die Datenbank
     übernommen werden.
    </para>
    <para>
     Dadurch wird die Transaktion beendet. Eine neue Transaktion kann
     geöffnet werden, indem man eine neue Abfrage mit
     <function>ingres_query</function> an den Datenbankserver schickt.
    </para>
    <para>
     Sie können auch den Server automatisch nach jeder Abfrage einen
     Commit ausführen lassen, wenn sie die Funktion
     <function>ingres_autocommit</function> aufrufen, bevor Sie die
     Transaktion öffnen.
    </para>
    <para>
     Siehe auch
     <function>ingres_query</function>,
     <function>ingres_rollback</function> und
     <function>ingres_autocommit</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ingres-autocommit">
   <refnamediv>
    <refname>ingres_autocommit</refname>
    <refpurpose>Schaltet den autocommit-Modus an oder aus.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>ingres_autocommit</function></funcdef>
      <paramdef>resource
       <parameter><optional>link</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
        &warn.experimental.func;
    <para>
     <function>ingres_autocommit</function> wird vor dem Öffnen einer
     Transaktion aufgerufen (vor dem ersten Aufruf der Funktion
     <function>ingres_query</function> oder gleich nach einem Aufruf
     von <function>ingres_rollback</function> oder
     <function>ingres_autocommit</function>) um in den "autocommit"
     Modus des Servers ein- oder auszuschalten (beim Beginn eines Skripts
     ist der autocommit-Modus ausgeschaltet).
    </para>
    <para>
     Wenn der autocommit-Modus eingeschaltet ist, wird jede Abfrage
     automatisch sofort vom Server commited, so als würde die Funktion
     <function>ingres_commit</function> nach jedem Aufruf von
     <function>ingres_query</function> aufgerufen werden.
    </para>
    <para>
     Siehe auch
     <function>ingres_query</function>,
     <function>ingres_rollback</function> und
     <function>ingres_commit</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

