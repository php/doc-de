<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.url">
  <title>URL Funktionen</title>
  <titleabbrev>URLs</titleabbrev>

  <refentry id="function.base64-decode">
   <refnamediv>
    <refname>base64_decode</refname>
    <refpurpose>Dekodiert Daten mit MIME base64</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
     <methodsynopsis>
      <type>string</type><methodname>base64_decode</methodname>
      <methodparam><type>string</type><parameter>encoded_data</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>base64_decode</function> dekodiert
     <parameter>encoded_data</parameter> und bringt die Originaldaten
     wieder. Die ausgegebenen Dateien können im Binärformat sein.
    </para>
    <para>
     Siehe auch: <function>base64_encode</function>, RFC-2045 Sektion
     6.8.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.base64-encode">
   <refnamediv>
    <refname>base64_encode</refname> 
    <refpurpose>
     Kodiert Daten MIME base64
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>base64_encode</methodname>
      <methodparam><type>string</type><parameter>data</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>base64_encode</function> kodiert
     <parameter>data</parameter> mit base64.  Diese Kodierung ist
     dafür da, Binärdaten über Technologien, die 8-bit nicht sauber
     übertragen können, wie z.B. Emails.
    </para>
    <para>
     Base64-kodierte Daten benötigen ungefähr 33% mehr Speicher als
     die Originaldaten.
    </para>
    <para>
     Siehe auch: <function>base64_decode</function>,
     <function>chunk_split</function>, RFC-2045 Sektion 6.8.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.parse-url">
   <refnamediv>
    <refname>parse_url</refname>
    <refpurpose>
     Analysiert eine URL und zerlegt diese in ihre Bestandteile.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>parse_url</methodname>
      <methodparam><type>string</type><parameter>url</parameter></methodparam>
     </methodsynopsis>
    <para>
     Diese Funktion erzeugt ein assiziatives Array aus den
     verschiedenen Teilen einer URL. Diese umfassen "scheme", "host",
     "port", "user", "pass", "path", "query", und "fragment".
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rawurldecode">
   <refnamediv>
    <refname>rawurldecode</refname>
    <refpurpose>Dekodierung von URL-kodierten Strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
     <methodsynopsis>
      <type>string</type><methodname>rawurldecode</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt einen String zurück, in dem die Abschnitte, die mit einem
     Prozent-Zeichen (<literal>%</literal>) beginnen (dem ein 2-stelliger
     hexadezimal-Wert folgt), ersetzt wurden durch Buchstaben. So wird
     z.B. die Zeichenkette <screen>foo%20bar%40baz</screen> umgewandelt
     in <screen>foo bar@baz</screen>.
    </para>
    <simpara>
     Siehe auch <function>rawurlencode</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.rawurlencode">
   <refnamediv>
    <refname>rawurlencode</refname>
    <refpurpose>URL-Kodierung nach RFC 1738</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
     <methodsynopsis>
      <type>string</type><methodname>rawurlencode</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt eine Zeichenkette zurück, in der alle Sonderzeichen ausser
     <screen>-_.</screen> durch ein Prozent-Zeichen
     (<literal>%</literal>), gefolgt von einer 2-stelligen hexadezimalen
     Zahl, ersetzt worden sind. Dies ist die Kodierung nach RFC 1738 
     zum Schutz von Zeichen, die als spezielle URL-Trennzeichen zu 
     interpretieren sind oder die vor einer Umwandlung durch
     Übertragungs-Medien mit Zeichen-Konvertierung (z.B. einige 
     E-Mail-Systeme) bewahrt werden sollen.
     Falls sie z.B. ein Passwort in eine FTP-URL einbinden wollen:
     <example>
      <title><function>rawurlencode</function>-Beispiel 1:</title>
      <programlisting role="php">
echo '&lt;A HREF="ftp://user:', rawurlencode ('foo @+%/'),
     '@ftp.mein.de/x.txt">';
      </programlisting>
     </example>
     Oder sie wollen Informationen in der Pfadangabe der URL
     übertragen:
     <example>
      <title><function>rawurlencode</function>-Beispiel 2:</title>
      <programlisting role="php">
echo '&lt;A HREF="http://x.de/leitung_list_skript/',
    rawurlencode ('Verkauf und Marketing/Hamburg'), '">';
      </programlisting>
     </example>
    </para>
    <simpara>
     Siehe auch <function>rawurldecode</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.urldecode">
   <refnamediv>
    <refname>urldecode</refname>
    <refpurpose>Dekodiert eine URL-kodierte Zeile</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
     <methodsynopsis>
      <type>string</type><methodname>urldecode</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
     </methodsynopsis>
    <para>
     Dekodiert jede <literal>%<replaceable>##</replaceable></literal>
     Kodierung einer Zeile. Die dekodierte Zeile wird zurückgegeben.
     <example>
      <title><function>urldecode</function> Beispiel</title>
      <programlisting role="php">
$a = split ('&amp;', $querystring);
$i = 0;
while ($i &lt; count ($a)) {
    $b = split ('=', $a [$i]);
    echo 'Value for parameter ', htmlspecialchars (urldecode ($b [0])),
         ' is ', htmlspecialchars (urldecode ($b [1])), "&lt;BR&gt;";
    $i++;
}
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>urlencode</function>. und
     <function>rawurlencode</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.urlencode">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose>URL-kodiert eine Zeile</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
     <methodsynopsis>
      <type>string</type><methodname>urlencode</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
     </methodsynopsis>
    <para>
     Zeigt eine Zeile an, bei der alle nicht alphanumerischen Zeichen
     bis auf <literal>-_.</literal> durch das Prozentzeichen
     (<literal>%</literal>) ersetzt werden, gefolgt von zwei
     Hexzeichen und Leerzeichen durch ein Pluszeichen
     (<literal>+</literal>) ersetzt werden.  Genauso werden auch Daten
     kodiert, die über ein WWW-Formulart gesendet werden und auf die
     gleiche Weise mit
     <literal>application/x-www-form-urlencoded</literal> kodiert
     werden.  Dies unterscheidet sich von der Kodierung in RFC1738
     (siehe <function>rawurlencode</function>) bei dem aus
     historischen Gründen Leerzeichen wie Pluszeichen (+) kodiert
     werden.  Diese Funktion ist sehr nützlich, wenn eine Zeichenkette
     kodiert werden soll und die Variablen an die nächste Seite
     weitergegeben werden sollen:
     <example>
      <title><function>urlencode</function> Beispiel</title>
      <programlisting role="php">
echo '&lt;A HREF="mycgi?foo=', urlencode ($userinput), '"&gt;';
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>urldecode</function> und
     <function>rawurldecode</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->


