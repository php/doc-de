<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.strings">
  <title>String-Funktionen</title>
  <titleabbrev>Strings</titleabbrev>
<!-- Anmerkung des Übersetzers:
     entspricht /en/functions/strings.xml 1.58 -->

  <partintro>
   <simpara>
    Mit diesen Funktionen werden Strings (Zeichenketten) auf
    verschiedene Arten verändert. Spezielle Anwendungen können in
    den Abschnitten zu regulären Ausdrücken (regular expression)
    und der URL-Handhabung gefunden werden.
   </simpara>
   <para>
    Informationen zum Funktionsweise von Strings (insbesondere beim
    Gebrauch von einfachen bzw. doppelten Anführungszeichen und
    Escape-Sequenzen) erhalten Sie unter dem
    <link linkend="language.types.string">Strings</link>-Eintrag
    unter <link linkend="language.types">Typen</link> des Manuals.
   </para>

  </partintro>

  <refentry id="function.addcslashes">
   <refnamediv>
    <refname>AddCSlashes</refname>
    <refpurpose>
     Stellt Zeichen eines Strings ein "\" voran (wie in C)
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>addcslashes</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string <parameter>charlist</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Es wird ein String zurück gegeben, in dem jedem Zeichen, das in
     <parameter>charlist</parameter> steht, ein "\" voran gestellt
     wurde. Teile wie <literal>\n</literal>, <literal>\r</literal>
     etc. werden wie in C übergangen, ASCII-Zeichen kleiner als 32
     und grösser als 126 werden in ihren oktal-Wert umgesetzt. Seien
     Sie bei der Umsetzung von alphanumerischen Zeichen vorsichtig.
     Sie können in <parameter>charlist</parameter> einen Bereich wie
     "\0..\37" angeben. Dadurch wird allen ASCII-Zeichen von 0 bis
     31 ein "\" voran gestellt.
     <example>
      <title><function>addcslashes</function> Beispiel:</title>
      <programlisting role="php">
$escaped = addcslashes ($not_escaped, "\0..\37!@\177..\377");
      </programlisting>
     </example>
     <note>
      <simpara>
       Diese Funktion ist ab Version PHP4b3-dev verfügbar.</simpara>
     </note>
    </para>
    <para>
     Siehe auch <function>stripcslashes</function>, 
     <function>stripslashes</function>, 
     <function>htmlspecialchars</function>,
     <function>htmlspecialchars</function> und 
     <function>quotemeta</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.addslashes">
   <refnamediv>
    <refname>AddSlashes</refname>
    <refpurpose>
     Stellt bestimmten Zeichen eines Strings einen Backslash "\"
     (Rückstrich) voran
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>addslashes</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt einen String (Zeichenkette) zurück, in dem bestimmten
     Zeichen ein Backslash "\" voran gestellt wurde. Diese Funktion
     ist z.B. für Datenbankabfragen wichtig. Die behandelten Zeichen
     sind der einfache und der doppelte Anführungsstrich
     (<literal>'</literal> und <literal>"</literal>), der Rückstrich
     (<literal>\</literal>) selbst sowie NUL (das Null-Byte).
    </para>
    <para>
     Siehe auch <function>stripslashes</function>, 
     <function>htmlspecialchars</function> und
     <function>quotemeta</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.bin2hex">
   <refnamediv>
    <refname>bin2hex</refname>
    <refpurpose>
     Wandelt Binär-Daten in ihre hexadezimale Entsprechung um
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>bin2hex</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Es wird ein ASCII-String mit der hexadezimalen Wiedergabe des
     Parameters <parameter>str</parameter> zurück gegeben. Die 
     Umwandlung geschieht byteweise mit dem höchsten Anteil (4 Bit,
     "high-nibble") zuerst.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.chop">
   <refnamediv>
    <refname>chop</refname>
    <refpurpose>Entfernt Leerzeichen, Tabulatoren und Zeilenvorschübe am String-Ende</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>chop</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt die in <parameter>str</parameter> enthaltene Zeichenkette
     ohne evtl. vorhandene Leerzeichen, Tabulatoren
     oder Zeilenvorschübe am String-Ende zurück.
     <example>
      <title><function>chop</function>-Beispiel:</title>
      <programlisting role="php">
$string = "10 Leerzeichen am String-Ende          ";
echo chop($string)."?";

// Die Ausgabe lautet:
10 Leerzeichen am String-Ende?
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      <function>chop</function> unterscheidet sich von der 
      Perl-Funktion <parameter>chop()</parameter>, die das letzte
      Zeichen eines Strings entfernt.
     </para>
    </note>
    <para>
     Siehe auch <function>trim</function>, <function>ltrim</function>
     und <function>rtrim</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.chr">
   <refnamediv>
    <refname>chr</refname>
    <refpurpose>Gibt ein einzelnes Zeichen zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>chr</function></funcdef>
      <paramdef>int <parameter>ascii</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt einen 1-Zeichen-String zurück, der dem mit
     <parameter>ascii</parameter> angegebenem Zeichen entspricht.
     <example>
      <title><function>chr</function> Beispiel:</title>
      <programlisting role="php">
$str .= chr (27); /* fügt an das Ende von $str ein Escape-Zeichen an */

/* Oft wird diese Funktionalität gebraucht */

$str = sprintf ("Dieser String endet mit einem Escape: %c", 27);
      </programlisting>
     </example>
     Diese Funktion ergänzt <function>ord</function>. Siehe auch
     <function>sprintf</function> mit dem Formatierungs-String
     <literal>%c</literal>.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.chunk-split">
   <refnamediv>
    <refname>chunk_split</refname>
    <refpurpose>Zerlegt einen String in Teile gleicher Länge</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>chunk_split</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>chunklen</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>end</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Kann für die Aufteilung eines Strings in kleinere Stücke verwendet
     werden. Dies ist z.B. hilfreich bei der Umwandlung von <link
     linkend="function.base64-encode">base64_encode</link>-Ausgaben, die
     der RFC 2045 entsprechen müssen. Diese Funktion fügt nach per
     <parameter>chunklen</parameter> angegebene Zeichen (Vorgabe: alle
     76 Zeichen) den mittels <parameter>end</parameter> angegebenen
     String (Vorgabe ist hierfür "\r\n") ein. Die Funktion gibt den
     neuen String zurück. Die Original-Zeichenkette bleibt unverändert.
     <example>
      <title><function>chunk_split</function> Beispiel:</title>
      <programlisting role="php">
# Formatiere den String $daten in die RFC 2045 Schreibweise

$neuer_string = chunk_split (base64_encode($daten));
      </programlisting>
     </example>
     Diese Funktion arbeitet wesentlich schneller als
     <function>ereg_replace</function>.
     <note>
      <para>
       <function>chunk_split</function> ist ab Version 3.0.6 vorhanden.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.convert-cyr-string">
   <refnamediv>
    <refname>convert_cyr_string</refname>
    <refpurpose>
     Setzt Strings von einem kyrillischen Zeichensatz in einen anderen
     um
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>convert_cyr_string</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string <parameter>from</parameter></paramdef>
      <paramdef>string <parameter>to</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion konvertiert den angegebenen String von einem
     kyrillischen Zeichensatz in einen anderen. Die Argumente
     <parameter>from</parameter> und <parameter>to</parameter>
     sind einzelne Zeichen die den Ausgangs- und Zielzeichensatz
     definieren. Die unterstützten Zeichensätze sind:
     <itemizedlist>
      <listitem>
       <simpara>
	k - koi8-r
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	w - windows-1251
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	i - iso8859-5
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	a - x-cp866
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	d - x-cp866
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	m - x-mac-cyrillic
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.count-chars">
   <refnamediv>
    <refname>count_chars</refname>
    <refpurpose>
     Gibt Informationen über die in einem String enthaltenen Zeichen
     zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>count_chars</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>
       <parameter>
        <optional>mode</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zählt die Häufigkeit des Vorkommens jedes einzelnen Byte-Wertes
     (0..255) in <parameter>string</parameter> und gibt sie auf 
     verschiedene Arten zurück. Der optionale Parameter
     <parameter>mode</parameter> ist voreingestellt auf 0.
     In Abhängigkeit des <parameter>mode</parameter>-Wertes gibt
     <function>count_chars</function> das folgende zurück:
     <itemizedlist>
      <listitem>
       <simpara>
	0 - ein Array mit Byte-Werten für die Häufigkeit (auch 0-Vorkommen)
  jedes Zeichens.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	1 - wie 0, aber nur Häufigkeiten grösser 0.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	2 - wie 0, aber nur Häufigkeiten gleich 0.
       </simpara>
      </listitem> 
      <listitem>
       <simpara> 
	3 - ein String der überhaupt vorkommenden Zeichen enthält.
       </simpara>
      </listitem> 
      <listitem>
       <simpara> 
	4 - ein String der alle nicht vorkommenden Zeichen enthält.
       </simpara>
      </listitem> 
     </itemizedlist>
    </para>
    <note>
     <para>
      Diese Funktion existiert ab PHP 4.0.
     </para> 
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.crc32">
   <refnamediv>
    <refname>crc32</refname>
    <refpurpose>
     Berechnet den polynomischen CRC32-Wert eines Strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>crc32</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Berechnet die zyklisch redundante polynomische Prüfsumme mit einer
     Länge von 32-Bit für <parameter>str</parameter>. Dies wird regulär
     für die Integritätsprüfung übermittelter Daten verwendet.
    </para>
    <para>
     Siehe auch: <function>md5</function>.
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.crypt">
   <refnamediv>
    <refname>crypt</refname>
    <refpurpose>DES-Verschlüsselung eines Strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>crypt</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>salt</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>crypt</function> verschlüsselt einen String unter
     Verwendung der Standard-<abbrev>DES</abbrev>-Verschlüsselungs-Methode
     von Unix. Die zu übergebenden Argumente sind der zu verschlüsselnde
     String und optional ein 2-Zeichen-Salt-String, der die Schlüsselbasis
     bildet. Lesen Sie die Man-Pages ihres Unix-Systems für mehr
     Informationen zu den Crypt-Funktionen.
    </para>
    <simpara>
     Ist kein Salt-Argument angegeben, wird es von PHP nach dem
     Zufalls-Prinzip erzeugt.
    </simpara>
    <simpara>
     Einige Betriebssystem unterstützen mehr als eine Methode zur
     Verschlüsselung. So wird manchmal der DES- durch einen
     MD5-Algorithmus ersetzt. Der verwendete Schlüssel wird durch das
     Salt-Argument bestimmt. Zur Installations-Zeit untersucht PHP die
     vorhandenen Möglichkeiten und wird, abhängig vom Ergebnis dieser
     Prüfung, auch andere Schlüssel-Typen zulassen. Wird kein Salt
     unterstützt, erzeugt PHP per Voreinstellung einen 2-Zeichen
     DES-Salt, es sei denn auf ihrem System existiert MD5. Dann wird PHP
     einen zufälligen MD5-Salt generieren. PHP erzeugt eine Konstante
     namens CRYPT_SALT_LENGTH. Diese besagt, ob ihr System ein reguläres
     2-Zeichen Salt oder das längere 12-Zeichen MD5-Salt unterstützt.
    </simpara>
    <simpara>
     Wenn Sie das gegebene Salt benutzen, sollten Sie beachten, dass
     dieser Wert nur einmal bestimmt wird. Rufen Sie diese Funktion nun
     rekursiv auf, beeinflusst das nicht nur das Ergebnis, sondern
     unter Umständen auch die Sicherheit.
    </simpara>  
    <simpara>
     Die Standard-DES-Verschlüsselung <function>crypt</function>
     enthält das Salt als erste 2 Zeichen der Ausgabe.
    </simpara>
    <simpara>
     Auf Systemen, wo die crypt()-Funktion meherere Verschlüsselungen
     unterstützt, werden die folgenden Konstanten auf 0 oder 1
     gesetzt, je nachdem, ob der entsprechende Typ verfügbar ist:
    </simpara>
    <itemizedlist>
     <listitem>
      <simpara>
       CRYPT_STD_DES - Standard DES-Schlüssel mit 2-Zeichen Salt
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_EXT_DES - Erweiterter DES-Schlüssel mit einem 9-Zeichen Salt
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_MD5 - MD5-Schlüssel mit 12-Zeichen Salt, beginnend mit $1$
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_BLOWFISH - Erweiterter DES-Schlüssel, 16-Zeichen Salt,
       beginnend mit $2$
      </simpara>
     </listitem>
    </itemizedlist>
    <simpara>
     Der veschlüsselte String kann nicht entschlüsselt werden, da
     <function>crypt</function> eine Einweg-Verschlüsselung ist.
    </simpara>
    <simpara>
     Siehe auch: <function>md5</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.echo">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>Gibt einen oder mehrere Strings aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>echo</function></funcdef>
      <paramdef>string <parameter>arg1</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>argn</optional>...</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt alle als Parameter angegebenen Strings aus.
    </simpara>
    <para>
     <function>echo</function> ist keine Funktion, sonder ein
     Sprach-Konstrukt. Deshalb brauchen Sie keine Klammern zu
     verwenden.
     <example>
      <title><function>echo</function>-Beispiel:</title>
      <programlisting role="php">
echo "Hallo Welt";

echo "Dieses
Beispiel
umfasst
mehrere
Zeilen.";
      </programlisting>
     </example>
    </para>	 
    <note>
     <para>
      Falls Sie mehr als einen auszugebenden Parameter angeben,
      dürfen Sie diese nicht in Klammern setzen.
     </para>
    </note>
    <simpara>
     Siehe auch:
     <function>print</function>,
     <function>printf</function> und
     <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.explode">
   <refnamediv>
    <refname>explode</refname>
    <refpurpose>
     Zerteilt einen String anhand eines Trennzeichens
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>explode</function></funcdef>
      <paramdef>string <parameter>separator</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>limit</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt ein Array aus Strings zurück. Jeder String ist ein Teil von
     <parameter>string</parameter>. Die Trennung erfolgt an der mit
     <parameter>separator</parameter> angegebenen Zeichenkette (ein
     oder mehrere Zeichen). Ist der Parameter <parameter>limit
     </parameter>angegeben, werden maximal <parameter>limit</parameter>
     Teile zurück gegeben. Das letzte Element enthält dann den ganzen
     Rest von <parameter>string</parameter>.
    </para>
    <para>
     <example>
      <title><function>explode</function>-Beispiel:</title>
      <programlisting role="php">
$pizza = "Teil1 Teil2 Teil3 Teil4 Teil5 Teil6";
$pieces = explode (" ", $pizza);
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>split</function> und
     <function>implode</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-html-translation-table">
   <refnamediv>
    <refname>get_html_translation_table</refname>
    <refpurpose>
     Gibt die Übersetzungs-Tabelle zurück, die von
     <function>htmlspecialchars</function> und
     <function>htmlentities</function> benutzt wird
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string 
       <function>get_html_translation_table</function>
      </funcdef>
      <paramdef>int <parameter>table</parameter></paramdef>
      <paramdef>
       int <parameter><optional>quote_style</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>get_html_translation_table</function> ermittelt die
     intern benutzte Übersetzungs-Tabelle, die von den Funktionen
     <function>htmlspecialchars</function> und<function>
     htmlentities</function> benutzt wird. Es gibt zwei neue 
     Parameter (<parameter>HTML_ENTITIES</parameter> und
     <parameter>HTML_SPECIALCHARS</parameter>), die es ihnen
     ermöglichen, die gewünschte Tabelle auszuwählen und wie bei den
     <function>htmlspecialchars</function> bzw.
     <function>htmlentities</function>-Funktionen können Sie optional
     den Quote-Stil, mit dem Sie arbeiten, angeben. Voreingestellt ist
     der ENT_COMPAT-Modus. Vergleichen Sie dazu die Modus-Beschreibung
     unter <function>htmlspecialchars</function>.
     <example>
      <title>Beispiel zur Übersetzungs-Tabelle</title>
      <programlisting role="php">
$trans = get_html_translation_table (HTML_ENTITIES);
$str = "Hallo & &lt;Frau> & Krämer";
$encoded = strtr ($str, $trans);
      </programlisting>
     </example>
     Die <literal>$encoded</literal>-Variable wird jetzt "Hallo
     &<sgmltag>amp</sgmltag>;
     &<sgmltag>lt</sgmltag>;Frau&<sgmltag>gt</sgmltag>;
     &<sgmltag>amp</sgmltag>; Kr&<sgmltag>auml</sgmltag>;mer".
     enthalten.
    </para>
    <para>
     Mittels <function>array_flip</function> können Sie die 
     Richtung der Übersetzung umkehren.
     <informalexample>
      <programlisting role="php">
$trans = array_flip ($trans);
$original = strtr ($str, $trans);
      </programlisting>
     </informalexample>
      Der Inhalt von <literal>$original</literal> wird "Hallo &
      &lt;Frau> & Krämer" sein.
     <note>
      <para>
       Diese Funktion wurde in PHP 4.0 neu hinzu gefügt.
      </para> 
     </note>
    </para>
    <para>
     Siehe auch <function>htmlspecialchars</function>,
     <function>htmlentities</function>, <function>strtr</function>
     und <function>array_flip</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-meta-tags">
   <refnamediv>
    <refname>get_meta_tags</refname>
    <refpurpose>
     Liest die Attribut-Inhalte aller Meta-Tags aus und gibt diese
     als Array zurück
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>get_meta_tags</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>int
       <parameter><optional>use_include_path</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Öffnet <parameter>filename</parameter> und untersucht diese Zeile
     für Zeile auf das Vorkommen von &lt;meta>-Tags der Form
     <example>
      <title>Meta-Tags Beispiel:</title>
      <programlisting role="html">
&lt;meta name="author" content="Name">
&lt;meta name="tags" content="PHP3-Dokumentation">
&lt;/head> &lt;!-- Ende der Untersuchung -->
      </programlisting>
     </example>
     (Eine auf einem MAC erzeugte Datei kann nicht unter UNIX auf
     Meta-Tags untersucht werden, da die Zeilenenden anders sind.)
    </para>
    <para> 
     Der Wert der name-Eigenschaft wird Schlüssel, der Wert der
     content-Eigenschaft wird Wert des zurück gegebenen Arrays. Dadurch
     können Sie gewöhnliche Array-Funktionen nutzen, dieses zu
     durchlaufen oder einzelne Werte anzusprechen. Sonderzeichen
     innerhalb der name-Eigenschaft werden durch ´_´ ersetzt, der Rest
     wird in Kleinbuchstaben umgewandelt.
    </para>
    <para>
     Ist <parameter>use_include_path</parameter> auf 1 gesetzt, wird
     PHP versuchen, die Datei anhand des Standard-Include-Pfades zu
     öffnen.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.hebrev">
   <refnamediv>
    <refname>hebrev</refname>
    <refpurpose>
     Konvertiert (natürlichen) hebräischen Text in sichtbaren Text
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hebrev</function></funcdef>
      <paramdef>string <parameter>hebrew_text</parameter></paramdef>
      <paramdef>int 
	    <parameter><optional>max_chars_per_line</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Der optionale Parameter <parameter>max_chars_per_line</parameter>
     entspricht der Zeichenzahl pro Ausgabe-Zeile. Wortbrüche werden,
     soweit möglich, vermieden.
    </para>
    <para>
     Siehe auch: <function>hebrevc</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.hebrevc">
   <refnamediv>
    <refname>hebrevc</refname>
    <refpurpose>
     Konvertiert (natürlichen) hebräischen Text in sichtbaren Text
     incl. Anpassung von Zeilenumbrüchen
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>hebrevc</function></funcdef>
      <paramdef>string <parameter>hebrew_text</parameter></paramdef>
      <paramdef>int 
	    <parameter><optional>max_chars_per_line</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion ist gleich <function>hebrev</function>, mit dem
     Unterschied, dass Zeilenumbrüche (\n) zu "&lt;br&gt;\n"
     umgewandelt werden. Der optionale Parameter 
     <parameter>max_chars_per_line</parameter> entspricht der
     Zeichenzahl pro Ausgabe-Zeile. Wortbrüche werden, soweit möglich,
     vermieden.
    </para>
    <para>
     Siehe auch: <function>hebrev</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.htmlentities">
   <refnamediv>
    <refname>htmlentities</refname>
    <refpurpose>
     Wandelt alle Sonderzeichen in entsprechende HTML-Codes um
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>htmlentities</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>
       int <parameter><optional>quote_style</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion ist völlig identisch zu 
     <function>htmlspecialchars</function>, ausser dass alle Zeichen,
     die HTML-Code-Entsprechungen haben, in diese Codes umgewandelt
     werden. Wie bei htmlspecialchars() gibt es ein optionales zweites
     Argument, das die Behandlung von einfachen bzw. den doppelten
     Anführungszeichen beeinflusst. Im Modus ENT_COMPAT (default)
     werden nur die doppelten, im Modus ENT_QUOTES beide Arten und im
     Modus ENT_NOQUOTES keine Anführungszeichen umgewandelt.
    </para>
    <para>
     Gegenwärtig wird der ISO-8859-1-Zeichensatz verwendet. Beachten
     Sie, dass das optionale 2. Argument erst ab PHP 3.0.17 bzw. PHP
     4.0.3. verfügbar ist.
    </para>
    <para>
     Siehe auch <function>htmlspecialchars</function> und
     <function>nl2br</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.htmlspecialchars">
   <refnamediv>
    <refname>htmlspecialchars</refname> 
    <refpurpose>
     Diese Funktion wandelt Sonderzeichen in HTML-Codes um
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>htmlspecialchars</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>
       int <parameter><optional>quote_style</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Bestimmte Zeichen haben eine spezielle Bedeutung in HTML und
     sollten in HTML-Code dargestellt werden, um ihre Bedeutung zu
     behalten. Diese Funktion liefert einen String zurück, in dem 
     diese Darstellung / Umsetzung teilweise durchgeführt wird. Die
     hier vorgenommenen Umsetzungen sind nützlich für die alltägliche
     Web-Programmierung. Sofern Sie eine vollständige Umsetzung der
     HTML-Zeichen benötigen, sollten Sie statt dessen
     <function>htmlentities</function> verwenden.
    </para>
    <simpara>
     Sinnvoll beim Schutz von benutzerabhängigen Texteingaben (z.B. in
     Gästebuch-Formularen). Das optionale 2. Argument (Quote-Stil) 
     beeinflusst die Behandlung der einfachen und doppelten
     Anführungsstriche. Der Modus ENT_COMPAT (default) ist
     abwärtskompatibel und behandelt nur die doppelten, nicht aber die
     einfachen Anführungsstriche. ENT_QUOTES behandelt beide und
     ENT_NOQUOTES keine Art(en) von Anführungszeichen.
    </simpara>
    <para>
     Folgende Umsetzungen werden vorgenommen:
     <itemizedlist>
      <listitem>
       <simpara>
        '&amp;' (kaufmännisches und) wird zu '&amp;amp;'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        '&quot;' (doppelte Anführungszeichen) wird zu '&amp;quot;',
                 wenn ENT_NOQUOTES nicht gesetzt ist
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        '&#039;' (einfaches Anführungszeichen) wird zu '&amp;#039;',
                 wenn ENT_QUOTES gesetzt ist
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        '&lt;' (kleiner als) wird zu '&amp;lt;'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        '&gt;' (grösser als) wird zu '&amp;gt;'
       </simpara>
      </listitem>
     </itemizedlist>
     <example>
      <title><function>htmlspecialchars</function>-Beispiel:</title>
      <programlisting role="php">
$neu = htmlspecialchars("&lt;a href='test'&gt;Test&lt;/a&gt;", ENT_QUOTES);
      </programlisting>
     </example>
    </para>
    <para>
     Beachten Sie, dass diese Funktion nur die o.a. Umwandlungen
     durchführt. Zur vollständigen Code-Umwandlung siehe
     <function>htmlentities</function>. Beachten Sie auch, dass das
     optionale 2. Argument erst ab PHP 3.0.17 bzw. PHP 4.0.3. verfügbar
     ist.
    </para>
    <para>
     Siehe auch <function>htmlentities</function> und
     <function>nl2br</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.implode">
   <refnamediv>
    <refname>implode</refname>
    <refpurpose>Verbindet Array-Elemente zu einem String</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>implode</function></funcdef>
      <paramdef>string <parameter>glue</parameter></paramdef>
      <paramdef>array <parameter>pieces</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt einen String zurück, dessen Inhalt allen Array-Elementen
     in der fortlaufenden Reihenfolge ihres Vorkommens im Array
     entspricht. Die Stringteile sind durch den im Parameter glue
     enthaltenen String verbunden.
     <example>
      <title><function>implode</function>-Beispiel:</title>
      <programlisting role="php">
$Trennung_durch_Doppelpunkt = implode (":", $array);
      </programlisting>
     </example>
    </para>
    <simpara>
     Siehe auch <function>explode</function>, <function>join</function>
     und <function>split</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.join">
   <refnamediv>
    <refname>join</refname>
    <refpurpose>Join verbindet Array-Elemente zu einem String</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>join</function></funcdef>
      <paramdef>string <parameter>glue</parameter></paramdef>
      <paramdef>array <parameter>pieces</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>join</function> ist ein Alias von
     <function>implode</function> (die Funktionalität ist also
     vollkommen identisch).
    </simpara>
    <simpara>
     Siehe auch <function>explode</function>, <function>implode</function>
     und <function>split</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.levenshtein">
   <refnamediv>
    <refname>levenshtein</refname> 
    <refpurpose>
		 Berechnet den Levenshtein-Unterschied zweier Strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>levenshtein</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>int <function>levenshtein</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
      <paramdef>int <parameter>cost_ins</parameter></paramdef>
      <paramdef>int <parameter>cost_rep</parameter></paramdef>
      <paramdef>int <parameter>cost_del</parameter></paramdef>
     </funcprototype> 
     <funcprototype> 
      <funcdef>int <function>levenshtein</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
      <paramdef>function <parameter>cost</parameter></paramdef>
     </funcprototype> 
    </funcsynopsis>
    <para>
     Diese Funktion errechnet die Differenz zwischen den als Argumente
     übergebenen zwei Strings. Ist einer der Strings länger als die
     zulässigen 255 Zeichen, wird -1 zurück gegeben.
    </para>
    <para>
     Die Levenshtein-Differenz ist definiert als die minimale Anzahl
     an Zeichen, die ersetzt, eingefügt oder gelöscht werden müssen um
     den <parameter>str1</parameter> nach <parameter>str2</parameter>
     umzusetzen.
     Die Komplexität des Algorithmus ist <literal>O(m*n)</literal>,
     wobei <literal>n</literal> und <literal>m</literal> der Länge der
     Strings <parameter>str1</parameter> und
     <parameter>str2</parameter> (viel besser als bei der Funktion
     <function>similar_text</function>, wo sie O(max(n,m)**3) beträgt).
    </para>
    <para>
     Siehe auch <function>soundex</function>, 
     <function>similar_text</function> und 
     <function>metaphone</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ltrim">
   <refnamediv>
    <refname>ltrim</refname> 
    <refpurpose>
     Entfernt führende Leerraum eines Strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ltrim</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Es wird Leerraum ab Stringanfang entfernt und der um diesen
     gekürzte String zurück gegeben. Als Leerraum gelten die Zeichen
     "\n", "\r", "\t", "\v", "\0" und das Leerzeichen.
    </para>
    <para>
     Siehe auch <function>chop</function>, <function>rtrim</function>
     und <function>trim</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.md5">
   <refnamediv>
    <refname>md5</refname>
    <refpurpose>Errechnet den MD5-Code eines Strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>md5</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Berechnet den MD5-Code von <parameter>str</parameter> unter 
     Verwendung des <ulink url="&url.rfc;rfc1321.html">RSA Data
     Security, Inc. MD5 Message-Digest Algorithmus</ulink>.
    </para>
    <para>
     Siehe auch: <function>crc32</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.metaphone">
   <refnamediv>
    <refname>metaphone</refname>
    <refpurpose>
     Berechnet den metaphone-Schlüssel eines Strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>metaphone</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Errechnet den metaphone-Schlüssel von <parameter>str</parameter>.
    </para>
    <para>
     Genau wie <function>soundex</function> berechnet metaphone den
     gleichen Schlüssel für ähnlich klingende Wörter. Die
     Metaphone-Funktion arbeitet genauer als
     <function>soundex</function>, da sie die Grundregeln der
     englischen Aussprache kennt. Die durch metaphone erzeugten
     Schlüüsel sind von variabler Länge.
    </para>
    <para>
     Der Metaphone-Algorithmus wurde entwickelt von Lawrence Philips
     &lt;lphilips@verity.com> und ist beschrieben in ["Practical
     Algorithms for Programmers", Binstock & Rex, Addison Wesley,
     1995].
     <note>
      <para>
       Diese Funktion ist ab PHP 4.0 verfügbar.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.nl2br">
   <refnamediv>
    <refname>nl2br</refname>
    <refpurpose>
     Fügt HTML-Zeilen-Umbrüche vor Zeilenumbrüche in Strings ein
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>nl2br</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt den <parameter>string</parameter> mit einem eingefügten
     '&lt;br /&gt;' vor dem Neue-Zeile-Zeichen zurück.
    </para>
    <para>
     Siehe auch <function>htmlspecialchars</function> und
     <function>htmlentities</function> and
     <function>wordwrap</function>.
    </para>
   </refsect1>
  </refentry>
 
  <refentry id="function.ord">
   <refnamediv>
    <refname>ord</refname>
    <refpurpose>Gibt den ASCII-Wert eines Zeichens zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ord</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Es wird der ASCII-Wert des ersten Zeichens von
     <parameter>string</parameter> zurück gegeben. Diese Funktion
     steht in Zusammenhang mit <function>chr</function>.
     <example>
      <title><function>ord</function>-Beispiel:</title>
      <programlisting role="php">
if (ord ($str) == 10) {
    echo "Das erste Zeichen von \$str ist ein Zeilenvorschub.\n";
}
      </programlisting>
     </example>
    </para>
    <simpara>
     Siehe auch <function>chr</function>.
    </simpara> 
   </refsect1>
  </refentry>

  <refentry id="function.parse-str">
   <refnamediv>
    <refname>parse_str</refname>
    <refpurpose>Überträgt einen String in Variable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>parse_str</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>
       array <parameter><optional>arr</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Durchsucht <parameter>str</parameter> als ob er der Query-String
     einer URL-Übergabe via GET wäre und gibt die Werte 
     Variableninhalte zurück. Ist der zweite Parameter 
     <parameter>arr</parameter> gegeben, werden die Variablen-Werte in
     diesem Array als dessen Elemente gespeichert.
    </para>
    <para>
     <example>
      <title>Der Gebrauch von <function>parse_str:</function></title>
      <programlisting role="php">
$str = "erster=nichts&amp;zweiter[]=etwas&amp;zweiter[]=nochwas";
parse_str($str);
echo $erster;     /* gibt "nichts" aus */
echo $zweiter[0]; /* gibt "etwas" aus */
echo $zweiter[1]; /* gibt "nochwas" aus */
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.print">
   <refnamediv>
    <refname>print</refname>
    <refpurpose>Ausgabe eines Strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>print</function></funcdef>
      <paramdef>string <parameter>arg</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt <parameter>arg</parameter> aus.
    </simpara>
    <simpara>
     Siehe auch <function>echo</function>, <function>printf</function>
     und <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.printf">
   <refnamediv>
    <refname>printf</refname>
    <refpurpose>Gibt einen formatierten String aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>printf</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>args</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Erzeugt eine Ausgabe abhängig von <parameter>format</parameter>.
     <parameter>Format</parameter> wird in der Dokumentation zu
     <function>sprintf</function> näher beschrieben.
    </simpara>
    <simpara>
     Siehe auch <function>print</function>,
     <function>sprintf</function>, <function>sscanf</function>,
     <function>fscanf</function> und <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.quoted-printable-decode">
   <refnamediv>
    <refname>quoted_printable_decode</refname>
    <refpurpose>
     Konvertiert einen "quoted-printable"-String in einen 8-Bit-String
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string
       <function>quoted_printable_decode</function>
      </funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Diese Funktion gibt einen 8-Bit-String zurück, der der Konvertierung
     aus einem "quoted-printable"-String entspricht. Diese Funktion ist
     ähnlich wie <function>imap_qprint</function> bis auf die Tatsache,
     dass sie kein IMAP-Module erfordert.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.quotemeta">
   <refnamediv>
    <refname>QuoteMeta</refname>
    <refpurpose>Quoten von Meta-Zeichen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>quotemeta</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Der Inhalt von <parameter>str</parameter> wird mit einem
     Rückstrich ("Backslash", <literal>\</literal>) vor jedem Vorkommen
     von <screen>. \\ + * ? [ ^ ] ( $ )</screen> versehen ("quoten")und
     zurück gegeben.
    </para>
    <simpara>
     Siehe auch <function>addslashes</function>,
     <function>htmlentities</function>, 
     <function>htmlspecialchars</function>, 
     <function>nl2br</function> und 
     <function>stripslashes</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.rtrim">
   <refnamediv>
    <refname>rtrim</refname>
    <refpurpose>Entfernt Leerzeichen am String-Ende</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcdef>string <function>rtrim</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Gibt den als Argument übergebenen String ohne abschließende
     Leerzeichen (auch "Neue-Zeile-"Steuerzeichen werden entfernt).
     Dies ist ein Alias zu <function>chop</function>.
     <example>
      <title><function>rtrim</function>-Beispiel:</title>
      <programlisting role="php">
$getrimmt = rtrim ($line);
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>chop</function>, <function>ltrim</function>
     und <function>trim</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sscanf">
   <refnamediv>
    <refname>sscanf</refname>
    <refpurpose>
     Übertragt die Eingaben eines Strings in ein angegebenes Format
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>sscanf</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>var1</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Die Funktion <function>sscanf</function> ist die Eingabe analog zu
     <function>printf</function>. <function>sscanf</function> liest den
     <parameter>str</parameter>-String und interpretiert ihn Anlehnung 
     an die angegebenen <parameter>format</parameter> Parameter. Werden
     nur 2 Parameter angegeben, werden die analysierten Werte als Array
     zurück gegeben.
     <example>
      <title><function>sscanf</function>-Beispiel:</title>
      <programlisting role="php">
// Ermittlung der Serien-Nr.
$serial = sscanf("SN/2350001","SN/%d");
// und des Herstellungsdatums
$mandate = "Januar 01 2000";
list($monat, $tag, $jahr) = sscanf($mandate,"%s %d %d");
echo "Das Teil $serial wurde hergestellt am: $jahr-".substr($monat,0,3)."-$tag\n";
      </programlisting>
     </example>
     Werden optionale Parameter übergeben, gibt die Funktion die Anzahl
     der ermittelten Werte zurück. Die optionalen Parameter müssen
     refenziert übergeben werden.
     <example>
      <title>
       <function>sscanf</function> - Gebrauch optionaler Parameter
      </title>
      <programlisting role="php">
// Ermittlung der Autoren-Info und Erzeugung eines DocBook-Eintrages
$auth = "24\tLewis Carroll";
$n = sscanf($auth,"%d\t%s %s", &amp;$id, &amp;$first, &amp;$last);
echo "&lt;author id='$id'&gt;
      &lt;firstname&gt;$first&lt;/firstname&gt;
      &lt;surname&gt;$last&lt;/surname&gt;
      &lt;/author&gt;\n";
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch: <function>fscanf</function>,
     <function>printf</function> und <function>sprintf</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.setlocale">
   <refnamediv>
    <refname>setlocale</refname>
    <refpurpose>Setzt lokale Informationen</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>setlocale</function></funcdef>
      <paramdef>string <parameter>category</parameter></paramdef>
      <paramdef>string <parameter>locale</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Der String <parameter>category</parameter> enthält die Kategorie
     der zu ändernden Lokalitäts-Informationen:
     <itemizedlist>
      <listitem>
       <simpara>
	LC_ALL - alle folgenden Werte
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_COLLATE - für String-Vergleiche - z.Zt. noch nicht in PHP
  implementiert
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_CTYPE - betrifft Klassifizierungen und Umwandlung, z.B. bei
  <function>strtoupper</function>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_MONETARY - betrifft localeconv() - z.Zt. noch nicht in PHP
  implementiert
       </simpara>
      </listitem>
      <listitem>
       <simpara> 
	LC_NUMERIC - für das Dezimal-Trennzeichen
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_TIME - betrifft Zeit und Datums-Formatierungen durch
	<function>strftime</function>
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Ist <parameter>locale</parameter> als Leer-String definiert, also
     <literal>""</literal>, werden die Werte an Hand der entsprechenden
     Umgebungs-Variablen gleichen Namens oder von "LANG" bestimmt.
    </para>
    <para>
     Ist <parameter>locale</parameter> &null; oder <literal>"0"</literal>,
     werden keine Einstellungen verändert sondern als Ergebnis zurück
     gegeben.
    </para>
    <para>
     <function>setlocale</function> gibt die neue Einstellung oder
     &false; (wenn die locale-Funktionalität auf der System-Plattform
     nicht unterstützt wird oder der Kategorie-Wert ungültig ist)
     zurück. Ein ungültiger Kategorie-Name erzeugt auch noch eine
     Warnmeldung.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.similar-text">
   <refnamediv>
    <refname>similar_text</refname>
    <refpurpose>
     Berechnet die Ähnlichkeit zweier Zeichenketten
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>similar_text</function></funcdef>
      <paramdef>string <parameter>first</parameter></paramdef>
      <paramdef>string <parameter>second</parameter></paramdef>
      <paramdef>double 
       <parameter><optional>percent</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Die Berechnung der Ähnlichkeit zweier Strings erfolgt nach der in
     "Oliver" [1993] beschreibenen Methode. Beachten Sie, dass diese
     Implementierung keinen Stack verwendet wie in Olivers Pseude-Code,
     dafür aber rekursive Aufrufe, die die Performance erhöhen können
     (aber nicht müssen). Beachten Sie auch, dass die Komplexität
     dieses Algorithmus O(N**3) beträgt, wobei N die Länge der längsten
     Zeichenkette ist.
    </para>
    <para>
     Falls Sie als Referenz ein drittes Argument angeben, wird
     <function>similar_text</function> ihnen die Ähnlichkeit als
     Prozentwert errechnen. Es wird die Anzahl der in beiden Strings
     übereinstimmenden Zeichen zurück gegeben.
    </para>
   </refsect1>
  </refentry>
    
  <refentry id="function.soundex">
   <refnamediv>
    <refname>soundex</refname>
    <refpurpose>
     Berechnet die Laut-Ähnlichkeit eines Strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>soundex</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Errechnet den Wert der Laut-Ähnlichkeit von
     <parameter>str</parameter>.
    </para>
    <para>
     Soundex-Werte haben die Eigenschaft, dass ähnlich ausgesprochene
     Wörter den gleichen Soundex-Wert erzeugen. Dies kann zur Suche in
     Datenbanken verwendet werden, wenn Sie zwar die Aussprache aber
     nicht die genaue Schreibweise kennen. <function>soundex</function>
     liefert einen String aus 4 Zeichen, beginnend mit einem Buchstaben
     zurück.
    </para>
    <para>
     Diese besondere <function>soundex</function>-Funktion ist u.a.
     beschrieben in "The Art Of Computer Programming, vol. 3: Sorting
     And Searching", von Donald Knuth, Addison-Wesley-Verlag (1973),
     Seiten 391 bis 392.
    </para>
    <para>
     <example>
      <title>Soundex-Beispiel:</title>
      <programlisting role="php">
soundex ("Euler") == soundex ("Ellery") == 'E460';
soundex ("Gauss") == soundex ("Ghosh") == 'G200';
soundex ("Knuth") == soundex ("Kant") == 'H416';
soundex ("Lloyd") == soundex ("Ladd") == 'L300';
soundex ("Lukasiewicz") == soundex ("Lissajous") == 'L222';
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sprintf">
   <refnamediv>
    <refname>sprintf</refname>
    <refpurpose>Gibt einen formatierten String zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>sprintf</function></funcdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>mixed 
       <parameter><optional>args</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Gibt einen an Hand des Formatierungs-Strings
     <parameter>format</parameter> gebildeten String zurück.
    </simpara>
    <simpara>
     Der Formatierungs-String wird aus keiner oder mehreren Anweisungen
     gebildet: Gewöhnliche Zeichen (ausser <literal>%</literal>), die
     direkt in das Ergebnis übertragen werden und 
     <emphasis>Umsetzungs-Anweisungen</emphasis>. Jede dieser
     Anweisungen resultiert ihre eigene Auswirkung. Diese Anweisungen
     gelten sowohl für die <function>sprintf</function>- als auch für
     die <function>printf</function>-Funktion.
    </simpara>
    <para>
     Jede der Formatierugs-Anweisungen besteht aus einem 
     Prozent-Zeichen gefolgt von einem oder mehrereren der folgenden
     Elemente (in alphabetischer Reihenfolge):
     <orderedlist>
      <listitem>
       <simpara>
        Einem optionalen <emphasis>Füll-Zeichen</emphasis>, das den
        String bis rechts auffüllt. Dies kann ein Leerzeichen oder eine
        <literal>0</literal> (das Null-Zeichen) sein. Als Füllzeichen
        voreingestellt ist das Leerzeichen. Andere Füllzeichen können
        durch Voranstellung eines einfachen Anführungszeichens
        (<literal>'</literal>) definiert werden. Beachten Sie die
        folgenden Beispiele.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Einer optionalen Angabe der <emphasis>Ausrichtung</emphasis>,
        ob die Ausgabe also nach links oder nach rechts (default)
        ausgerichtet werden soll. Um den Text links auszurichten müssen
        Sie das Zeichen <literal>-</literal> angeben.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Optional einem Wert für die <emphasis>Längen-Angabe</emphasis>,
        also der Wert für die mindestenst zurückzugebenden Zeichen.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Optional einem Wert für die Anzahl der auszugebenden
        <emphasis>Nachkomma-Stellen</emphasis>. Dieser Wert hat nur
        Einfluss auf Werte vom Typ "double" (eine weitere hilfreiche
        Funktion für die Formatierung von Zahlen ist
        <function>number_format</function>).
       </simpara>
      </listitem>
      <listitem>
       <para>
        Einer <emphasis>Typ-Angabe</emphasis> welche den Typ enthält,
        als der das Argument angesehen werden soll. Mögliche Angaben
        sind:
        <simplelist>
         <member>
          <literal>%</literal> - ein Prozent-Zeichen ("%"). Es ist kein
          Argument erforderlich.
         </member>
         <member>
          <literal>b</literal> - das Argument wird als Integer
          angesehen und als Binär-Wert ausgegeben.
         </member>
         <member>
          <literal>c</literal> - das Argument wird als Integer
          angesehen und das entsprechende ASCII-Zeichen wird
          ausgegeben.
         </member>
         <member>
          <literal>d</literal> - das Argument wird als Integer
          angesehen und ein Dezimalwert ausgegeben.
         </member>
         <member>
          <literal>f</literal> - das Argument wird als "double"
          angesehen und eine Fließkomma-Zahl ausgegeben.
         </member>
         <member>
          <literal>o</literal> - das Argument wird als Integer
          angesehen und und als Oktalwert ausgegeben.
         </member>
         <member>
          <literal>s</literal> - das Argument wird als String angesehen
          und als solcher ausgegeben.
         </member>
         <member>
          <literal>x</literal> - das Argument wird als Integer
          angesehen und als Hexadezimal-Wert ausgegeben (mit
          Kleinbuchstaben).
         </member>
         <member>
          <literal>X</literal> - das Argument wird als Integer
          angesehen und als Hexadezimal-Wert ausgegeben (mit
          Großbuchstaben).
         </member>
        </simplelist>
       </para>
      </listitem>
     </orderedlist>
    </para>
    <simpara>
     Siehe auch: <function>printf</function>,
     <function>sscanf</function>, <function>fscanf</function> und
     <function>number_format</function>.
    </simpara>
   </refsect1>
   <refsect1>
    <title>Beispiele:</title>
    <para>
     <example>
      <title>
       <function>sprintf</function>: Null-gefüllte Integer-Werte
      </title>
      <programlisting role="php">
$isodatum = sprintf ("%04d-%02d-%02d", $jahr, $monat, $tag);
      </programlisting>
     </example>
     <example>
      <title>
       <function>sprintf</function>: Integer- zu Binärwert
      </title>
      <programlisting role="php">
$wert = 155;
$binaer = sprintf ("%b", $wert);
echo ("&lt;br> $binaer &lt;br>");
// gibt 10011011 aus
      </programlisting>
     </example>
     <example>
      <title><function>sprintf</function>: Währungsformatierung</title>
      <programlisting role="php">
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money wird "123.1" ausgeben
$formatiert = sprintf ("%01.2f", $money);
// echo $formatiert wird "123.10" ausgeben
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strcasecmp">
   <refnamediv>
    <refname>strcasecmp</refname>
    <refpurpose>Binärer Vergleich von Zeichenketten</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strcasecmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Ist <parameter>str1</parameter> kleiner als
     <parameter>str2</parameter> wird &lt; 0, ist
     <parameter>str1</parameter> grösser als
     <parameter>str2</parameter> wird &gt; 0 und bei Gleichheit wird 0
     zurück gegeben.
    <example>
      <title><function>strcasecmp</function>-Beispiel:</title>
      <programlisting role="php">
$var1 = "Hallo";
$var2 = "hallo";
if (!strcasecmp($var1, $var2) ) {
    echo '$var1 ist wie $var2 bei schreibweise-unabhängigem Vergleich';
}
      </programlisting>
    </example>
    </para>
    <simpara>
     Beachten Sie, dass nicht zwischen Groß- und Kleinschreibung
     unterschieden wird.
    </simpara>
    <simpara>
     Siehe auch <function>ereg</function>, <function>strcmp</function>,
     <function>substr</function>, <function>stristr</function> und
     <function>strstr</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strchr">
   <refnamediv>
    <refname>strchr</refname> 
    <refpurpose>
     Findet das erste Vorkommen eines Zeichens
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strchr</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion ist ein Alias zu <function>strstr</function> und
     funktioniert genau wie dort beschrieben.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strcmp">
   <refnamediv>
    <refname>strcmp</refname>
    <refpurpose>Binärer Vergleich zweier Strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strcmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Ist <parameter>str1</parameter> kleiner als
     <parameter>str2</parameter> wird &lt; 0, ist
     <parameter>str1</parameter> grösser als
     <parameter>str2</parameter> wird &gt; 0 und bei Gleichheit wird 0
     zurück gegeben.
    </simpara>
    <simpara>
     Beachten Sie, dass zwischen Groß- und Kleinschreibung
     unterschieden wird.
    </simpara>
    <simpara>
     Siehe auch <function>ereg</function>,
     <function>strcasecmp</function>, <function>substr</function>,
     <function>stristr</function>, <function>strncmp</function> und
     <function>strstr</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strcspn">
   <refnamediv>
    <refname>strcspn</refname>
    <refpurpose>
     Ermittelt die Anzahl der nicht übereinstimmenden Zeichen
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strcspn</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Die Länge des Strings <parameter>str1</parameter> bis zum ersten
     Erscheinen eines Buchstabens (aus <parameter>str1</parameter>) in
     <parameter>str2</parameter> wird zurück gegeben.
    </simpara>
    <example>
     <title><function>strcspn</function>-Beispiel:</title>
      <programlisting role="php">
$s1 = "dasrktuvs";
$s2 = "iklp";                  // "k" ist der "Kasus-Knacktus"
$wert = strcspn ($s1, $s2);
echo "&lt;br> $wert &lt;br>";  // gibt also 4 zurück
      </programlisting>
     </example>
    <simpara>
     Siehe auch <function>strspn</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strip-tags">
   <refnamediv>
    <refname>strip_tags</refname>
    <refpurpose>
     Entfernt HTML- und PHP-Tags aus einem String
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strip_tags</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>allowable_tags</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion versucht, alle HTML- und PHP-Tags aus
     <parameter>str</parameter> zu entfernen. Bei unvollständigen oder
     sinnlosen Tags werden Fehler ausgegeben. Es wird die gleiche Art
     der Tag-Engine wie bei der <function>fgetss</function>-Funktion
     benutzt.
    </para>
    <para>
     Sie können den optionalen Parameter
     <parameter><optional>allowable_tags</optional></parameter>
     benutzen, um nicht zu entfernende Tags zu definieren.
     <note>
      <para>
       <parameter>Allowable_tags</parameter> steht ab PHP 3.0.13 bzw.
       PHP4B3 zur Verfügung.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.stripcslashes">
   <refnamediv>
    <refname>StripCSlashes</refname>
    <refpurpose>Umkehrung / Gegenstück zu addcslashes</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>stripcslashes</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt einen String ohne "\" zurück. Wie in C werden
     <literal>\n</literal>, <literal>\r</literal> ..., oktal-
     und hexadezimal-Vorkommen erkannt.
     <note>
      <simpara>
       Verfügbar seit PHP4b3-dev.
      </simpara>
     </note>
    </para>
    <simpara>
     Siehe auch <function>addcslashes</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.stripslashes">
   <refnamediv>
    <refname>StripSlashes</refname>
    <refpurpose>Umkehrung / Gegenstück zu addslashes</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>stripslashes</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt einen String ohne evtl. vorhandene "\" (Backslash)
     zurück (<literal>\'</literal> wird zu <literal>'</literal> usw.).
     Doppelte Rückstriche ("\\") werden zu "\" umgesetzt.
    </para>
    <simpara>
     Siehe auch <function>addslashes</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.stristr">
   <refnamediv>
    <refname>stristr</refname>
    <refpurpose>
     Wie <function>strstr</function> ohne Rücksicht auf Groß- bzw.
     Kleinschreibung
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>stristr</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Findet alle Vorkommen von <parameter>needle</parameter> innerhalb
     von <parameter>haystack</parameter> vom Anfang bis zum Ende (ohne
     Rücksicht auf die Schreibweise beider Parameter).
    </para>
    <para>
     Wird <parameter>needle</parameter> nicht gefunden, wird &false;
     zurück gegeben.
    </para>
    <para>
     Ist <parameter>needle</parameter> kein String, wird er in einen
     Integer-Wert umgesetzt. Dies ASCII-Entsprechung dieses Wertes
     wird dann als zu suchendes Zeichen angesehen.
    </para>
    <para>
     Siehe auch <function>strchr</function>,
     <function>strrchr</function>, <function>substr</function> und
     <function>ereg</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strlen">
   <refnamediv>
    <refname>strlen</refname>
    <refpurpose>Ermitteln der String-Länge</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strlen</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt die Länge der Zeichenkette <parameter>string</parameter>
     zurück.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strnatcmp">
   <refnamediv>
    <refname>strnatcmp</refname>
    <refpurpose>
     String-Vergleich unter Verwendung einer "natürlichen Ordnung"
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strnatcmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion implemetiert einen Vergleich, der alphanumerische
     Zeichen "menschlich" einordnet (auch "natürliche Ordnung"
     genannt). Der Unterschied zwischen dieser und der regulären
     String-Sortierung eines Computer (unter Verwendung von
     <function>strcmp</function>) wird in dem folgenden Beispiel
     gezeigt:
     <informalexample>
      <programlisting>
$arr1 = $arr2 = array ("img12.png","img10.png","img2.png","img1.png");
echo "Normaler String-Vergleich\n";
usort($arr1,"strcmp");
print_r($arr1);
echo "\nVergleich mittels natürlicher Ordnung\n";
usort($arr2,"strnatcmp");
print_r($arr2);
      </programlisting>
     </informalexample>
     Der o.a. Code erzeugt die folgende Ausgabe:
     <informalexample>
      <programlisting>
Normaler String-Vergleich
Array
(
    [0] =&gt; img1.png
    [1] =&gt; img10.png
    [2] =&gt; img12.png
    [3] =&gt; img2.png
)

Vergleich mittels natürlicher Ordnung
Array
(
    [0] =&gt; img1.png
    [1] =&gt; img2.png
    [2] =&gt; img10.png
    [3] =&gt; img12.png
)
      </programlisting>
     </informalexample>
     Für weitere Infos siehe Martin Pool's <ulink
     url="&url.strnatcmp;">Natural Order String Comparison</ulink>
     Seite.
    </para>
    <simpara>
     Ähnlich anderen String-Vergleichs-Funktionen gibt diese &lt; 0
     zurück, wenn <parameter>str1</parameter> kleiner ist als
     <parameter>str2</parameter> bzw. &gt; 0, wenn
     <parameter>str1</parameter> größer ist als
     <parameter>str2</parameter> oder 0, wenn sie gleich sind.
    </simpara>
    <simpara>
     Dieser Vergleich unterscheidet Groß- und Kleinschreibung.
    </simpara>
    <simpara>
     Siehe auch <function>ereg</function>,
     <function>strcasecmp</function>, <function>substr</function>,
     <function>stristr</function>, <function>strcmp</function>,
     <function>strncmp</function>, <function>strnatcasecmp</function>,
     <function>strstr</function>, <function>natsort</function> und
     <function>natcasesort</function> .
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strnatcasecmp">
   <refnamediv>
    <refname>strnatcasecmp</refname>
    <refpurpose>
     String-Vergleich "natürlicher Ordnung" ohne Unterscheidung der
     Schreibweise
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strnatcasecmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion implementiert einen String-Vergleich wie unter
     <function>strnatcmp</function> mit dem Unterschied, dass hier
     nicht zwischen Groß- und Kleinschreibung unterschieden wird.
     Für weitere Infos siehe Martin Pool's <ulink
     url="&url.strnatcmp;">Natural Order String Comparison</ulink>
     Seite.
    </para>
    <simpara>
     Ähnlich anderen String-Vergleichs-Funktionen gibt diese &lt; 0
     zurück, wenn <parameter>str1</parameter> kleiner ist als
     <parameter>str2</parameter> bzw. &gt; 0, wenn
     <parameter>str1</parameter> größer ist als
     <parameter>str2</parameter> oder 0, wenn sie gleich sind.
    </simpara>
    <simpara>
     Siehe auch <function>ereg</function>,
     <function>strcasecmp</function>, <function>substr</function>,
     <function>stristr</function>, <function>strcmp</function>,
     <function>strncmp</function>, <function>strnatcmp</function>
     und <function>strstr</function>.
    </simpara>
   </refsect1>
  </refentry>
 
  <refentry id="function.strncmp">
   <refnamediv>
    <refname>strncmp</refname>
    <refpurpose>
     Binary safe string comparison of the first n characters
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strncmp</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
      <paramdef>int <parameter>len</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion ist ähnlich <function>strcmp</function> nur mit dem
     Unterschied, dass sie den maximalen Wert der Zeichen
     (<parameter>len</parameter>) angeben können, der verglichen werden
     soll. Ist einer der Strings kürzer als
     (<parameter>len</parameter>) wird dessen Länge für den Vergleich
     angewendet.
    </para>
    <simpara>
     Gibt &lt; 0 zurück, wenn <parameter>str1</parameter> kleiner ist
     als <parameter>str2</parameter> bzw. &gt; 0, wenn
     <parameter>str1</parameter> größer ist als
     <parameter>str2</parameter> oder 0, wenn sie gleich sind.
    </simpara>
    <simpara>
     Dieser Vergleich unterscheidet Klein- und Großschreibung.
    </simpara>
    <simpara>
     Siehe auch <function>ereg</function>,
     <function>strcasecmp</function>, <function>substr</function>,
     <function>stristr</function>, <function>strcmp</function>
     und <function>strstr</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.str-pad">
   <refnamediv>
    <refname>str_pad</refname>
    <refpurpose>
     Erweitert einen String auf eine bestimmte Länge unter Verwendung
     eines anderen Strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>str_pad</function></funcdef>
      <paramdef>string <parameter>input</parameter></paramdef>
      <paramdef>int <parameter>pad_length</parameter></paramdef>
      <paramdef>string
       <parameter>
        <optional>pad_string</optional></parameter>
       </paramdef>
      <paramdef>int
       <parameter><optional>pad_type</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Mit dieser Funktion erweitern Sie den String
     <parameter>input</parameter> auf der linken, rechten oder beiden
     Seiten auf die mit dem optionalen Parameter
     <parameter>pad_type</parameter> angegebene Länge. Wird das
     optionale Argument <parameter>pad_string</parameter> nicht
     angegeben, erfolgt die Erweiterung mit Leerzeichen, ansonsten wird
     hierzu der Inhalt von <parameter>pad_string</parameter> verwendet.
    </para>
    <para>
     Das optionale Argument <parameter>pad_type</parameter> kann
     STR_PAD_RIGHT, STR_PAD_LEFT oder STR_PAD_BOTH sein. Wird
     <parameter>pad_type</parameter> nicht angegeben, so wird per
     default von STR_PAD_RIGHT ausgegangen.
    </para>
    <para>
     Ist der Wert von <parameter>pad_length</parameter> negativ oder
     kleiner als die Länge des Input-Strings, wird keine Erweiterung
     vorgenommen.
    </para>
    <para>
     <example>
      <title><function>str_pad</function>-Beispiel:</title>
      <programlisting role="php">
$input = "Alien";
print str_pad ($input, 10);                     // Ergebnis "Alien     "
print str_pad ($input, 10, "-=", STR_PAD_LEFT); // Ergebnis "-=-=-Alien"
print str_pad ($input, 10, "_", STR_PAD_BOTH);  // Ergebnis "__Alien___"
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strpos">
   <refnamediv>
    <refname>strpos</refname>
    <refpurpose>
     Ermitteln des ersten Vorkommens innerhalb eines Strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strpos</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>offset</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt als numerischen Wert die Position des ersten Vorkommens
     von <parameter>needle</parameter> innerhalb der Zeichenkette
     <parameter>haystack</parameter> zurück. Anders als bei
     <function>strrpos</function> kann diese Funktion eine komplette
     Zeichenkette unterstützen.
    </para>
    <para>
     Wurde <parameter>needle</parameter> nicht gefunden, wird &false;
     zurück gegeben.
     <note>
      <para>
       Die Meldungen "Zeichen bei Position 0 gefunden (character found
       at position 0)" und "Zeichen nicht gefunden (character not
       found)" werden oft falsch ausgelegt. Hier die Unterscheidung:
       <informalexample>
	<programlisting role="php">
// in PHP 4.0b3 und danach:
$pos = strpos ($mystring, "b");
if ($pos === false) { // Achtung: 3 Gleichheits-Zeichen
    // nicht gefunden...
}

// in Versionen vor 4.0b3:
$pos = strpos ($mystring, "b");
if (is_string ($pos) && !$pos) {
    // nicht gefunden...
}
	</programlisting>
       </informalexample>
      </para>
     </note>
    </para>
    <para>
     Ist <parameter>needle</parameter> kein String, wird er zu einem
     Integer-Wert umgesetzt und als das diesem Wert entsprechende 
     ASCII-Zeichen angesehen.
    </para>
    <para>
     Der optionale Parameter <parameter>offset</parameter> ermöglicht
     es, den Startwert für die Suche nach <parameter>needle</parameter>
     innerhalb von <parameter>haystack</parameter> anzugeben. Die 
     zurück gegebene Positions-Angabe ist dann relativ zum Anfang von haystack.
    </para>
    <para>
     Siehe auch <function>strrpos</function>,
     <function>strrchr</function>, <function>substr</function>,
     <function>stristr</function> und <function>strstr</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strrchr">
   <refnamediv>
    <refname>strrchr</refname>
    <refpurpose>
     Findet das letzte Vorkommen eines Zeichens innerhalb einer
     Zeichenkette
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strrchr</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion gibt den letzten Teil des Strings
     <parameter>haystack</parameter> zurück, der ab dem letzten
     Vorkommen von <parameter>needle</parameter> steht (bis zum Ende).
    </para>
    <para>
     Wird <parameter>needle</parameter> nicht gefunden, wird &false;
     zurück gegeben.
    </para>
    <para>
     Enthält <parameter>needle</parameter> mehr als ein Zeichen, wird
     nur das erste Zeichen genommen.
    </para>
    <para>
     Ist <parameter>needle</parameter> kein String, wird er zu einem
     Integer-Wert umgesetzt und als das diesem Wert entsprechende 
     ASCII-Zeichen angesehen.
     <example>
      <title><function>strrchr</function>-Beispiel:</title>
      <programlisting role="php">
// hole das letzte Verzeichnis aus $PATH
$dir = substr (strrchr ($PATH, ":"), 1);

// hole alles nach dem letzten "Neue-Zeile"
$text = "Zeile 1\nZeile 2\nZeile 3";
$last = substr (strrchr ($text, 10), 1 );
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch <function>substr</function>,
     <function>stristr</function> und <function>strstr</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.str-repeat">
   <refnamediv>
    <refname>str_repeat</refname>
    <refpurpose>Wiederholung eine String-Ausgabe</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>str_repeat</function></funcdef>
      <paramdef>string <parameter>input</parameter></paramdef>
      <paramdef>int <parameter>multiplier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Die Ausgabe von <parameter>input_str</parameter> wird
     <parameter>multiplier</parameter> mal wiederholt.
     <parameter>Multiplier</parameter> muss grösser als 0 sein.
    </para>
    <example>
     <title><function>str_repeat</function>-Beispiel:</title>
     <programlisting role="php">
echo str_repeat ("-=", 10);
     </programlisting>
    </example>
    <para>
     Es wird "-=-=-=-=-=-=-=-=-=-=" ausgegeben.
    </para>
    <note>
     <para>
      Verfügbar ab PHP 4.0.
     </para> 
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.strrev">
   <refnamediv>
    <refname>strrev</refname>
    <refpurpose>Umdrehen eines Strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strrev</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dreht die Schreibweise von <parameter>string</parameter> um.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strrpos">
   <refnamediv>
    <refname>strrpos</refname>
    <refpurpose>
     Findet letztes Vorkommen eines Zeichens in einem String
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strrpos</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>char <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Der Wert des letzen Vorkommens von <parameter>needle</parameter>
     im String <parameter>haystack</parameter> wird ermittelt.
     <parameter>Needle</parameter> darf nur ein einzelnes Zeichen sein.
     Wird als <parameter>needle</parameter> eine Zeichenkette
     übergeben, wird nur dessen erster Buchstabe ausgewertet.
    </para>
    <para>
     Wurde <parameter>needle</parameter> nicht gefunden, wird &false;
     zurück gegeben.
    </para>
    <para>
     Ist <parameter>needle</parameter> kein String, wird er zu einem
     Integer-Wert umgesetzt und als das diesem Wert entsprechende 
     ASCII-Zeichen angesehen.
    </para>
    <para>
     Siehe auch <function>strpos</function>,
     <function>strrchr</function>, <function>substr</function>,
     <function>stristr</function> und <function>strstr</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strspn">
   <refnamediv>
    <refname>strspn</refname>
    <refpurpose>
     Ermittelt die Länge der übereinstimmenden Zeichen
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>strspn</function></funcdef>
      <paramdef>string <parameter>str1</parameter></paramdef>
      <paramdef>string <parameter>str2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
 		 Ermittelt die Anzahl der Zeichen am Anfang von 
		 <parameter>str1</parameter>, die aus dem in
     <parameter>str2</parameter> übergebenen 
     Zeichenvorrat stammen.   
    </para>
    <para>    
     So ergibt z.B.
  	 <informalexample>
		  <programlisting role="php">
strspn("42 ist die Antwort, was ist die Frage ...","1234567890");
		  </programlisting>
     </informalexample>
     als Ergebnis 2.
    </para>
   <simpara>
     Siehe auch <function>strcspn</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strstr">
   <refnamediv>
    <refname>strstr</refname>
    <refpurpose>Findet das erste Vorkommen eines Strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strstr</function></funcdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Es wird alles von <parameter>haystack</parameter> zurück gegeben
     ab der ersten Fundstelle von <parameter>needle</parameter> bis zum
     Ende.
    </para>
    <para>
     Falls <parameter>needle</parameter> nicht gefunden wird, ist das
     Ergebnis &false;.
    </para>
    <para>
     Ist <parameter>needle</parameter> kein String, wird er zu einem
     Integer-Wert umgesetzt und als das diesem Wert entsprechende 
     ASCII-Zeichen angesehen.
    </para>
    <para>
     Diese Funktion unterscheidet zwischen Groß- und Kleinschreibung.
     Ist keine Unterscheidung gewünscht / erforderlich, sollten Sie
     <function>stristr</function> verwenden.
    </para>
    <para> 
     <example>
      <title><function>strstr</function>-Beispiel:</title>
      <programlisting role="php">
$email = 'sterling@designmultimedia.com';
$domain = strstr ($email, '@');
print $domain; // gibt @designmultimedia.com zurück
      </programlisting>
     </example> 
    </para>
    <para>
     Siehe auch <function>stristr</function>,
     <function>strrchr</function>, <function>substr</function> und
     <function>ereg</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strtok">
   <refnamediv>
    <refname>strtok</refname>
    <refpurpose>Zerlegt einen String</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strtok</function></funcdef>
      <paramdef>string <parameter>arg1</parameter></paramdef>
      <paramdef>string <parameter>arg2</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>strtok</function> wird benutzt, um einen String
     (<parameter>arg1</parameter>) zu teilen. Den Satz "Das ist ein
     Beispiel" können Sie in seine einzelnen Wörter zerlegen, in dem
     Sie das Leerzeichen als Trennzeichen (<parameter>arg2</parameter>)
     angeben.
     <example>
      <title><function>strtok</function>-Beispiel:</title>
      <programlisting role="php">
$string = "Das ist noch ein Beispiel";
$tok = strtok ($string," ");
while ($tok) {
    echo "Wort=$tok&lt;br>";
    $tok = strtok (" ");
}
      </programlisting>
     </example>
    </para>
    <para>
     Beachten Sie, dass der zu zerlegende String nur beim ersten Aufruf
     von <function>strtok</function> angegeben werden muss. Die
     nachfolgenden Aufrufe brauchen nur das Trennzeichen als Parameter.
     Falls Sie eine neue Zeichenkette zerlegen wollen, rufen Sie
     <function>strtok</function> wieder mit dem Parameter
     <parameter>arg1</parameter> auf. Das initialisiert die Funktion.
     Sie können auch meherere Trennzeichen in
     <parameter>arg2</parameter> angeben. Die Trennung erfolgt beim
     ersten Auftreten eines beliebigen Zeichens aus
     <parameter>arg2</parameter>.
    </para>
    <para>
     Beachten Sie, dass die Teile auch "0" sein können. Dies entspricht
     in bedingten Ausdrücken dem Wert &false;.
    </para>
    <para>
     Siehe auch <function>split</function> und
     <function>explode</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strtolower">
   <refnamediv>
    <refname>strtolower</refname>
    <refpurpose>Setzt einen String in Kleinbuchstaben um</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strtolower</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt <parameter>string</parameter> zurück, in dem alle Buchstaben
     in Kleinbuchstaben umgewandelt wurden.
    </para>
    <para>
     Beachten Sie, dass 'Buchstaben' vom Wert locale abhängig ist. Ist
     z.B. die Voreinstellung für locale "C", werden keine Umlaute (Ä, 
     Ü, Ö) umgewandelt.
    </para>
    <example>
     <title><function>strtolower</function>-Beispiel:</title>
     <programlisting role="php">
$str = "Dieter B. (M.T.) Ist Ein Schaf und Er LIEBT Sich So";
$str = strtolower($str);	
print $str; // Gibt "dieter b. (m.t.) ist ein schaf und er liebt sich 
            // so" aus.
     </programlisting>
    </example>
    <para>
     Siehe auch <function>strtoupper</function>
     und <function>ucfirst</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strtoupper">
   <refnamediv>
    <refname>strtoupper</refname>
    <refpurpose>Setzt einen String in Großbuchstaben um</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strtoupper</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gibt <parameter>string</parameter> zurück, in dem alle Buchstaben
     in Großbuchstaben umgewandelt wurden.
    </para>
    <para>
     Beachten Sie, dass 'Buchstaben' vom Wert locale abhängig ist. Ist
     z.B. die Voreinstellung für locale "C", werden keine Umlaute (ä, 
     ü, ö) umgewandelt.
    </para>
    <example>
     <title><function>strtoupper</function>-Beispiel:</title>
     <programlisting role="php">
$str = "Dieter B. (M.T.) Ist Ein Schaf und Er LIEBT Sich So";
$str = strtoupper($str);	
print $str; // Gibt "DIETER B. (M.T.) IST EIN SCHAF UND ER LIEBT SICH 
            // SO" aus.
     </programlisting>
    </example>
    <para>
     Siehe auch <function>strtolower</function>
     und <function>ucfirst</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.str-replace">
   <refnamediv>
    <refname>str_replace</refname>
    <refpurpose>
     Ersetzt alle Vorkommen eines Strings in einem anderen String
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>str_replace</function></funcdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string <parameter>haystack</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion ersetzt alle Vorkommen von
     <parameter>needle</parameter> innerhalb der Zeichenkette
     <parameter>haystack</parameter> durch den String
     <parameter>str</parameter>. Falls Sie keine ausgefallenen
     String-Ersetzungen brauchen, sollten Sie immer dieser Funktion
     den Vorzug vor <function>ereg_replace</function> geben.
    </para>
    <para>
     <example>
      <title><function>str_replace</function>-Beispiel:</title>
      <programlisting role="php">
$bodytag = str_replace ("%body%", "black", "&lt;body text=%body%>");
      </programlisting>
     </example>
    </para>
    <para>
     Diese Funktion beruht auf einem Binär-Vergleich.
    </para>
    <note>
     <para>
      <function>str_replace</function> ist seit PHP 3.0.6 verfügbar,
      war aber bis PHP 3.0.8 fehlerhaft.
     </para>
    </note>
    <para>
     Siehe auch <function>ereg_replace</function> und
     <function>strtr</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strtr">
   <refnamediv>
    <refname>strtr</refname>
    <refpurpose>Tauscht bestimmte Zeichen aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strtr</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>string <parameter>from</parameter></paramdef>
      <paramdef>string <parameter>to</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion bearbeitet <parameter>str</parameter>, in dem alle
     Vorkommen von Zeichen aus <parameter>from</parameter> in die
     entsprechenden Zeichen aus <parameter>to</parameter> umgesetzt
     werden. Zurück gegeben wird der bearbeitete String.
    </para>
    <para>
     Sind <parameter>from</parameter> und <parameter>to</parameter> von
     unterschiedlicher Länge werden die überzähligen Zeichen ignoriert.
     <example>
      <title><function>strtr</function>-Beispiel:</title>
      <programlisting role="php">
$addr = strtr($addr, "äåö", "aao");
      </programlisting>
     </example>
    </para>
    <para>
     <function>strtr</function> kann auch mit nur 2 Argumenten
     aufgerufen werden. Die Funktionsweise ist dann anders:
     <parameter>From</parameter> muss dann ein Array sein, welches
     String -> String Paare enthält, die innerhalb des Quellstrings
     ausgetauscht werden sollen. <parameter>Strtr</parameter> sucht
     immer erst die längste Entsprechung und wird keine Auswechselungen
     vornehmen, die bereits bearbeitet wurden.
    </para>
    <para>
     Beispiele dazu:
     <informalexample>
      <programlisting role="php">
$trans = array ("hallo" => "hi", "hi" => "hallo");
echo strtr("hi alle, ich sage hallo", $trans) . "\n";
      </programlisting>
     </informalexample>
     Die Ausgabe ist: "hallo alle, ich sage hi",
    </para>
    <note>
     <simpara>
      Die Möglichkeit mit 2 Parametern wurde in PHP 4.0 hinzugefügt.
     </simpara>
    </note>
    <para>
     Siehe auch <function>ereg_replace</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.substr">
   <refnamediv>
    <refname>substr</refname>
    <refpurpose>Gibt einen Teilstring zurück</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>substr</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int <parameter>start</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>length</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>substr</function> gibt den Teil von 
     <parameter>string</parameter> zurück, der durch die 
     <parameter>start</parameter> und <parameter>length</parameter>
     Parameter definiert wurde.
    </para>
    <para>
     Wenn <parameter>start</parameter> positiv ist, beginnt der zurück
     gegebene String an der <parameter>start</parameter>-Position von
     <parameter>string</parameter>, angefangen bei &null;. So ist z.B. im
     String '<literal>abcdef</literal>' das Zeichen an der Position
     <literal>0</literal> gleich '<literal>a</literal>', das Zeichen an
     der Position <literal>2</literal> ist '<literal>c</literal>' usw.
    </para>  
    <para>
     Beispiele:
     <informalexample>
      <programlisting role="php">
$rest = substr ("abcdef", 1);    // gibt "bcdef" zurück
$rest = substr ("abcdef", 1, 3); // gibt "bcd" zurück
      </programlisting>
     </informalexample>
    </para>
    <para>
     Ist <parameter>start</parameter> negativ, gibt er den Beginn-Wert
     ab Ende des Strings an (also rückwärts gezählt).
    </para>  
    <para>
     Beispiele:
     <informalexample>
      <programlisting role="php">
$rest = substr ("abcdef", -1);     // gibt "f" zurück
$rest = substr ("abcdef", -2);     // gibt "ef" zurück
$rest = substr ("abcdef", -3,  1); // gibt "d" zurück
$rest = substr ("abcdef",  1, -1); // gibt "bcde" zurück
$rest = substr ("abcdef",  4, -4); // gibt "" zurück (nichts)
$rest = substr ("abcdef",  7,  1); // gibt "" zurück (nichts)
$rest = substr ("abcdef",  7, -4); // gibt "" zurück (nichts)
$rest = substr ("abcdef",  4,  4); // gibt "ef" zurück
$rest = substr ("abcdef", -2,  4); // gibt "ef" zurück
$rest = substr ("abcdef", -5, -4); // gibt "b" zurück
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch <function>strrchr</function> und
     <function>ereg</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.substr-count">
   <refnamediv>
    <refname>substr_count</refname>
    <refpurpose>
     Ermittelt die Häufigkeit des Vorkommens einer Zeichenkette in
     einem String
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>substr_count</function></funcdef>
      <paramdef>string <parameter>haystrack</parameter></paramdef>
      <paramdef>string <parameter>needle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Die Funktion <function>substr_count</function> ermittelt, wie oft
     <parameter>needle</parameter> in dem String
     <parameter>haystack</parameter> vorkommt.
    </para>
    <para>
     <example>
      <title><function>substr_count</function>-Beispiel:</title>
      <programlisting>
print substr_count("Dieser Test ist Mist", "ist"); // ergibt 2
      </programlisting>
     </example>
    </para>
    <para>
     Diese Funktion steht ab PHP 4.0.0 zur Verfügung.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.substr-replace">
   <refnamediv>
    <refname>substr_replace</refname>
    <refpurpose>Ersetzt Text in einer Zeichenkette</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>substr_replace</function></funcdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>string <parameter>replacement</parameter></paramdef>
      <paramdef>int <parameter>start</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>length</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>substr_replace</function> ersetzt den Teil von
     <parameter>string</parameter>, der durch die Parameter
     <parameter>start</parameter> und (optional)
     <parameter>length</parameter> begrenzt wird mit der in 
     <parameter>replacement</parameter> angegeben Zeichnekette. Das
     Ergebnis wird zurück gegeben.
    </para>
    <para>
     Ist <parameter>start</parameter> positiv, beginnt der Austausch
     am Offset <parameter>start</parameter> innerhalb von
     <parameter>string</parameter>.  
    </para>
    <para>
     Ist <parameter>start</parameter> negativ, wird vom Ende der 
     Zeichenkette <parameter>string</parameter> bis zum Wert von 
     <parameter>start</parameter> rückwärts gezählt und dort mit dem
     Austausch begonnen.
    </para>
    <para>
     Ist <parameter>length</parameter> angegeben und positive, stellt
     dieser Parameter die Länge des auszuwechselnden Teilstrings dar.
     Ist <parameter>length</parameter> angegeben und negativ, gibt er
     die Zeichenzahl an um die ab Ende von 
     <parameter>string</parameter> rückwärts gezählt wird. Bis zu
     dieser Stelle erfolgt dann der Austausch.
     Ist <parameter>length</parameter> nicht angegeben, wird
     unterstellt, dass Sie die Ersetzung bis zum String-Ende 
     (strlen(<parameter>string</parameter> )) bezwecken.
    </para>
    <para>
     <example>
      <title><function>substr_replace</function>-Beispiel:</title>
      <programlisting role="php">
&lt;?php
$var = 'ABCDEFGH:/MNRPQR/';
echo "Original: $var&lt;hr&gt;\n";

/* Diese 2 Beispiele ersetzen alles in $var mit 'bob'. */
echo substr_replace ($var, 'bob', 0) . "&lt;br&gt;\n";
echo substr_replace ($var, 'bob', 0, strlen ($var)) . "&lt;br&gt;\n";

/* Fügt 'bob' am Anfang von $var ein . */
echo substr_replace ($var, 'bob', 0, 0) . "&lt;br&gt;\n";

/* Die nächsten beiden ersetzen 'MNRPQR' in $var durch 'bob'. */
echo substr_replace ($var, 'bob', 10, -1) . "&lt;br&gt;\n";
echo substr_replace ($var, 'bob', -7, -1) . "&lt;br&gt;\n";

/* Löscht 'MNRPQR' aus $var. */
echo substr_replace ($var, '', 10, -1) . "&lt;br&gt;\n";
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     Sieehe auch <function>str_replace</function> und
     <function>substr</function>.
    </para>
    <note>
     <simpara>
      <function>substr_replace</function> existiert ab PHP 4.0.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.trim">
   <refnamediv>
    <refname>trim</refname> 
    <refpurpose>
     Entfernt überflüssige Zeichen ("whitespace") am Anfang und Ende
     eines Strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>trim</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Diese Funktion entfernt Leerraum am Anfang und Ende einer
     Zeichenkette. Der gekürzte String wird zurück gegeben. Als
     überflüssige Zeichen werden z.Zt. angesehen: "\n", "\r", "\t",
     "\v", "\0" und normale Leerzeichen.
    </para>
    <para>
     Siehe auch <function>chop</function>, <function>ltrim</function>,
     und <function>rtrim</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ucfirst">
   <refnamediv>
    <refname>ucfirst</refname> 
    <refpurpose>
     Setzt das erste Zeichen eines Strings als Großbuchstabe um
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ucfirst</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Setzt das erste Zeichen von <parameter>str</parameter> in einen
     Großbuchstaben um, wenn es ein Zeichen des Alphabets ist.
    </para>
    <para>
     Beachten Sie, dass die Zeichen des Alphabets abhängig sind vom
     Wert des gesetzten locale. Ist dieser (Voreinstellung) "C", werden
     die deutschen Umlaute nicht erkannt.
    <example>
        <title><function>ucfirst</function>-Beispiel:</title>
        <programlisting role="php">    
$text = 'markus ist ein kleines schaf.';
$text = ucfirst ($text); // $text ist nun "Markus ist ein kleines
                         // schaf."
        </programlisting>
    </example>
    </para>
    <para>
     Siehe auch <function>strtoupper</function> und
     <function>strtolower</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ucwords">
   <refnamediv>
    <refname>ucwords</refname> 
    <refpurpose>
     Setzt die ersten Buchstaben aller Wörter eines Strings in die
     entsprechenden Großbuchstaben um
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ucwords</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Setzt die ersten Buchstaben aller Wörter innerhalb von
     <parameter>str</parameter> in die entsprechenden Großbuchstaben
     um, sofern es sich um alphabetische Zeichen handelt.
    </para>
    <para>
     Beachten Sie, dass die Zeichen des Alphabets abhängig sind vom
     Wert des gesetzten locale. Ist dieser (Voreinstellung) "C", werden
     die deutschen Umlaute nicht erkannt.
    <example>
       <title><function>ucwords</function>-Beispiel:</title>
       <programlisting role="php">
$text = "markus ist ein kleines schaf.";
$text = ucwords ($text); // $text ist jetzt: "Markus Ist Ein Kleines
                         // Schaf."
       </programlisting>
    </example>
    </para>
    <para>
     Siehe auch <function>strtoupper</function>,
     <function>strtolower</function> und <function>ucfirst</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.wordwrap">
   <refnamediv>
    <refname>wordwrap</refname>
    <refpurpose>
     Zeilenumbruch eines Strings an einer angegebenen Stelle unter
     Verwendung eines angegebenen Trennzeichens
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>wordwrap</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>int
       <parameter><optional>width</optional></parameter>
      </paramdef>
      <paramdef>string
       <parameter><optional>break</optional></parameter>
      </paramdef>
      <paramdef>int
       <parameter><optional>cut</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Bricht den String <parameter>str</parameter> an der mittels
     <parameter><optional>width</optional></parameter> angegebenen
     Position in die nächste Zeile um. Der Umbruch geschieht mit
     dem <parameter><optional>break</optional></parameter> Parameter.
    </para>
    <para>
     Die Funktion <function>wordwrap</function> bricht selbst an der
     Spalte 75 unter Verwendung des Steuerzeichens '\n' (neue Zeile)
     um, wenn die optionalen Parameter <parameter>width</parameter>
     und / oder <parameter>break</parameter> nicht angegeben werden.
    </para>
    <para>
     Steht <parameter>cut</parameter> auf 1, wird der String immer an
     der vorgegebenen Länge umgebrochen. Ist ein Wort also länger als
     die gegebene Länge, wird es mitten drin umgebrochen (siehe zweites
     Beispiel)
    </para>
    <para>
     <example>
      <title><function>wordwrap</function>-Beispiel:</title>
      <programlisting role="php">
$text = "Der schnelle braune Fuchs springt über den blöden Hund.";
$neuertext = wordwrap( $text, 20 );
echo "$neuertext\n";
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel gibt aus:
    </para>
    <para>
     <informalexample>
      <programlisting>
Der schnelle braune 
Fuchs springt über den blöden Hund.
      </programlisting>
     </informalexample>
    </para>
    <para>
     <example>
      <title><function>wordwrap</function> example</title>
      <programlisting role="php">
$text = "Ein sehr langes Wooooooooooort.";
$neuertext = wordwrap( $text, 8, "\n", 1);
echo "$neuertext\n";
      </programlisting>
     </example>
    </para>
    <para>
     Dieses Beispiel gibt aus:
    </para>
    <para>
     <informalexample>
      <programlisting>
Ein sehr
langes W
oooooooo
ooort.
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch <function>nl2br</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
