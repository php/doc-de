<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.9 Maintainer: hholzgra Status: working -->
<!-- Credits: tom -->
  <chapter xml:id="security.globals" xmlns="http://docbook.org/ns/docbook">
   <title>Verwendung von Register Globals</title>
   &warn.deprecated.removed-6-0-0;
   <para>
    Ein Feature von PHP zur Erhöhung der Sicherheit ist die Konfiguration von
    PHP mit <link linkend="ini.register-globals">register_globals</link> = off.
    Mit Deaktivierung der Möglichkeit, irgendeine vom Benutzer übertragenen
    Variable in den PHP Code zu injizieren, können Sie die Anzahl "vergifteter"
    Variablen reduzieren, welche ein potentieller Angreifer zufügen könnte.
    Dieser benötigt mehr Zeit, um sich Übermittlungen auszudenken, und Ihre
    internen Variablen sind effektiv von den übergebenen Benutzervariablen
    isoliert.
   </para>
   <para>
    Während dies den benötigten Aufwand mit PHP zu arbeiten leicht erhöht
    ist dargelegt, dass die Vorteile gegenüber dem Aufwand klar überwiegen.
    <example>
     <title>Mit register_globals=on arbeiten</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($username) {  // kann vom User mit get/post/cookies übermittelt werden
    $good_login = 1;
}

if ($good_login == 1) { // kann vom User mit get/post/cookies übermittelt werden
    fpassthru ("/highly/sensitive/data/index.html");
}
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>Mit register_globals = off arbeiten</title>
     <programlisting role="php">
<![CDATA[
<?php
if($_COOKIE['username']){
    // kann nur von einem Cookie kommen
    $good_login = 1;
    fpassthru ("/highly/sensitive/data/index.html");
}
?>
]]>
     </programlisting>
    </example>
    Dies weise genutzt ist es auch möglich, präventive Messungen
    durchzuführen, um bei versuchten Vorstößen zu warnen. Wenn Sie
    im Voraus wissen, woher eine Variable kommen soll, können Sie
    prüfen, ob die übermittelten Daten nicht einen unpassenden Weg
    genommen haben. Obwohl dies nicht garantiert, dass Daten nicht
    nur ausgedacht sind, erfordert es von einem Angreifer, auch den
    richtigen Weg zu finden.
    <example>
     <title>Entdecken einfacher Manipulationen von Variablen</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($_COOKIE['username'] &&
    !$_POST['username'] &&
    !$_GET['username'] ) {
    // Durchführen anderer Checks, ob der Benutzername gültig ist...
    $good_login = 1;
    fpassthru ("/highly/sensitive/data/index.html");
} else {
   mail("admin@example.com", "Possible breakin attempt", $_SERVER['REMOTE_ADDR']);
   echo "Security violation, admin has been alerted.";
   exit;
}
?>
]]>
     </programlisting>
    </example>
    Natürlich bedeutet ein einfaches Deaktivieren von register_globals nicht,
    dass Ihr Code nun automatisch sicher ist. Jeder Teil mit Daten sollte
    auch auf andere Arten geprüft werden. Überprüfen Sie immer die Eingaben von
    Benutzern und initialisieren Sie Ihre Variablen! Um Ihre Skripte auf nicht
    initialisierte Variablen zu prüfen, können Sie
    <function>error_reporting</function> so einstellen, dass Fehler des Levels
    <constant>E_NOTICE</constant> angezeigt werden.
   </para>
   <para>
    Sie knnen die On und Off Einstellungen von register_globals
    emulieren, nheres hierzu finden Sie in den <link 
    linkend="faq.misc.registerglobals">FAQ</link>.
   </para>

   &note.superglobals;

  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
