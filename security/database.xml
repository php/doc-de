<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.13 Maintainer: hholzgra Status: ready -->
<!-- Credits: tom -->
  <chapter xml:id="security.database" xmlns="http://docbook.org/ns/docbook">
   <title>Datenbank - Sicherheit</title>

   <simpara>
    Heutzutage sind Datenbanken die Hauptkomponenten jeder Webbasierten
    Applikation, aufgrund welcher Websites verschiedene dynamische Inhalte
    anbieten können. Nachdem heikle oder geheime Informationen in solch einer
    Datenbank gespeichert werden können, sollten Sie deren Schutz ernsthaft
    bedenken.
   </simpara>
   <simpara>
    Um Informationen zu bekommen oder zu speichern, müssen Sie eine legitime
    Abfrage senden, das Ergebnis holen, und die Verbindung schließen.
    Heutzutage ist die allgemein verwendete Abfragesprache für solche
    Interaktionen die Structured Query Language (SQL). Sehen Sie, wie sich ein
    Angreifer <link linkend="security.database.sql-injection">an einer SQL
    Abfrage zu schaffen machen</link> kann.
   </simpara>
   <simpara>
    Sie werden merken, dass PHP Ihre Datenbank alleine nicht schützen kann.
    Die folgenden Abschnitte sind eine Einführung in die Grundlagen, wie man
    innerhalb von PHP Skripten auf Datenbanken zugreift und diese manipuliert.
   </simpara>
   <simpara>
    Denken Sie an diese einfache Regel: tief gestaffelte Verteidigung. Je mehr
    Platz Sie den Maßnahmen zum Schutz Ihrer Datenbank geben, desto geringer
    ist die Wahrscheinlichkeit, dass ein Angreifer Erfolg hat, und gespeicherte
    Geheiminformationen aufdeckt oder missbraucht. Gutes Design des
    Datenbankschemas und die Applikation wird mit Ihren größten Befürchtungen
    fertig.
   </simpara>

   <sect1 xml:id="security.database.design">
    <title>Datenbanken designen</title>
     <simpara>
      Der erste Schritt liegt immer im Erstellen der Datenbank, außer Sie wollen
      eine bereits existierende Dritter verwenden. Ist eine Datenbank erstellt,
      ist sie einem Eigentümer zugewiesen, welcher das Kommando zum Erstellen
      ausgeführt hat. Gewöhnlich kann nur der Eigentümer (oder ein Superuser)
      alles mit den Objekten in dieser Datenbank machen, und um anderen Benutzern
      die Verwendung zu erlauben, müssen Rechte vergeben werden.
     </simpara>
     <simpara>
      Applikationen sollten sich mit der Datenbank nie als deren Eigentümer
      oder als ein Superuser verbinden, da diese Benutzer jede gewollte Abfrage
      ausführen können, um z.B. das Schema zu modifizieren (z.B. Tabellen
      löschen) oder den gesamten Inhalt löschen.
     </simpara>
     <simpara>
      Sie können verschiedene Datenbanknutzer mit sehr limitierten Rechten auf
      Datenbankobjekte für jeden Aspekt Ihrer Applikation anlegen. Nur die
      wirklich benötigten Rechte sollten gewährt werden, und vermeiden Sie, dass
      der gleiche Benutzer in verschiedenen Anwendungsfällen mit der Datenbank
      interagieren kann. Das heißt, dass Eindringlinge, welche unter Verwendung
      einer dieser Referenzen Zugriff auf Ihre Datenbank erlangt haben, nur so
      viele Änderungen durchführen können, wie es Ihre Applikation kann.
     </simpara>
     <simpara>
      Implementieren Sie nicht alle Geschäftslogik in die Webapplikation (z.B.
      Ihr Skript), sondern tun Sie das im Datenbankschema unter Verwendung von
      Sichten, Triggern, oder Regeln. Wenn sich das System entwickelt, werden
      neu zu öffnende Ports zu der Datenbank vorgesehen, und Sie müssen die
      Logik in jedem Datenbank-Client neu implementieren. Überdies können
      Trigger verwendet werden, um transparent und automatisch mit Feldern
      umzugehen, welche beim debuggen Ihrer Applikation oder beim
      Zurückverfolgen von Transaktionen oft einen Einblick gewähren.
     </simpara>
   </sect1>

   <sect1 xml:id="security.database.connection">
    <title>Zur Datenbank verbinden</title>
    <simpara>
     Vielleicht wollen Sie die Verbindungen über SSL herstellen, um die
     Client/Server Kommunikation für eine erhöhte Sicherheit zu verschlüsseln,
     oder aber auch ssh verwenden, um die Netzwerkverbindung zwischen den
     Clients und dem Datenbankserver zu verschlüsseln. Ist eines davon
     realisiert, wird ein Monitoring Ihres Verkehrs und das Erlangen von
     Informationen zu harter Arbeit.
    </simpara>
    <!--simpara>
     If your database server has native SSL support, consider to use <link
     linkend="ref.openssl">OpenSSL functions</link> in communication between
     PHP and database via SSL.
    </simpara-->
   </sect1>

   <sect1 xml:id="security.database.storage">
    <title>Verschlüsseltes Speichermodell</title>
    <simpara>
     SSL/SSH schützt zwar die gerade auf dem Weg befindlichen Daten vom Client
     zum Server, jedoch nicht die dauernd in einer Datenbank gespeicherten
     Daten. SSL ist ein "auf-der-Leitung" Protokoll.
    </simpara>
    <simpara>
     Hat ein Angreifer direkten Zugriff auf Ihre Datenbank (den Webserver
     umgehend), können die gespeicherten heiklen Daten aufgedeckt oder
     zweckentfremdet werden, außer wenn die Information von der Datenbank selbst
     geschützt ist. Die Daten zu verschlüsseln ist ein guter Weg, diese Gefahr
     zu mildern, doch bieten nur wenige Datenbanken diese Art der
     Verschlüsselung von Daten.
    </simpara>
    <simpara>
     Der einfachste Weg, dieses Problem zu umgehen ist, erst einmal Ihr eigenes
     Verschlüsselungspaket zu erstellen, und dieses dann in Ihren PHP Skripten
     zu nutzen. PHP kann Ihnen in diesem Fall mit seinen verschiedenen
     Erweiterungen helfen, wie z.B. <link linkend="ref.mcrypt">Mcrypt</link>
     and <link linkend="ref.mhash">Mhash</link>, welche eine große Auswahl an
     Verschlüsselungsalgorhythmen abdecken. Das Skript verschlüsselt die Daten
     vor dem Speichern, und entschlüsselt diese wieder beim Erhalt. Siehe die
     Verweise für weitere Beispiele, wie Verschlüsselung arbeitet.
    </simpara>
    <simpara>
     Im Fall von wirklich versteckten Daten, wenn deren unverfälschte
     Repräsentation nicht nötig ist (z.B. keine Anzeige), ist hashing ebenfalls
     überlegenswert. Das bekannte Beispiel für das Hashing ist das Speichern des
     MD5 hash eines Passwortes in einer Datenbank, anstatt des Passwortes selbst.
     Siehe auch <function>crypt</function> und <function>md5</function>.
    </simpara>
    <example>
     <title>Verwenden eines hashed Passwortfeldes</title>
     <programlisting role="php">
<![CDATA[
// Speichern des Passwort hash
$query  = sprintf("INSERT INTO users(name,pwd) VALUES('%s','%s');",
            pg_escape_string($username), md5($password));
$result = pg_query($connection, $query);

// Afragen, ob der User das richtige Passwort übermittelt hat
$query = sprintf("SELECT 1 FROM users WHERE name='%s' AND pwd='%s';",
            pg_escape_string($username), md5($password));
$result = pg_query($connection, $query);

if (pg_num_rows($result) > 0) {
    echo "Welcome, $username!";
} else {
    echo "Authentication failed for $username.";
}
]]>
     </programlisting>
    </example>
   </sect1>

   <sect1 xml:id="security.database.sql-injection">
    <title>SQL Injection</title>
    <simpara>
     Viele Entwickler sind sich nicht bewusst, wie man sich an SQL Abfragen
     zu schaffen machen kann und nehmen an, dass eine SQL Abfrage ein
     vertrauenswürdiges Kommando ist. Das heißt, dass SQL Abfragen
     Zugriffskontrollen hinters Licht führen, und dadurch Standard
     Authentifizierungs- und Authorisationschecks umgehen können, und
     manchmal können SQL Abfragen sogar Zugriff zu Kommandos auf
     Betriebssystemebene erlauben.
    </simpara>
    <simpara>
     Direkt SQL Command Injection ist eine Technik, wo ein Angreifer SQL
     Kommandos erstellt oder existierende verändert, um versteckte Daten
     sichtbar zu machen, wertvolle Daten zu überschreiben, oder sogar
     gefährliche Kommandos auf Systemebene des Datenbank-Hosts auszuführen.
     Dies wird durch die Applikation erreicht, welche den Input des Benutzers
     mit statischen Parametern kombiniert, um eine SQL Abfrage zu erstellen.
     Die folgenden Beispiele basieren - leider - auf wahren Begebenheiten.
    </simpara>
    <para>
     Dank dem Mangel an Input Validierungen, und dem Verbinden zum
     Datenbankserver als ein Superuser oder jemand der Benutzer anlegen kann,
     kann ein Angreifer einen Superuser in Ihrer Datenbank anlegen.
     <example>
      <title>
       Die Ergebnisliste in mehrere Seiten aufsplitten ... und Superuser anlegen
       (PostgreSQL and MySQL)
      </title>
      <programlisting role="php">
<![CDATA[
$offset = $argv[0]; // Vorsicht, keine Validierung des Input !
$query  = "SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET $offset;";
// mit PostgreSQL
$result = pg_query($conn, $query);
// mit MySQL
$result = mysql_query($query);
]]>
      </programlisting>
     </example>
      Normale Benutzer klicken auf die 'nächste' bzw. 'vorige' Links, wo
      <varname>$offset</varname> in der URL enthalten ist. Das Skript erwartet,
      dass die ankommende <varname>$offset</varname> einen Dezimalwert enthält.
      Ganz gleich, jemand versucht einzubrechen, indem er das folgende in einer
      <function>urlencode</function>'d Form an die URL anhängt
      <informalexample>
       <programlisting>
<![CDATA[
// Im Fall von PostgreSQL
0;
insert into pg_shadow(usename,usesysid,usesuper,usecatupd,passwd)
    select 'crack', usesysid, 't','t','crack'
    from pg_shadow where usename='postgres';
--

// Im Fall von MySQL
0;
UPDATE user SET Password=PASSWORD('crack') WHERE user='root';
FLUSH PRIVILEGES;
]]>
       </programlisting>
      </informalexample>
      Wenn es passiert ist, würde ihm das Skript einen Zugriff als Superuser
      präsentieren. Beachten Sie, dass <literal>0;</literal> ein gültiges
      Offset zur ursprünglichen Abfrage liefert, und sie beendet.
    </para>
    <note>
     <para>
      Es ist eine übliche Technik, den SQL Parser mittels dem Kommentarzeichen
      in SQL <literal>--</literal> zu zwingen, den Rest der vom Entwickler
      geschriebenen Abfrage zu ignorieren.
     </para>
    </note>
    <para>
     Ein gangbarer Weg um Passwörter zu finden ist, Ihre Seiten mit den
     Suchergebnissen hinters Licht zu führen. Der Angreifer braucht nur zu
     probieren, ob irgendeine übertragene Variable, die in dem SQL Statement
     verwendet wird, nicht richtig gehandhabt wird. Diese Filter können
     gewöhnlich in einer vorausgehenden Form gesetzt werden, indem
     <literal>WHERE, ORDER BY, LIMIT</literal> und <literal>OFFSET</literal>
     Klauseln in <literal>SELECT</literal> Statements umgebaut werden. Wenn
     Ihre Datenbank das <literal>UNION</literal> Konstrukt unterstützt, kann
     der Angreifer versuchen, eine komplette Abfrage an das Original anzuhängen,
     um Paßwörter aus einer willkürlichen Tabelle aufzulisten. Die Verwendung
     von verschlüsselten Passwortfeldern wird ausdrücklich empfohlen.
     <example>
      <title>
       Artikel auflisten ... und ein paar Passwörter (irgendein Datenbankserver)
      </title>
      <programlisting role="php">
<![CDATA[
$query  = "SELECT id, name, inserted, size FROM products
                  WHERE size = '$size'
                  ORDER BY $order LIMIT $limit, $offset;";
$result = odbc_exec($conn, $query);
]]>
      </programlisting>
     </example>
     Der statische Teil der Abfrage kann mit einem anderen
     <literal>SELECT</literal> Statement kombiniert werden, welches alle
     Passwörter preisgibt
     <informalexample>
      <programlisting>
<![CDATA[
'
union select '1', concat(uname||'-'||passwd) as name, '1971-01-01', '0' from usertable;
--
]]>
      </programlisting>
     </informalexample>
     Wenn diese Abfrage (mit dem <literal>'</literal> und
     <literal>--</literal>) einer der in <varname>$query</varname> verwendeten
     Variablen zugewiesen würde, wäre das "Abfragebiest" erwacht.
    </para>
    <para>
     SQL UPDATEs sind ebenfalls ein Anlass, Ihre Datenbank anzugreifen. Diese
     Abfragen sind auch durch das Ändern und Anhängen einer komplett neuen
     Abfrage gefährdet. Aber der Angreifer könnte auch mit der
     <literal>SET</literal> Klausel herumspielen. In diesem Fall muss eine
     Schemainformation vorhanden sein, um die Abfrage erfolgreich manipulieren
     zu können. Diese kann durch Untersuchen der Variablennamen im Formular,
     oder simpel mittels brute force gesammelt werden. Es gibt nicht so viele
     Namenskonventionen für Felder, welche Passwörter oder Benutzernamen
     speichern.
     <example>
     <title>
      Vom Zurücksetzen eines Passwortes ... zum Erlangen von mehr Rechten
      (irgendein Datenbankserver)
     </title>
      <programlisting role="php">
<![CDATA[
$query = "UPDATE usertable SET pwd='$pwd' WHERE uid='$uid';";
]]>
      </programlisting>
     </example>
     Aber ein böswilliger Benutzer übermittelt den Wert
     <literal>' or uid like'%admin%'; --</literal> zu <varname>$uid</varname>,
     um das Administrator Passwort zu ändern, oder setzt einfach
     <varname>$pwd</varname> auf <literal>"hehehe', admin='yes', trusted=100
     "</literal> (mit dem hinteren Leerzeichen), um mehr Rechte zu erhalten.
     Dann wird die Abfrage verdreht:
     <informalexample>
      <programlisting role="php">
<![CDATA[
// $uid == ' or uid like'%admin%'; --
$query = "UPDATE usertable SET pwd='...' WHERE uid='' or uid like '%admin%'; --";

// $pwd == "hehehe', admin='yes', trusted=100 "
$query = "UPDATE usertable SET pwd='hehehe', admin='yes', trusted=100 WHERE ...;"
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Ein furchterregendes Beispiel, wie der Zugriff auf Kommandos auf
     Betriebssystemebene bei manchen Datenbankservern erfolgen kann.
     <example>
     <title>Angriff auf das Betriebssystem des Datenbank Hosts (MSSQL Server)</title>
      <programlisting role="php">
<![CDATA[
$query  = "SELECT * FROM products WHERE id LIKE '%$prod%'";
$result = mssql_query($query);
]]>
      </programlisting>
     </example>
     Wenn ein Angreifer den Wert
     <literal>a%' exec master..xp_cmdshell 'net user test testpass /ADD' --</literal>
     zu <varname>$prod</varname> überträgt, wird <varname>$query</varname> zu:
     <informalexample>
      <programlisting role="php">
<![CDATA[
$query  = "SELECT * FROM products
                    WHERE id LIKE '%a%'
                    exec master..xp_cmdshell 'net user test testpass /ADD'--";
$result = mssql_query($query);
]]>
      </programlisting>
     </informalexample>
     Der MSSQL Server führt die SQL Statements in dem Batch aus, inklusive einem
     Kommando zum Anlegen eines neuen Benutzers in der Datenbank Accounts. Würde
     diese Applikation als <literal>sa</literal> und der MSSQLSERVER Service
     mit genügend Rechten laufen, hätte der Angreifer nun ein Konto, mit welchem
     er Zugriff auf diese Maschine hätte.
    </para>
    <note>
     <para>
      Manche der obigen Beispiele sind an einen spezifischen Datenbankserver
      gebunden. Das heißt jedoch nicht, dass nicht ein ähnlicher Angriff auf
      andere Produkte möglich wäre. Ihr Datenbankserver könnte auf andere
      Weise genauso verwundbar sein.
     </para>
    </note>


    <sect2 xml:id="security.database.avoiding">
     <title>Techniken zur Vermeidung</title>
     <simpara>
      Sie könnten sich nun darauf berufen, dass der Angreifer in den meisten
      Beispielen ein Stück Information über das Datenbankschema haben muss. Sie
      haben recht, aber Sie wissen nie, wann und wie es genommen werden kann,
      und wenn es passiert, kann Ihre Datenbank entblößt werden. Wenn Sie ein
      Open Source, oder öffentlich verfügbares Paket zur Handhabung von
      Datenbanken verwenden, welches vielleicht zu einem Content Management
      System oder Forum gehört, können Eindringlinge leicht eine Kopie eines
      Stücks Ihres Codes erstellen. Es kann auch ein Sicherheitsrisiko sein,
      wenn es sich um ein schlecht designtes Paket handelt.
     </simpara>
     <simpara>
      Diese Angriffe basieren hauptsächlich auf dem Ausnutzen des Codes, welcher
      ohne Bedenken auf die Sicherheit geschrieben wurde. Vertrauen Sie nie auf
      irgendeine Art von Input, speziell wenn er von der Clientseite kommt,
      selbst wenn er von einer Auswahlbox, einem versteckten Eingabefeld, oder
      einem Cookie kommt. Das erste Beispiel zeigt, dass solch eine untadelige
      Abfrage ein Disaster anrichten kann.
     </simpara>

     <itemizedlist>
      <listitem>
       <simpara>
        Stellen Sie nie als Superuser oder Owner einer Datenbank eine Verbindung
        zur Datenbank her. Verwenden Sie immer speziell angelegte Benutzer mit
        sehr limitierten Rechten.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Prüfen Sie, ob der gegebene Input dem erwarteten Datentyp entspricht.
        PHP bietet eine große Auswahl an Funktionen zum Validieren des Input,
        von den einfachsten unter <link
        linkend="ref.var">Variablenfunktionen</link> und <link
        linkend="ref.ctype">Character Type Functions</link> (z.B.
        <function>is_numeric</function> bzw. <function>ctype_digit</function>),
        bis hin zu den <link linkend="ref.pcre">Perl kompatiblen Regulären
        Ausdrücken</link>.
       </simpara>
      </listitem>
      <listitem>
       <para>
        Wenn die Applikation numerischen Input erwartet, erwägen Sie die Prüfung
        der Daten mit <function>is_numeric</function>, oder die Änderung des
        Typs mit <function>settype</function>, oder verwenden Sie die numerische
        Repräsentation mittels <function>sprintf</function>.
        <example>
         <title>Ein sicherer Weg, eine Abfrage zu erstellen</title>
         <programlisting role="php">
<![CDATA[
settype($offset, 'integer');
$query = "SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET $offset;";

// Beachten Sie %d im Formatstring, %s zu verwenden wäre sinnlos
$query = sprintf("SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET %d;",
                 $offset);
]]>
         </programlisting>
        </example>
       </para>
      </listitem>
      <listitem>
       <simpara>
        Escapen Sie jede nicht numerische Benutzereingabe, welcher zur Datenbank
        weitergereicht werden soll mit der jeweiligen datenbankspezifischen
        Escape-Funktion (z.B. <function>mysql_escape_string</function>,
        <function>sql_escape_string</function> usw.). Wenn keine
        datenbankspezifischen Escapemechanismen existieren können in der
        Regel (je nach Datenbanktyp) auch die Funktion <function>addslashes</function>
        und <function>addcslashes</function> von Nutzen sein. Siehe auch <link
        linkend="security.database.storage">das erste Beispiel</link>. Wie
        dieses Beispiel zeigt, sind in den statischen Teil der Abfrage
        eingebrachten Escapes nicht genug, und können leicht gehacked werden.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Geben Sie keinerlei datenbankspezifische Informationen aus, speziell
        über das Schema, egal wie (auf ehrliche oder unehrliche Weise). Siehe
        auch <link linkend="security.errors">Fehlerbehandlung</link> und
        <link linkend="ref.errorfunc">Error Handling and Logging
        Functions</link>.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Sie können stored procedures und vorher definierte Cursor verwenden,
        um den Datenzugriff zu abstrahieren, sodass Benutzer nicht direkt auf
        Tabellen oder Views zugreifen, aber diese Lösung hat andere
        Auswirkungen.
       </simpara>
      </listitem>
     </itemizedlist>

     <simpara>
      Abgesehen davon profitieren Sie von einer Protokollierung der Abfragen
      entweder in Ihrem Skript, oder durch die Datenbank selbst, wenn es hilft.
      Klar, die Protokollierung kann nicht irgendeinen schädlichen Versuch
      verhindern, aber es kann helfen herauszufinden, welche Applikation
      umgangen wurde. Das Log ist durch die in ihm enthaltene Information
      nützlich, und je mehr Details es enthält, desto besser ist es im
      Allgemeinen.
     </simpara>
    </sect2>
   </sect1>
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
