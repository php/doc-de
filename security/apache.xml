<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.2 Maintainer: tom Status: ready -->
 <chapter xml:id="security.apache" xmlns="http://docbook.org/ns/docbook">
   <title>Apache-Modul</title>
   <simpara>
    Wenn PHP als Apache-Modul eingesetzt wird, übernimmt es die
    Benutzerrechte des Apache (üblicherweise user "nobody"). Das hat
    verschiedene Auswirkungen auf Sicherheit und Authentifizierung, z.B.:
    Wenn Sie PHP zum Zugriff auf eine Datenbank benutzen, es sei denn
    diese Datenbank hat eine integrierte Zugriffskontrolle, müssen Sie
    dem Benutzer "nobody" Zugriffsrechte auf die Datenbank erteilen. Das
    heißt, dass ein böswilliges Skript auch Benutzerkennung und Passwort
    auf die Datenbank zugreifen, und sie verändern könnte. Es ist durchaus
    möglich, dass ein Web-Spider über die Webseite eines
    Datenbankadministrators stolpert, und alle Ihre Datenbanken löscht.
    Sie können sich dagegen mit Apache Authentifizierung schützen, oder
    ein eigenes Zugangsmodell unter Verwendung von LDAP, .htaccess Dateien,
    etc. entwerfen, und diesen Code als Teil Ihrer PHP Skripte einbinden.
   </simpara>
   <simpara>
    Es wurde festgestellt, dass wenn einmal die Sicherheitsmaßnahmen so
    weit eingerichtet sind dass dem PHP User (in diesem Fall ein Apache
    User) nur mehr ein geringes Risiko bleibt, PHP daran gehindert wird,
    virenverseuchte Dateien in das Benutzerverzeichnis zu schreiben. Oder
    vielleicht wurde es auch daran gehindert, auf Datenbanken zuzugreifen
    oder diese gar zu verändern. In gleicher Weise wird auch davor
    abgehalten, "gute" oder "bösartige" Dateien zu schreiben, oder "gute"
    bzw. "bösartige" Datenbanktransaktionen durchzuführen.
   </simpara>
   <simpara>
    Ein häufig gemachter Fehler in Punkto Sicherheit ist Apache Root-Rechte
    zu erteilen, oder die Möglichkeiten von Apache in einer anderen Weise
    auszuweiten.
   </simpara>
   <simpara>
    Die Ausweitung der Benutzerrechte für Apache auf root ist sehr
    gefährlich, und kann dem gesamten System schaden, denn mit sudo,
    chroot, oder anderwärtig als root zu arbeiten sollte niemand anders
    als den Sicherheitsprofis überlassen werden.
   </simpara>
   <simpara>
    Es gibt auch ein paar einfachere Lösungen. Mit
    <link linkend="ini.open-basedir">open_basedir()</link> können Sie
    kontrollieren, welche Verzeichnisse PHP benutzen darf oder nicht. Sie
    können auch einen Bereich nur für Apache einrichten, um alle
    webbasierten Aktivitäten auf nicht-Benutzer- bzw. nicht-System-Dateien
    einzuschränken.
   </simpara>
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

