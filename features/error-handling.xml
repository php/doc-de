<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.26 Maintainer: tom Status: ready -->
 <chapter xml:id="features.error-handling" xmlns="http://docbook.org/ns/docbook">
  <title>Fehlerbehandlung</title>
 
  <para>
   Es gibt verschiedene Arten von Fehlermeldungen und Warnungen in PHP.
   Diese sind:

   <table>
    <title>PHP Fehlertypen</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>Wert</entry>
       <entry>Konstante</entry>
       <entry>Beschreibung</entry>
       <entry>Bemerkung</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1</entry>
       <entry>E_ERROR</entry>
       <entry>Schwere Laufzeitfehler</entry>
       <entry></entry>
      </row>
      <row>
       <entry>2</entry>
       <entry>E_WARNING</entry>
       <entry>Laufzeit-Warnungen (keine schweren Fehler)</entry>
       <entry></entry>
      </row>
      <row>
       <entry>4</entry>
       <entry>E_PARSE</entry>
       <entry>Fehler beim Parsen während des Kompilierens</entry>
       <entry></entry>
      </row>
      <row>
       <entry>8</entry>
       <entry>E_NOTICE  </entry>
       <entry>
        Mitteilungen zur Laufzeit (weniger ernst als Warnungen)
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry>16</entry>
       <entry>E_CORE_ERROR</entry>
       <entry>Schwere Fehler während dem Start von PHP</entry>
       <entry>Nur PHP 4</entry>
      </row>
      <row>
       <entry>32</entry>
       <entry>E_CORE_WARNING</entry>
       <entry>
        Warnungen (keine schweren Fehler) während dem Start von PHP
       </entry> 
       <entry>Nur PHP 4</entry>
      </row>
      <row>
       <entry>64</entry>
       <entry>E_COMPILE_ERROR</entry>
       <entry>Schwere Fehler während des Kompilierens</entry>
       <entry>Nur PHP 4</entry>
      </row>
      <row>
       <entry>128</entry>
       <entry>E_COMPILE_WARNING</entry>
       <entry>Warnungen (keine schweren Fehler) während des Kompilierens</entry>
       <entry>Nur PHP 4</entry>
      </row>
      <row>
       <entry>256</entry>
       <entry>E_USER_ERROR</entry>
       <entry>Vom Benutzer erzeugte Fehlermeldung</entry>
       <entry>Nur PHP 4</entry>
      </row>
      <row>
       <entry>512</entry>
       <entry>E_USER_WARNING</entry>
       <entry>Vom Benutzer erzeugte Warnung</entry>
       <entry>Nur PHP 4</entry>
      </row>
      <row>
       <entry>1024</entry>
       <entry>E_USER_NOTICE </entry>
       <entry>Vom Benutzer erzeugte Mitteilungen</entry>
       <entry>Nur PHP 4</entry>
      </row>
      <row>
       <entry></entry>
       <entry>E_ALL</entry>
       <entry>Alle der oben genannten, welche unterstützt werden</entry>
       <entry></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   Aus den obigen Werten (numerisch oder symbolisch) wird eine Bitmaske
   erstellt, welche die zu meldenden Fehler angibt. Sie können die 
   <link linkend="language.operators.bitwise">Bit-Operatoren</link>
   verwenden um diese Werte zu kombinieren, oder um bestimmte Fehlertypen
   auszunehmen. Beachten Sie, dass innerhalb der &php.ini;
   nur '|', '~', '!', und '&amp;' erkannt werden, und dass innerhalb der
   <filename>php3.ini</filename> keine Bit-Operatoren möglich sind.
  </para>
  <para>
   In PHP 4 ist die Standardeinstellung für <link
   linkend="ini.error-reporting">error_reporting</link>
   <literal>E_ALL &amp; ~E_NOTICE</literal>, d.h. es werden abgesehen vom
   E_NOTICE-Level alle Fehler und Warnungen angezeigt. In PHP 3 ist die
   Standardeinstellung <literal>(E_ERROR | E_WARNING | E_PARSE)</literal>,
   was das gleiche bedeutet. Beachten Sie, dass in der
   <filename>php3.ini</filename> von PHP 3 keine Konstanten unterstützt
   werden, d.h. die Einstellungen von <link
   linkend="ini.error-reporting">error_reporting</link> müssen numerisch
   angegeben werden, in diesem Fall <literal>7</literal>.
  </para>

  <para>
   Die Anfangseinstellung kann in der ini Datei mittels der <link
   linkend="ini.error-reporting">error_reporting</link> Direktive,
   sowie in Ihrer Apache <filename>httpd.conf</filename> Datei mittels
   der php_error_reporting (php3_error_reporting in PHP 3) Direktive
   geändert werden. Sie kann aber auch während der Laufzeit innerhalb
   eines Skriptes mittels der Funktion
   <function>error_reporting</function> gesetzt werden.
  </para>
  
  <warning>
   <para>
    Während eines Upgrades Ihres Codes oder Servers von PHP 3 auf PHP 4
    sollten Sie diese Einstellungen und Aufrufe von
    <function>error_reporting</function> kontrollieren, sonst könnten
    Sie die Meldung neuer Fehlertypen, speziell E_COMPILE_ERROR,
    deaktivieren. Dies könnte dazu führen, dass Sie ein leeres Dokument
    ohne jeden Hinweis auf die Ursache des Problems erhalten.
   </para>
  </warning>
    
  <para>
   Alle <link linkend="language.expressions">PHP Ausdrücke</link> können
   auch mit dem Präfix "@" aufgerufen werden, welches Fehlermeldungen für
   diesen bestimmten Ausdruck deaktiviert. Ist während solch einem Ausdruck
   ein Fehler aufgetreten und <link
   linkend="ini.track-errors">track_errors</link> aktiviert, finden Sie
   diese Fehlermeldung in der globalen Variable
   <literal>$php_errormsg</literal>.
  </para>

  <note>
   <para>
    Der <link linkend="language.operators.errorcontrol">@
    Fehler-Kontroll-Operator</link> verhindert jedoch keine Meldungen,
    welche aus Fehlern beim Parsen resultieren.
   </para>
  </note>

  <warning>
   <para>
    Derzeit deaktiviert der <link linkend="language.operators.errorcontrol">@
    Fehler-Kontroll-Operator</link> auch Meldungen von kritischen Fehlern,
    welche die Ausführung des Skriptes abbrechen. Unter anderem heißt das,
    dass wenn Sie <link linkend="language.operators.errorcontrol">@</link>
    zur Unterdrückung von Fehlermeldungen einer bestimmten Funktion verwenden,
    im Falle des Fehlens der Funktion bzw. eines Tippfehlers die Ausführung
    des Skriptes genau dort ohne Anzeichen warum abgebrochen.
   </para>
  </warning>

  <para>
   Nachstehend finden Sie ein Beispiel für die Verwendung der Möglichkeiten
   zur Fehlerbehandlung in PHP. Wir definieren eine Funktion zur
   Fehlerbehandlung, welche die Information in eine Datei schreibt (im XML
   Format), und im Falle von schweren Fehlern in der Logik dem Entwickler
   ein E-Mail sendet.
   <example>
    <title>Verwenden der Fehlerbehandlung in einem Skript</title>
    <programlisting role="php">
<![CDATA[
<?php
// wir machen uns die Fehlerbehandlung selbst
error_reporting(0);

// Benutzerdefinierte Funktion zur Fehlerbehandlung
function userErrorHandler ($errno, $errmsg, $filename, $linenum, $vars) {
    // timestamp für den Fehlereintrag
    $dt = date("Y-m-d H:i:s (T)");

    // definiere ein assoziatives Array mit Fehler String
    // in der Realität sind die einzigen zu bedenkenden
    // Einträge 2,8,256,512 und 1024
    $errortype = array (
                1   =>  "Error",
                2   =>  "Warning",
                4   =>  "Parsing Error",
                8   =>  "Notice",
                16  =>  "Core Error",
                32  =>  "Core Warning",
                64  =>  "Compile Error",
                128 =>  "Compile Warning",
                256 =>  "User Error",
                512 =>  "User Warning",
                1024=>  "User Notice"
                );
    // Gruppe von Fehlern, die zur Nachverfolgung gespeichert werden
    $user_errors = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);
    
    $err = "<errorentry>\n";
    $err .= "\t<datetime>".$dt."</datetime>\n";
    $err .= "\t<errornum>".$errno."</errornum>\n";
    $err .= "\t<errortype>".$errortype[$errno]."</errortype>\n";
    $err .= "\t<errormsg>".$errmsg."</errormsg>\n";
    $err .= "\t<scriptname>".$filename."</scriptname>\n";
    $err .= "\t<scriptlinenum>".$linenum."</scriptlinenum>\n";

    if (in_array($errno, $user_errors))
        $err .= "\t<vartrace>".wddx_serialize_value($vars,"Variables")."</vartrace>\n";
    $err .= "</errorentry>\n\n";
    
    // zum Testen
    // echo $err;

    // in das Log speichern, und im Falle eines kritischen Fehlers E-Mail an mich
    error_log($err, 3, "/usr/local/php4/error.log");
    if ($errno == E_USER_ERROR)
        mail("phpdev@example.com","Critical User Error",$err);
}


function distance ($vect1, $vect2) {
    if (!is_array($vect1) || !is_array($vect2)) {
        trigger_error("Incorrect parameters, arrays expected", E_USER_ERROR);
        return NULL;
    }

    if (count($vect1) != count($vect2)) {
        trigger_error("Vectors need to be of the same size", E_USER_ERROR);
        return NULL;
    }

    for ($i=0; $i<count($vect1); $i++) {
        $c1 = $vect1[$i]; $c2 = $vect2[$i];
        $d = 0.0;
        if (!is_numeric($c1)) {
            trigger_error("Coordinate $i in vector 1 is not a number, using zero", 
                            E_USER_WARNING);
            $c1 = 0.0;
        }
        if (!is_numeric($c2)) {
            trigger_error("Coordinate $i in vector 2 is not a number, using zero", 
                            E_USER_WARNING);
            $c2 = 0.0;
        }
        $d += $c2*$c2 - $c1*$c1;
    }
    return sqrt($d);
}

$old_error_handler = set_error_handler("userErrorHandler");

// undefinierte Konstante, generiert eine Warnung
$t = I_AM_NOT_DEFINED;

// definiere einige "Vektoren"
$a = array(2,3,"foo");
$b = array(5.5, 4.3, -1.6);
$c = array (1,-3);

// generiere einen Benutzerfehler
$t1 = distance($c,$b)."\n";

// generiere einen weiteren Benutzerfehler
$t2 = distance($b,"i am not an array")."\n";

// generiere eine Warnung
$t3 = distance($a,$b)."\n";

?>
]]>
    </programlisting>
   </example>
   Dies ist nur ein einfaches Beispiel für die Verwendung der
   <link linkend="ref.errorfunc">Error Handling and Logging
   functions</link>.
  </para>

  <para>
   Siehe auch <function>error_reporting</function>,
   <function>error_log</function>,
   <function>set_error_handler</function>,
   <function>restore_error_handler</function>, 
   <function>trigger_error</function>,
   <function>user_error</function>
  </para>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
