 <chapter id="features.persistent-connections">
  <title>Persistente Datenbankverbindungen</title>

  <simpara>
   Persistente Verbindungen sind SQL-Verbindungen, die nach
   Abarbeitung des Skriptes nicht geschlossen werden. Wenn eine
   persistente Verbindung angefordert wird, prüft PHP zuerst, ob
   bereits eine identische persistente Verbindung (die vielleicht
   vorher offen geblieben ist) existiert und benutzt sie in diesem Fall.
   Sollte keine Verbindung existieren, wird eine hergestellt. Eine
   'identische' Verbindung ist eine Verbindung, die zu dem
   gleichen Host mit dem gleichen Usernamen und Passwort
   hergestellt wurde.</simpara>

  <simpara>
   Wer nicht durchgängig mit der Art und Weise, wie
   Webserver arbeiten und die Last verteilen, vertraut ist, könnte
   missverstehen, wofür persistente Verbindungen gedacht sind.
   Im Besonderen bieten sie <emphasis>keine</emphasis>
   Möglichkeit, 'Benutzersitzungen' auf der gleichen SQL-Verbindung
   zu öffnen und <emphasis>keine</emphasis> Möglichkeit, eine
   leistungsstartke Transaktion aufzubauen, und sie können viele
   andere Sachen nicht. Um absulute Klarheit zu schaffen:
   Persistente Verbindungen bieten <emphasis>keine</emphasis>
   Funktionalität, die nicht auch von nicht-persistenten Verbindungen
   bereitgestellt wird.</simpara>

  <simpara>
   Warum?</simpara> 

  <simpara>
   Das hat mit der Arbeitsweise con Webservern zu tun. Es gibt drei
   Möglichkeiten, wie ein Webserver PHP zur Generierung von
   Webseiten einsetzen kann.</simpara>

  <simpara>
   Die erste Methode ist, PHP als CGI-'Wrapper' zu benutzen. 
   Wenn diese Methode eingesetzt wird, wird für jede Anfrage 
   nach einer PHP-Seite vom Webserver eine Instanz des PHP-
   Interpreters gestartet und anschliessend wieder beendet. 
   Durch die Beendigung des Interpreters nach abgeschlossener
   Anfrage werden alle Ressourcen, auf die zugegriffen wurde 
   ( wie beispielsweise eine Verbindung zu einem SQL-
   Datenbankserver) wieder geschlossen. In diesem
   Fall erreicht man nichts, wenn man persistente Verbindungen
   benutzt - sie sind eben nicht beständig.</simpara>

  <simpara>
   Die zweite und populärere Methode ist der Einsatz von PHP als
   Modul in einem Multiprozess-Webserver, was momentan nur
   auf den Apache zutrifft. Typischerweise hat ein Multiprozess-
   Webserver einen Prozess (den 'Eltern' Prozess), der einen Satz
   weiterer Prozesse (die 'Kinder') koodiniert, die die eigentliche Arbeit
   des Bereitstellens der Seiten übenehmen. Jede Anfrage, die von
   einen Client erfolgt, wird an einen untergeordneten Prozess, der
   noch keine andere Anfrage bearbeitet, weitergereicht. Das bedeutet,
   dass eine zweite Anfrage des Clients an den Server unter
   Umständen von einem anderen untergeordneten Prozess als die
   erste Anfrage bearbeitet wird. In diesem Fall sorgt eine persistente
   Verbindung dafür, dass jeder untergeordnete Prozess sich nur 
   einmal mit dem SQL-Server verbinden muss, wenn eine solche
   benötigt wird. Benötigt dann eine weitere Seite die Verbindung mit 
   dem SQL-Server, kann auf die zurückgegriffen werden,
   die der untergeordnete Prozess vorher hergestellt hat.</simpara>

  <simpara>
   Die letzte Methode ist, PHP als Plug-in für einen Multithread-
   Webserver zu benutzen. Momentan ist dies noch Theorie - PHP
   arbeitet noch nicht als Plug-in für irgedeinen dieser Server. An
   der Unterstützung für ISAPI, WSAPI und NSAPI wird gearbeitet,
   so dass die Nutzung von PHP mit Multithread-Serven wie
   Netscape Fast Track, Microsoft Internet Information Server (IIS)
   und O'Reilly's WebSite Pro möglich wird. Wenn es soweit ist,
   wird das Verhalten im wesentlichen dem oben
   beschriebenen Multiprozess-Modell entsprechen.</simpara>

  <simpara>
   Wozu dienen persistente Verbindungen, wenn sie keine 
   zusätzliche Funktionalität bieten?</simpara>

  <simpara>
   Die Antwort ist ausserordentlich einfach: Effizienz. Persistente
   Verbindungen sind nützlich, wenn die Notwendigkeit, eine
   Verbindung zu einem SQL-Server herzustellen, hoch ist.
   Ob dies der Fall ist oder nicht, hängt von vielen Faktoren ab -
   zum Beispiel, um was für eine Datenbank es sich handelt, ob
   sie auf dem gleichen Rechner wie der Webserver läuft oder
   welche Last die SQL-Maschine zu bewältigen hat usw.
   Grundsätzlich gilt, dass, wenn viele Verbindungen hergestellt
   werden müssen, persistente Verbindungen ausserordentlich 
   hilfreich sind. Sie veranlassen den untergeordneten Prozess, 
   sich während seiner gesamten Lebensdauer lediglich einmal mit
   dem SQL-Server zu verbinden, anstatt jedesmal beim Aufruf
   einer Seite, die eine Verbindung benötigt. Das heisst, dass
   jeder untergeordneten Prozess, der eine persistente
   Verbindung öffnet, eine eigene dauerhafte Verbindung zum 
   Server hat. Bei 20 untergeordnete Prozessen, die ein Skript 
   ausführen, das eine persistente Verbindung zum SQL-Server 
   herstellt, hat man beispielsweise 20 verschiedene Verbindungen 
   zum SQL-Server - eine für jeden untergeordneten Prozess.</simpara>

  <simpara>
   Eine wichtige Zusammenfassung. Persistente Verbindungen wurden
   entwickelt, um eins-zu-eins Abbildungen auf reguläre Verbindungen 
   zu haben. Das heisst, dass man <emphasis>immer</emphasis> in der 
   Lage sein sollte, die persistenten Verbindungen durch nicht-persistente
   zu ersetzten, ohne dass dies den Skriptablauf verändert. Es <emphasis>
   kann</emphasis> (und wird vermutlich auch) die Effizienz des Skriptes
   beeinflussen, aber nicht dessen Verhalten.</simpara>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
