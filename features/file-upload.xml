<?xml version="1.0" encoding="iso-8859-1"?>
 <chapter id="features.file-upload">
  <title>Steuerung von Dateiuploads</title>

  <sect1 id="features.file-upload.post-method">
   <title>Dateiuploads mit POST</title>

   <simpara>
    PHP kann Dateiuploads mit jedem RFC-1867
    konformen Browser (dazu gehören der Natscape Navigator
    3 oder höher, Microsoft Internet Explorer 3 mit Patch von
    Microsoft oder höher ohne Patch) durchführen. Es können
    sowohl Text- als auch Binärdaten hochgeladen werden.
    Mit PHP´s Authentifizierungs- und Dateifunktionen besteht
    volle Kontrolle darüber, wer Dateien hochladen darf und was
    mit den Dateien geschehen soll, wenn der Upload beendet ist.
   </simpara>

   <para>
    PHP unterstützt auch Dateiuploads nach der PUT-Methode, die
    beispielsweise vom Netscape Composer und den W3C Amaya
    Clients benutzt wird. Siehe dazu <link linkend="features.file-upload.put-method">PUT-Unterstützung</link>
    für nähere Informationen.</para>

   <para>
    Eine Maske für den Dateiuplod kann erstellt werden, indem man
    ein Formular entwirft, was ungefähr so aussieht:

    <example>
     <title>Formular für den Dateiupload</title>
     <programlisting>
&lt;FORM ENCTYPE=&quot;multipart/form-data&quot; ACTION=&quot;_URL_&quot; METHOD=POST&gt;
&lt;INPUT TYPE=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; value=&quot;1000&quot;&gt;
Send this file: &lt;INPUT NAME=&quot;userfile&quot; TYPE=&quot;file&quot;&gt;
&lt;INPUT TYPE=&quot;submit&quot; VALUE=&quot;Send File&quot;&gt;
&lt;/FORM&gt;
    </programlisting>
    </example>
    
    Die URL sollte auf eine PHP-Datei verweisen. Das versteckte Feld
    MAX_FILE_SIZE muß dem Dateieingabefeld vorausgehen und den
    Wert der maximal akzeptierten Dateigrösse in Bytes enthalten.
    Bei erfolgreichem Upload des Files werden folgende Variablen definiert:
   </para>
   <para>
    <itemizedlist>
     <listitem>
      <simpara>
       $userfile - Der temporäre Name, unter dem die hochgeladene Datei 
       auf demServer gespeichert wurde.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       $userfile_name - Der ursprüngliche Dateiname auf dem System des
       Absenders.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       $userfile_size - Größe der hochgeladenen Datei in Bytes.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       $userfile_type - Der Mime-Typ der Datei, wenn dies
       Information zur Verfügung gestellt wird. Ein Beispiel wäre
       &quot;image/gif&quot;.
      </simpara>
     </listitem>
    </itemizedlist>
    
    Die Variable &quot;$userfile&quot;  trägt den Namen des 
    Dateifeldes im Formular; im obigen Beispiel haben wir die 
    Bezeichnung &quot;userfile&quot; gewählt.</para>
    

   <simpara>
    Standardmäßig werden Dateien in dem vorgegebenen temporären
    Verzeichnis des Servers gespeichert. Dies kann durch das Setzen
    der Umgebungsvariablen <envar>TMPDIR</envar> direkt in der
    Umgebung, in der PHP ausgeführt wird, geändert werden.
    Ein Setzen des temporären Verzeichnisses durch die Funktion
    <function>putenv</function> innerhalb eines Skriptes
    ist nicht möglich.</simpara>

   <simpara>
    Das PHP-Skript, dem die hochzuladende Datei übergeben wird,
    sollte alle nötigen Anweisungen enthalten, die festlegen, wie mit
    der hochgeladenen Datei verfahren werden soll. Beispielsweise
    kann die $file_size - Variable verwendet werden, um Dateien
    auszusortieren, die zu gross oder zu klein sind. Oder man
    benutzt die $file_type -  Variable, um sich aller Dateien zu entledigen, 
    die nicht bestimmten Typen entsprechen. Auf jeden Fall sollte
    die hochgeladene Datei aus dem temporären Verzeichnis gelöscht
    oder an andere Stelle verschoben werden.</simpara>

   <simpara>
    Die Datei wird aus dem temporären Verzeichnis gelöscht, sobald
    das Skript abgearbeitet ist, wenn sie nicht verschoben oder
    umbenannt wurde.</simpara></sect1>
 
  <sect1 id="features.file-upload.common-pitfalls">
   <title>Häufige Probleme</title>
   <simpara>
    Der mit MAX_FILE_SIZE eingestellte Wert kann nicht grösser
    sein als der durch die Zeile upload_max_filesize der PHP3.ini (oder
    der entsprechenden Zeile php3_upload_max_filesize in der Apache
    Konfigurationsdatei) festgelegte. Standardmäßig sind dies
    2 MB.</simpara>
   <simpara>
    Bitte beachten, daß der CERN httpd alles abschneidet, was auf 
    das erste Leerzeichen im content-type Mime-Header folgt, den
    er vom Client erhält. Solange dies der Fall ist, unterstützt der 
    CERN httpd keine Dateiuploads.</simpara>
  </sect1>

  <sect1 id="feature-fileupload.multiple">
   <title>Mehrere Dateien uploaden</title>
   <simpara>
    Es ist möglich, gleichzeitig mehrere Dateien hochzuladen und
    die Upload-Informationen automatisch in Arrays aufgeführt zu
    erhalten. Dabei muß im HTML-Formular die gleiche Syntax zum 
    Übermitteln des Arrays benutzt werden, was man durch verschiedene
    Select- und Checkboxen erreicht.</simpara>
   <note>
    <para>
      Die Unterstützung für den Upload mehrerer Dateien wurde in 
      Version 3.0.10 hinzugefügt.</para>
    </note>

   <para>
    <example>
     <title>Formular zum Upload mehrerer Dateien</title>
     <programlisting>
&lt;form action=&quot;file-upload.html&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
  Send these files:&lt;br&gt;
  &lt;input name=&quot;userfile[]&quot; type=&quot;file&quot;&gt;&lt;br&gt;
  &lt;input name=&quot;userfile[]&quot; type=&quot;file&quot;&gt;&lt;br&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Send files&quot;&gt;
&lt;/form&gt;
     </programlisting>
    </example></para>

   <simpara>
    Wenn das obige Formular abgeschickt wird, werden die Arrays
    <computeroutput>$userfile</computeroutput>,<computeroutput>$userfile_name</computeroutput> und
    <computeroutput>$userfile_size</computeroutput> für den globalen
    Bereich, wie in $HTTP_POST_VARS, angeordnet. Jede dieser
    Variablen ist ein numerisch indizierte Array, das aus den
    entsprechenden Werten der übertragenen Dateien besteht.</simpara> 
 
   <simpara>
    Nehmen wir an, die Dateinamen  <filename>/home/test/review.html</filename>
    und <filename>/home/test/xwp.out</filename> werden übertragen. In
    diesem Fall beinhaltet<computeroutput>$userfile_name[0]</computeroutput> 
    den Wert <computeroutput>review.html</computeroutput> und
    <computeroutput>$userfile_name[1]</computeroutput>  enthält den Wert
    <computeroutput>xwp.out</computeroutput>.
     Genauso enthält <computeroutput>$userfile_size[0]</computeroutput>
     die Dateigröße von <filename>review.html</filename>,  und so weiter.</simpara></sect1>

  <sect1 id="features.file-upload.put-method">
   <title>PUT-Unterstützung</title>

   <para>
    PHP unterstützt die HTTP PUT-Methode, wie sie von Clients wie Netscape
    Composer oder W3C Amaya benutzt wird. PUT-Anfragen sind weitaus
    unkomplizierter als ein Dateiupload und sehen etwa so aus:

    <informalexample><programlisting>
PUT /path/filename.html HTTP/1.1
    </programlisting></informalexample>
   </para>

   <para>
    Das würde normalerweise bedeuten, daß der entfernte Client den
    folgenden Inhalt als /path/filename.html im Webverzeichnisbaum
    speichert. Natürlich ist es keine gute Idee, dass PHP oder
    Apache jeden Benutzer beliebige Dateien überschreiben lassen.
    Um eine solche Anfrage bearbeiten zu können, muss der Webserver
    erst angewiesen werden, ein bestimmtes PHP-Skript für die
    Abarbeitung aufzurufen. Im Apache wird dies durch die
    <emphasis>Script</emphasis> - Direktrive festgelegt. Sie kann
    irgendwo in der Apache-Konfigurationsdatei plaziert werden,
    gebräuchlich ist die Plazierung innerhalb einer &lt;Directory&gt;- oder
    &lt;Virtualhost&gt;- Sektion. Eine Zeile wie die folgende erledigt dies:

    <informalexample><programlisting>
Script PUT /put.php3
    </programlisting></informalexample>
   </para>

   <simpara>
    Diese Zeile legt fest, daß Apache alle PUT-Anfragen für URIs, die
    dem Kontext entsprechen, in dem diese Zeile steht, an das put.php3
    Skript weiterleitet. Dies setzt voraus, daß PHP aktiv und für die
    .php3-Dateierweiterung registriert ist.
   </simpara>
   <simpara>
    Innerhalb der put.php3-Datei könnte folgendes stehen:
   </simpara>
   <para>
    <informalexample><programlisting>
&lt;? copy($PHP_UPLOADED_FILE_NAME,$DOCUMENT_ROOT.$REQUEST_URI); ?&gt;
    </programlisting></informalexample>
   </para>
   <simpara>
    Dies kopiert die Datei an den vom Client angegebenen Ort.
    Möglicherweise sollen vor dem Kopieren der Datei noch
    Überprüfungen und/oder Benutzerauthentifizierung stattfinden. Wenn
    PHP eine PUT-Anfrage erhält, wird die Datei in einem temporären
    Verzeichnis gespeichert, genau wie bei <link
    linkend="features.file-upload.post-method">POST-Methode</link>
    Nach Abarbeiten der Anfrage wird die temporäre Datei gelöscht.
    Also muß das PHP-Skript, das die PUT-Anfrage bearbeitet, die Datei
    irgendwohin kopieren. Der Name der temporären Datei findet sich in
    der Variablen $PHP_PUT_FILENAME; der Name der zu speichernden
    Datei steht in $REQUEST_URI (kann bei Nicht-Apache Webservern
    variieren). Dieser Zieldateiname wird vom Client festgelegt. Man
    kann den Client auch umgehen; beispielsweise könnten alle
    hochgeladenen Dateien in ein spezielles Upload-Directory kopiert
    werden.
   </simpara>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
