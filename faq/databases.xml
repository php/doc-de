<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: fa Status: ready -->
 <chapter xml:id="faq.databases" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>PHP und Datenbanken</title>
  <titleabbrev>PHP und Datenbanken</titleabbrev>

  <para>
   Dieser Abschnitt enthält häufige Fragen über die Verbindung von PHP und
   Datenbanken. PHP kann in der Tat auf praktisch jede verfügbare Datenbank
   zugreifen.
  </para>

  <qandaset>
   <qandaentry xml:id="faq.databases.mssql">
    <question>
     <para>
      Ich habe gehört, dass es möglich ist, den Microsoft SQL-Server aus PHP
      anzusprechen. Wie?
     </para>
    </question>
    <answer>
     <para>
      Auf einem Windows-Rechner können Sie einfach die eingeschlossene 
      ODBC-Unterstützung mit dem passenden Treiber verwenden.
     </para>
     <para>
      Auf einem Unix-Rechner können Sie die Sybase-CT-Treiber benutzen, um auf
      Microsoft SQL-Server zuzugreifen, weil diese ein (zumindest nahezu)
      kompatibles Protokoll aufweisen. Sybase hat eine 
      <link xlink:href="&url.sybase.ctlib;">freie Version der benötigten Bibliotheken
      für Linux-Systeme</link> erstellt. Sehen Sie sich auch die
      Antwort auf die nächste Frage an.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.databases.access">
    <question>
     <para>Kann ich auf Microsoft Access-Datenbanken zugreifen?</para>
    </question>
    <answer>
     <para>
      Ja. Sie haben bereits alle nötigen Werkzeuge, wenn sie komplett unter
      Windows 9x/Me oder NT/2000 arbeiten, wo Sie ODBC und die ODBC-Treiber von
      Microsoft benutzen können, um auf Microsoft Access-Datenbanken zuzugreifen.
     </para>
     <para>
      Wenn Sie PHP auf einem Unix-Rechner betreiben und auf MS Access auf einem
      Windows-Rechner zugreifen wollen, brauchen sie ODBC-Treiber für Unix.
      <link xlink:href="&url.openlink;">OpenLink Software</link> bietet Unix-basierte
      ODBC-Treiber an, die dazu geeignet sind.
     </para>
     <para>
      Eine weitere Alternative ist es, einen SQL-Server zu benutzen, der
      ODBC-Treiber für Windows anbietet und diesen dann zu benutzen, um die Daten
      dort abzulegen, um sie dann von Microsoft Access (über ODBC) und PHP (mit
      den mitgelieferten Treibern) aus anzusprechen, oder ein 
      dazwischengeschaltetetes Dateiformat zu benutzen, das sowohl Access als
      auch PHP verstehen, beispielsweise Plaintext oder dBase-Datenbanken.
      Zu diesem Punkt schreibt Tim Hayes von OpenLink Software:
      <blockquote>
       <para>
        Eine andere Datenbank als vermittelndes Element zu benutzen ist keine
        gute Idee, wenn Sie ODBC direkt von PHP aus zur Datenbank benutzen können
        - etwa mit den Openlink-Treibern. Wenn Sie wirklich ein zwischengeschaltetes
        Dateiformat benötigen, hat Openlink jetzt Virtuoso (eine virtuelle 
        Datenbank) für NT, Linux und andere Unix-Plattformen herausgebracht.
        Bitte besuchen Sie unsere <link xlink:href="&url.openlink;">Webseite</link>,
        wenn Sie Virtuoso kostenlos herunterladen wollen.
       </para>
      </blockquote>
     </para>
     <para>
      Eine Möglichkeit, die sich als erfolgreich herausgestellt hat, ist die
      Benutzung von MySQL und den MyODBC-Treibern unter Windows, um die
      Datenbanken zu synchronisieren. Steve Lawrence schreibt dazu:
     </para>
     <para>
      <itemizedlist>
       <listitem>
        <simpara>
         Installieren Sie MySQL wie in der Dokumentation beschrieben auf ihrem
         System. Die neueste Version finden Sie auf 
         <link xlink:href="&url.mysql;">www.mysql.com</link> 
         Es ist keine spezielle Konfiguration nötig, außer dass
         Sie beim Erzeugen einer Datenbank und der Einrichtung des
         Benutzeraccounts im Host-Feld ein % oder den Hostnamen des 
         Windows-Computers, von dem aus Sie zugreifen möchten, eintragen 
         sollten. Notieren Sie sich den Servernamen, Benutzernamen und das 
         Passwort.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Laden Sie die MyODBC for Windows-Treiber von der MySQL-Seite herunter.
         Installieren Sie ihn auf ihrem Windows-Rechner. Sie können
         die Funktionsfähigkeit mit den mitgelieferten Programmen testen.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Erstellen Sie eine Benutzer- oder System-DSN in den ODBC-Optionen in
         der Systemsteuerung. Überlegen Sie sich einen DSN-Namen und geben Sie
         den Hostnamen, Benutzernamen, Passwort, Port, etc ihrer MySQL-Datenbank
         an, die Sie im 1. Schritt konfiguriert haben.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Installieren Sie Access als Vollinstallation. Das stellt sicher, dass
         Sie die richtigen Add-Ins haben. Zumindest benötigen Sie die 
         ODBC-Unterstützung und den Linked-Table-Manager.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Jetzt zum lustigen Teil! Erstellen Sie eine neue Access-Datenbank.
         Rechtsklicken Sie im Tabellenfenster und wählen Sie Link 
         Tables/Tabellen verknüpfen oder im Menü Datei den Punkt Get
         External Data und dann Link Tables/Tabellen verknüpfen. Wenn das
         Dateibrowser-Fenster erscheint, wählen Sie Dateien vom Typ: ODBC.
         Wählen Sie System-DSN und den Namen der DSN, die Sie in Schritt 3
         erstellt haben. Wählen sie die zu verknüpfende Tabelle, klicken Sie
         auf OK und Sie können jetzt die Tabelle öffnen und Daten auf Ihrem
         MySQL-Server hinzufügen/löschen/ändern. Sie können auch Abfragen
         erzeugen, Tabellen importieren und exportieren und Formulare und
         Reports generieren, etc.
        </simpara>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      Tipps und Tricks:
      <itemizedlist>
       <listitem>
        <simpara>
         Sie können Ihre Tabellen in Access erstellen und nach MySQL
         exportieren und Sie dann wieder verknüpfen. Das erleichtert
         das Erstellen von Tabellen.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Wenn Sie Tabellen in Access erstellen, müssen Sie einen Primärschlüssel
         definieren, wenn Sie über Access Schreibzugriff haben wollen.
         Vergewissern Sie sich, dass sie einen Primärschlüssel in MySQL
         erzeugen, bevor Sie die Tabelle in Access verknüpfen.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Wenn Sie ein Tabelle in MySQL ändern, müssen Sie sie in Access neu
         verknüpfen. Rufen Sie Tools&gt;add-ins&gt;linked table manager auf,
         suchen Sie ihre ODBC-DSN, und wählen Sie die Tabelle aus, die neu
         verknüpft werden soll. Sie können Ihre DSN-Quelle auch verschieben,
         wenn Sie die "always prompt for new location"-Checkbox ankreuzen,
         bevor Sie OK klicken.
        </simpara>
       </listitem>
      </itemizedlist>
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.databases.mysql.php5">
    <question>
     <para>
      PHP 5 liefert keine MySQL-Client-Bibliotheken mehr mit aus, was bedeutet
      das für mich? Kann ich MySQL immer noch mit PHP benutzen? Wenn ich es
      versuche, bekomme ich "function undefined"-Errors, was ist passiert?
     </para>
    </question>
    <answer>
     <para>
      Ja. Es wird immer eine MySQL-Unterstützung in PHP geben. Die einzige
      Änderung in PHP 5 ist, dass die eigentliche Client-Bibliothek nicht
      mehr mitgeliefert wird. Hier sind einige Gründe:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        Die meisten Systeme haben heutzutage die Client-Bibliothek schon
        installiert.
       </para>
      </listitem>
      <listitem>
       <para>
        Gegeben den oben genannten Fall, kann es Probleme mit verschiedenen
        Versionen von Client-Bibliotheken geben. Wenn man etwa mod_auth_mysql
        gegen eine Version linkt und PHP gegen eine andere und dann beide im
        Apache einschaltet, gibt es einen schönen netten Absturz. Außerdem
        hat die mitgelieferte Bibliothek nicht immer richtig mit der
        installiertet Serverversion zusammengespielt. Das offensichtlichste
        Symptom war die Uneinigkeit, wo die Unix-Domain-Socket-Datei 
        mysql.socket zu finden ist.
       </para>
      </listitem>
      <listitem>
       <para>
        Die Wartung war etwas lax und die Bibliothek fiel immer mehr und mehr
        hinter der aktuellen Version zurück.
       </para>
      </listitem>
      <listitem>
       <para>
        Die zukünftigen Versionen der Bibliothek stehen unter der GPL und
        es gibt keine Update-Möglichkeit, da wir keine Bibliothek, die unter
        der GPL steht, mit einem Projekt unter einer BSD/Apache-ähnlichen
        Lizenz mitliefern können. Eine saubere Abspaltung mit PHP 5 schien die
        beste Möglichkeit zu sein.
       </para>
      </listitem>
     </itemizedlist>
     <para>
      Dies wird wahrscheinlich nicht besonders viele Leute betreffen. 
      Unix-Benutzer, zumindest die, die wissen, was sie tun, neigen dazu, PHP
      so zu kompilieren, dass es gegen die libmysqlclient-Bibliothek ihres
      Systems gelinkt ist, indem sie einfach <option 
      role="configure">--with-mysql=/usr</option> angeben.
      Windows-Benutzer können die Erweiterung <filename>php_mysql.dll</filename>
      in der &php.ini; einschalten. Für weitere Details besuchen Sie bitte die
      <link linkend="ref.mysql">MySQL-Referenz</link>, um an Anweisungen zur
      Installation zu gelangen. Versichern Sie sich auch, dass die Datei
      <filename>libmysql.dll</filename> in der PATH-variable des Systems vorhanden
      ist. Wie das funktioniert, können Sie unter <link 
      linkend="faq.installation.addtopath">Wie füge ich unter Windows PATH mein 
      PHP-Verzeichnis hinzu?</link> nachlesen. Weil <filename>libmysql.dll</filename>
      (und viele andere Dateien) im PHP-Ordner liegen, sollten Sie den PHP-Ordner
      zur PATH-variable hinzufügen.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.databases.shared-mysql">
    <question>
     <para>
      Nach der Installation der Unterstützung für shared-MySQL stürzt der
      Apache mit einem coredump an, sobald libphp4.so geladen wird. Kann man
      das beheben?
     </para>
    </question>
    <answer>
     <para>
      Wenn Ihre MySQL-Bibliotheken gegen pthreads gelinkt sind, wird das
      passieren. Sehen Sie mit ldd nach. Wenn sie es sind, schnappen Sie sich
      den MySQL-Tarball und kompilieren Sie es, oder kompilieren Sie es neu
      aus dem Source-RPM und entfernen Sie den Schalter in der spec-Datei, der
      den threaded-client-code einschaltet. Beide Lösungen werden dieses
      Problem beheben. Kompilieren Sie PHP dann mit den neuen MySQL-Bibliotheken.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.databases.mysqlresource">
    <question>
     <para>
      Wieso bekomme ich so eine Fehlermeldung:
      "Warning: 0 is not a MySQL result index in &lt;file&gt; 
      on line &lt;x&gt;" or "Warning: Supplied argument is not 
      a valid MySQL result resource in &lt;file&gt; on line &lt;x&gt;"?
     </para>
    </question>
    <answer>
     <para>
      Sie versuchen, einen result identifier zu benutzen, der 0 ist. Die 0
      bedeutet, dass Ihre Abfrage aus irgend einem Grund fehlgeschlagen ist.
      Sie sollten auf Fehlermeldungen überprüfen, nachdem Sie Ihre Abfrage
      losgeschickt haben und bevor Sie versuchen, mit dem Ergebnis zu arbeiten.
      Dies kann mit diesem oder ähnlichem Code bewerkstelligt werden:
      <programlisting role="php">
<![CDATA[
<?php

$result = mysql_query("SELECT * FROM tables_priv");
if (!$result) {
    echo mysql_error();
    exit;
}
?>
]]>
      </programlisting>
      oder
      <programlisting role="php">
<![CDATA[
<?php

$result = mysql_query("SELECT * FROM tables_priv")
    or die("Bad query: " . mysql_error());
?>
]]>
      </programlisting>
     </para>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
