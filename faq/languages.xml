<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: hholzgra Status: working -->
<!-- Credits: mk -->
 <chapter xml:id="faq.languages" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>PHP und andere Sprachen</title>
  <titleabbrev>PHP und andere Sprachen</titleabbrev>

  <para>
   PHP ist die beste Sprache für Webanwendungen, 
   aber was ist mit anderen Sprachen?
  </para>

  <qandaset>
   <qandaentry xml:id="faq.languages.asp">
    <question>
     <para>PHP vs. ASP?</para>
    </question>
    <answer>
     <para>
      ASP ist eigentlich keine Sprache an sich, es ist ein Akronym für Active
      Server Pages, die eigentlichen Sprachen in denen ASP programmiert wird sind
      Visual Basic Script oder JScript. Der größte Nachteil von ASP ist, dass
      es ein proprietäres System ist und nativ nur auf Microsofts
      Internet Information Server (IIS) verwendet werden kann. Dies limitiert ASP auf
      Win32 basierende Server. Es gibt einige Projekte, die die Möglichkeit bieten, 
      ASP unter anderen Umgebungen zu verwenden:
      <link xlink:href="&url.instantasp;">InstantASP</link>
      von <link xlink:href="&url.halcyon;">Halcyon</link> (kommerziell),
      Chili!Soft ASP von 
      <link xlink:href="&url.chilisoft;">Chili!Soft</link>
      (kommerziell).
      ASP wird nachgesagt, dass 
      es eine langsamere und schwerfälligere Sprache als PHP ist, instabiler 
      noch dazu. Eines der Vorteile von ASP ist, dass es, weil VBScript verwendet wird,
      relativ leicht zu erlernen ist, wenn Sie bereits Visual Basic programmieren 
      können. Auch ist die ASP-Unterstützung im IIS Server standardmäßig vorhanden, 
      was es einfach macht, ASP zum laufen zu kriegen. Der Umfang von ASP ist
      allerdings sehr limitiert. Wenn Sie also "fortgeschrittene" Features wie die
      Verbindung zu FTP-Servern nutzen wollen, müssen Sie kommerzielle Komponenten
      hinzukaufen.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.aspconverter">
    <question>
     <para>Gibt es ein Programm, was ASP in PHP konvertieren kann?</para>
    </question>
    <answer>
     <para>
      Ja, <link xlink:href="&url.asp2php;">asp2php</link> 
      und auch <link xlink:href="&url.asptranslator;">diese
      clientseitige Option</link>
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.coldfusion">
    <question>
     <para>PHP vs. Cold Fusion?</para>
    </question>
    <answer>
     <para>
      PHP is commonly said to be faster and more efficient for complex
      programming tasks and trying out new ideas. PHP is generally referred
      to as more stable and less resource intensive as well. Cold Fusion
      has better error handling, database abstraction and date parsing
      although database abstraction is addressed in PHP 4. Another
      thing that is listed as one of Cold Fusion's strengths is its excellent
      search engine, but it has been mentioned that a search engine is not
      something that should be included in a web scripting language. PHP
      runs on almost every platform there is; Cold Fusion is only available
      on Win32, Solaris, Linux and HP/UX. Cold Fusion has a good IDE
      and is generally easier to get started with, whereas PHP initially
      requires more programming knowledge. Cold Fusion is designed with
      non-programmers in mind, while PHP is focused on programmers.
     </para>
     <para>
      A great summary by Michael J Sheldon on this topic has
      been posted to the PHP mailing list. A copy can be found at
      <link xlink:href="&url.coldfusion.summary;">&url.coldfusion.summary;</link>.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.perl">
    <question>
     <para>PHP vs. Perl?</para>
    </question>
    <answer>
     <para>
      The biggest advantage of PHP over Perl is that PHP was designed for
      scripting for the web where Perl was designed to do a lot more and can
      because of this get very complicated. The flexibility / complexity
      of Perl makes it easier to write code that another author / coder
      has a hard time reading. PHP has a less confusing and stricter format
      without losing flexibility. PHP is easier to integrate into existing
      HTML than Perl. PHP has pretty much all the 'good' functionality of
      Perl: constructs, syntax and so on, without making it as complicated
      as Perl can be. Perl is a very tried and true language, it's been
      around since the late eighties, but PHP is maturing very quickly.
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
