<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: tom Status: ready -->
  <sect1 id="install.commandline">
   <title>Server-CGI/Commandline</title>
   <para>
    Standardmäßig wird PHP als ein CGI Programm kompiliert. Dies erstellt
    einen Kommandozeileninterpreter, welcher für CGI Processing oder für 
    nicht webbezogene PHP Skripte verwendet werden kann. Haben Sie einen
    Webserver im Einsatz für welchen PHP eine Modulunterstützung bietet,
    sollten sie aus Performancegründen dieses Modul verwenden. Die CGI
    Version ermöglicht Apache Usern, verschiedene PHP Seiten unter
    verschiedenen User-IDs laufen zu lassen. Bitte lesen Sie das Kapitel
    <link linkend="security.index">Sicherheit</link>, wenn Sie PHP als CGI
    verwenden.
   </para>
   <para>
    Seit PHP 4.3.0 wurden PHP einige wichtige Dinge hinzugefügt. Es gibt
    ein neues SAPI, CLI genannt, welches den selben Namen trägt wie das CGI
    Programm. Was in <literal>{PREFIX}/bin/php</literal> installiert ist,
    ist von Ihrer 'Configure'-Zeile abhängig. Eine detaillierte Beschreibung
    dazu finden Sie im Abschnitt <link linkend="features.commandline">Using
    PHP from the command line</link>.
   </para>
   
   <sect2 id="install.commandline.testing">
    <title>Testen</title>
    <simpara>
     Wenn Sie PHP als CGI Programm erstellt haben, können Sie Ihren Build 
     mittels <command>make test</command> testen, was generell eine gute 
     Idee ist. Damit können Sie ein eventuelles Problem mit PHP auf Ihrer
     Plattform erkennen, bevor Sie später damit zu kämpfen haben.
    </simpara>
   </sect2>

   <sect2 id="install.commandline.benchmarking">
    <title>Benchmarking</title>
    <simpara>
     Haben Sie PHP 3 als CGI Programm erstellt, können Sie Ihren Build mit
     <command>make bench</command> bewerten. Beachten Sie, dass wenn &safemode;
     standardmäßig aktiviert ist, der Benchmark nicht fertiggestellt werden kann,
     sollte dieser länger als die erlaubten 30 Sekunden dauern. Der Grund dafür
     liegt in der Tatsache, dass <function>set_time_limit</function> in &safemode;
     nicht benutzt werden kann. Verwenden Sie die Konfigurationsoption <link
     linkend="ini.max-execution-time">max_execution_time</link>, um diese Zeit
     für Ihre eigenen Skripte einzustellen. <command>make bench</command>
     ignoriert die <link linkend="configuration.file">Konfigurationsdatei</link>.
    </simpara>
    <note>
     <simpara>
        <command>make bench</command> ist nur in PHP 3 verfügbar.
     </simpara>
    </note>
   </sect2>
   
   <sect2 id="install.commandline.using-variables">
    <title>Variablen verwenden</title>
    <simpara>
      Manche vom Server zur Verfügung gestellten Umgebungsvariablen sind nicht
      der aktuellen <ulink url="&url.cgispec;">CGI/1.1 Spezifikation</ulink>
      enthalten. Nur die folgenden Variablen sind dort definiert, alles andere
      sollte als 'Anbieterspezifisch' betrachtet werden: AUTH_TYPE, 
      CONTENT_LENGTH, CONTENT_TYPE, GATEWAY_INTERFACE, PATH_INFO, PATH_TRANSLATED,
      QUERY_STRING, REMOTE_ADDR, REMOTE_HOST, REMOTE_IDENT, REMOTE_USER,
      REQUEST_METHOD, SCRIPT_NAME, SERVER_NAME, SERVER_PORT,
      SERVER_PROTOCOL und SERVER_SOFTWARE
    </simpara>
   </sect2>
   
  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
