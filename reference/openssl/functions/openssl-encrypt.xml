<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343016 Maintainer: cmb Status: ready -->

<refentry xml:id="function.openssl-encrypt" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>openssl_encrypt</refname>
  <refpurpose>Verschlüsselt Daten</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>openssl_encrypt</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam><type>string</type><parameter>method</parameter></methodparam>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>iv</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">tag</parameter><initializer>NULL</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>aad</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>tag_length</parameter><initializer>16</initializer></methodparam>
  </methodsynopsis>
  <para>
   Verschlüsselt die Daten mit der angegebenen Methode und Schlüssel. 
   Die Rückgabe kann aus unbearbeiteten oder base64 kodierten Zeichenketten bestehen. 
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Die zu verschlüsselnde Klartextnachricht.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>method</parameter></term>
     <listitem>
      <para>
       Verschlüsselungsmethode.
       <function>openssl_get_cipher_methods</function> liefert eine Liste der
       verfügbaren Verschlüsselungsmethoden.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       Der Schlüssel.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>options</parameter></term>
      <listitem>
        <para>
          <parameter>options</parameter> ist eine Bitmaske aus
          <constant>OPENSSL_RAW_DATA</constant> und
          <constant>OPENSSL_ZERO_PADDING</constant>.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iv</parameter></term>
     <listitem>
      <para>
       Initialisierungsvektor (darf nicht NULL sein).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>tag</parameter></term>
     <listitem>
      <para>
       Das Authentifizierungskennzeichen das per Reference übergeben wird, wenn der AEAD
       Verschlüsselungsmodus (GCM oder CCM) verwendet wird.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>aad</parameter></term>
     <listitem>
      <para>
       Zusätzliche Authentifizierungsdaten.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>tag_length</parameter></term>
     <listitem>
      <para>
       Die Länge des Authentifizierungskennzeichens (<parameter>tag</parameter>).
       Der Wert liegt zwischen 4 und 16 für den GCM-Modus. 
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt nach erfolgreicher Verarbeitung die verschlüsselte Zeichenkette zurück. &return.falseforfailure;
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Gibt einen <constant>E_WARNING</constant> Fehler aus, wenn eine unbekannte Verschlüsselungsmethode
   über den <parameter>method</parameter> Parameter übergeben wurde.
  </para>
  <para>
   Gibt einen <constant>E_WARNING</constant> Fehler aus, wenn eine leere Zeichenkette
   über den <parameter>iv</parameter> Parameter übergeben wurde.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.1.0</entry>
      <entry>
       Die <parameter>tag</parameter>, <parameter>aad</parameter> und
       <parameter>tag_length</parameter> Parameter wurden hinzugefügt.
      </entry>
     </row>
     <row>
      <entry>5.3.3</entry>
      <entry>
       Der <parameter>iv</parameter> wurde hinzugefügt.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Der <parameter>raw_output</parameter> wurde geändert zu <parameter>options</parameter>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>AES Authenticated Encryption im GCM-Modus Beispiel für PHP 7.1+</title>
    <programlisting role="php">
<![CDATA[
<?php
// $key sollte zuvor auf eine kryptographisch sichere Weise erzeugt worden sein, z.B. per openssl_random_pseudo_bytes
$plaintext = "zu verschlüsselnde Nachricht";
$cipher = "aes-128-gcm";
if (in_array($cipher, openssl_get_cipher_methods()))
{
	$ivlen = openssl_cipher_iv_length($cipher);
	$iv = openssl_random_pseudo_bytes($ivlen);
	$ciphertext = openssl_encrypt($plaintext, $cipher, $key, $options=0, $iv, $tag);
	// speichere $cipher, $iv und $tag für spätere Entschlüsselung
	$original_plaintext = openssl_decrypt($ciphertext, $cipher, $key, $options=0, $iv, $tag);
	echo $original_plaintext."\n";
}
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>AES Authenticated Encryption Beispiel für PHP 5.6+</title>
    <programlisting role="php">
<![CDATA[
<?php
// $key sollte zuvor auf eine kryptographisch sichere Weise erzeugt worden sein, z.B. per openssl_random_pseudo_bytes
$plaintext = "zu verschlüsselnde Nachricht";
$ivlen = openssl_cipher_iv_length($cipher="AES-128-CBC");
$iv = openssl_random_pseudo_bytes($ivlen);
$ciphertext_raw = openssl_encrypt($plaintext, $cipher, $key, $options=OPENSSL_RAW_DATA, $iv);
$hmac = hash_hmac('sha256', $ciphertext_raw, $key, $as_binary=true);
$ciphertext = base64_encode( $iv.$hmac.$ciphertext_raw );

// spätere Entschlüsselung ...
$c = base64_decode($ciphertext);
$ivlen = openssl_cipher_iv_length($cipher="AES-128-CBC");
$iv = substr($c, 0, $ivlen);
$hmac = substr($c, $ivlen, $sha2len=32);
$ciphertext_raw = substr($c, $ivlen+$sha2len);
$original_plaintext = openssl_decrypt($ciphertext_raw, $cipher, $key, $options=OPENSSL_RAW_DATA, $iv);
$calcmac = hash_hmac('sha256', $ciphertext_raw, $key, $as_binary=true);
if (hash_equals($hmac, $calcmac)) // PHP 5.6+ Rechenzeitangriff-sicherer Vergleich
{
	echo $original_plaintext."\n";
}
?>
]]>
    </programlisting>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>openssl_decrypt</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
