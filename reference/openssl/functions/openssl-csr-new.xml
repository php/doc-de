<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 346020 Maintainer: jaenecke Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.openssl-csr-new">
 <refnamediv>
  <refname>openssl_csr_new</refname>
  <refpurpose>Erzeugt einen CSR </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>openssl_csr_new</methodname>
   <methodparam><type>array</type><parameter>dn</parameter></methodparam>
   <methodparam><type>resource</type><parameter role="reference">privkey</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>configargs</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>extraattribs</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>openssl_csr_new</function> erzeugt einen neuen CSR
   (Zertifikatssignierungsanfrage) basierend auf den Informationen, die mit
   dem Parameter <parameter>dn</parameter> angegeben werden.
  </para>
  &note.openssl.cnf;
 </refsect1>

  <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dn</parameter></term>
     <listitem>
      <para>
       Der Distinguished Name oder die Betrefffelder, die im Zertifikat genutzt werden sollen.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>privkey</parameter></term>
     <listitem>
      <para>
       <parameter>privkey</parameter> sollte auf einen privaten Schlüssel
       zeigen, der vorher mit <function>openssl_pkey_new</function> erzeugt
       wurde (oder den Sie auf andere Weise von der Familie der openssl_pkey
       Funktionen erhalten haben). Der entsprechende öffentliche Teil des
       Schlüssels wird benutzt um den CSR zu signieren.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>configargs</parameter></term>
     <listitem>
      <para>
       <parameter>configargs</parameter>können Sie benutzen um zusätzliche
       Konfigurationsoptionen für den CSR anzugeben. Sowohl
       <parameter>dn</parameter> als auch <parameter>extraattribs</parameter>
       sind assoziative Arrays, deren Schlüssel zu OIDs konvertiert und auf den
       relevanten Teil der Anfrage angewendet werden.
      </para>
      <para>
       Im Standard werden die Informationen für die Anfrage aus der
       <literal>openssl.conf</literal> ihres Systems benutzt. Sie können einen
       Konfigurationsabsschnitt mit dem Schlüssel
       <literal>config_section_section</literal> des Arrays
       <parameter>configargs</parameter>setzen. Außerdem haben Sie die
       Möglichkeit eine alternative openssl Konfigurationsdatei anzugeben, indem
       Sie den Wert des Schlüssels <literal>config</literal> auf den Pfad zu der
       Datei setzen, die Sie benutzen möchten. Die unten in der Tabelle
       aufgeführten Schlüssel in <parameter>configargs</parameter>, falls Sie
       diese definiert haben, verhalten sich genau gleich wie die entsprechenden
       Werte in der <literal>openssl.conf</literal>
       <table>
        <title>Überschreiben der Konfiguration</title>
        <tgroup cols="3">
         <thead>
          <row>
           <entry><parameter>configargs</parameter> Schlüssel</entry>
           <entry>Typ</entry>
           <entry><literal>openssl.conf</literal> Entsprechung</entry>
           <entry>Beschreibung</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>digest_alg</entry>
           <entry><type>string</type></entry>
           <entry>default_md</entry>
           <entry>
            Digest-Methode oder Signaturhash, üblicherweise eins von <function>openssl_get_md_methods</function>
           </entry>
          </row>
          <row>
           <entry>x509_extensions</entry>
           <entry><type>string</type></entry>
           <entry>x509_extensions</entry>
           <entry>
            Bestimmt welche Erweiterung benutzt werden soll, wenn ein x509
            Zertifikat erzeugt werden soll.
           </entry>
          </row>
          <row>
           <entry>req_extensions</entry>
           <entry><type>string</type></entry>
           <entry>req_extensions</entry>
           <entry>
            Bestimmt welche Erweiterung benutzt werden soll, wenn eine
            Zertifikatssignierungsanfrage (CSR) erzeugt werden soll.
           </entry>
          </row>
          <row>
           <entry>private_key_bits</entry>
           <entry><type>integer</type></entry>
           <entry>default_bits</entry>
           <entry>
            Bestimmt wieviele Bits verwendet werden, um einen privaten Schlüssel
            zu erzeugen.
           </entry>
          </row>
          <row>
           <entry>private_key_type</entry>
           <entry><type>integer</type></entry>
           <entry>keine</entry>
           <entry>
            Bestimmt den Typ des privaten Schlüssels der erzeugt werden soll.
            Der Typ kann einer der folgenden sein:
            <constant>OPENSSL_KEYTYPE_DSA</constant>,
            <constant>OPENSSL_KEYTYPE_DH</constant>,
            <constant>OPENSSL_KEYTYPE_RSA</constant> oder
            <constant>OPENSSL_KEYTYPE_EC</constant>.
            Der Standardwert ist <constant>OPENSSL_KEYTYPE_RSA</constant>.
           </entry>
          </row>
          <row>
           <entry>encrypt_key</entry>
           <entry><type>boolean</type></entry>
           <entry>encrypt_key</entry>
           <entry>
            Soll ein exportiertet Schlüssel (mit Passphrase) verschlüsselt
            werden?
           </entry>
          </row>
          <row>
           <entry>encrypt_key_cipher</entry>
           <entry><type>integer</type></entry>
           <entry>keine</entry>
           <entry>
            Eine der <link linkend="openssl.ciphers">Ziffer-Konstanten</link>.
           </entry>
          </row>
          <row>
           <entry>curve_name</entry>
           <entry><type>string</type></entry>
           <entry>none</entry>
           <entry>
            PHP 7.1+. Einer der <function>openssl_get_curve_names</function>.
           </entry>
          </row>
          <row>
           <entry>config</entry>
           <entry><type>string</type></entry>
           <entry>N/A</entry>
           <entry>
            Pfad zur eigenen alternativen openssl.conf Datei.
           </entry>
          </row>
          </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt den CSR zurück. &return.falseforfailure;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Erzeugen eines selbstsignierten Zertifikats</title>
    <programlisting role="php">
<![CDATA[
<?php
// für SSL Zertifikate ist der commonName der zu sichernden Domainnamen
// für S/MIME Zertifikate the commonName ist der Eigentümer der E-Mail-Adresse
// die location und identification Felder beziehen sich auf den Eigentümer der
// zu sichernden Domain oder des E-Mail Eigentümers
$dn = array(
    "countryName" => "GB",
    "stateOrProvinceName" => "Somerset",
    "localityName" => "Glastonbury",
    "organizationName" => "The Brain Room Limited",
    "organizationalUnitName" => "PHP Documentation Team",
    "commonName" => "Wez Furlong",
    "emailAddress" => "wez@example.com"
);

// Erzeugen eines neuen privaten (und öffentlichen) Schlüsselpaars
$privkey = openssl_pkey_new(array(
    "private_key_bits" => 2048,
    "private_key_type" => OPENSSL_KEYTYPE_RSA,
));

// Erzeugen einer Zertifikatssignierungsanfrage
$csr = openssl_csr_new($dn, $privkey, array('digest_alg' => 'sha256'));

// Erzeugen eines selbstsignierten Zertifikts, das für die Dauer von 365 Tagen
// gültig ist.
$x509 = openssl_csr_sign($csr, null, $privkey, $days=365, array('digest_alg' => 'sha256'));

// Sichern des privaten Schlüssels, des CSR und des selbstsignierte Zertifikats
// für spätere Verwendung
openssl_csr_export($csr, $csrout) and var_dump($csrout);;
openssl_x509_export($x509, $certout) and var_dump($certout);
openssl_pkey_export($privkey, $pkeyout, "mypassword") and var_dump($pkeyout);

// Anzeigen der möglichen aufgetretenen Fehler
while (($e = openssl_error_string()) !== false) {
    echo $e . "\n";
}
?>
]]>
      </programlisting>
     </example>
   
     <example>
      <title>Erzeugen eines selbstsignierten ECC-Zertifikats in PHP 7.1+</title>
      <programlisting role="php">
<![CDATA[
<?php
$subject = array(
    "commonName" => "docs.php.net",
);

// Erzeugen eines neuen privaten (und öffentlichen) Schlüsselpaars
$private_key = openssl_pkey_new(array(
    "private_key_type" => OPENSSL_KEYTYPE_EC,
    "curve_name" => 'prime256v1',
));

// Erzeugen einer Zertifikatssignierungsanfrage
$csr = openssl_csr_new($subject, $private_key, array('digest_alg' => 'sha384'));

// Erzeugen eines selbstsignierten EC-Zertifikats
$x509 = openssl_csr_sign($csr, null, $private_key, $days=365, array('digest_alg' => 'sha384'));
openssl_x509_export_to_file($x509, 'ecc-cert.pem');
openssl_pkey_export_to_file($private_key, 'ecc-private.key');
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>

   <refsect1 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><function>openssl_csr_sign</function></member>
     </simplelist>
    </para>
   </refsect1>

  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
