<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343014 Maintainer: nobody Status: ready -->

<refentry xml:id="function.openssl-csr-sign" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>openssl_csr_sign</refname>
  <refpurpose>Signiere einen CSR mit einem anderen Zertifikat (oder sich selbst) und generiere ein Zertifikat</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>openssl_csr_sign</methodname>
   <methodparam><type>mixed</type><parameter>csr</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>cacert</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>priv_key</parameter></methodparam>
   <methodparam><type>int</type><parameter>days</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>configargs</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>serial</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>openssl_csr_sign</function> erzeugt eine x509
   Zertifikatressource aus dem übergebenen CSR.
  </para>
  &note.openssl.cnf;
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>csr</parameter></term>
     <listitem>
      <para>
       Ein zuvor mit <function>openssl_csr_new</function> erzeugter CSR. Es kann
       sich aber auch um den Pfad zu einer PEM-kodierten CSR-Datei in der Form 
       <filename>file://path/to/csr</filename> handeln, oder einen String wie
       von <function>openssl_csr_export</function> zurückgegeben.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cacert</parameter></term>
     <listitem>
      <para>
       Das generierte Zertifikat wird mit <parameter>cacert</parameter> signiert.
       Falls hier &null; angegeben wird, wird ein selbstsigniertes Zertifikat erstellt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>priv_key</parameter></term>
     <listitem>
      <para>
       <parameter>priv_key</parameter> ist der zu <parameter>cacert</parameter> 
       gehörende private Schlüssel.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>days</parameter></term>
     <listitem>
      <para>
       <parameter>days</parameter> gibt die Gültigkeitsdauer des Zertifikats in Tagen an.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>configargs</parameter></term>
     <listitem>
      <para>
       Mit <parameter>configargs</parameter> kann die Signierung des CSR
       feiner abgestimmt werden.
       Weitere Informationen zu <parameter>configargs</parameter> sind
       <function>openssl_csr_new</function> zu entnehmen.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>serial</parameter></term>
     <listitem>
      <para>
       Eine optionale Seriennummer für das ausgestellte Zertifikat. Wenn nicht
       angegeben, wird der Standardwert 0 verwendet.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt bei Erfolg eine x509 Zertifikat-Ressource zurück, &false; bei einem
   Fehler.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>openssl_csr_sign</function> Beispiel - Signieren eines
     CSR (wie eine eigene CA implementiert wird)</title>
    <programlisting role="php">
<![CDATA[
<?php
// Annahme: dieses Skript erhält einen CSR, der auf einer anderen Seite in
// eine Textarea eingegeben wurde.
$csrdata = $_POST["CSR"];

// Wir werden die Anfrage mit unserem eigenen certificate authority"
// Zertifikat signieren. Sie können jedes beliebige Zertifikat verwenden, um
// ein anderes zu signieren. Aber das Ganze ist ziemlich nutzlos, solange die
// Software/Benutzer, die dieses neu signierte Zertifikat nutzen werden, dem
// signierenden Zertifikat nicht vertrauen.

// Wir brauchen unser CA Zertifikat und dessen privaten Schlüssel
$cacert = "file://path/to/ca.crt";
$privkey = array("file://path/to/ca.key", "your_ca_key_passphrase");

$userscert = openssl_csr_sign($csrdata, $cacert, $privkey, 365);

// Jetzt zeigem wir das generierte Zertifikat an, damit die Benutzer es
// kopieren und in ihre lokale Konfiguration einfügen können (wie z.B. eine
// Datei, die das Zertifikat für ihren SSL Server enthalten soll.
openssl_x509_export($usercert, $certout);
echo $certout;

// Anzeigen der möglichen aufgetretenen Fehler
while (($e = openssl_error_string()) !== false) {
    echo $e . "\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
