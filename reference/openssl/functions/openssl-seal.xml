<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 110ac43250fdb3531fe26d4d29292e33df7855e8 Maintainer: jaenecke Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 110ac43250fdb3531fe26d4d29292e33df7855e8 Reviewer: samesch -->
<refentry xml:id="function.openssl-seal" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>openssl_seal</refname>
  <refpurpose>Versiegelt (verschlüsselt) Daten</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>openssl_seal</methodname>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>data</parameter></methodparam>
   <methodparam><type>string</type><parameter role="reference">sealed_data</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">encrypted_keys</parameter></methodparam>
   <methodparam><type>array</type><parameter>public_key</parameter></methodparam>
   <methodparam><type>string</type><parameter>cipher_algo</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">iv</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Die Funktion <function>openssl_seal</function> versiegelt (verschlüsselt)
   <parameter>data</parameter> unter Verwendung des angegebenen
   <parameter>cipher_algo</parameter> mit einem zufällig erzeugten geheimen
   Schlüssel. Dieser Schlüssel wird dann mit jedem öffentlichen Schlüssel aus
   dem Array <parameter>public_key</parameter> verschlüsselt und jeder
   verschlüsselte Umschlagschlüssel wird in
   <parameter>encrypted_keys</parameter> zurückgegeben. Auf diese Weise können
   versiegelte Daten an mehrere Empfänger gesendet werden (sofern deren
   öffentliche Schlüssel verfügbar sind). Jeder Empfänger muss sowohl die
   versiegelten Daten als auch den entsprechenden Umschlagschlüssel erhalten,
   der mit dem öffentlichen Schlüssel des Empfängers versiegelt wurde. Der IV
   (Initialisierungsvektor) wird erzeugt, und sein Wert wird in
   <parameter>iv</parameter> zurückgegeben.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Die zu versiegelten Daten.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sealed_data</parameter></term>
     <listitem>
      <para>
       Die versiegelten Daten.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>encrypted_keys</parameter></term>
     <listitem>
      <para>
       Das Array verschlüsselter Schlüssel.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>public_key</parameter></term>
     <listitem>
      <para>
       Das Array von <classname>OpenSSLAsymmetricKey</classname>-Instanzen,
       das öffentliche Schlüssel enthält.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cipher_algo</parameter></term>
     <listitem>
      <para>
       Die Verschlüsselungsmethode.
       <caution>
        <simpara>
         Der Standardwert für PHP-Versionen vor 8.0 ist
         <literal>'RC4'</literal>, was als unsicher gilt. Es wird dringend
         empfohlen, explizit eine sichere Verschlüsselungsmethode anzugeben.
        </simpara>
       </caution>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iv</parameter></term>
     <listitem>
      <para>
       Der Initialisierungsvektor für die Entschlüsselung von
       <parameter>data</parameter>. Er wird benötigt, wenn die
       Verschlüsselungsmethode einen IV erfordert. Dies kann durch den Aufruf
       von <function>openssl_cipher_iv_length</function> mit
       <parameter>cipher_algo</parameter> ermittelt werden.
      </para>
      <caution>
       <simpara>
        Der IV kann nicht explizit festgelegt werden. Jeder darin eingestellte
        Wert wird durch einen zufällig generierten Wert überschrieben.
       </simpara>
      </caution>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt bei Erfolg die Länge der versiegelten Daten zurück; in diesem Fall sind
   die versiegelten Daten in <parameter>sealed_data</parameter> enthalten und
   <parameter>encrypted_keys</parameter> enthält die Umschlagschlüssel. Wenn
   ein Fehler aufgetreten ist, gibt die Funktion &false; zurück.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>public_key</parameter> akzeptiert nun ein &array; von
       <classname>OpenSSLAsymmetricKey</classname>-Instanzen; vorher wurde ein
       &array; von &resource;n vom Typ <literal>OpenSSL key</literal>
       akzeptiert.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Der Parameter <parameter>cipher_algo</parameter> ist nicht mehr
       optional.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>iv</parameter> ist nun ein Nullable-Typ.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>openssl_seal</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// Annahme: $data enthält die zu versiegelnden Daten
$data = "test";

// Holen der öffentlichen Schlüssel
$pk1 = openssl_get_publickey("file://cert1.pem");
$pk2 = openssl_get_publickey("file://cert2.pem");

// Versiegeln der Nachricht, nur Besitzer von $pk1 und $pk2 können $sealed
// mit den Schlüsseln $ekeys[0] bzw. $ekeys[1] entschlüsseln.
if (openssl_seal($data, $sealed, $ekeys, array($pk1, $pk2), 'AES256', $iv) > 0) {
    // Gegebenenfalls die Werte von $sealed und $iv speichern und später
    // in openssl_open verwenden
    echo "Erfolg\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>openssl_open</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
