<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 307739 Maintainer: samesch Status: ready -->
<refentry xml:id="function.preg-replace-callback" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>Sucht und ersetzt einen regulären Ausdruck unter Verwendung eines Callbacks</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace_callback</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   Abgesehen von der Tatsache, dass statt des Parameters
   <parameter>replacement</parameter> ein <parameter>callback</parameter>
   angegeben werden soll, ist das Verhalten dieser Funktion identisch zu
   <function>preg_replace</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       Der Ausdruck, nach dem gesucht werden soll. Es kann entweder eine
       Zeichenkette oder ein Array mit Zeichenketten sein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Ein Callback, dem ein Array von Übereinstimmungen mit
       <parameter>subject</parameter> übergeben wird. Der Callback sollte die
       Ersetzungs-Zeichenkette liefern.
      </para>
      <para>
       Häufig werden Sie die <parameter>callback</parameter>-Funktion für
       <function>preg_replace_callback</function> nur an einer Stelle
       benötigen. In diesem Fall können Sie eine <link
       linkend="functions.anonymous">Anonyme Funktion</link> (seit PHP 5.3.0)
       oder <function>create_function</function> verwenden, um innerhalb des
       Aufrufs von <function>preg_replace_callback</function> eine anonyme
       Funktion als Callback zu deklarieren. Auf diese Weise haben Sie alle
       Informationen für den Aufruf an einer Stelle und stopfen den Namensraum
       für Funktionen nicht mit Namen für Callback-Funktionen voll, die sonst
       nirgends verwendet werden.
      </para>
      <para>
       <example>
        <title>
         <function>preg_replace_callback</function> und
         <function>create_function</function>
        </title>
        <programlisting role='php'>
<![CDATA[
<?php
// ein Kommandozeilen-Filter im Unix-Stil zum Umwandeln von Groß- in
// Kleinschreibung am Beginn eines Abschnitts
$fp = fopen("php://stdin", "r") or die("kann stdin nicht lesen");
while (!feof($fp)) {
  $zeile = fgets($fp);
  $zeile = preg_replace_callback(
    '|<p>\s*\w|',
    create_function(
      // hier sind entweder einfache Anführungszeichen nötig
      // oder alternativ die Maskierung aller $ als \$
      '$treffer',
      'return strtolower($treffer[0]);'
    ),
    $zeile
  );
  echo $zeile;
}
fclose($fp);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       Die Zeichenkette oder ein Array mit Zeichenketten zum Suchen und
       Ersetzen.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       Die Höchstzahl der Ersetzungen für jedes Suchmuster in jeder
       <parameter>subject</parameter>. Standardmäßig <literal>-1</literal>
       (unbegrenzt).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       Falls angegeben, wird dieser Variable die Anzahl vorgenommener
       Ersetzungen zugewiesen.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Falls <parameter>subject</parameter> ein Array ist, gibt
   <function>preg_replace_callback</function> ein Array zurück und andernfalls
   eine Zeichenkette. Bei einem Fehler ist der Rückgabewert &null;.
  </para>
  <para>
   Falls Übereinstimmungen gefunden werden, wird die neue Zeichenkette
   zurückgegeben und andernfalls die unveränderte Zeichenkette
   <parameter>subject</parameter>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>Den Parameter <parameter>count</parameter> hinzugefügt</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>preg_replace_callback</function> Beispiel</title>
    <programlisting role='php'>
<![CDATA[
<?php
// dieser Text wurde 2002 verwendet
// wir wollen ihn für 2003 aktualisieren
$text = "Aprilscherze gibts am 01.04.2002\n";
$text.= "Das letzte Weihnachten war am 24.12.2001\n";
// die Callback-Funktion
function naechstes_jahr($treffer)
{
  // wie üblich: $treffer[0] ist die Übereinstimmung mit dem
  // kompletten Suchmuster, $treffer[1] die Übereinstimmung mit
  // dem ersten eingeklammerten Teilsuchmuster und so weiter
  return $treffer[1].($treffer[2]+1);
}
echo preg_replace_callback(
            "|(\d{2}\.\d{2}\.)(\d{4})|",
            "naechstes_jahr",
            $text);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Aprilscherze gibts am 01.04.2003
Das letzte Weihnachten war am 24.12.2002
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     <function>preg_replace_callback</function> unter Verwendung einer
     rekursiven Struktur um gekapselten BB-Code zu verarbeiten
    </title>
    <programlisting role='php'>
<![CDATA[
<?php
$eingabe = "plain [indent] deep [indent] deeper [/indent] deep [/indent] plain";

function parseTagsRecursive($eingabe)
{
  $regex = '#\[indent]((?:[^[]|\[(?!/?indent])|(?R))+)\[/indent]#';

  if (is_array($eingabe)) {
    $eingabe = '<div style="margin-left: 10px">'.$eingabe[1].'</div>';
  }

  return preg_replace_callback($regex, 'parseTagsRecursive', $eingabe);
}

$ausgabe = parseTagsRecursive($eingabe);

echo $ausgabe;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">PCRE-Suchmuster</link></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_last_error</function></member>
    <member><function>create_function</function></member>
    <member><link linkend="functions.anonymous">Anonymous functions</link></member>
    <member>&seealso.callback;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
