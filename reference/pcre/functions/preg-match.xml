<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 292248 Maintainer: samesch Status: ready -->
<refentry xml:id="function.preg-match" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_match</refname>
  <refpurpose>Führt eine Suche mit einem regulären Ausdruck durch</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>preg_match</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">matches</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter></methodparam>
  </methodsynopsis>
  <para>
   Durchsucht <parameter>subject</parameter> nach Übereinstimmungen mit dem in
   <parameter>pattern</parameter> angegebenen regulären Ausdruck.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       Der Ausdruck, nach dem gesucht werden soll, als Zeichenkette.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       Die zu durchsuchende Zeichenkette.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>matches</parameter></term>
     <listitem>
      <para>
       Falls der Parameter <parameter>matches</parameter> angegeben wurde,
       wird er mit den Suchergebnissen gefüllt. <varname>$matches[0]</varname>
       enthält dann den Text, der auf das komplette Suchmuster passt,
       <varname>$matches[1]</varname> den Text, der auf das erste
       eingeklammerte Teilsuchmuster passt und so weiter.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> kann das folgende Flag sein:
       <variablelist>
        <varlistentry>
         <term><constant>PREG_OFFSET_CAPTURE</constant></term>
         <listitem>
          <simpara>
           Wenn dieses Flag gesetzt ist, wird mit jeder gefundenen
           Übereinstimmung der dazugehörige Versatz in der Zeichenkette
           zurückgegeben. Beachten Sie, dass dies den Wert von
           <parameter>matches</parameter> in ein Array ändert, in dem jedes
           Element ein Array ist, das aus der übereinstimmenden Zeichenkette
           als Element <literal>0</literal> und deren Stelle in
           <parameter>subject</parameter> als Element <literal>1</literal>
           besteht.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       Normalerweise beginnt die Suche am Anfang der Zeichenkette. Der
       optionale Parameter <parameter>offset</parameter> kann verwendet
       werden, um eine andere Stelle in Bytes anzugeben, ab der gesucht werden
       soll.
      </para>
      <note>
       <para>
        Die Verwendung von <parameter>offset</parameter> entspricht nicht der
        Übergabe von <literal>substr($subject, $offset)</literal> an Stelle
        der zu Zeichenkette an <function>preg_match</function>, weil
        <parameter>pattern</parameter> Angaben wie zum Beispiel
        <emphasis>^</emphasis>, <emphasis>$</emphasis> oder
        <emphasis>(?&lt;=x)</emphasis> enthalten kann. Vergleiche:
        <informalexample>
         <programlisting role="php">
<![CDATA[
<?php
$zeichenkette = "abcdef";
$suchmuster = '/^def/';
preg_match($suchmuster, $zeichenkette, $treffer, PREG_OFFSET_CAPTURE, 3);
print_r($treffer);
?>
]]>
         </programlisting>
         &example.outputs;
         <screen>
<![CDATA[
Array
(
)
]]>
         </screen>
         <para>
          während dieses Beispiel
         </para>
         <programlisting role="php">
<![CDATA[
<?php
$zeichenkette = "abcdef";
$suchmuster = '/^def/';
preg_match($suchmuster, substr($zeichenkette,3), $treffer, PREG_OFFSET_CAPTURE);
print_r($treffer);
?>
]]>
         </programlisting>
         <para>
          folgende Ausgabe erzeugt
         </para>
         <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => def
            [1] => 0
        )
)
]]>
         </screen>
        </informalexample>
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_match</function> gibt die Anzahl der Übereinstimmungen mit
   <parameter>pattern</parameter> zurück. Das ist entweder 0 (keine
   Übereinstimmung) oder 1, weil <function>preg_match</function> die Suche
   nach der ersten Übereinstimmung beendet. Im Gegensatz dazu setzt
   <function>preg_match_all</function> die Suche bis zum Ende von
   <parameter>subject</parameter> fort. <function>preg_match</function>
   gibt &false; zurück, falls ein Fehler auftrat.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.2</entry>
       <entry>
        Benannte Teilsuchmuster akzeptieren nun sowohl die Syntaxen
        <literal>(?&lt;name&gt;)</literal> und
        <literal>(?'name')</literal> als auch
        <literal>(?P&lt;name&gt;)</literal>. Vorherige Versionen akzeptierten
        nur <literal>(?P&lt;name&gt;)</literal>.
       </entry>
      </row>
      <row>
       <entry>4.3.3</entry>
       <entry>Den Parameter <parameter>offset</parameter> hinzugefügt</entry>
      </row>
      <row>
       <entry>4.3.0</entry>
       <entry>
        Das Flag <constant>PREG_OFFSET_CAPTURE</constant> hinzugefügt
       </entry>
      </row>
      <row>
       <entry>4.3.0</entry>
       <entry>Den Parameter <parameter>flags</parameter> hinzugefügt</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Die Zeichenkette "php" finden</title>
    <programlisting role="php">
<![CDATA[
<?php
// Das "i" nach der Suchmuster-Begrenzung kennzeichnet eine Suche ohne
// Berücksichtigung von Groß- und Kleinschreibung
if (preg_match("/php/i", "PHP ist die Web-Scripting-Sprache der Wahl.")) {
   echo "Es wurde eine Übereinstimmung gefunden.";
} else {
   echo "Es wurde keine Übereinstimmung gefunden.";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Die Zeichenkette "web" finden</title>
    <programlisting role="php">
<![CDATA[
<?php
// Das \b im Suchmuster kennzeichnet eine Wortgrenze, weshalb nur eine
// Übereinstimmung mit der einzelnen Zeichenkette "web" gefunden wird und
// nicht ein Teilwort in "webbing" oder "cobweb"
if (preg_match("/\bweb\b/i", "Für das Web ist PHP die Scripting-Sprache der Wahl.")) {
   echo "Es wurde eine Übereinstimmung gefunden.";
} else {
   echo "Es wurde keine Übereinstimmung gefunden.";
}

if (preg_match("/\bweb\b/i", "PHP ist die Web-Scripting-Sprache der Wahl.")) {
   echo "Es wurde eine Übereinstimmung gefunden.";
} else {
   echo "Es wurde keine Übereinstimmung gefunden.";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Den Domänen-Namen aus einer URL holen</title>
    <programlisting role="php">
<![CDATA[
<?php
// den Hostnamen aus URL holen
preg_match('@^(?:http://)?([^/]+)@i',
    "http://www.php.net/index.html", $treffer);
$host = $treffer[1];

// die letzten beiden Segmente aus Hostnamen holen
preg_match('/[^.]+\.[^.]+$/', $host, $treffer);
echo "Der Domänen-Name lautet: {$treffer[0]}\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Der Domänen-Name lautet: php.net
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Benannte Teilsuchmuster (named subpatterns)</title>
    <programlisting role="php">
<![CDATA[
<?php

$str = 'foobar: 2008';

preg_match('/(?P<name>\w+): (?P<zahl>\d+)/', $str, $treffer);

/* Folgendes funktioniert ab PHP 5.2.2 (PCRE 7.0) ebenfalls, für die
 * Rückwärtskompatibilität wird aber die vorherige Form empfohlen. */
// preg_match('/(?<name>\w+): (?<zahl>\d+)/', $str, $treffer);

print_r($treffer);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => foobar: 2008
    [name] => foobar
    [1] => foobar
    [zahl] => 2008
    [2] => 2008
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <tip>
   <para>
    Verwenden Sie nicht <function>preg_match</function>, wenn Sie nur
    überprüfen wollen, ob eine Zeichenkette in einer anderen Zeichenkette
    enthalten ist. Verwenden Sie dafür stattdessen die Funktionen
    <function>strpos</function> oder <function>strstr</function>, die das
    schneller erledigen.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_match_all</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_split</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
