<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.25 Maintainer: samesch Status: ready -->
<refentry id="function.preg-replace">
 <refnamediv>
  <refname>preg_replace</refname>
  <refpurpose>Sucht und ersetzt einen regulären Ausdruck</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace</methodname>
   <methodparam><type>mixed</type><parameter>Suchmuster</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>Ersatz</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>Zeichenkette</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>Limit</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">Anzahl</parameter></methodparam>
  </methodsynopsis>
  <para>
   Durchsucht <parameter>Zeichenkette</parameter> nach Übereinstimmungen mit
   <parameter>Suchmuster</parameter> und ersetzt sie mit
   <parameter>Ersatz</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>Suchmuster</parameter></term>
     <listitem>
      <para>
       Der Ausdruck, nach dem gesucht wird. Es kann entweder eine Zeichenkette
       oder ein Array mit Zeichenketten sein.
      </para>
      <para>
       Mit dem Modifikator <literal>e</literal> wird der Parameter
       <parameter>Ersatz</parameter> nach den entsprechenden Ersetzungen der
       Referenzen von <function>preg_replace</function> wie PHP-Code
       behandelt. Tipp: Stellen Sie sicher, dass <parameter>Ersatz</parameter>
       gültigen PHP-Code erzeugt, weil sich PHP sonst über einen Syntaxfehler
       (parse error) in der Zeile beschwert, die den Aufruf von
       <function>preg_replace</function> enthält.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>Ersatz</parameter></term>
     <listitem>
      <para>
       Die Zeichenkette oder das Array mit Zeichenketten zum Ersetzen. Falls
       dieser Parameter eine Zeichenkette ist und der Parameter
       <parameter>Suchmuster</parameter> ein Array, werden alle Suchmuster
       durch diese Zeichenkette ersetzt. Falls sowohl
       <parameter>Suchmuster</parameter> als auch
       <parameter>Ersatz</parameter> Arrays sind, wird jedes
       <parameter>Suchmuster</parameter> durch das Gegenstück aus
       <parameter>Ersatz</parameter> ersetzt. Wenn das
       <parameter>Ersatz</parameter>-Array weniger Elemente hat als das
       <parameter>Suchmuster</parameter>-Array, wird jedes überzählige
       <parameter>Suchmuster</parameter> durch die leere Zeichenkette ersetzt.
      </para>
      <para>
       <parameter>Ersatz</parameter> darf Referenzen in der Form
       <literal>\\<replaceable>n</replaceable></literal> oder (ab PHP 4.0.4)
       <literal><replaceable>$n</replaceable></literal> enthalten, wobei
       Letztere vorzuziehen ist. Jede dieser Referenzen wird mit dem Text
       ersetzt, der vom <replaceable>n</replaceable>-ten eingeklammerten
       Suchmuster erfasst wurde. <replaceable>n</replaceable> kann einen Wert
       von 0 bis 99 haben. <literal>\\0</literal> oder <literal>$0</literal>
       beziehen sich auf den Text, der auf das komplette Suchmuster passt. Um
       die Nummer des erfassenden Teil-Suchmusters zu erhalten, werden
       öffnende Klammern mit 1 beginnend von links nach rechts gezählt.
      </para>
      <para>
       Wenn Sie mit einer Ersetzung arbeiten wollen, in der auf eine
       Rückreferenzierung direkt eine weitere Zahl folgt (d.h., direkt nach
       der Übereinstimmmung mit einem Suchmuster soll eine Zahl kommen),
       können Sie für Ihre Rückreferenzierung nicht die Schreibweise
       <literal>\\1</literal> verwenden. So würde z.B. <literal>\\11</literal>
       die Funktion <function>preg_replace</function> verwirren, weil sie
       nicht weiß, ob Sie die Rückreferenzierung <literal>\\1</literal>
       gefolgt von der Zahl <literal>1</literal> wollen oder nur die
       Rückreferenzierung <literal>\\11</literal>. In diesem Fall ist die
       Lösung, <literal>\${1}1</literal> zu verwenden. Damit wird eine
       isolierte Rückreferenzierung <literal>$1</literal> erzeugt und die
       <literal>1</literal> bleibt ein Buchstabensymbol.
      </para>
      <para>
       Wenn Sie den Modifikator <literal>e</literal> verwenden, maskiert diese
       Funktion ein paar Zeichen (nämlich <literal>'</literal>,
       <literal>"</literal>, <literal>\</literal> und NULL) in den
       Zeichenketten, mit denen die Rückreferenzierungen ersetzen werden. Das
       wird gemacht, um sicherzustellen, dass keine Syntaxfehler entstehen,
       wenn Rückreferenzierungen verwendet werden, die einfache oder doppelte
       Anführungszeichen enthalten (z.B.
       <literal>'strlen(\'$1\')+strlen("$2")'</literal>). Vergewissern Sie
       sich, dass Sie die <link
       linkend="language.types.string">Zeichenketten-Syntax</link> von PHP
       kennen, um genau zu wissen, wie die ausgewertete Zeichenkette aussieht.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>Zeichenkette</parameter></term>
     <listitem>
      <para>
       Die Zeichenkette oder ein Array mit Zeichenketten zum Durchsuchen.
      </para>
      <para>
       Falls <parameter>Zeichenkette</parameter> ein Array ist, wird das
       Suchen und Ersetzen auf jedes Element von
       <parameter>Zeichenkette</parameter> angewandt und der Rückgabewert ist
       ebenfalls ein Array.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>Limit</parameter></term>
     <listitem>
      <para>
       Die maximal mögliche Anzahl von Ersetzungen für jedes Suchmuster in
       jeder <parameter>Zeichenkette</parameter>. Standardmäßiger Wert:
       <literal>-1</literal> (kein Limit).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>Anzahl</parameter></term>
     <listitem>
      <para>
       Falls angegeben, wird dieser Variable die Anzahl vorgenommener
       Ersetzungen zugewiesen.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace</function> gibt ein Array zurück, falls
   <parameter>Zeichenkette</parameter> ein Array ist, andernfalls eine
   Zeichenkette.
  </para>
  <para>
   Falls Übereinstimmungen gefunden wurden, wird die neue
   <parameter>Zeichenkette</parameter> zurückgegeben, andernfalls wird
   <parameter>Zeichenkette</parameter> unverändert zurückgegeben.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>Den Parameter <parameter>Anzahl</parameter> hinzugefügt</entry>
      </row>
      <row>
       <entry>4.0.4</entry>
       <entry>
        Die '$n'-Form für den Parameter <parameter>Ersatz</parameter>
        hinzugefügt
       </entry>
      </row>
      <row>
       <entry>4.0.2</entry>
       <entry>Den Parameter <parameter>Limit</parameter> hinzugefügt</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Die Verwendung von Rückreferenzierungen mit darauf folgenden numerischen
     Literalen
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$zeichenkette = '15. April 2003';
$suchmuster = '/(\d+)\. (\w+) (\d+)/i';
$ersetzung = '${2}1,$3';
echo preg_replace($suchmuster, $ersetzung, $zeichenkette);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
April1,2003
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     Die Verwendung von <function>preg_replace</function> mit indizierten
     Arrays
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$zeichenkette = 'Der schnelle braune Fuchs sprang über den faulen Hund.';

$suchmuster[0] = '/schnelle/';
$suchmuster[1] = '/braune/';
$suchmuster[2] = '/Fuchs/';

$ersetzungen[2] = 'Bär';
$ersetzungen[1] = 'schwarze';
$ersetzungen[0] = 'langsame';

echo preg_replace($suchmuster, $ersetzungen, $zeichenkette);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Der Bär schwarze langsame sprang über den faulen Hund.
]]>
    </screen>
    <para>
     Wenn wir Suchmuster und Ersetzungen mit <function>ksort</function>
     sortieren, sollten wir bekommen was wir wollten.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
ksort($suchmuster);
ksort($ersetzungen);
echo preg_replace($suchmuster, $ersetzungen, $zeichenkette);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Der langsame schwarze Bär sprang über den faulen Hund.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ersetzen mehrerer Werte</title>
    <programlisting role="php">
<![CDATA[
<?php
$suchmuster = array ('/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/',
                     '/^\s*{(\w+)}\s*=/');
$ersetzen = array ('\4.\3.\1\2', '$\1 =');
echo preg_replace($suchmuster, $ersetzen, '{startDatum} = 1999-5-27');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$startDatum = 27.5.1999
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Die Verwendung des Modifikators 'e'</title>
    <programlisting role="php">
<![CDATA[
<?php
preg_replace("/(<\/?)(\w+)([^>]*>)/e",
             "'\\1'.strtoupper('\\2').'\\3'",
             $html_body);
?>
]]>
    </programlisting>
    <para>
     Das wandelt alle HTML-Tags des durchsuchten Textes in Großbuchstaben um.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>Leerzeichen entfernen</title>
    <para>
     Dieses Beispiel entfernt überschüssige Leerzeichen aus einer
     Zeichenkette.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'foo   o';
$str = preg_replace('/\s\s+/', ' ', $str);
// Das ist jetzt 'foo o'
echo $str;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Die Verwendung des Parameters <parameter>Anzahl</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
$anzahl = 0;

echo preg_replace(array('/\d/', '/\s/'), '*', 'xp 4 to', -1 , $anzahl);
echo $anzahl; //3
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
xp***to
3
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Bei Verwendung von Arrays für <parameter>Suchmuster</parameter> und
    <parameter>Ersatz</parameter> werden die Schlüssel in der Reihenfolge
    bearbeitet, in der sie im Array vorliegen. Das ist <emphasis>nicht
    notwendigerweise</emphasis> dieselbe, wie die numerische Reihenfolge der
    Indizes. Wenn Sie Indizes verwenden, um festzulegen welches
    <parameter>Suchmuster</parameter> durch welchen
    <parameter>Ersatz</parameter> ersetzt werden soll, sollten Sie vor dem
    Aufruf von <function>preg_replace</function> <function>ksort</function>
    auf jedes Array anwenden.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_match</function></member>
    <member><function>preg_replace_callback</function></member>
    <member><function>preg_split</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
