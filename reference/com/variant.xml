<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337059 Maintainer: sammywg Status: working -->
<phpdoc:classref xmlns:phpdoc="http://php.net/ns/phpdoc" xml:id="class.variant" xmlns="http://docbook.org/ns/docbook">
 <titleabbrev>VARIANT</titleabbrev>
 <title>VARIANT Klasse</title>
 <partintro>

 <section xml:id="class.variant.class">
  <title>Beschreibung</title>
  <simpara>
   Die VARIANTe ist COMs Pendant des PHP zvals; es ist eine Struktur, die einen
   Wert einer Reihe unterschiedlicher möglicher Typen enthalten kann. Die
   VARIANT-Klasse, die durch die COM Extension zur Verfügung gestellt wird,
   erlaubt es, mehr Kontrolle über die Art, wie PHP Werte an COM übergibt und
   von diesem empfängt, zu haben.
  </simpara>
  <simpara>
   <literal>$vVar = new VARIANT($var)</literal>
  </simpara>
 </section>
 <section xml:id="variant.variant">
  <title>Methoden</title>
  <methodsynopsis>
   <methodname>VARIANT::__construct</methodname>
   <methodparam choice="opt"><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>codepage</parameter></methodparam>
  </methodsynopsis>
  <para>
   VARIANT Klassen-Konstruktor. Parameter:
   <variablelist>
   <varlistentry><term>value</term>
   <listitem>
    <simpara>
     Anfangswert. Ist er nicht angegeben oder auf &null; gesetzt, wird ein VT_EMPTY Objekt erzeugt.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry><term>type</term>
   <listitem>
    <simpara>
     spezifiziert den Typ vom Inhalt des VARIANT Objektes. Mögliche Werte sind
     eine der <constant>VT_XXX</constant> <xref linkend="com.constants"/>.
    </simpara>
    <simpara>
     In PHP Versionen vor PHP 5 konnte die Übergabe eines varianten Objekts
     per Reference erzwungen werden, indem <constant>VT_BYREF</constant> mit
     dem <parameter>type</parameter> oder-verknüpft wurde. In PHP 5 wird dieser
     Hack nicht mehr unterstützt; statt dessen kann PHP 5 Parameter, die per
     Referenz übergeben wurden, automatisch erkennen; sie müssen nicht einmal
     als VARIANT Objekte übergeben werden.
    </simpara>
    <simpara>
     Die <acronym>MSDN</acronym> Bibliothek kann für zusätzliche Informationen
     über den VARIANT Typen konsultiert werden.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry><term>codepage</term>
   <listitem>
    <simpara>
     gibt die Codepage an, welche zur Konvertierung von Strings in
     Unicode verwendet wird. Siehe den gleichnamigen Parameter in der
     <xref linkend="class.com"/> Klasse für mehr Informationen.
    </simpara>
   </listitem>
   </varlistentry>
   </variablelist>
  </para>
  <para>
   PHP-Versionen vor PHP 5 definieren eine Reihe von (undokumentierten) virtuellen
   Eigenschaften für Exemplare der VARIANT Klasse; diese Eigenschaften wurden alle 
   in PHP 5 zugunsten dessen natürlicheren Syntax entfernt; diese Unterschiede
   werden am besten durch ein Beispiel erklärt:
  </para>
  <para>
   <example xml:id="com.variant.example.php4">
    <title>Variant-Beispiel, PHP 4.x Stil</title>
    <programlisting role="php">
<![CDATA[
<?php
$v = new VARIANT(42);
print "Der Typ ist " . $v->type . "<br/>";
print "Der Wert ist " . $v->value . "<br/>";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example xml:id="com.variant.example.php5">
    <title>Variant-Beispiel, PHP 5 Stil</title>
    <programlisting role="php">
<![CDATA[
<?php
$v = new VARIANT(42);
print "Der Typ ist " . variant_get_type($v) . "<br/>";
print "Der Wert ist " . $v . "<br/>";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Der Grund für die Änderung ist, dass die COM Extension intern VARIANT, COM
   und DOTNET Klassen als die selbe Sache ansieht, und die Design-Philosophie
   für diese Klassen ist, dass alle Eigenschafts- und Memberzugriffe ohne Interface
   an COM durchgereicht werden. Die neue Syntax is natürlicer und weniger Aufwand,
   und die meisten der entfernten virtuellen Eigenschaften waren in einem PHP-
   Kontext sowieso sinnlos.
  </para>
  <note>
   <para>
    PHP 5 wählt einen viel einfacheren Ansatz zur Behandlung von VARIANTs;
    wenn ein Wert zurückgegeben, oder eine variant Eigenschaft abgerufen wird,
    wird die Variante nur in einen PHP-Wert konvertiert, falls es eine direkte,
    verlustlose Zuordnung zwischen den Typen gibt. In allen anderen Fällen wird
    das Ergebnis als Exemplar der VARIANT-Klasse zurückgegeben. Es ist möglich
    PHP zu zwingen, die Variante in einen nativen Typ zu konvertieren, entweder
    durch explizite Verwendung eines Typumwandlungs-Operators, oder durch das
    <function>print</function>en implizit in einen String zu wandeln.
    Die umfangreichen Variant-Funktionen können verwendet werden, um arithmetische
    Operationen auf Varianten durchzuführen, ohne eine Konvertierung zu erzwingen,
    oder Datenverlust zu riskieren.
   </para>
  </note>
  <para>
   Siehe auch <function>variant_get_type</function>.
  </para>
 </section>

 </partintro>
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
