<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 347481 Maintainer: hholzgra Status: ready -->
<refentry xml:id="function.round" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>round</refname>
  <refpurpose>Rundet einen Fließkommawert</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>float</type><methodname>round</methodname>
    <methodparam><type>float</type><parameter>val</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>precision</parameter><initializer>0</initializer></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PHP_ROUND_HALF_UP</initializer></methodparam>
   </methodsynopsis>
  <para>
   Rundet den Parameter <parameter>val</parameter> auf die mit
   <parameter>precision</parameter> angegebene Anzahl von Nachkommastellen. <parameter>precision</parameter> kann dabei auch null (Vorgabewert)
   oder negativ sein. So wird bei einer Stellenzahl von -1 z.B. auf
   volle Zehner gerundet.
  </para>
  <!-- It's not true
  <para>
   <caution>
    <simpara>
     When rounding on exact halves <function>round</function> rounds down on
     evens and up on odds.  If you want to always force it in one direction
     on a .5 (or .05 in your case) add or subtract a tiny fuzz factor.  The
     reason behind rounding half the values down and the other half up is to
     avoid the classical banking problem where if you always rounded down
     you would be stealing money from your customers, or if you always
     rounded up you would end up over time losing money.  By averaging it
     out through evens and odds you statistically break even.
    </simpara>
   </caution>
  </para>
  -->
  <para>
   <note>
    <simpara>
     PHP behandelt Strings wie <literal>"12,300.2"</literal>
     standardmäßig nicht korrekt. Siehe <link
     linkend="language.types.string.conversion">String-Konvertierung</link>.
    </simpara>
   </note>
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>val</parameter></term>
     <listitem>
      <para>
       Der zu rundende Wert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>precision</parameter></term>
     <listitem>
      <para>
       Auf wie viele Nachkommastellen gerundet werden soll.
      </para>
      <para>
       Ist die <parameter>precision</parameter> positiv,
       erfolgt die Rundung nach dem Dezimalpunkt.
      </para>
      <para>
       Ist die <parameter>precision</parameter> negativ,
       erfolgt die Rundung vor dem Dezimalpunkt.
       Ist der Absolutwert der <parameter>precision</parameter> größer oder gleich
       der Anzahl der Stellen, ist das Rundungsergebnis gleich <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Eine der folgenden Konstanten kann verwendet werden, um den Rundungsmodus
       festzulegen.
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>&Constants;</entry>
           <entry>&Description;</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_ROUND_HALF_UP</constant></entry>
           <entry>
            Rundet <parameter>val</parameter> auf
            <parameter>precision</parameter> Dezimalstellen weg von Null.
            Somit wird 1.5 zu 2 und -1.5 zu -2.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_ROUND_HALF_DOWN</constant></entry>
           <entry>
            Rundet <parameter>val</parameter> auf
            <parameter>precision</parameter> Dezimalstellen hin zu Null.
            Somit wird 1.5 zu 1 und -1.5 zu -1.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_ROUND_HALF_EVEN</constant></entry>
           <entry>
            Rundet <parameter>val</parameter> auf
            <parameter>precision</parameter> Dezimalstellen zum nächsten
            geraden Wert.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_ROUND_HALF_ODD</constant></entry>
           <entry>
            Rundet <parameter>val</parameter> auf
            <parameter>precision</parameter> Dezimalstellen zum nächsten
            ungeraden Wert.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Der auf die angegebene <parameter>precision</parameter> gerundete Wert als &float;.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>round</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(round(3.4));
var_dump(round(3.5));
var_dump(round(3.6));
var_dump(round(3.6, 0));
var_dump(round(1.95583, 2));
var_dump(round(1241757, -3));
var_dump(round(5.045, 2));
var_dump(round(5.055, 2));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
float(3)
float(4)
float(4)
float(4)
float(1.96)
float(1242000)
float(5.05)
float(5.06)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Wie <parameter>precision</parameter> eine Gleitkommazahl betrifft</title>
    <programlisting role="php">
<![CDATA[
<?php
$number = 1346.21;

var_dump(round($number, 2));
var_dump(round($number, 1));
var_dump(round($number, 0));
var_dump(round($number, -1));
var_dump(round($number, -2));
var_dump(round($number, -3));
var_dump(round($number, -4));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
float(1346.21)
float(1346.2)
float(1346)
float(1350)
float(1300)
float(1000)
float(0)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><parameter>mode</parameter>-Beispiele</title>
    <programlisting role="php">
<![CDATA[ 
<?php
echo 'Rundundsmodi mit 9.5' . PHP_EOL;
var_dump(round(9.5, 0, PHP_ROUND_HALF_UP));
var_dump(round(9.5, 0, PHP_ROUND_HALF_DOWN));
var_dump(round(9.5, 0, PHP_ROUND_HALF_EVEN));
var_dump(round(9.5, 0, PHP_ROUND_HALF_ODD));

echo 'Rundundsmodi mit 8.5' . PHP_EOL;
var_dump(round(8.5, 0, PHP_ROUND_HALF_UP));
var_dump(round(8.5, 0, PHP_ROUND_HALF_DOWN));
var_dump(round(8.5, 0, PHP_ROUND_HALF_EVEN));
var_dump(round(8.5, 0, PHP_ROUND_HALF_ODD));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Rundundsmodi mit 9.5
float(10)
float(9)
float(10)
float(9)
Rundundsmodi mit 8.5
float(9)
float(8)
float(8)
float(9)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><parameter>mode</parameter> mit <parameter>precision</parameter>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
echo 'Verwendung von PHP_ROUND_HALF_UP mit 1 Dezimalstelle Genauigkeit' . PHP_EOL;
var_dump( 1.55, 1, PHP_ROUND_HALF_UP));
var_dump( 1.54, 1, PHP_ROUND_HALF_UP));
var_dump(-1.55, 1, PHP_ROUND_HALF_UP));
var_dump(-1.54, 1, PHP_ROUND_HALF_UP));

echo PHP_EOL;
echo 'Verwendung von PHP_ROUND_HALF_DOWN mit 1 Dezimalstelle Genauigkeit' . PHP_EOL;
var_dump( 1.55, 1, PHP_ROUND_HALF_DOWN));
var_dump( 1.54, 1, PHP_ROUND_HALF_DOWN));
var_dump(-1.55, 1, PHP_ROUND_HALF_DOWN));
var_dump(-1.54, 1, PHP_ROUND_HALF_DOWN));

echo PHP_EOL;
echo 'Verwendung von PHP_ROUND_HALF_EVEN mit 1 Dezimalstelle Genauigkeit' . PHP_EOL;
var_dump( 1.55, 1, PHP_ROUND_HALF_EVEN));
var_dump( 1.54, 1, PHP_ROUND_HALF_EVEN));
var_dump(-1.55, 1, PHP_ROUND_HALF_EVEN));
var_dump(-1.54, 1, PHP_ROUND_HALF_EVEN));

echo PHP_EOL;
echo 'Verwendung von PHP_ROUND_HALF_ODD mit 1 Dezimalstelle Genauigkeit' . PHP_EOL;
var_dump( 1.55, 1, PHP_ROUND_HALF_ODD));
var_dump( 1.54, 1, PHP_ROUND_HALF_ODD));
var_dump(-1.55, 1, PHP_ROUND_HALF_ODD));
var_dump(-1.54, 1, PHP_ROUND_HALF_ODD));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Verwendung von PHP_ROUND_HALF_UP mit 1 Dezimalstelle Genauigkeit
float(1.6)
float(1.5)
float(-1.6)
float(-1.5)

Verwendung von PHP_ROUND_HALF_DOWN mit 1 Dezimalstelle Genauigkeit
float(1.5)
float(1.5)
float(-1.5)
float(-1.5)

Verwendung von PHP_ROUND_HALF_EVEN mit 1 Dezimalstelle Genauigkeit
float(1.6)
float(1.5)
float(-1.6)
float(-1.5)

Verwendung von PHP_ROUND_HALF_ODD mit 1 Dezimalstelle Genauigkeit
float(1.5)
float(1.5)
float(-1.5)
float(-1.5)
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Der Parameter <parameter>mode</parameter> wurde hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>5.2.7</entry>
       <entry>
        Die interne Funktionsweise von <function>round</function> wurde angepasst,
        um dem C99 Standard zu entsprechen.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ceil</function></member>
    <member><function>floor</function></member>
    <member><function>number_format</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
