<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336599 Maintainer: sammywg Status: ready -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.max">
 <refnamediv>
  <refname>max</refname>
  <refpurpose>Maximalwert bestimmen</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>max</methodname>
   <methodparam><type>array</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>mixed</type><methodname>max</methodname>
   <methodparam><type>mixed</type><parameter>value1</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value2</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Ist der erste und einzige Parameter ein Array, gibt <function>max</function>
   den höchsten Wert dieses Arrays zurück. Sind mindestens zwei Parameter übergeben,
   gibt <function>max</function> den größeren dieser Werte zurück.
  </para>
  <note>
   <para>
    Werte unterschiedlicher Typen werden unter Verwendung der
    <link linkend="language.operators.comparison">Standard-Vergleichsregeln</link>
    verglichen. Zum Beispiel wird ein nicht-numerischer <type>String</type> mit
    einem <type>Integer</type> verglichen als ob er <literal>0</literal> wäre,
    aber mehrere <type>String</type>-Werte werden alphanumerisch verglichen.
    Der tatsächlich zurückgegebene Wert ist vom ursprünglichen Typ ohne
    angewandte Konvertierung.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
       Ein die Werte enthaltendes Array.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value1</parameter></term>
     <listitem>
      <para>
       Ein <link linkend="language.operators.comparison">vergleichbarer</link>
       Wert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value2</parameter></term>
     <listitem>
      <para>
       Ein <link linkend="language.operators.comparison">vergleichbarer</link>
       Wert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       Ein <link linkend="language.operators.comparison">vergleichbarer</link>
       Wert.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>max</function> liefert den gemäß den Standard-Vergleichen als
   "größten" angesehenen Parameter-Wert zurück. Evaluieren mehrere Werte
   unterschiedlichen Typs als gleich (z.B. <literal>0</literal> und
   <literal>'abc'</literal>), wird der zuerst übergebene zurückgegeben.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Verwendungsbeispiel von <function>max</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo max(2, 3, 1, 6, 7);  // 7
echo max(array(2, 4, 5)); // 5

// Die Zeichenkette 'hallo' wird wie 0 behandelt, wenn sie mit einem Int verglichen wird
// Da die beiden Werte gleich sind, bestimmt die Reihenfolge der Übergabe das Ergebnis
echo max(0, 'hallo');     // 0
echo max('hallo', 0);     // hallo

// Hier vergleichen wir -1 < 0, so dass 'hallo' der größte Wert ist
echo max('hallo', -1);    // hallo

// Bei mehreren Arrays unterschiedlicher Länge, gibt max das längste zurück
$val = max(array(2, 2, 2), array(1, 1, 1, 1)); // array(1, 1, 1, 1)

// Mehrere Arrays gleicher Länge werden von links nach rechts verglichen,
// daher ist in unserem Beispiel 2 == 2, aber 5 > 4
$val = max(array(2, 4, 8), array(2, 5, 1)); // array(2, 5, 1)

// Sind ein Array und ein Nicht-Array-Parameter gegeben, wird das Array zurückgegeben,
// da Vergleiche Arrays als größer behandeln als alle anderen Werte
$val = max('string', array(2, 5, 7), 42);   // array(2, 5, 7)

// Ist ein Argument NULL oder ein Boole'scher Wert, wird es mit anderen Werten
// unter Verwendung der Regel FALSE < TRUE verglichen, ohne Rücksicht auf die anderen beteiligten Typen
// Im folgenden Beispiel wird -10 im Vergleich wie TRUE behandelt
$val = max(-10, FALSE); // -10

// Andererseits wird 0 wie FALSE behandelt, so dass es "kleiner" ist als TRUE
$val = max(0, TRUE); // TRUE
?>
]]>
    </programlisting>
    </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>min</function></member>
    <member><function>count</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
