<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9e0a39029d6e66cd5f7c7e8cfecf76fdb8ad7f49 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 1.0 Reviewer: samesch -->
<refentry xml:id="function.ob-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Ausgabepufferung aktivieren</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Diese Funktion aktiviert die Ausgabepufferung. Während die Ausgabepufferung
   aktiv ist, werden Skriptausgaben (mit Ausnahme von Headerinformationen)
   nicht direkt an den Client weitergegeben, sondern in einem internen Puffer
   gesammelt.
  </para>
  <para>
   Der Inhalt dieses internen Puffers kann mit Hilfe der Funktion
   <function>ob_get_contents</function> in eine Zeichenketten-Variable kopiert
   werden. Um auszugeben, was im internen Puffer gespeichert ist, wird
   <function>ob_end_flush</function> verwendet. Alternativ wird der Puffer mit
   <function>ob_end_clean</function> stillschweigend verworfen.
  </para>
  <warning>
   <para>
    Einige Webserver (z. B. Apache) ändern das Arbeitsverzeichnis des Skripts
    vor dem Aufruf der Callback-Funktion. Bei Bedarf kann in der
    Callback-Funktion mit Hilfe von beispielsweise
    <literal>chdir(dirname($_SERVER['SCRIPT_FILENAME']))</literal> wieder in
    das Skriptverzeichnis zurückgewechselt werden.
   </para>
  </warning>
  <para>
   Ausgabepuffer können verschachtelt werden, d. h.
   <function>ob_start</function> kann erneut aufgerufen werden, während
   bereits ein anderer <function>ob_start</function>-Aufruf aktiv ist. Es muss
   nur sichergestellt werden, dass später auch entsprechend oft
   <function>ob_end_flush</function> aufgerufen wird. Sind mehrere
   Callback-Funktionen aktiv, so werden die Ausgaben der Reihe nach von
   Ausgabepuffer zu Ausgabepuffer weitergegeben und die Callback-Funktionen in
   Verschachtelungsreihenfolge aufgerufen.
  </para>
  <para>
   Wenn die Ausgabepufferung am Ende des Skripts noch aktiv ist, gibt PHP den
   Inhalt automatisch aus.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Optional kann eine <parameter>callback</parameter>-Funktion angegeben
       werden. Diese Funktion nimmt eine Zeichenkette als Parameter entgegen
       und sollte eine Zeichenkette zurückgeben. Die Funktion wird aufgerufen,
       wenn der Ausgabepuffer geleert (gesendet) oder bereinigt wird (mit
       <function>ob_flush</function>, <function>ob_clean</function> oder einer
       ähnlichen Funktion), oder wenn der Ausgabepuffer am Ende der Anfrage
       zum Browser gesendet wird. Wenn <parameter>callback</parameter>
       aufgerufen wird, dann empfängt es den Inhalt des Ausgabepuffers als
       Parameter und sollte einen neuen Ausgabepuffer als Ergebnis
       zurückgeben, der an den Browser gesendet wird. Ist
       <parameter>callback</parameter> keine aufrufbare Funktion, gibt diese
       Funktion &false; zurück. Dies ist die Signatur des Callbacks:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           Der Inhalt des Ausgabepuffers.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           Die Bitmaske von
           <link linkend="outcontrol.constants"><constant>PHP_OUTPUT_HANDLER_*</constant>-Konstanten</link>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Wenn <parameter>callback</parameter> &false; zurückgibt, wird die
       ursprüngliche Eingabe an den Browser gesendet.
      </para>
      <para>
       Um den Parameter <parameter>callback</parameter> auszulassen, kann ein
       &null;-Wert übergeben werden.
      </para>
      <para>
       <function>ob_end_clean</function>, <function>ob_end_flush</function>,
       <function>ob_clean</function>, <function>ob_flush</function> und
       <function>ob_start</function> können nicht innerhalb einer
       Callback-Funktion aufgerufen werden; das Ergebnis eines solchen Aufrufs
       ist nicht definiert. Wenn der Inhalt eines Puffers gelöscht werden
       soll, genügt es, "" (eine leere Zeichenkette) aus der Callback-Funktion
       zurückzugeben. Auch Funktionen wie
       <literal>print_r($expression, true)</literal> oder
       <literal>highlight_file($filename, true)</literal>, die den
       Ausgabepuffer-Mechanismus intern nutzen, können nicht innerhalb eines
       Callbacks aufgerufen werden.
      </para>
      <note>
       <para>
        Die Funktion <function>ob_gzhandler</function> existiert, um es zu
        erleichtern, gz-kodierte Daten an Webbrowser zu senden, die
        komprimierte Webseiten unterstützen. <function>ob_gzhandler</function>
        ermittelt, welche Art von Inhaltskodierung der Browser akzeptiert, und
        liefert seine Ausgabe entsprechend.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       Wird der optionale Parameter <parameter>chunk_size</parameter>
       übergeben, dann wird der Puffer nach jedem Ausgabeaufruf geleert, was
       dazu führt, dass die Länge des Puffers größer oder gleich
       <parameter>chunk_size</parameter> ist. Der Vorgabewert
       <literal>0</literal> bedeutet, dass die Ausgabefunktion nur aufgerufen
       wird, wenn der Ausgabepuffer geschlossen wird.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Beim Parameter <parameter>flags</parameter> handelt es sich um eine
       Bitmaske, die die Operationen steuert, die mit dem Ausgabepuffer
       durchgeführt werden können. Die Vorgabe ist, zu erlauben, dass
       Ausgabepuffer bereinigt, geleert und entfernt werden dürfen, was
       ausdrücklich mit <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant>, oder
       <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant> als Abkürzung,
       eingestellt werden kann.
      </para>
      <para>
       Jedes Flag steuert den Zugriff auf einen Satz von Funktionen, wie im
       Folgenden beschrieben:
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Konstante</entry>
           <entry>Funktionen</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            <function>ob_clean</function>,
            <function>ob_end_clean</function> und
            <function>ob_get_clean</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            <function>ob_end_flush</function>,
            <function>ob_flush</function> und
            <function>ob_get_flush</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            <function>ob_end_clean</function>,
            <function>ob_end_flush</function> und
            <function>ob_get_flush</function>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Beispiel einer benutzerdefinierten Callback-Funktion</title>
    <programlisting role="php">
<![CDATA[
<?php

function callback($buffer)
{
  // ersetzt alle Äpfel mit Birnen
  return (str_replace("Äpfel", "Birnen", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>Das ist wie Äpfel mit Birnen zu vergleichen.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>Das ist wie Birnen mit Birnen zu vergleichen.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>

  <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>Erzeugen eines nicht löschbaren Ausgabepuffers</title>
    <programlisting role="php">
<![CDATA[
<?php

ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
