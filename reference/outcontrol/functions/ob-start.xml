<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335401 Maintainer: theseer Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.ob-start">
    <refnamediv>
        <refname>ob_start</refname>
        <refpurpose>Ausgabepufferung aktivieren</refpurpose>
    </refnamediv>

    <refsect1 role="description">
        &reftitle.description;
        <methodsynopsis>
            <type>bool</type>
            <methodname>ob_start</methodname>
            <methodparam choice="opt">
                <type>callable</type>
                <parameter>output_callback</parameter>
                <initializer>&null;</initializer>
            </methodparam>
            <methodparam choice="opt">
                <type>int</type>
                <parameter>chunk_size</parameter>
                <initializer>0</initializer>
            </methodparam>
            <methodparam choice="opt">
                <type>int</type>
                <parameter>flags</parameter>
                <initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer>
            </methodparam>
        </methodsynopsis>
        <para>
            Diese Funktion aktiviert die Ausgabepufferung. Während die
            Ausgabepufferung aktiv ist werden Scriptausgaben (mit
            Ausnahme von Headerinformationen) nicht direkt an den
            Client weitergegeben sondern in einem internen Puffer
            gesammelt.
        </para>
        <para>
            Der Inhalt dieses internen Puffers kann mit Hilfe der Funktion
            <function>ob_get_contents</function>
            in eine Stringvariable kopiert werden. Mit der Funktion
            <function>ob_end_flush</function>
            können die Pufferinhalte an den Client ausgegeben werden,
            <function>ob_end_clean</function>
            wird der Puffer ohne Ausgabe gelöscht.
        </para>
        <warning>
            <para>
                Einige Webserver (z.B. Apache) ändern das Arbeitsverzeichnis des
                Scripts vor dem Aufruf der Callback-Funktion am Scriptende. Sie
                können falls nötig mit Hilfe von
                <literal>chdir(dirname($_SERVER['SCRIPT_FILENAME']))</literal>
                wieder in das Scriptverzeichnis zurückwechseln.
            </para>
        </warning>
        <para>
            Ausgabepuffer können verschachtelt werden, d.h. Sie können
            <function>ob_start</function>
            erneut aufrufen
            während bereits ein anderer
            <function>ob_start</function>
            Aufruf aktiv ist.
            Sie müssen nur sicher stellen das Sie später auch
            <function>ob_end_flush</function>
            entsprechend oft
            aufrufen. Sind mehrere Callback-Funktion aktiv so werden die Ausgaben der Reihe nach von Ausgabepuffer zu
            Ausgabepuffer weitergegeben und die Callback-Funktionen in Verschachtelungsreihenfolge aufgerufen.
        </para>
    </refsect1>

    <refsect1 role="parameters">
        &reftitle.parameters;
        <para>
            <variablelist>
                <varlistentry>
                    <term>
                        <parameter>output_callback</parameter>
                    </term>
                    <listitem>
                        <para>
                            An optional
                            <parameter>output_callback</parameter>
                            function may be
                            specified. This function takes a string as a parameter and should
                            return a string. The function will be called when
                            the output buffer is flushed (sent) or cleaned (with
                            <function>ob_flush</function>,
                            <function>ob_clean</function>
                            or similar
                            function) or when the output buffer
                            is flushed to the browser at the end of the request. When
                            <parameter>output_callback</parameter>
                            is called, it will receive the
                            contents of the output buffer as its parameter and is expected to
                            return a new output buffer as a result, which will be sent to the
                            browser. If the
                            <parameter>output_callback</parameter>
                            is not a
                            callable function, this function will return &false;.
                            This is the callback signature:
                        </para>
                        <para>
                            <methodsynopsis>
                                <type>string</type>
                                <methodname>
                                    <replaceable>handler</replaceable>
                                </methodname>
                                <methodparam>
                                    <type>string</type>
                                    <parameter>buffer</parameter>
                                </methodparam>
                                <methodparam choice="opt">
                                    <type>int</type>
                                    <parameter>phase</parameter>
                                </methodparam>
                            </methodsynopsis>
                            <variablelist>
                                <varlistentry>
                                    <term>
                                        <parameter>buffer</parameter>
                                    </term>
                                    <listitem>
                                        <simpara>
                                            Contents of the output buffer.
                                        </simpara>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>
                                        <parameter>phase</parameter>
                                    </term>
                                    <listitem>
                                        <simpara>
                                            Bitmask of
                                            <constant>PHP_OUTPUT_HANDLER_*</constant>
                                            constants.
                                        </simpara>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                        </para>
                        <para>
                            If
                            <parameter>output_callback</parameter>
                            returns &false; original
                            input is sent to the browser.
                        </para>
                        <para>
                            The
                            <parameter>output_callback</parameter>
                            parameter may be bypassed
                            by passing a &null; value.
                        </para>
                        <para>
                            <function>ob_end_clean</function>,
                            <function>ob_end_flush</function>,<function>ob_clean</function>,
                            <function>ob_flush</function>
                            und
                            <function>ob_start</function>
                            können innerhalb einer Callback-Funktion nicht benutzt werden,
                            das Ergebnis eines solchen Aufrufs ist nicht definiert. Wenn Sie
                            den Inhalt eines Puffers aus einem Callback löschen wollen so
                            gegeben Sie einfach den Leerstring "" zurück. Auch Funktionen
                            wie <literal>print_r($expression, true)</literal>
                            oder <literal>highlight_file($filename, true)</literal>
                            die den Ausgabepuffermechanismus intern nutzen können innerhalb eines
                            Callbacks nicht benutzt werden.
                        </para>
                        <note>
                            <para>
                                In PHP 4.0.4,
                                <function>ob_gzhandler</function>
                                was introduced to
                                facilitate sending gz-encoded data to web browsers that support
                                compressed web pages.
                                <function>ob_gzhandler</function>
                                determines
                                what type of content encoding the browser will accept and will return
                                its output accordingly.
                            </para>
                        </note>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <parameter>chunk_size</parameter>
                    </term>
                    <listitem>
                        <para>
                            If the optional parameter
                            <parameter>chunk_size</parameter>
                            is passed, the
                            buffer will be flushed after any output call which causes the buffer's
                            length to equal or exceed<parameter>chunk_size</parameter>. The default
                            value
                            <literal>0</literal>
                            means that the output function will only be
                            called when the output buffer is closed.
                        </para>
                        <para>
                            Prior to PHP 5.4.0, the value
                            <literal>1</literal>
                            was a special case
                            value that set the chunk size to 4096 bytes.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <parameter>flags</parameter>
                    </term>
                    <listitem>
                        <para>
                            The
                            <parameter>flags</parameter>
                            parameter is a bitmask that controls
                            the operations that can be performed on the output buffer. The default
                            is to allow output buffers to be cleaned, flushed and removed, which
                            can be set explicitly via
                            <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant>
                            |
                            <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant>
                            |
                            <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant>, or
                            <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant>
                            as shorthand.
                        </para>
                        <para>
                            Each flag controls access to a set of functions, as described below:
                            <informaltable>
                                <tgroup cols="2">
                                    <thead>
                                        <row>
                                            <entry>Constant</entry>
                                            <entry>Functions</entry>
                                        </row>
                                    </thead>
                                    <tbody>
                                        <row>
                                            <entry>
                                                <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant>
                                            </entry>
                                            <entry>
                                                <function>ob_clean</function>,
                                                <function>ob_end_clean</function>, and
                                                <function>ob_get_clean</function>.
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant>
                                            </entry>
                                            <entry>
                                                <function>ob_end_flush</function>,
                                                <function>ob_flush</function>, and
                                                <function>ob_get_flush</function>.
                                            </entry>
                                        </row>
                                        <row>
                                            <entry>
                                                <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant>
                                            </entry>
                                            <entry>
                                                <function>ob_end_clean</function>,
                                                <function>ob_end_flush</function>, and
                                                <function>ob_get_flush</function>.
                                            </entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </informaltable>
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
    </refsect1>

    <refsect1 role="returnvalues">
        &reftitle.returnvalues;
        <para>
            &return.success;
        </para>
    </refsect1>

    <refsect1 role="changelog">
        &reftitle.changelog;
        <para>
            <informaltable>
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>&Version;</entry>
                            <entry>&Description;</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>7.0.0</entry>
                            <entry>
                              Falls <function>ob_start</function> innerhalb eines bereits aktiven Callbacks
                              aufgerufen wird, erzeugt diese Funktion nicht länger den Fehler <constant>E_ERROR</constant> 
                              sondern <constant>E_RECOVERABLE_ERROR</constant>.  Dies erlaubt es eigenen
                              Funktionen zur Fehlerbehandlung diesen Fehler zu verarbeiten.
                             </entry>
                            </row>
                     
                        <row>
                            <entry>5.4.0</entry>
                            <entry>
                                The third parameter of
                                <function>ob_start</function>
                                changed from a
                                <type>boolean</type>
                                parameter called
                                <parameter>erase</parameter>
                                (which, if set to &false;, would prevent the output buffer from being
                                deleted until the script finished executing) to an
                                <type>integer</type>
                                parameter called<parameter>flags</parameter>.
                                Unfortunately, this results in an API compatibility break for code
                                written prior to PHP 5.4.0 that uses the third parameter. See
                                <link linkend="function.ob-start.flags-bc">the flags example</link>
                                for an example of how to handle this with code that needs to be
                                compatible with both.
                            </entry>
                        </row>
                        <row>
                            <entry>5.4.0</entry>
                            <entry>
                                A chunk size of
                                <literal>1</literal>
                                now results in chunks of 1 byte
                                being sent to the output buffer.
                            </entry>
                        </row>
                        <row>
                            <entry>4.3.2</entry>
                            <entry>
                                This function was changed to return &false; in case the passed
                                <parameter>output_callback</parameter>
                                can not be executed.
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
        </para>
    </refsect1>
    <!--
        <para>
                <function>ob_start</function>
                kann über den optionalen Parameter
                <parameter>output_callback</parameter>
                ein Funktion zur Nachbearbeitung
                der Pufferinhalte mitgegeben werden. Die Funktion sollte als einzigen
                Parameter einen String erwarten und auch einen String als Rückgabewert
                zurückliefern. Die so spezifizierte Funktion wird aufgerufen wenn
                der Pufferinhalt mit
                <function>ob_end_flush</function>
                oder am
                Scriptende ausgegeben wird. Wenn
                <parameter>output_callback</parameter>
                aufgerufen wird erhält die Funktion den aktuellen Inhalt des Ausgabepuffers
                als Parameter, der Rückgabestring wird dann als neuer Pufferinhalt
                ausgegeben. Ist
                <parameter>output_callback</parameter>
                kein gültiger
                Callback-Parameter so gibt
                <function>ob_start</function>
                false zurück.
                Hat die Callback-Funktion zwei Parameter so wird der zweite Parameter
                mit einer Bitmaske befüllt die sich aus den Werten
                <constant>PHP_OUTPUT_HANDLER_START</constant>,
                <constant>PHP_OUTPUT_HANDLER_CONT</constant>
                und
                <constant>PHP_OUTPUT_HANDLER_END</constant>
                zusammensetzen kann.
                Liefert
                <parameter>output_callback</parameter> &false; als Ergebnis
                so wird der ursprüngliche Pufferinhalt unverändert ausgegeben.
            </para>
            <note>
                <para>
                    <function>ob_gzhandler</function>
                    wurde in PHP 4.0.4 eingeführt
                    um die gz-komprimierte Ausgabe an Clients zu ermöglichen die dies
                    unterstützen. Wird
                    <function>ob_gzhandler</function>
                    als Callback-
                    Funktion spezifiziert so prüft es die vom Client unterstützten
                    Ausgabecodierungen und gibt den Pufferinhalt dementsprechend
                    codiert weiter.
                </para>
            </note>
            <note>
                <para>
                    Vor PHP 4.3.2 lieferte die Funktion bei ungültigen
                    <parameter>output_callback</parameter>
                    Werten noch nicht &false;
                    zurück.
                </para>
            </note>
            <para>
                Wird ein Wert für den optionalen Parameter
                <parameter>chunk_size</parameter>
                angegeben so wird die Callback-Funktion jeweils nach dem ersten Newline-
                Zeichen nach Überschreiten der so festgelegten Anzahl von Ausgabebytes
                aufgerufen. Wird &null; als Parameterwert übergeben so wird der Parameter
                ignoriert.
            </para>
            <para>
                Wird für den Parameter
                <parameter>erase</parameter> &false; übergeben
                so wird der Ausgabepuffer nur zum Scriptende geleert (ab PHP 4.3.0).
            </para>

            -->

    <refsect1 role="examples">
        &reftitle.examples;
        <para>
            <example>
                <title>Beispiel einer benutzerkonfigurierten Callbackfunktion</title>
                <programlisting role="php">
                    <![CDATA[
<?php

function callback($buffer)
{
  // ersetzt Äpfel mit Birnen
  return (str_replace("Äpfel", "Birnen", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>Das ist wie Äpfel mit Birnen zu vergleichen.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
                </programlisting>
                &example.outputs;
                <screen>
                    <![CDATA[
<html>
<body>
<p>Das ist wie Birnen mit Birnen zu vergleichen.</p>
</body>
</html>
]]>
                </screen>
            </example>
        </para>

        <para>
            <example xml:id="function.ob-start.flags-bc">
                <title>Creating an uneraseable output buffer in a way compatible with both PHP 5.3 and 5.4</title>
                <programlisting role="php">
                    <![CDATA[
<?php

if (version_compare(PHP_VERSION, '5.4.0', '>=')) {
  ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^
    PHP_OUTPUT_HANDLER_REMOVABLE);
} else {
  ob_start(null, 0, false);
}

?>
]]>
                </programlisting>
            </example>
        </para>
    </refsect1>

    <refsect1 role="seealso">
        &reftitle.seealso;
        <para>
            <simplelist>
                <member>
                    <function>ob_get_contents</function>
                </member>
                <member>
                    <function>ob_end_flush</function>
                </member>
                <member>
                    <function>ob_end_clean</function>
                </member>
                <member>
                    <function>ob_implicit_flush</function>
                </member>
                <member>
                    <function>ob_gzhandler</function>
                </member>
                <member>
                    <function>ob_iconv_handler</function>
                </member>
                <member>
                    <function>mb_output_handler</function>
                </member>
                <member>
                    <function>ob_tidyhandler</function>.
                </member>
            </simplelist>
        </para>
    </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->