<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d715365c098db000eaf7dcd987ee6093f6e83091 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 9e0a39029d6e66cd5f7c7e8cfecf76fdb8ad7f49 Reviewer: samesch -->
<refentry xml:id="function.ob-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Ausgabepufferung aktivieren</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Diese Funktion aktiviert die Ausgabepufferung. Während die Ausgabepufferung
   aktiv ist, werden Skriptausgaben nicht direkt an den Client weitergegeben,
   sondern in einem internen Puffer gesammelt. Welche Ausgaben genau betroffen
   sind, ist unter <xref linkend="outcontrol.what-output-is-buffered"/>
   beschrieben.
  </para>
  <para>
   Ausgabepuffer können verschachtelt werden, &dh;
   <function>ob_start</function> kann erneut aufgerufen werden, während
   bereits ein anderer Puffer aktiv ist. Sind mehrere Ausgabepuffer aktiv,
   wird die Ausgabe in der Reihenfolge der Verschachtelung durch jeden dieser
   Puffer gefiltert. Siehe <xref linkend="outcontrol.nesting-output-buffers"/>
   für weitere Einzelheiten.
  </para>
  <para>
   Eine ausführliche Beschreibung der Ausgabepuffer ist unter
   <xref linkend="outcontrol.user-level-output-buffers"/> zu finden.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Optional kann ein
       <parameter>callback</parameter>-<type>Callable</type> angegeben
       werden. Dieses kann auch durch Übergabe von &null; umgangen werden.
      </para>
      <para>
       <parameter>callback</parameter> wird aufgerufen, wenn der Ausgabepuffer
       geleert (gesendet), bereinigt oder am Ende des Skripts geleert wird.
      </para>
      <para>
       Die Signatur von <parameter>callback</parameter> ist wie folgt:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           Der Inhalt des Ausgabepuffers.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           Eine Bitmaske von
           <link linkend="constant.php-output-handler-start">
            <constant>PHP_OUTPUT_HANDLER_<replaceable>*</replaceable></constant>-Konstanten
           </link>.
           Weitere Einzelheiten sind unter
           <xref linkend="outcontrol.flags-passed-to-output-handlers"/>
           zu finden.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Wenn <parameter>callback</parameter> &false; zurückgibt, wird der
       Inhalt des Puffers zurückgegeben.
       Weitere Einzelheiten sind unter
       <xref linkend="outcontrol.output-handler-return-values"/> zu finden.
      </para>
      <warning>
       <simpara>
        Wenn eine der folgenden Funktionen innerhalb eines Ausgabe-Handlers
        aufgerufen wird, führt dies zu einem schwerwiegenden Fehler:
        <function>ob_clean</function>, <function>ob_end_clean</function>,
        <function>ob_end_flush</function>, <function>ob_flush</function>,
        <function>ob_get_clean</function>, <function>ob_get_flush</function>,
        <function>ob_start</function>.
       </simpara>
      </warning>
      <para>
       Weitere Einzelheiten zu <parameter>callback</parameter>s
       (Ausgabe-Handler) sind unter
       <xref linkend="outcontrol.output-handlers"/> und
       <xref linkend="outcontrol.working-with-output-handlers"/> zu finden.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       Wird der optionale Parameter <parameter>chunk_size</parameter>
       übergeben, dann wird der Puffer nach jedem Codeblock geleert, der zu
       einer Ausgabe führt, durch die der Puffer die Größe von
       <parameter>chunk_size</parameter> erreicht oder überschreitet. Der
       Vorgabewert <literal>0</literal> bedeutet, dass die gesamte Ausgabe
       gepuffert wird, bis der Puffer ausgeschaltet wird.
       Weitere Einzelheiten sind unter
       <xref linkend="outcontrol.buffer-size"/> zu finden.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Beim Parameter <parameter>flags</parameter> handelt es sich um eine
       Bitmaske, die die Operationen steuert, die mit dem Ausgabepuffer
       durchgeführt werden können. Die Vorgabe ist, zu erlauben, dass
       Ausgabepuffer bereinigt, geleert und entfernt werden dürfen, was
       ausdrücklich mit den
       <link linkend="outcontrol.constants.buffer-control-flags">
        Flags für die Steuerung des Ausgabepuffers
       </link>.
       eingestellt werden kann.
       Weitere Einzelheiten sind unter
       <xref linkend="outcontrol.operations-on-buffers"/> zu finden.
      </para>
      <para>
       Jedes Flag steuert den Zugriff auf einen Satz von Funktionen, wie im
       Folgenden beschrieben:
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Konstante</entry>
           <entry>Funktionen</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            <function>ob_clean</function>
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            <function>ob_end_flush</function>
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            <function>ob_end_clean</function>,
            <function>ob_end_flush</function>,
            <function>ob_get_clean</function>,
            <function>ob_get_flush</function>
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Beispiel einer benutzerdefinierten Callback-Funktion</title>
    <programlisting role="php">
<![CDATA[
<?php

function callback($buffer)
{
  // ersetzt alle Äpfel mit Birnen
  return (str_replace("Äpfel", "Birnen", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>Das ist wie Äpfel mit Birnen zu vergleichen.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>Das ist wie Birnen mit Birnen zu vergleichen.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>

  <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>Erzeugen eines nicht löschbaren Ausgabepuffers</title>
    <programlisting role="php">
<![CDATA[
<?php

ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
