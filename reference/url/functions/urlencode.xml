<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.9 Maintainer: sammywg Status: ready -->
<!-- splitted from ./de/functions/url.xml, last change in rev 1.2 -->
  <refentry id="function.urlencode">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose>URL-kodiert einen String</refpurpose>
   </refnamediv>
   <refsect1 role="description">
    &reftitle.description;
    <methodsynopsis>
     <type>string</type><methodname>urlencode</methodname>
     <methodparam><type>string</type><parameter>str</parameter></methodparam>
    </methodsynopsis>
    <para>
     Gibt einen String zurück, in dem alle nicht alphanumerischen Zeichen
     bis auf <literal>-_.</literal> durch das Prozentzeichen
     (<literal>%</literal>) gefolgt von zwei Hexzeichen sowie Leerzeichen durch
     ein Pluszeichen (<literal>+</literal>) ersetzt werden. Genauso werden auch
     Daten kodiert, die über ein WWW-Formular gesendet werden, dies entspricht
     dem Media Type <literal>application/x-www-form-urlencoded</literal>. Dies
     unterscheidet sich von der Kodierung in RFC1738 (siehe
     <function>rawurlencode</function>), bei dem aus historischen Gründen
     Leerzeichen als Pluszeichen (+) kodiert werden. Diese Funktion ist sehr
     nützlich, um einen String zu kodieren, der im Queryteil einer URL verwendet
     werden soll. Dies ist eine bequeme Art, Variablen an die nächste Seite zu
     übergeben:
     <example>
      <title><function>urlencode</function>-Beispiel</title>
      <programlisting role="php">
<![CDATA[
<?php
echo '<a href="mycgi?foo=', urlencode($userinput), '">';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Beachten Sie: Seien Sie vorsichtig bei der Verwendung von Variablen, die
     HTML-Sonderzeichen enthalten. Zeichen wie &amp;amp, &amp;copy und
     &amp;pound werden vom Browser geparst und das betreffende echte Zeichen
     statt des HTML-Namens verwendet. Dies ist eine offensichtliche
     Schwierigkeit, die das W3C seit Jahren zu verdeutlichen sucht. Die
     entsprechende Referenz finden Sie hier:
     <ulink url="&url.argsep;">&url.argsep;</ulink>. PHP lässt die Umstellung
     des Argument-Separators auf das W3C-empfohlene Semikolon mittels der
     .ini-Direktive arg_separator zu. Bedauerlicherweise senden die meisten
     User Agents Formulardaten nicht in diesem durch Semikolon getrennten
     Format. Ein möglicher Weg das zu umgehen, ist, &amp;amp anstatt &amp; als
     Separator zu verwenden. Sie brauchen dafür die PHP-Option arg_separator
     nicht zu ändern. Belassen Sie sie auf &amp; und kodieren Sie dafür Ihre
     URL unter Verwendung von <function>htmlentities</function> oder
     <function>htmlspecialchars</function>.
    </para>
    <para>
     <example>
      <title><function>urlencode</function> und
        <function>htmlentities</function>-Beispiel</title>
      <programlisting role="php">
<![CDATA[
<?php
$query_string = 'foo=' . urlencode($foo) . '&bar=' . urlencode($bar);
echo '<a href="mycgi?' . htmlentities($query_string) . '">';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Siehe auch
     <function>urldecode</function>,
     <function>htmlentities</function>,
     <function>rawurldecode</function> und
     <function>rawurlencode</function>.
    </para>
   </refsect1>
  </refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
