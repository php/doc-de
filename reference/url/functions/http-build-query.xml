<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.12 Maintainer: sammywg Status: ready -->
<refentry id="function.http-build-query">
 <refnamediv>
  <refname>http_build_query</refname>
  <refpurpose>Erstellen eines URL-kodierten Query-Strings</refpurpose>
 </refnamediv>

 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>string</type><methodname>http_build_query</methodname>
   <methodparam><type>array</type><parameter>formdata</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>numeric_prefix</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>arg_separator</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Erstellt einen URL-kodierten Query-String aus einem gegebenen assoziativem
   (oder indexiertem) Array. <parameter>formdata</parameter> kann ein Array
   oder ein Objekt sein, das Eigenschaften enthält. Ein
   <parameter>formdata</parameter>-Array kann eine einfache eindimensionale
   Struktur haben, oder ein Array aus Arrays sein (die wiederum weitere Arrays
   enthalten können). Wenn numerische Indizes im äußeren Array verwendet werden
   und ein <parameter>numeric_prefix</parameter> angegeben wurde, wird dieser
   nur den numerischen Schlüsseln im äußeren Array vorangestellt. Dieser Weg
   wurde gewählt, um gültige Variablennamen zu erhalten, wenn die Daten später
   von PHP oder einer anderen CGI-Applikation dekodiert werden.
  </simpara>

  <note>
   <para>
    <link linkend="ini.arg-separator.output">arg_separator.output</link> wird
    verwendet, um die Argumente voneinander zu trennen, es sei denn, dass
    <parameter>arg_separator</parameter> angegeben ist. In diesem Falle wird
    letzteres verwendet.
   </para>
  </note>

  <example>
   <title>Einfache Verwendung von <function>http_build_query</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$data = array('foo'=>'bar',
              'baz'=>'boom',
              'cow'=>'milch',
              'php'=>'hypertext processor');

echo http_build_query($data); // foo=bar&baz=boom&cow=milch&php=hypertext+processor
echo http_build_query($data, '', '&amp;'); // foo=bar&amp;baz=boom&amp;cow=milch&amp;php=hypertext+processor
?>
]]>
   </programlisting>
  </example>

  <example>
   <title><function>http_build_query</function> mit numerischen Index-Elementen.</title>
   <programlisting role="php">
<![CDATA[
<?php
$data = array('foo', 'bar', 'baz', 'boom', 'kuh' => 'milch', 'php' =>'hypertext processor');

echo http_build_query($data);
/* Ausgabe:
      0=foo&1=bar&2=baz&3=boom&kuh=milch&php=hypertext+processor
 */

echo http_build_query($data, 'meineVariable_');
/* Ausgabe: (fuer bessere Lesbarkeit umgebrochen!)
      meineVariable_0=foo&meineVariable_1=bar&meineVariable_2=baz&
      meineVariable_3=boom&kuh=milch&php=hypertext+processor
 */
?>
]]>
   </programlisting>
  </example>

  <example>
   <title><function>http_build_query</function> mit verschachtelten Arrays</title>
   <programlisting role="php">
<![CDATA[
<?php
$data = array('user'=>array('name'=>'Bob Smith',
                            'alter'=>47,
                            'geschlecht'=>'M',
                            'geb'=>'5/12/1956'),
              'hobbies'=>array('golf', 'opera', 'poker', 'rap'),
              'kinder'=>array('bobby'=>array('alter'=>12,
                                               'geschlecht'=>'M'),
                                'sally'=>array('alter'=>8,
                                               'geschlecht'=>'F')),
              'CEO');

echo http_build_query($data, 'flags_');
?>
]]>
   </programlisting>
   <para>
    Ausgabe: (für bessere Lesbarkeit umgebrochen!)
   </para>
   <screen>
<![CDATA[
user[name]=Bob+Smith&user[alter]=47&user[geschlecht]=M&user[geb]=5%2F12%2F1956&
hobbies[0]=golf&hobbies[1]=opera&hobbies[2]=poker&hobbies[3]=rap&
kinder[bobby][alter]=12&kinder[bobby][geschlecht]=M&kinder[sally][alter]=8&
kinder[sally][geschlecht]=F&flags_0=CEO
]]>
   </screen>
   <para>
    <note>
     <para>
      Nur das numerische Indexelement im äußeren Array "CEO" erhält ein Prefix.
      Die anderen numerischen Indizes unterhalb von hobbies benötigen kein
      String-Prefix, um einen gültigen Variablennamen darzustellen.
     </para>
    </note>
   </para>
  </example>

  <example>
   <title>Verwendung von <function>http_build_query</function> mit einem Objekt</title>
   <programlisting role="php">
<![CDATA[
<?php
class meineKlasse {
    var $foo;
    var $baz;

    function meineKlasse() {
        $this->foo = 'bar';
        $this->baz = 'boom';
    }
}

$data = new meineKlasse();

echo http_build_query($data); // foo=bar&baz=boom

?>
]]>
   </programlisting>
  </example>

  <note>
   <simpara>
    Der Parameter <parameter>arg_separator</parameter> wurde mit PHP 5.1.2
    hinzugefügt.
   </simpara>
  </note>

  <simpara>
   Siehe auch
   <function>parse_str</function>,
   <function>parse_url</function>,
   <function>urlencode</function> und
   <function>array_walk</function>
  </simpara>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
