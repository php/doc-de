<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.14 Maintainer: sammywg Status: ready -->
<!-- splitted from ./de/functions/url.xml, last change in rev 1.2 -->
<refentry id="function.parse-url">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>
   Analysiert einen URL und gibt seine Bestandteile zurück
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>component</parameter></methodparam>
  </methodsynopsis>
  <para>
   Diese Funktion parst einen URL und gibt ein assoziatives Array zurück, das
   die im URL vorhandenen Komponenten enthält.
  </para>
  <para>
   Diese Funktion ist <emphasis role="strong">nicht</emphasis> dazu gedacht,
   einen gegebenen URL zu validieren, sondern es gliedert einen URL in die
   aufgeführten Bestandteile. Unvollständige URLs werden als Parameter
   akzeptiert, <function>parse_url</function> versucht sie bestmöglich zu
   analysieren.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       Der zu parsende URL
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <varlistentry>
     <term><parameter>component</parameter></term>
     <listitem>
      <para>
       Geben Sie einen der folgenden Parameter an, um nur einen spezifischen
       Teil des URL als <type>String</type> zu erhalten:
       <constant>PHP_URL_SCHEME</constant>,
       <constant>PHP_URL_HOST</constant>, <constant>PHP_URL_PORT</constant>,
       <constant>PHP_URL_USER</constant>, <constant>PHP_URL_PASS</constant>,
       <constant>PHP_URL_PATH</constant>, <constant>PHP_URL_QUERY</constant>
       oder <constant>PHP_URL_FRAGMENT</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Bei sehr fehlerhaften URLs kann <function>parse_url</function> &false;
   zurückgeben und wirft <constant>E_WARNING</constant>. Andernfalls wird
   ein assoziatives Array zurückgegeben, dessen Bestandteile sich wie folgt
   zusammensetzen können (mindestens ein Bestandteil liegt vor):
   <itemizedlist>
    <listitem>
     <simpara>
      <structfield>scheme</structfield> - z.B. http
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>host</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>port</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>user</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>pass</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>path</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>query</structfield> - alles nach dem Fragezeichen
      <literal>?</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>fragment</structfield> - alles nach dem Textanker
      <literal>#</literal>
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Ist der Parameter <parameter>component</parameter> angegeben, wird ein
   <type>String</type> anstelle des normalen <type>Array</type> zurückgegeben.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.2</entry>
       <entry><parameter>component</parameter>-Parameter hinzugefügt</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
</refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ein <function>parse_url</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$url = 'http://benutzername:passwort@hostname/pfad?argument=wert#textanker';

print_r(parse_url($url));

echo parse_url($url, PHP_URL_PATH);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [scheme] => http
    [host] => hostname
    [user] => benutzername
    [pass] => passwort
    [path] => /pfad
    [query] => argument=wert
    [fragment] => textanker
)
/pfad
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Diese Funktion verarbeitet keine relativen URLs.
   </para>
  </note>
  <note>
   <para>
    <function>parse_url</function> ist primär dazu gedacht, URLs zu parsen,
    nicht jedoch URIs. Um jedoch die Abwärtskompatibilität von PHP zu
    gewährleisten, wird für das Schema file:// die Ausnahme dreier Slashes
    (file:///) zugelassen. Bei allen anderen Schemata ist diese Notierung
    ungültig.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pathinfo</function></member>
    <member><function>parse_str</function></member>
    <member><function>http_build_query</function></member>
    <member><function>dirname</function></member>
    <member><function>basename</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
