<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 338345 Maintainer: nobody Status: ready -->
<!-- $Revision$ -->

<refentry xml:id="function.token-get-all" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>token_get_all</refname>
  <refpurpose>Spaltet angegebenen PHP-Quelltext in PHP-Tokens auf</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>token_get_all</methodname>
   <methodparam><type>string</type><parameter>source</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>token_get_all</function> parst den angegebenen Quelltext <parameter>source</parameter>
   und spaltet ihn mit Hilfe des lexikalischen Scanners der Zend-Engine in PHP-Sprachtokens auf.
  </para>
  <para>
   Eine Übersicht über die verschiedenen Tokens finden Sie im <xref linkend="tokens"/>
   oder Sie können die Funktion <function>token_name</function> zum Übersetzen eines Tokens
   in seinen Textrepäsentanten verwenden.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>source</parameter></term>
     <listitem>
      <para>
       PHP-Quelltext der geparst werden soll.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Gültige Flags:
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>TOKEN_PARSE</constant> - Erkennt die Möglichkeit,
          reservierte Wörter unter bestimmten Umständen zu verwenden.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Array mit Tokenbezeichner. Jeder einzelne Bezeichner ist entweder ein einzelnes
   Zeichen (z.B.: <literal>;</literal>, <literal>.</literal>,
   <literal>&gt;</literal>, <literal>!</literal>, usw.), oder ein Array bestehend aus
   drei Elementen. Das erste Element enthält den Tokenindex, das zweite Element den
   originalen Textinhalt und die Zeilennummer im dritten Element.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>token_get_all</function> Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
$tokens = token_get_all('<?php echo; ?>'); /* => array(
                                                  array(T_OPEN_TAG, '<?php'),
                                                  array(T_ECHO, 'echo'),
                                                  ';',
                                                  array(T_CLOSE_TAG, '?>') ); */

/* Beachten Sie, dass im folgenden Beispiel die Zeichenkette geparst wurde
   als T_INLINE_HTML und nicht wie erwartet als T_COMMENT (T_ML_COMMENT in PHP <5).
   Das liegt an den fehlenden Beginn-/Endetags die im "Quelltext" verwendet wurden.
   Das entspricht einem Kommentar außerhalb der <?php ?> Tags in einer normalen Datei. */
$tokens = token_get_all('/* comment */'); // => array(array(T_INLINE_HTML, '/* comment */'));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     <function>token_get_all</function> für eine Klasse, die ein reserviertes
     Wort benutzt
    </title>
    <programlisting role="php">
<![CDATA[
<?php

$source = <<<'code'
<?php

class A
{
    const PUBLIC = 1;
}
code;

$tokens = token_get_all($source, TOKEN_PARSE);

foreach ($tokens as $token) {
    if (is_array($token)) {
        echo token_name($token[0]) , PHP_EOL;
    }
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
T_OPEN_TAG
T_WHITESPACE
T_CLASS
T_WHITESPACE
T_STRING
T_CONST
T_WHITESPACE
T_STRING
T_LNUMBER
]]>
    </screen>
   </example>
   Ohne das <constant>TOKEN_PARSE</constant>-Flag würde das vorletzte Token
   <constant>T_PUBLIC</constant> statt <constant>T_STRING</constant> sein.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        Der optionale <parameter>flags</parameter> Parameter wurde mitsamt
        dem <constant>TOKEN_PARSE</constant>-Flag hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>5.2.2</entry>
       <entry>Die Zeilennummer wird im dritten Element zurückgegeben
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
