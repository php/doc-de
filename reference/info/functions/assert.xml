<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342126 Maintainer: cmb Status: ready -->

<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>
   Prüft ab, ob eine Zusicherung &false; ist
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <para>PHP 5 und 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
  </methodsynopsis>
  <para>PHP 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>Throwable</type><parameter>exception</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> überprüft den übergebenen Parameter
   <parameter>assertion</parameter> und verfährt entsprechend,
   falls die in <parameter>assertion</parameter> spezifizierte Bedingung &false;
   ist.
  </para>
  <refsect2>
   <title>Traditionelle Zusicherungen (PHP 5 und 7)</title>
   <para>
    Wird der Parameter <parameter>assertion</parameter> als String
    übergeben, so wird der String als PHP-Code interpretiert.
    Vorteile der Übergabe des Parameters
    <parameter>assertion</parameter> als Zeichenkette sind geringerer Mehraufwand,
    wenn die Zusicherungsprüfung deaktiviert ist, und
    dass die ausgegebene Meldung die über
    <parameter>assertion</parameter> übergebene Zeichenkette enthält.
    Wird eine boolesche Bedingung an
    <parameter>assertion</parameter> übergeben, wird diese nicht als Parameter an die
    Zusicherungsfunktion, die möglicherweise per
    <function>assert_options</function> Funktion definiert wurde, weitergegeben. Die
    Bedingung wird vor dem Aufruf der Handler-Funktion in eine Zeichenkette
    umgewandelt, und der boolesche Wert &false; wird dabei zur leeren
    Zeichenkette konvertiert.
   </para>
   <para>
    <function>assert</function> sollte nur zum Debuggen des Codes
    verwendet werden. Es kann für Plausibilitätsprüfungen verwendet werden, um
    auf Bedingungen zu prüfen, die immer &true; sein sollten, und die andernfalls
    Programmierfehler anzeigen, oder um auf die Verfügbarkeit bestimmter
    Merkmale, wie Erweiterungsfunktionen oder bestimmte Systembeschränkungen und
    Eigenschaften, zu prüfen.
   </para>
   <para>
    Zusicherungen sollten nicht für normale Laufzeitoperationen wie die
    Überprüfung von Eingaben verwendet werden. Als Faustregel sollte der Code
    immer korrekt funktionieren können, auch wenn die Zusicherungsüberprüfung
    deaktiviert ist.
   </para>
   <para>
    Die Optionen für die <function>assert</function> können über die Funktion
    <function>assert_options</function> oder durch ini Settings, die in der
    Handbuchseite dieser Funktion beschrieben werden, eingestellt werden.
   </para>
   <para>
    Die Funktion <function>assert_options</function> und/oder die
    <constant>ASSERT_CALLBACK</constant> Direktive ermöglicht eine Funktion anzugeben, die
    bei fehlschlagender Überprüfung aufgerufen wird.
   </para>
   <para>
    Callback-Funktionen in Zusammenhang mit
    <function>assert</function> sind nützlich, um beispielsweise
    automatisierte Tests durchzuführen, da die Callback-Funktion über
    die Information verfügt, von welcher Stelle sie aufgerufen wurde.
    Auch wenn diese Information mit anderen Methoden zugänglich ist, macht es die
    Verwendung von Zusicherungen viel schneller und leichter!
   </para>
   <para>
    Die Callback-Funktion wird mit drei Parametern aufgerufen. Der
    erste Parameter enthält den Namen des Scripts, in dem
    die Überprüfung statt fand, der zweite Parameter die
    Zeilennummer, und der dritte Paramter enthält die über
    <parameter>assertion</parameter> angegebene Bedingung
    (wobei Literale wie 1 oder "zwei" nicht übergeben werden).
    Nutzer von PHP 5.4.8 und höher können ebenfalls ein viertes optionales
    Argument angeben, das die <parameter>description</parameter>, die an
    <function>assert</function> übergeben wurde, enthält, wenn diese gesetzt
    wurde.
   </para>
  </refsect2>
  <refsect2 xml:id="function.assert.expectations">
   <title>Erwartungen (nur PHP 7)</title>
   <para>
    <function>assert</function> ist in PHP 7 ein Sprachkonstrukt, das die
    Definition von Annahmen ermöglicht: Zusicherungen, die in Entwicklungs- und
    Testumgebungen wirken, aber so optimiert werden, dass sie in
    Produktionsumgebungen keinen Mehraufwand verursachen.
   </para>
   <para>
    Während <function>assert_options</function> noch immer verwendet werden kann,
    um das oben beschriebene Verhalten aus Gründen der Abwärtskompatibilität zu
    steuern, sollte Code, der nur für PHP 7 geschrieben wird, die beiden
    neuen Konfigurationsoptionen zur Steuerung von <function>assert</function>
    verwenden, und nicht <function>assert_options</function> aufrufen.
   </para>
   <table>
    <title>
     PHP 7 Konfigurationsdirektiven für <function>assert</function>
    </title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Direktive</entry>
       <entry>Vorgabewert</entry>
       <entry>Mögliche Werte</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <link linkend="ini.zend.assertions">zend.assertions</link>
       </entry>
       <entry><literal>1</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: erzeugt Code und führt ihn aus (Entwicklungsmodus)
         </member>
         <member>
          <!-- TODO: look up the RFC to figure out why you'd want this -->
          <literal>0</literal>: erzeugt Code, aber führt ihn zur Laufzeit nicht aus
         </member>
         <member>
          <literal>-1</literal>: erzeugt keinen Code (Produktionsmodus)
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="ini.assert.exception">assert.exception</link>
       </entry>
       <entry><literal>0</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: löst eine Exception aus, wenn die Zusicherung
          fehlschlägt; entweder das Objekt, das als
          <parameter>exception</parameter> übergeben wurde, oder ein neues
          <classname>AssertError</classname> Objekt, wenn
          <parameter>exception</parameter> nicht angegeben wurde.
         </member>
         <member>
          <literal>0</literal>: verwendet oder erzeugt eine
          <classname>Throwable</classname> Ausnahme wie oben beschrieben, aber
          erzeugt nur eine Warnung, die auf diesem Objekt basiert, anstatt eine
          Exception auszulösen (kompatibel zum Verhalten unter PHP 5).
         </member>
        </simplelist>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </refsect2>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       Die Zusicherung. In PHP 5 muss dies entweder ein auszuwertender
       <type>string</type> sein, oder ein zu testender <type>boolean</type>
       Ausdruck. In PHP 7 kann dies ebenso ein beliebiger Ausdruck, der einen
       Wert zurückgibt, sein, der ausgeführt und dessen Ergebnis verwendet
       wird, um anzuzeigen, ob die Zusicherung erfolgreich war oder fehlschlug.
      </para>
      <warning>
       <para>
        Die Verwendung eines <type>string</type> als
        <parameter>assertion</parameter> ist von PHP 7.2 an
        <emphasis>MISSBILLIGT</emphasis>.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       Eine optionale Beschreibung, die in der Fehlermeldung enthalten sein
       wird, wenn die <parameter>assertion</parameter> fehlschlägt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>exception</parameter></term>
     <listitem>
      <para>
       In PHP 7 kann der zweite Parameter ein <classname>Throwable</classname>
       Objekt anstatt eines beschreibenden <type>string</type>s sein, so dass
       dieses Objekt als Exception geworfen wird, wenn die Zusicherung
       fehlschlägt und die <link
       linkend="ini.assert.exception">assert.exception</link>
       Konfigurationsdirektive aktiviert ist.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &false; wenn die Zusicherung nicht erfüllt ist, &true; anderfalls.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Die Verwendung eines <type>string</type> als
        <parameter>assertion</parameter> wurde missbilligt. Dies erzeugt nun
        einen <constant>E_DEPRECATED</constant> Hinweis, wenn sowohl <link
        linkend="ini.assert.active">assert.active</link> als auch <link
        linkend="ini.zend.assertions">zend.assertions</link> auf
        <literal>1</literal> gesetzt sind.
       </entry>
      </row>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <function>assert</function> ist nun ein Sprachkonstrukt und keine
        Funktion mehr. <parameter>assertion</parameter> kann nun ein Ausdruck
        sein. Der zweite Parameter wird nun entweder als
        <parameter>exception</parameter> interpretiert (wenn ein
        <classname>Throwable</classname> Objekt übergeben wird), oder als
        <parameter>description</parameter>, was ab PHP 5.4.8 unterstützt wird.
       </entry>
      </row>
      <row>
       <entry>5.4.8</entry>
       <entry>
        Der <parameter>description</parameter> Parameter wurde hinzugefügt. Die
        <parameter>description</parameter> wird nun ebenfalls zu einer
        Callbackfunktion im <constant>ASSERT_CALLBACK</constant> Modus als
        viertes Argument übergeben.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>Traditionelle Zusicherungen (PHP 5 und 7)</title>
   <para>
    <example>
     <title>Überprüfung mit benutzerdefinierter Funktion</title>
     <programlisting role="php">
<![CDATA[
<?php
// Zusicherungen aktivieren und stumm schalten
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Eine Handlerfunktion erzeugen
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Zusicherung fehlgeschlagen:
        Datei '$file'<br />
        Zeile '$line'<br />
        Code '$code'<br /><hr />";
}

// Den Callback definieren
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Eine fehlschlagende Zusicherung
assert('mysql_query("")');
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Verwendung eines benutzerdefinierten Handlers um eine Beschreibung anzuzeigen</title>
     <programlisting role="php">
<![CDATA[
<?php
// Zusicherungen aktivieren und stumm schalten
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Eine Handlerfunktion erzeugen
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Zusicherung fehlgeschlagen in $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// Den Callback definieren
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Fehlschlagende Zusicherungen
assert('2 < 1');
assert('2 < 1', 'Zwei ist kleiner als Eins');
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
 <![CDATA[
 Zusicherung fehlgeschlagen in test.php:21: 2 < 1
 Zusicherung fehlgeschlagen in test.php:22: 2 < 1: Zwei ist kleiner als Eins
 ]]>
     </screen>
    </example>
   </para>
  </refsect2>
  <refsect2>
   <title>Annahmen (nur PHP 7)</title>
   <example>
    <title>Annahmen ohne benutzerdefinierte Exception</title>
    <programlisting role="php">
<![CDATA[
<?php
assert(true == false);
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     Ist <link linkend="ini.zend.assertions">zend.assertions</link> auf 0 gesetzt,
     gibt das obige Beispiel aus:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     Ist <link linkend="ini.zend.assertions">zend.assertions</link> auf 1
     und <link linkend="ini.assert.exception">assert.exception</link> auf 0 gesetzt,
     gibt das obige Beispiel aus:
    </para>
    <screen>
<![CDATA[
Warning: assert(): assert(true == false) failed in - on line 2
Hi!
]]>
    </screen>
    <para>
     Ist <link linkend="ini.zend.assertions">zend.assertions</link> auf 1
     und <link linkend="ini.assert.exception">assert.exception</link> auf 1 gesetzt,
     gibt das obige Beispiel aus:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: assert(true == false) in -:2
Stack trace:
#0 -(2): assert(false, 'assert(true == ...')
#1 {main}
  thrown in - on line 2
]]>
    </screen>
   </example>
   <example>
    <title>Annahmen mit einer benutzerdefinierten Exception</title>
    <programlisting role="php">
<![CDATA[
<?php
class CustomError extends AssertionError {}

assert(true == false, new CustomError('True ist nicht false!'));
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     Ist <link linkend="ini.zend.assertions">zend.assertions</link> auf 0 gesetzt,
     gibt das obige Beispiel aus:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     Ist <link linkend="ini.zend.assertions">zend.assertions</link> auf 1
     und <link linkend="ini.assert.exception">assert.exception</link> auf 0 gesetzt,
     gibt das obige Beispiel aus:
    </para>
    <screen>
<![CDATA[
Warning: assert(): CustomError: True ist nicht false! in -:4
Stack trace:
#0 {main} failed in - on line 4
Hi!
]]>
    </screen>
    <para>
     Ist <link linkend="ini.zend.assertions">zend.assertions</link> auf 1
     und <link linkend="ini.assert.exception">assert.exception</link> auf 1 gesetzt,
     gibt das obige Beispiel aus:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught CustomError: True ist nicht false! in -:4
Stack trace:
#0 {main}
  thrown in - on line 4
]]>
    </screen>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
