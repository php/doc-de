<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./de/functions/info.xml, last change in rev 1.22 -->
<!-- last change to 'assert' in en/ tree in rev 1.51 -->
  <refentry id="function.assert">
   <refnamediv>
    <refname>assert</refname>
    <refpurpose>
     Prüft ab, ob eine Bedingung oder Abfrage &false; ist
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>assert</methodname>
      <methodparam><type>string|bool</type><parameter>assertion</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>assert</function> überprüft den übergebenen Parameter
     <parameter>assertion</parameter> und führt ein über die Funktion
     <function>assert_options</function> definiertes Ereignis aus,
     falls die in <parameter>assertion</parameter> spezifizierte Bedingung &false;
     ist.
    </para>
    <para>
     Wird der Parameter <parameter>assertion</parameter> als String
     übergeben, so wird der String als PHP-Code interpretiert.  Der
     Vorteil der Übergabe des Parameters
     <parameter>assertion</parameter> als Zeichenkette liegt darin,
     dass die ausgegebene Meldung die über
     <parameter>assertion</parameter> übergebene Zeichenkette enthält.
    </para>
    <para>
     <function>assert</function> sollte nur zum Debuggen des Codes
     und nicht in Produktionsumgebungen verwendet werden werden, 
     beispielsweise zur Überprüfung von Eingaben.
    </para>
    <para>
     Die Optionen für die <function>assert</function> können über die
     Funktion <function>assert_options</function> oder in den
     Einstellungen der .ini-Datei gesetzt werden.
    </para>
    <para>
     Die Funktion <function>assert_options</function> mit der
     ASSERT_CALLBACK Direktive ermöglicht eine Funktion anzugeben, die
     bei fehlender Überprüfung aufgerufen wird.
    </para>
    <para>
     Callback-Funktionen in Zusammenhang mit
     <function>assert</function> sind nützlich, um beispielsweise
     automatisierte Tests durchzuführen, da die Callback-Funktion pber
     die Information verfügt, von welcher Stelle sie aufgerufen wurde.
    </para>
    <para>
     Die Callback-Funktion wird mit drei Parametern aufgerufen. Der
     erste Parameter enthält den Namen des Scripts, in dem
     die Überprüfung statt fand, der zweite Parameter die
     Zeilennummer, und der dritte Paramter enthält die über
     <parameter>assertion</parameter> angegebene Bedingung.
    </para>
    <para>
     <example>
      <title>Überprüfung mit benutzerdefinierter Funktion</title>
      <programlisting role="php">
<![CDATA[
<?php
// Active assert and make it quiet
assert_options (ASSERT_ACTIVE, 1);
assert_options (ASSERT_WARNING, 0);
assert_options (ASSERT_QUIET_EVAL, 1);

// Create a handler function
function my_assert_handler ($file, $line, $code) {
    echo "<hr>Assertion Failed:
        File '$file'<br>
        Line '$line'<br>
        Code '$code'<br><hr>";
}

// Set up the callback
assert_options (ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert ('mysql_query ("")');
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
