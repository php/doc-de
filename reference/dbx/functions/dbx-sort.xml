<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.8 Maintainer: sammywg Status: ready -->

<refentry xml:id="function.dbx-sort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>dbx_sort</refname>
  <refpurpose>
   Sortiert das Ergebnis eines dbx_query mittels einer benutzerdefinierten Sortierfunktion
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>dbx_sort</methodname>
   <methodparam><type>object</type><parameter>result</parameter></methodparam>
   <methodparam><type>string</type><parameter>user_compare_function</parameter></methodparam>
  </methodsynopsis>
  <para>
   Sortiert das Ergebnis eines <function>dbx_query</function>-Aufrufs mit einer
   benutzerdefinierten Sortierfunktion.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>result</parameter></term>
     <listitem>
      <para>
       Ein Resultset, das von <function>dbx_query</function> zurückgegeben
       wurde.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>user_compare_function</parameter></term>
     <listitem>
      <para>
       Die benutzerdefinierte Vergleichsfunktion. Diese muss zwei Argumente
       akzeptieren und einen Integer kleiner, größer oder gleich null
       zurückgeben, wenn das erste Argument entsprechend als kleiner, größer
       oder gleich dem zweiten Argument betrachtet wird.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>dbx_sort</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
function user_re_order($a, $b)
{
    $rv = dbx_compare($a, $b, "parentid", DBX_CMP_DESC);
    if (!$rv) {
        $rv = dbx_compare($a, $b, "id", DBX_CMP_NUMBER);
    }
    return $rv;
}

$link   = dbx_connect(DBX_ODBC, "", "db", "username", "password")
    or die("Fehler beim Verbinden");

$result = dbx_query($link, "SELECT id, parentid, description FROM tbl ORDER BY id");
    // Die Daten in $result sind nun nach id geordnet

dbx_sort($result, "user_re_order");
    // Die Daten in $result sind nun nach parentid (absteigend) geordnet,
    // dann nach id

dbx_close($link);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Es ist immer besser, wenn irgend möglich die <literal>ORDER_BY</literal>
    <literal>SQL</literal>-Klausel statt der Funktion
    <function>dbx_sort</function> zu verwenden.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>dbx_compare</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
