<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./de/functions/dbx.xml, last change in rev 1.1 -->
<!-- last change to 'dbx-query' in en/ tree in rev 1.3 -->
<!-- EN-Revision: 1.1 Maintainer: tom Status: ready -->
<!-- OLD-Revision: 1.28/EN.1.3 -->
  <refentry id="function.dbx-query">
   <refnamediv>
    <refname>dbx_query</refname>
    <refpurpose>
     Sendet eine Abfrage und holt alle Ergebnisse (falls vorhanden)
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>object</type><methodname>dbx_query</methodname>
      <methodparam><type>object</type><parameter>link_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>sql_statement</parameter></methodparam>
      <methodparam choice="opt"><type>long</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>dbx_query</function> gibt bei Erfolg ein Objekt oder
     <literal>1</literal> zurück, oder <literal>0</literal> im
     Fehlerfall. Das Objekt wird nur zurückgegeben, wenn die in
     <parameter>sql_statement</parameter> angegebene Abfrage eine
     Ergebnisliste liefert.
    </simpara>
    <example>
     <title>Wie mit dem gelieferten Wert umgegangen wird</title>
     <programlisting role="php">
<![CDATA[
<?php
$link   = dbx_connect(DBX_ODBC, "", "db", "username", "password")
    or die("Fehler beim Verbinden");

$result = dbx_query($link, 'SELECT id, parentid, description FROM table');

if ( is_object($result) ) {
    // ... tue hier irgendetwas, detaillierte Beispiele siehe unten ...
    // erst die Ausgabe der Feldnamen und Typen
    // dann die Ausgabe einer Tabelle mit den gelieferten Werten
}
else if ( $result == 1 ) {
    echo("Abfrage wurde erfolgreich ausgeführt, jedoch keine Ergebnisse");
}
else {
    exit("Fehler bei Abfrage");
}

dbx_close($link);
?>
]]>
     </programlisting>
    </example>

    <para>
     Der Parameter <parameter>flags</parameter> wird verwendet, um die Menge
     der zu liefernden Informationen zu steuern. Die folgenden Konstanten
     können mit dem Bit-Operator (|) beliebig kombiniert werden:
     <variablelist>
      <varlistentry>
       <term>
        <constant>DBX_RESULT_INDEX</constant>
       </term>
       <listitem>
        <simpara>
         Dieser Flag ist <emphasis>immer</emphasis> gesetzt, d.h. dass
         zurückgegebene Objekt hat eine Eigenschaft <property>data</property>,
         welche aus einem zweidimensionalen, numerisch indizierten Array
         besteht. Zum Beispiel steht in <literal>data[2][3]</literal> die
         <literal>2</literal> für die Reihen- (bzw. Datensatz-) Nummer, und
         <literal>3</literal> steht für die Spalten- (bzw. Feld- Nummer).
         Die erste Reihe und Spalte haben den Index 0.
        </simpara>
        <simpara>
         Ist <constant>DBX_RESULT_ASSOC</constant> ebenfalls angegeben,
         so enthält das zurückgegebene Objekt auch Informationen im
         Zusammenhang mit <constant>DBX_RESULT_INFO</constant>, selbst
         wenn es nicht angegeben wurde.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <constant>DBX_RESULT_INFO</constant>
       </term>
       <listitem>
        <simpara>
         Liefert Informationen über Spalten, wie Feldnamen und Feldtypen.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <constant>DBX_RESULT_ASSOC</constant>
       </term>
       <listitem>
        <simpara>
         Dies bewirkt, dass in der <property>data</property> Eigenschaft
         des zurückgegebenen Objektes auf die Werte eines Feldes mit den
         entsprechenden Spaltennamen als Schlüssel zugegriffen werden kann.
        </simpara>
        <simpara>
         Assoziierte Ergebnisse sind eigentlich Referenzen zu den numerisch
         indizierten Daten, weshalb eine Änderung von
         <literal>data[0][0]</literal> auch den Inhalt von
         <literal>data[0]['feldname_für_erste_spalte']</literal> betrifft.
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
     Beachten Sie, dass <constant>DBX_RESULT_INDEX</constant> unabhängig von
     dem aktuell verwendeten Wert des Parameters <parameter>flags</parameter>
     immer verwendet wird. Das heißt, dass es effektiv nur die folgenden
     Kombinationen gibt:
     <itemizedlist>
      <listitem>
       <simpara>
        <constant>DBX_RESULT_INDEX</constant>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <constant>DBX_RESULT_INDEX</constant> |
        <constant>DBX_RESULT_INFO</constant>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <constant>DBX_RESULT_INDEX</constant> |
        <constant>DBX_RESULT_INFO</constant> |
        <constant>DBX_RESULT_ASSOC</constant> - dies ist Standard, wenn 
        <parameter>flags</parameter> nicht angegeben ist.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Das zurückgegebene Objekt hat abhängig von <parameter>flags</parameter>
     vier oder fünf Eigenschaften:
     <variablelist>
      <varlistentry>
       <term>
        <property>handle</property>
       </term>
       <listitem>
        <para>
         Das ein gültiges Handle für die verbundene Datenbank, und als solche
         kann es (wenn nötig) auch in modulspezifischen Funktionen verwendet
         werden.
         <informalexample role="php">
          <programlisting>
<![CDATA[
$result = dbx_query ($link, "SELECT id FROM table");
mysql_field_len ($result->handle, 0);
]]>
          </programlisting>
         </informalexample>
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <property>cols</property> und <property>rows</property>
       </term>
       <listitem>
        <para>
         Diese enthalten die Anzahl der Spalten (oder Felder) bzw. Reihen
         (oder Datensätze).
         <informalexample>
          <programlisting role="php">
<![CDATA[
$result = dbx_query ($link, 'SELECT id FROM table');
echo $result->rows; // Anzahl der Datensätze
echo $result->cols; // Anzahl der Felder 
]]>
          </programlisting>
         </informalexample>
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <property>info</property> (optional)
       </term>
       <listitem>
        <simpara>
         Dies wird nur zurückgegeben, wenn im Parameter
         <parameter>flags</parameter> entweder
         <constant>DBX_RESULT_INFO</constant> oder
         <constant>DBX_RESULT_ASSOC</constant> spezifiziert sind.
         Es ist ein zweidimensionales Array mit zwei Reihen
         (<literal>name</literal> und <literal>type</literal>),
         welches die Spalteninformationen enthält.
        </simpara>
        <example>
         <title>Auflistung von Name und Typ jedes Feldes</title>
         <programlisting role="php">
<![CDATA[
$result = dbx_query ($link, 'SELECT id FROM table',
                     DBX_RESULT_INDEX | DBX_RESULT_INFO);

for ($i = 0; $i < $result->cols; $i++ ) {
    echo $result->info['name'][$i] . "\n";
    echo $result->info['type'][$i] . "\n";  
}
]]>
         </programlisting>
        </example>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <property>data</property>
       </term>
       <listitem>
        <simpara>
         Diese Eigenschaft enthält die aktuellen Ergebnisdaten, möglicherweise
         auch mit den Spaltennamen assoziiert, was jedoch vom Parameter
         <parameter>flags</parameter> abhängig ist. Wenn 
         <constant>DBX_RESULT_ASSOC</constant> gesetzt ist, können Sie
         <literal>$result->data[2]["feldname"]</literal> verwenden.
        </simpara>
        <example>
         <title>Ausgabe des Inhaltes der data Eigenschaft in eine HTML Tabelle</title>
         <programlisting role="php">
<![CDATA[
$result = dbx_query ($link, 'SELECT id, parentid, description FROM table');

echo "<table>\n";
foreach ( $result->data as $row ) {
    echo "<tr>\n";
    foreach ( $row as $field ) {
        echo "<td>$field</td>";
    }
    echo "</tr>\n";
}
echo "</table>\n";
]]>
         </programlisting>
        </example>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <note>
     <para>
      Konsultieren Sie bitte auch die modulspezifische Dokumentation.
     </para>
    </note>
    <para>
     Siehe auch <function>dbx_connect</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
