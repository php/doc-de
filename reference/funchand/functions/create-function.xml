<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: nobody Status: ready -->
  <refentry xml:id="function.create-function" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>create_function</refname>
    <refpurpose>
     Erzeugen einer anonymen / temporären (Lambda-Stil) Funktion
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
     <methodsynopsis>
      <type>string</type><methodname>create_function</methodname>
      <methodparam><type>string</type><parameter>args</parameter></methodparam>
      <methodparam><type>string</type><parameter>code</parameter></methodparam>
     </methodsynopsis>
    <para>
     Erzeugt eine anonyme Funktion an Hand der übergebenen Parameter und
     gibt einen eindeutigen Namen für diese zurück. Normalerweise sind
     die <parameter>args</parameter> als mit "'" begrenzte Strings zu
     übergeben. Dies gilt auch für <parameter>code</parameter>. Dadurch
     werden die Variablen vor dem Parsen geschützt. Falls sie """
     verwenden, müssen sie die Variablen-Namen "escapen", wie z.B. 
     <literal>\$avar</literal>.
    </para>
    <para>
     Dieser Befehl kann z.B. verwendet werden, um eine Funktion an Hand
     von Informationen zu erzeugen, die erst zur Laufzeit vorliegen.
     <example>
      <title>
       Erzeugen einer anonymen / temporären Funktion per
       <function>create_function</function>:
      </title>
      <programlisting role="php">
$newfunc = create_function('$a,$b','return "ln($a) + ln($b) = ".log($a * $b);');
echo "Neue Temp-Funktion: $newfunc\n";
echo $newfunc(2,M_E)."\n";
// Ausgabe:
// Neue Temp-Funktion: lambda_1
// ln(2) + ln(2.718281828459) = 1.6931471805599
      </programlisting>
     </example>
     Sie können auch eine allgemeine Handhabungs-Funktion erstellen, die
     einen mehr oder weniger große Anzahl an Operationen mit einer Liste
     von Parametern durchführt.
     <example>
      <title>
       Beispiel zum o.a. Verwendungszweck:
      </title>
      <programlisting role="php">
function process($var1, $var2, $farr) {
    for ($f=0; $f &lt; count($farr); $f++)
        echo $farr[$f]($var1,$var2)."\n";
}

// Erzeugung eines Bündels an mathematischen Funktionen
$f1 = 'if ($a &gt;=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}';
$f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);";
$f3 = 'if ($a &gt; 0 &amp;&amp; $b != 0) {return "ln(a)/b = ".log($a)/$b;} else {return false;}';
$farr = array(
    create_function('$x,$y', 'return "als trig: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "als Hypotenuse: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', $f1),
    create_function('$a,$b', $f2),
    create_function('$a,$b', $f3)
    );

echo "\nGebrauch des ersten Arrays der anonymen Funktionen\n";
echo "Parameter: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// Erzeugung eines Bündels an String-Behandlungs-Routinen
$garr = array(
    create_function('$b, $a','if (strncmp ($a, $b, 3) == 0) return "** \"$a\" '.
        'und \"$b\"\n** Sieht für mich gleich aus! (ansehen der ersten 3 Zeichen)";'),
    create_function('$a, $b','; return "CRCs: ".crc32($a)." , ".crc32(b);'),
    create_function('$a, $b','; return "ähnlich(a, b) = ".similar_text($a, $b, &amp;$p)."($p%)";')
    );
echo "\nGebrauch des zweiten Arrays der anonymen Funktionen\n";
process("Twas brilling and the slithy toves", "Twas the night", $garr);
      </programlisting>
     </example>
     wenn sie nun den o.a Code ausführen lassen, wird folgendes
     ausgegeben :
     <informalexample>
      <programlisting>
Gebrauch des ersten Arrays der anonymen Funktionen
Parameter: 2.3445, M_PI
als trig: -1.6291725057799
als Hypotenuse: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a/b) = 0.27122299212594

Gebrauch des zweiten Arrays der anonymen Funktionen
** "Twas the night" und "Twas brilling and the slithy toves"
** Sieht für mich gleich aus! (ansehen der ersten 3 Zeichen)
CRCs: -725381282 , 1908338681
ähnlich(a,b) = 11(45.833333333333%)
      </programlisting>
     </informalexample>
     Möglicherweise liegt der häufigste Anwendungsfall für Funktionen im
     Lambda-Stil (anonym) bei den Callback-Funktionen, also z.B. beim
     Gebrauch von <function>array_walk</function> oder
     <function>usort</function>.
     <example>
      <title>
       Gebrauch der anonymen Funktionen als Callback-Funktion:
      </title>
      <programlisting role="php">
$av = array("der ","ein ","dieser ","jener ");
array_walk($av, create_function('&amp;$v,$k','$v = $v."Zug";'));
print_r($av);  // mit PHP3 benutzen sie bitte var_dump()
// Ausgaben:
// Array
// (
//     [0] =&gt; der Zug
//     [1] =&gt; ein Zug
//     [2] =&gt; dieser Zug
//     [3] =&gt; jener Zug
// )

// Ein Array aus Strings nach Länge geordnet
$sv = array("kurz","länger","noch länger","dieser ist am längsten");
print_r($sv);
// Ausgaben:
// Array
// (
//     [0] =&gt; kurz
//     [1] =&gt; länger
//     [2] =&gt; noch länger
//     [3] =&gt; dieser ist am längsten
// )

// Sortierung von lang nach kurz
usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);
// Ausgabe:
// Array
// (
//     [0] =&gt; dieser ist am längsten
//     [1] =&gt; noch länger
//     [2] =&gt; länger
//     [3] =&gt; kurz
// )
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
