<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334626 Maintainer: hholzgra Status: ready -->
<refentry xml:id="function.func-get-arg" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>func_get_arg</refname>
  <refpurpose>Liefert ein bestimmtes Funktionsargument</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>func_get_arg</methodname>
   <methodparam><type>int</type><parameter>arg_num</parameter></methodparam>
  </methodsynopsis>
  <para>
   Liefert das mit <parameter>arg_num</parameter> angegebene Argument
   aus der Liste der Argumente einer benutzerdefinierten Funktion.
  </para>
  <para>
   Diese Funktion kann zusammen mit <function>func_get_args</function>
   und <function>func_num_args</function> genutzt werden um benutzerdefinierte
   Funktionen mit einer variablen Anzahl von Argumenten zu implementieren.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arg_num</parameter></term>
     <listitem>
      <para>
       Der Offset des Arguments. Funktionsargumente werden mit 0 beginnend
       gezählt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Liefert das gewünschte Argument oder &false; bei Fehlern.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Diese Funktion kann nun auch in Parameterlisten genutzt werden. 
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Wird diese Funktion aus dem äußersten Geltungsbereich einer Datei
        aufgerufen, die durch den Aufruf von <function>include</function> oder
        <function>require</function> innerhalb einer Funktion in der aufrufenden
        Datei inkludiert wurde, wird nun eine Warnung generiert und &false;
        zurückgegeben.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Die Funktion generiert eine Warnung wenn sie außerhalb einer
   benutzerdefinierten Funktion aufgerufen wird oder wenn 
   <parameter>arg_num</parameter> größer ist als die Anzahl der
   tatsächlich übergebenen Argumente.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>func_get_arg</function> Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
     $numargs = func_num_args();
     echo "Anzahl der Funktionsargumente: $numargs<br />\n";
     if ($numargs >= 2) {
         echo "Das zweite Argument ist: " . func_get_arg(1) . "<br />\n";
     }
}

foo (1, 2, 3);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>func_get_arg</function> Beispiel vor and nach PHP 5.3</title>
    <programlisting role="php">
<![CDATA[
test.php
<?php
function foo() {
    include './fga.inc';
}

foo('Erstes Argument', 'Zweites Argument');
?>

fga.inc
<?php

$arg = func_get_arg(1);
var_export($arg);

?>
]]>
    </programlisting>
    <para>
     Ausgabe vor PHP 5.3:
    </para>
    <screen>
<![CDATA[
'Zweites Argument'
]]>
    </screen>
    <para>
     Ausgabe in PHP 5.3 und neuer:
    </para>
    <screen>
<![CDATA[
Warning: func_get_arg():  Called from the global scope - no function
context in /home/torben/Desktop/code/ml/fga.inc on line 3
false
]]>
    </screen>
   </example>
  </para>

  <para>
   <example>
    <title><function>func_get_arg</function> Beispiel zu byref und byval Argumenten</title>
    <programlisting role="php">
<![CDATA[
<?php
function byVal($arg) {
    echo 'Wie übergeben : ', var_export(func_get_arg(0)), PHP_EOL;
    $arg = 'baz';
    echo 'Nach Änderung : ', var_export(func_get_arg(0)), PHP_EOL;
}

function byRef(&$arg) {
    echo 'Wie übergeben : ', var_export(func_get_arg(0)), PHP_EOL;
    $arg = 'baz';
    echo 'Nach Änderung : ', var_export(func_get_arg(0)), PHP_EOL;
}

$arg = 'bar';
byVal($arg);
byRef($arg);
?>
]]>
    </programlisting>
     &example.outputs;
    <screen>
Wie übergeben : 'bar'
Nach Änderung : 'bar'
Wie übergeben : 'bar'
Nach Änderung : 'baz'
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.funcnoparam;
  &note.funcbyref;
  <note>
   <simpara>
    Diese Funktion liefert eine Kopie des übergebenen Arguments.
    Sie hat nur Zugriff auf tatsächlich übergebene Argumente, 
    Vorgabewerte von Parametern sind für sie nicht sichtbar. 
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="functions.variable-arg-list.new"><literal>...</literal> syntax in PHP 5.6+</link></member>
    <member><function>func_get_args</function></member>
    <member><function>func_num_args</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
