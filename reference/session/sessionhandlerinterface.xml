<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9eb4a46bba05da229be4c8f7a3cb64702e1a2f95 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<phpdoc:classref xml:id="class.sessionhandlerinterface" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Die Schnittstelle SessionHandlerInterface</title>
 <titleabbrev>SessionHandlerInterface</titleabbrev>

 <partintro>

<!-- {{{ SessionHandlerInterface intro -->
  <section xml:id="sessionhandlerinterface.intro">
   &reftitle.intro;
   <para>
    <classname>SessionHandlerInterface</classname> ist eine Schnittstelle, die
    den minimalen Prototyp für die Erstellung einer benutzerdefinierten
    Sessionverwaltung definiert. Um eine benutzerdefinierte Sessionverwaltung
    an <function>session_set_save_handler</function> zu übergeben, die ihren
    <abbrev>OOP</abbrev>-Aufruf verwendet, kann die Klasse diese Schnittstelle
    implementieren.
   </para>
   <para>
    Es ist zu beachten, dass die Callback-Methoden dieser Klasse dazu gedacht
    sind, intern von PHP aufgerufen zu werden und nicht aus dem
    Anwenderprogramm aufgerufen werden sollen.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="sessionhandlerinterface.synopsis">
   &reftitle.interfacesynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="interface">
    <oointerface>
     <interfacename>SessionHandlerInterface</interfacename>
    </oointerface>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.sessionhandlerinterface')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='SessionHandlerInterface'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="sessionhandlerinterface.examples">
   <example>
    <title>
     Ein Beispiel mit <classname>SessionHandlerInterface</classname>
    </title>
    <para>
     Das folgende Beispiel bietet eine dateibasierte Session-Speicherung
     ähnlich dem standardmäßigen PHP-Session-Speicherverwalter
     (PHP Session Standard Save Handler) <parameter>files</parameter>. Dieses
     Beispiel kann leicht erweitert werden, um die Speicherung in einer
     Datenbank mit der bevorzugten von PHP unterstützten Datenbank-Engine zu
     ermöglichen.
    </para>
    <para>
     Zu beachten ist, dass wir den OOP-Prototyp zusammen mit
     <function>session_set_save_handler</function> verwenden und die
     Shutdown-Funktion mit dem Parameter flag der Funktion registrieren. Dies
     wird im Allgemeinen empfohlen, wenn Objekte als Session-Speicherverwalter
     registriert werden.
    </para>
    <caution>
     <para>
      Der Kürze halber wird in diesem Beispiel auf eine Überprüfung der
      Eingaben verzichtet. Allerdings handelt es sich bei den
      <literal>$id</literal>-Parametern um vom Benutzer gelieferte Werte, die
      unbedingt überprüft und bereinigt werden müssen, um Schwachstellen,
      &zb; Path-Traversal-Probleme, zu vermeiden. <emphasis>Dieses Beispiel
      sollte daher nicht unverändert in Produktivumgebungen verwendet
      werden.</emphasis>
     </para>
    </caution>
    <programlisting role="php">
<![CDATA[
<?php
class MySessionHandler implements SessionHandlerInterface
{
    private $savePath;

    public function open($savePath, $sessionName): bool
    {
        $this->savePath = $savePath;
        if (!is_dir($this->savePath)) {
            mkdir($this->savePath, 0777);
        }

        return true;
    }

    public function close(): bool
    {
        return true;
    }

    #[\ReturnTypeWillChange]
    public function read($id)
    {
        return (string)@file_get_contents("$this->savePath/sess_$id");
    }

    public function write($id, $data): bool
    {
        return file_put_contents("$this->savePath/sess_$id", $data) === false ? false : true;
    }

    public function destroy($id): bool
    {
        $file = "$this->savePath/sess_$id";
        if (file_exists($file)) {
            unlink($file);
        }

        return true;
    }

    #[\ReturnTypeWillChange]
    public function gc($maxlifetime)
    {
        foreach (glob("$this->savePath/sess_*") as $file) {
            if (filemtime($file) + $maxlifetime < time() && file_exists($file)) {
                unlink($file);
            }
        }

        return true;
    }
}

$handler = new MySessionHandler();
session_set_save_handler($handler, true);
session_start();

// Fortfahren mit dem Setzen und Abrufen von Werten anhand der
// Schlüssel von $_SESSION
]]>
    </programlisting>
   </example>
  </section>

 </partintro>

 &reference.session.entities.sessionhandlerinterface;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
