<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 344795 Maintainer: samesch Status: ready -->

<refentry xml:id="function.session-set-save-handler" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>session_set_save_handler</refname>
  <refpurpose>Setzt benutzerdefinierte Session-Speicherfunktionen</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_set_save_handler</methodname>
   <methodparam><type>callable</type><parameter>open</parameter></methodparam>
   <methodparam><type>callable</type><parameter>close</parameter></methodparam>
   <methodparam><type>callable</type><parameter>read</parameter></methodparam>
   <methodparam><type>callable</type><parameter>write</parameter></methodparam>
   <methodparam><type>callable</type><parameter>destroy</parameter></methodparam>
   <methodparam><type>callable</type><parameter>gc</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>create_sid</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>validate_sid</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>update_timestamp</parameter></methodparam>
  </methodsynopsis>
  <para>
   Seit PHP 5.4 ist es möglich folgenden Prototypen zu registrieren:
  </para>
  <methodsynopsis>
   <type>bool</type><methodname>session_set_save_handler</methodname>
   <methodparam><type>object</type><parameter>sessionhandler</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>register_shutdown</parameter><initializer>&true;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>session_set_save_handler</function> setzt die benutzerdefinierten
   Session-Speicherfunktionen, die zur Speicherung und Wiederherstellung von
   zur Session gehörigen Daten verwendet werden. Dies ist äußerst nützlich,
   wenn eine andere als die mit PHP-Sessions zur Verfügung stehende Art der
   Speicherung, z.B. die Speicherung der Session-Daten in einer lokalen
   Datenbank, bevorzugt wird.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   Diese Funktion hat zwei Prototypen.
   <variablelist>
    <varlistentry>
     <term><parameter>sessionhandler</parameter></term>
     <listitem>
      <para>
       Ein Exemplar einer Klasse, die <interfacename>SessionHandlerInterface</interfacename>,
       <interfacename>SessionIdInterface</interfacename> und/oder
       <interfacename>SessionUpdateTimestampHandlerInterface</interfacename>
       implementiert, wie beispielsweise <classname>SessionHandler</classname>, das als
       benutzerdefinierte Session-Speicherfunktion registriert werden soll.
       Erst seit PHP 5.4.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>register_shutdown</parameter></term>
     <listitem>
      <para>
       Registriert <function>session_write_close</function> als eine
       <function>register_shutdown_function</function> Funktion.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   oder

   <variablelist>
    <varlistentry>
     <term><parameter>open(string $savePath, string $sessionName)</parameter></term>
     <listitem>
      <para>
       Der open Callback funktionert wie ein Konstruktor in einer Klasse und
       wird ausgeführt, wenn die Session geöffnet wird.  Es ist die erste
       Callback-Funktion, die ausgeführt wird, wenn die Session automatisch oder
       manuell durch <function>session_start</function> gestartet wird. Der
       Rückgabewert ist &true; im Erfolgs-, und &false; im Fehlerfall.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>close()</parameter></term>
     <listitem>
      <para>
       Der close Callback funktionert wie ein Destruktor in einer Klasse
       und wird ausgeführt nachdem der Session write Callback aufgerufen wurde.
       Sie wird ebenfalls aufgerufen, wenn
       <function>session_write_close</function> aufgerufen wurde. Der
       Rückgabewert sollte &true; im Erfolgs- und &false; im Fehlerfall sein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read(string $sessionId)</parameter></term>
     <listitem>
      <para>
       Die <parameter>read</parameter> Callback muss immer eine sitzungskodierte
       (serialisierte) Zeichenkette zurückgeben, oder eine leere Zeichenkette,
       falls keine Daten zu lesen sind.
      </para>       
      <para>
       Dieser Callback wird intern von PHP aufgerufen, wenn die Session
       startet, oder wenn <function>session_start</function> aufgerufen wird.
       Noch bevor dieser Callback aufgerufen wird, wird PHP den
       <parameter>open</parameter> Callback ausführen.
      </para>
      <para>
       Der Wert, den dieser Callback zurückgibt, muss in genau demselben
       serialisierten Format vorliegen, das ursprünglich für die Speicherung an
       den <parameter>write</parameter> Callback übergeben wurde. Der
       zurückgegebene Wert wird von PHP automatisch deserialisiert, und
       verwendet, um die superglobale <varname>$_SESSION</varname> Variable zu initialisieren.
       Obgleich die Daten ähnlich wie bei <function>serialize</function>
       aussehen, ist zu beachten, dass es sich um ein unterschiedliches Format
       handelt, das in der Dokumentation zur <link
       linkend="ini.session.serialize-handler">session.serialize_handler</link>
       ini Einstellung beschrieben wird.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>write(string $sessionId, string $data)</parameter></term>
     <listitem>
      <para>
       Der <parameter>write</parameter> Callback wird aufgerufen, wenn die
       Session gespeichert und geschlossen werden muss. Dieser Callback nimmt
       die aktuelle Sessionkennung und eine serialisierte Version der
       superglobalen <varname>$_SESSION</varname> Variablen entgegen. Die intern von PHP verwendete
       Serialisierungsmethode wird in der Dokumentation zur  <link
       linkend="ini.session.serialize-handler">session.serialize_handler</link>
       ini Einstellung beschrieben.
      </para>
      <para>
       Die serialisierten Sessiondaten, die an diesen Callback übergeben werden,
       sollten als zu der übergebenen Sessionkennung zugehörig gespeichert
       werden. Werden diese Daten wieder gelesen, dann muss der
       <parameter>read</parameter> Callback den genauen Wert liefern, der
       ursprünglich an den <parameter>write</parameter> Callback übergeben
       wurde.
      </para>
      <para>
       Dieser Callback wird aufgerufen, wenn PHP herunterfährt, oder explizit,
       wenn <function>session_write_close</function> aufgerufen wird. Es ist zu
       beachten, dass PHP intern nach Ausführung dieser Funktion den
       <parameter>close</parameter> Callback ausführen wird.
       <note>
        <para>
         Die schreiben-Routine wird nicht ausgeführt, bevor die Ausgabe
         abgeschlossen ist. Deshalb werden auch niemals Fehlermeldungen der
         schreiben-Routine im Browser erscheinen. Wenn die Ausgabe von
         Fehlermeldungen nötig ist, sollte diese stattdessen in eine Datei
         geschrieben werden.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>destroy($sessionId)</parameter></term>
     <listitem>
      <para>
       Dieser Callback wird ausgeführt, wenn eine Session duch
       <function>session_destroy</function> oder
       <function>session_regenerate_id</function>, mit dem $destroy Parameter
       auf &true; gesetzt, zerstört wird.   
       Der Rückgabewert sollte &true; im Erfolgs und &false; im Fehlerfall sein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>gc($lifetime)</parameter></term>
     <listitem>
      <para>
       Der Garbage Collection Callback wird von PHP intern aufgerufen, um alte
       Sessiondaten zu löschen. Die Häufigkeit wird durch <link
       linkend="ini.session.gc-probability">session.gc_probability</link>
       und <link linkend="ini.session.gc-divisor">session.gc_divisor</link>
       gesteuert. Der Wert der Lebensdauer, die diesem Callback übergeben wird,
       kann mit <link
       linkend="ini.session.gc-maxlifetime">session.gc_maxlifetime</link>
       festgelegt werden. Der Rückgabewert sollte &true; im Erfolgs- und &false;
       im Fehlerfall sein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>create_sid()</parameter></term>
     <listitem>
      <para>
       Dieser Callback wird ausgeführt, wenn eine neue Session-ID benötigt wird.
       Es werden keine Parameter übergeben, und der Rückgabewert sollte eine
       Zeichenkette sein, die eine gültige Session-ID für den Handler darstellt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Benutzerdefierter Session-Handler; der vollständige Code ist bei <classname>SessionHandlerInterface</classname> aufgeführt
    </title>
    <para>
     Der folgende Code ist für PHP-Version 5.4.0 und höher. Hier wird nur der
     Aufruf gezeigt; der vollständige Beispielcode ist in der Dokumentation von
     <classname>SessionHandlerInterface</classname> zu finden.
    </para>
    <para>
     Es ist zu beachten, dass der OOP-Prototyp mit <function>session_set_save_handler</function>
     verwendet wird, und dass die Shutdown-Funktion unter Verwendung des Parameters
     flag der Funktion registriert wird. Dies wird grundsätzlich empfohlen, wenn
     Objekte als Session-Save-Handler registriert werden.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class MySessionHandler implements SessionHandlerInterface
{
    // hier wird das Interface implementiert
}

$handler = new MySessionHandler();
session_set_save_handler($handler, true);
session_start();

// fahre fort und setze und hole Werte per Schlüssel von $_SESSION
]]>
    </programlisting>
   </example>
   <example>
    <title>Benutzerdefinierter Session-Save-Handler, der Objekte verwendet</title>
    <para>
     Der folgende Code ist für PHP-Versionen kleiner als 5.4.0.
    </para>
    <para>
     Das folgende Beispiel liefert eine dateibasierte Session-Speicherung, die
     der Standard-Speicherroutine <parameter>files</parameter> der
     PHP-Sessions ähnlich ist. Dieses Beispiel kann problemlos erweitert
     werden, dass es Datenbank-Speicherung mittels ihrer bevorzugten
     PHP-gestützten Datenbank beinhaltet.
    </para>
    <para>
     Es ist zu beachten, dass zusätzlich die Shutdown-Funktion
     <function>session_write_close</function> unter Verwendung von
     <function>register_shutdown_function</function> unter PHP kleiner 5.4.0
     registriert wird. Dies wird grundsätzlich empfohlen, wenn Objekte als
     Session-Save-Handler unter PHP kleiner 5.4.0 registriert werden.
    </para>
    <programlisting role="php">
<![CDATA[
class FileSessionHandler
{
    private $savePath;

    function open($savePath, $sessionName)
    {
        $this->savePath = $savePath;
        if (!is_dir($this->savePath)) {
            mkdir($this->savePath, 0777);
        }

        return true;
    }

    function close()
    {
        return true;
    }

    function read($id)
    {
        return (string)@file_get_contents("$this->savePath/sess_$id");
    }

    function write($id, $data)
    {
        return file_put_contents("$this->savePath/sess_$id", $data) === false ? false : true;
    }

    function destroy($id)
    {
        $file = "$this->savePath/sess_$id";
        if (file_exists($file)) {
            unlink($file);
        }

        return true;
    }

    function gc($maxlifetime)
    {
        foreach (glob("$this->savePath/sess_*") as $file) {
            if (filemtime($file) + $maxlifetime < time() && file_exists($file)) {
                unlink($file);
            }
        }

        return true;
    }
}

$handler = new FileSessionHandler();
session_set_save_handler(
    array($handler, 'open'),
    array($handler, 'close'),
    array($handler, 'read'),
    array($handler, 'write'),
    array($handler, 'destroy'),
    array($handler, 'gc')
    );

// das folgende verhindert unerwartete Effekte, wenn Objekte als Save-Handler verwendet werden
register_shutdown_function('session_write_close');

session_start();
// fahre fort Werte per Schlüssel in $_SESSION zu setzen und zu holen
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Werden Objekte als Session-Save-Handler verwendet, ist es wichtig die
    Shutdown-Funktion mit PHP zu registrieren, um unerwartete Nebenwirkungen in
    Verbindung mit der Art wie PHP intern Objekte beim Herunterfahren zerstört
    zu verhindern, was dazu führen kann, dass <parameter>write</parameter> und
    <parameter>close</parameter> nicht aufgerufen werden. Üblicherweise sollte
    <parameter>'session_write_close'</parameter> unter Verwendung von
    <function>register_shutdown_function</function> registriert werden.
   </para>
   <para>
    Von PHP 5.4.0 an kann <function>session_register_shutdown</function> verwendet
    werden, oder einfach das 'register shutdown' Flag gesetzt werden, wenn
    <function>session_set_save_handler</function> unter Verwendung der OOP-Methode
    und der Übergabe eines Exemplars, das <classname>SessionHandlerInterface</classname>
    implementiert, aufgerufen wird.
   </para>
  </warning>
  <warning>
   <para>
    Ab PHP 5.0.5 werden die Routinen <parameter>write</parameter> und
    <parameter>close</parameter> nach dem Zerstören von Objekten
    aufgerufen und können deshalb keine Objekte verwenden oder Exceptions
    (Fehler-, Ausnahmesituationen) auslösen. Exceptions können nicht abgefangen
    werden, und es wird auch kein Exception-Trace angezeigt; die Ausführung wird
    einfach unerwartet abgebrochen. Objekt-Destruktoren können
    aber Sessions verwenden.
   </para>
   <para>
    Es ist möglich, <function>session_write_close</function> über den
    Destruktor aufzurufen, um dieses Henne-Ei Problem zu lösen, aber der verlässlichste
    Weg ist das Registrieren einer Shutdown-Funktion wie oben beschrieben.
   </para>
  </warning>
  <warning>
   <para>
    Bei manchen SAPIs ändert sich das aktuelle Arbeitsverzeichnis, falls die
    Session durch die Beendigung des Skripts geschlossen wird. Mittels
    <function>session_write_close</function> ist es möglich, die Session schon
    früher zu schließen.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Die optionalen Parameter <parameter>validate_sid</parameter> und
       <parameter>update_timestamp</parameter> wurden hinzugefügt.
      </entry>
     </row>
     <row>
      <entry>5.5.1</entry>
      <entry>
       Der optionale Parameter <parameter>create_sid</parameter> wurde hinzugefügt.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       <interfacename>SessionHandlerInterface</interfacename> zum Implementieren
       von Session-Handlern und
       <classname>SessionHandler</classname>, um interne PHP Session-Handler
       bereitzustellen, hinzugefügt.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     Die <link linkend="ini.session.save-handler">session.save_handler</link>
     Konfigurationsanweisung
    </member>
    <member>
     Die <link linkend="ini.session.serialize-handler">session.serialize_handler</link>
     Konfigurationsdirektive
    </member>
    <member><function>register_shutdown_function</function></member>
    <member><function>session_register_shutdown</function> (von PHP 5.4.0 an)</member>
    <member>
     Eine vollständige prozedurale Referenzimplementierung kann
     <link xlink:href="&url.session-save-handler;">save_handler.inc</link>
     entnommen werden
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
