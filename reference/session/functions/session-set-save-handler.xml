<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.20 $ -->
<!-- EN-Revision: 1.22 Maintainer: samesch Status: ready -->
<refentry xml:id="function.session-set-save-handler" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>session_set_save_handler</refname>
  <refpurpose>Setzt benutzerdefinierte Session-Speicherfunktionen</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_set_save_handler</methodname>
   <methodparam><type>callback</type><parameter>öffnen</parameter></methodparam>
   <methodparam><type>callback</type><parameter>schließen</parameter></methodparam>
   <methodparam><type>callback</type><parameter>lesen</parameter></methodparam>
   <methodparam><type>callback</type><parameter>schreiben</parameter></methodparam>
   <methodparam><type>callback</type><parameter>löschen</parameter></methodparam>
   <methodparam><type>callback</type><parameter>gc</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>session_set_save_handler</function> setzt die benutzerdefinierten
   Session-Speicherfunktionen, die zur Speicherung und Wiederherstellung von
   zur Session gehörigen Daten verwendet werden. Dies ist äußerst nützlich,
   wenn eine andere als die mit PHP-Sessions zur Verfügung stehende Art der
   Speicherung, z.B. die Speicherung der Session-Daten in einer lokalen
   Datenbank, bevorzugt wird.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>öffnen</parameter></term>
     <listitem>
      <para>
       Die öffnen-Routine funktionert wie ein Konstruktor in einer Klasse und
       wird ausgeführt, wenn die Session geöffnet wird. Sie erwartet zwei
       Parameter: als Ersten den Speicherpfad und als Zweiten den Namen der
       Session.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>schließen</parameter></term>
     <listitem>
      <para>
       Die schließen-Routine funktionert wie ein Destruktor in einer Klasse
       und wird am Ende der Session ausgeführt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>lesen</parameter></term>
     <listitem>
      <para>
       Damit die Speicherroutine funktioniert wie erwartet, muss die
       lesen-Routine immer eine Zeichenkette zurückgeben. Wenn es keine Daten
       zu lesen gibt, geben Sie eine leere Zeichenkette zurück. Rückgabewerte
       anderer Routinen werden in boolesche Ausdrücke umgewandelt. &true; für
       einen Erfolg, &false; für einen Fehler.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>schreiben</parameter></term>
     <listitem>
      <para>
       <note>
        <para>
         Die schreiben-Routine wird nicht ausgeführt, bevor die Ausgabe
         abgeschlossen ist. Deshalb werden auch niemals Fehlermeldungen der
         schreiben-Routine im Browser erscheinen. Wenn die Ausgabe von
         Fehlermeldungen nötig ist, sollte diese stattdessen in eine Datei
         geschrieben werden.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>löschen</parameter></term>
     <listitem>
      <para>
       Die löschen-Routine wird ausgeführt, wenn eine Session mittels
       <function>session_destroy</function> gelöscht wird. Sie erwartet die
       Session-ID als einzigen Parameter.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>gc</parameter></term>
     <listitem>
      <para>
       Der Speicherbereiniger (garbage collector) wird ausgeführt, wenn der
       Session-Speicherbereiniger ausgeführt wird. Er erwartet die maximale
       Session-Verfallszeit als einzigen Parameter.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>session_set_save_handler</function> Beispiel</title>
    <para>
     Das folgende Beispiel liefert eine dateibasierte Session-Speicherung, die
     der Standard-Speicherroutine <parameter>files</parameter> der
     PHP-Sessions ähnlich ist. Dieses Beispiel kann problemlos erweitert
     werden, dass es Datenbank-Speicherung mittels ihrer bevorzugten
     PHP-gestützten Datenbank beinhaltet.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function oeffne($speicherpfad, $session_name)
{
  global $sess_speicherpfad;

  $sess_speicherpfad = $speicherpfad;
  return(true);
}

function schliesse()
{
  return(true);
}

function lese($id)
{
  global $sess_speicherpfad;

  $sess_datei = "$sess_speicherpfad/sess_$id";
  return (string) @file_get_contents($sess_datei);
}

function schreibe($id, $sess_daten)
{
  global $sess_speicherpfad;

  $sess_datei = "$sess_speicherpfad/sess_$id";
  if ($fp = @fopen($sess_datei, "w")) {
    $return = fwrite($fp, $sess_daten);
    fclose($fp);
    return $return;
  } else {
    return(false);
  }
}

function loesche($id)
{
  global $sess_speicherpfad;

  $sess_datei = "$sess_speicherpfad/sess_$id";
  return(@unlink($sess_datei));
}

function gc($maxlifetime)
{
  global $sess_speicherpfad;

  foreach (glob("$sess_speicherpfad/sess_*") as $dateiname) {
    if (filemtime($dateiname) + $maxlifetime < time()) {
      @unlink($dateiname);
    }
  }
  return true;
}

session_set_save_handler("oeffne", "schliesse", "lese", "schreibe", "loesche", "gc");

session_start();

// verfahren Sie mit Sessions wie gewohnt
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Ab PHP 5.0.5 werden die Routinen <parameter>schreiben</parameter> und
    <parameter>schließen</parameter> nach dem Zerstören von Objekten
    aufgerufen und können deshalb keine Objekte verwenden oder Exceptions
    (Fehler-, Ausnahmesituationen) auslösen. Objekt-Destruktoren können
    aber Sessions verwenden.
   </para>
   <para>
    Es ist möglich, <function>session_write_close</function> über den
    Destruktor aufzurufen, um dieses Henne-Ei Problem zu lösen.
   </para>
  </warning>
  <warning>
   <para>
    Bei manchen SAPIs ändert sich das aktuelle Arbeitsverzeichnis, falls die
    Session durch die Beendigung des Skripts geschlossen wird. Mittels
    <function>session_write_close</function> ist es möglich, die Session schon
    früher zu schließen.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     Die <link linkend="ini.session.save-handler">session.save_handler</link>
     Konfigurationsanweisung
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
