<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- DE-Revision: 323836 Maintainer: anonymous #15620 Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="session.upload-progress" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Session Upload Fortschritt</title>

 <para>
  Wenn die
  <link linkend="ini.session.upload-progress.enabled">session.upload_progress.enabled</link>
  INI Option aktiviert ist, kann PHP den Upload Fortschritt der hochgeladenen Dateien.
  Die von PHP bereitgestellten Daten sind für den eigentlichen Upload Vorgang nicht nutzbar.
  Um den Status des Uploads zu verarbeiten muss die Anwendung eine POST Anfrage an einen 
  separaten Endpunkt (zum Beispiel via <acronym>XHR</acronym>) ausführen.
 </para>
 <para>
  Der Upload Fortschritt steht in der Superglobalen <varname>$_SESSION</varname> zur
  Verfügung wenn der Upload Vorgang stattfindet und wenn ein POST Feld, mit dem in der
  INI Konfiguration 
  <link linkend="ini.session.upload-progress.name">session.upload_progress.name</link>
  hinterlegten Namen, enthalten ist. Wenn PHP eine solche POST Anfrage erkennt wird ein
  Array mit Informationen in der <varname>$_SESSION</varname> hinterlegt. Die Information
  wird mit dem aus den INI Konfigurationen
  <link linkend="ini.session.upload-progress.prefix">session.upload_progress.prefix</link>
  und
  <link linkend="ini.session.upload-progress.name">session.upload_progress.name</link>
  zusammengesetzten Index gespeichert. Der Schlüssel wird dabei typischerweise aus den 
  INI Konfigurationen zusammengesetzt, zum Beispiel:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$key = ini_get("session.upload_progress.prefix") . $_POST[ini_get("session.upload_progress.name")];
var_dump($_SESSION[$key]);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Es ist auch möglich den Upload Vorgang, durch setzen des Session Wertes
  <literal>$_SESSION[$key]["cancel_upload"]</literal> auf &true;,
  <emphasis>abzubrechen</emphasis>. Wenn mehrere Dateien in der gleichen
  Anfrage übertragen werden, wird dabei nur die in der Verarbeitung befindliche Datei und 
  alle ausstehenden Dateien abgebrochen. Schon erfolgreich übertragene Dateien werden nicht
  entfernt. Wenn ein Upload auf diese Weise abgebrochen wird enthält der <literal>error</literal>
  Schlüssel des <varname>$_FILES</varname> Array den Wert
  <constant>UPLOAD_ERR_EXTENSION</constant>.
 </para>
 <para>
  Die INI Konfigurationen
  <link linkend="ini.session.upload-progress.freq">session.upload_progress.freq</link>
  und
  <link linkend="ini.session.upload-progress.min-freq">session.upload_progress.min_freq</link>
  steuern wie häufig die Upload Fortschritts Informationen neu berechnet werden sollen.
  Mit angemessenen Einstellungen, bei diesen zwei Optionen, ist der Aufwand für diese Funktion
  sehr gering.
 </para>
 <para>
  <example>
   <title>Beispiel Informationen</title>
   <para>
    Beispiel für den Formularaufbau des Upload Fortschritts.
   </para>
   <programlisting role="html" xml:id="session.upload-progress.example-form">
<![CDATA[
<form action="upload.php" method="POST" enctype="multipart/form-data">
 <input type="hidden" name="<?php echo ini_get("session.upload_progress.name"); ?>" value="123" />
 <input type="file" name="file1" />
 <input type="file" name="file2" />
 <input type="submit" />
</form>
]]>
   </programlisting>
   <para>
    Die gespeicherten Daten in der Session sehen wie folgt aus:
   </para>
   <programlisting role="php" xml:id="session.upload-progress.example-array">
<![CDATA[
<?php
$_SESSION["upload_progress_123"] = array(
 "start_time" => 1234567890,   // Anfragezeitpunkt
 "content_length" => 57343257, // POST Gesamtdatenmenge (in Bytes)
 "bytes_processed" => 453489,  // Menge der empfangenen und verabreiteten Daten (in Bytes)
 "done" => false,              // true wenn die POST Datenverarbeitung beendet ist (erfolgreich oder nicht)
 "files" => array(
  0 => array(
   "field_name" => "file1",       // Name des <input/> Feldes
   // Die nächsten drei Elemente entsprechen den Angaben in $_FILES
   "name" => "foo.avi",
   "tmp_name" => "/tmp/phpxxxxxx",
   "error" => 0,
   "done" => true,                // true wenn die POST Datenverarbeitung dieser Datei beendet ist
   "start_time" => 1234567890,    // Zeitpunkt wann die Verarbeitung der Datei begonnen hat
   "bytes_processed" => 57343250, // Menge der empfangenen und verabreiteten Daten dieser Datei (in Bytes)
  ),
  // Eine weitere, noch nicht Komplett hochgeladene Datei, der selben Anfrage
  1 => array(
   "field_name" => "file2",
   "name" => "bar.avi",
   "tmp_name" => NULL,
   "error" => 0,
   "done" => false,
   "start_time" => 1234567899,
   "bytes_processed" => 54554,
  ),
 )
);
]]>
   </programlisting>
  </example>
 </para>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
