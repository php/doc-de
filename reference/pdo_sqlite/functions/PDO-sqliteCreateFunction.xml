<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.13 Maintainer: lapistano Status: ready -->
<refentry xml:id="function.pdo-sqlitecreatefunction" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::sqliteCreateFunction</refname>
  <refpurpose>
   Registriert eine 'User Defined Function' zur Nutzung in SQL Anfragen
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>PDO</classname></ooclass>
   <methodsynopsis>
    <type>bool</type><methodname>sqliteCreateFunction</methodname>
    <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
    <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  &warn.experimental.func;

  <para>
   Diese Methode erlaubt es eine PHP-Funktion als eine 'User Defined Function' 
   (<acronym>UDF</acronym>) in SQLite zu registrieren, die dann in einer SQL Anfrage 
   aufgerufen werden kann.
  </para>
  <para>
   Die UDF kann nun in jeder SQl Anfrage genutzt werden, die Funktionen aufrufen kann, 
   wie SELECT und UPDATE und ausch in Triggern.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       Der Name der Function, der in SQL Anfragen genutzt wird.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Die Callback Funktion, die die definierte SQL Funktion verarbeitet.
      </para>
      <note>
       <simpara>
        Die Callback Funktionen sollten einen Typen zurückgeben, der von SQLite 
        verstanden wird, z.B. <link linkend="language.types.intro">Skalar Type</link>.
       </simpara>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>num_args</parameter></term>
     <listitem>
      <para>
       Hinweis für den SQLite-Parser, ob die 'Callback'-Funktion eine 
       bestimmte Anzahl an Parametern erwartet.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>PDO::sqliteCreateFunction</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
function md5_and_reverse($string) 
{
    return strrev(md5($string));
}

$db = new PDO('sqlite:sqlitedb');
$db->sqliteCreateFunction('md5rev', 'md5_and_reverse', 1);
$rows = $db->query('SELECT md5rev(filename) FROM files')->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   In diesem Beispiel beschreiben wir eine Funktion, die die md5-Checksumme einer
   Zeichenkette berechnet und anschließend wird die Checksumme umgekehrt. Aufgerufen
   durch die SQL-Anfrage, gibt es den durch die Funktion geänderten Dateinamen zurück.
   Die Rückgabewerte der Funktion werden in <parameter>$rows</parameter> gespeichert.
  </para>
  <para>
   Das Praktische an dieser Technik ist, dass man das Ergebnis der Abfrage in einer
   &foreach;-Schleife nachbearbeitet werden muss.
  </para>
  <!-- not for PDO it doesn't, at least not yet 
  <para>
   PHP registers a special function named <literal>php</literal> when the
   database is first opened.  The php function can be used to call any PHP
   function without having to register it first.
  </para>
  <para>
   <example>
    <title>Example of using the PHP function</title>
    <programlisting role="php">
<![CDATA[
<?php
$rows = $db->query("SELECT php('md5', filename) from files")->fetchAll();
?>
]]>
    </programlisting>
    <para>
     This example will call the <function>md5</function> on each
     <literal>filename</literal> column in the database and return the result
     into <parameter>$rows</parameter>
    </para>
   </example>
  </para>

  -->
  <tip>
   <para>
    Sie können <xref linkend="function.pdo-sqlitecreatefunction" /> und
    <xref linkend="function.pdo-sqlitecreateaggregate" /> nutzen, um SQLites
    native SQL-Funktionen zu überschreiben.
   </para>
  </tip>
  <note>
   <para>
    Diese Methode ist im SQLite2-Treiber nicht verfügbar.
    Benutzen Sie stattdessen die alte SQLite-API.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="function.pdo-sqlitecreateaggregate" /></member>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_create_aggregate</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
