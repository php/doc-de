<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.12 Maintainer: theseer Status: ready -->
<!-- Purpose: xml -->
<!-- Membership: bundled, external -->

 <reference xml:id="ref.xsl" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>XSL Funktionen</title>
  <titleabbrev>XSL</titleabbrev>

  <partintro>

   <section xml:id="xsl.intro">
    &reftitle.intro;
    <para>
     Die XSL Erweiterung implementiert den XSL-Standard und erlaubt <link 
     xlink:href="&url.xslt;">XSLT Transformationen</link> unter Verwendung der <link 
     xlink:href="&url.libxslt;">libxslt-Bibliothek</link>.
    </para>
   </section>

   <section xml:id="xsl.requirements">
    &reftitle.required;
    <para>
     Um diese Erweiterung verwenden zu können, muß die Bibliothek <productname>libxslt</productname>
     in der Version 1.1.0 oder höher installiert sein. Sie steht unter 
     <link xlink:href="&url.libxslt;">&url.libxslt;</link> zum Download bereit.
    </para>
   </section>

   &reference.xsl.configure;

   <section xml:id='xsl.classes'>
    &reftitle.classes;
    <para>
    </para>

    <section xml:id='xsl.class.xsltprocessor'>
     <title><classname>XSLTProcessor</classname></title>
     <para>
      </para>
     <section xml:id='xsl.class.xsltprocessor.constructor'>
      &reftitle.constructor;
      <itemizedlist>
       <listitem>
        <para><xref linkend='function.xsl-xsltprocessor-construct' /> - Erzeugt ein neues XSLTProcessor-Objekt</para>
       </listitem>
      </itemizedlist>
     </section>
     <section xml:id='xsl.class.xsltprocessor.methods'>
      &reftitle.methods;
      <itemizedlist>
       <listitem>
        <para><xref linkend="function.xsl-xsltprocessor-get-parameter" /> - Liefert den Wert eines Parameters</para>
       </listitem>
       <listitem>
        <para><xref linkend="function.xsl-xsltprocessor-has-exslt-support" /> - Prüft, ob die EXSLT-Unterstützung aktiviert ist</para>
       </listitem>
       <listitem>
        <para><xref linkend="function.xsl-xsltprocessor-import-stylesheet" /> - Importiert ein Stylesheet</para>
       </listitem>
       <listitem>
        <para><xref linkend="function.xsl-xsltprocessor-register-php-functions" /> - Aktiviert die Nutzbarkeit von PHP-Funktionen als XSLT-Funktionen</para>
       </listitem>
       <listitem>
        <para><xref linkend="function.xsl-xsltprocessor-remove-parameter" /> - Löscht einen Parameter</para>
       </listitem>
       <listitem>
        <para><xref linkend="function.xsl-xsltprocessor-set-parameter" /> - Setzt den Wert für einen Parameter</para>
       </listitem>
       <listitem>
        <para><xref linkend="function.xsl-xsltprocessor-transform-to-doc" /> - Transformierung in ein neues DOMDocument</para>
       </listitem>
       <listitem>
        <para><xref linkend="function.xsl-xsltprocessor-transform-to-uri" /> - Transformierung zu einer URI</para>
       </listitem>
       <listitem>
        <para><xref linkend="function.xsl-xsltprocessor-transform-to-xml" /> - Transformierung zu einem XML-String</para>
       </listitem>
      </itemizedlist>
     </section>
    </section>
   </section>
   
   <section xml:id="xsl.examples">
    &reftitle.examples;
    <para>
     Viele Beispiele in dieser Referenz erfordern sowohl eine XML- als auch XSL-Datei.
     Die Dateien <filename>collection.xml</filename> und <filename>collection.xsl</filename>
     bestehen jeweils aus folgendem Inhalt:
    </para>
    <para>
     <example>
      <title>collection.xml</title>
      <programlisting role="xml">
<![CDATA[
<collection>
 <cd>
  <title>Fight for your mind</title>
  <artist>Ben Harper</artist>
  <year>1995</year>
 </cd>
 <cd>
  <title>Electric Ladyland</title>
  <artist>Jimi Hendrix</artist>
  <year>1997</year>
 </cd>
</collection>
]]>
      </programlisting>
     </example>
     <example>
      <title>collection.xsl</title>
      <programlisting role="xml">
<![CDATA[
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <xsl:param name="owner" select="'Nicolas Eliaszewicz'"/>
 <xsl:output method="html" encoding="iso-8859-1" indent="no"/>
 <xsl:template match="collection">
  Hey! Welcome to <xsl:value-of select="$owner"/>'s sweet CD collection! 
  <xsl:apply-templates/>
 </xsl:template>
 <xsl:template match="cd">
  <h1><xsl:value-of select="title"/></h1>
  <h2>by <xsl:value-of select="artist"/> - <xsl:value-of select="year"/></h2>
  <hr />
 </xsl:template>
</xsl:stylesheet>
]]>
      </programlisting>
     </example>
    </para>
   </section>
      
   &reference.xsl.constants;
      
  </partintro>

 &reference.xsl.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
