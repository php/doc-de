<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: sammywg Status: ready -->

<section xml:id="mysqli.installation" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">

 &reftitle.install;

 <para xml:id="mysqli.configure">
  Beginnend mit PHP 5.0 ist die Unterstützung für MySQL in den
  Standarddistributionen nicht mehr automatisch aktiviert. Das bedeutet,
  dass PHP explizit so konfiguriert werden muss, dass es die
  MySQL-Erweiterungen nutzen kann.
 </para>

 <para>
  Die meisten Unixdistributionen enthalten Binärversionen von PHP, die
  installiert werden können. Obwohl diese Binärversionen typischerweise mit
  aktivierter Unterstützung für die MySQL-Erweiterungen gebaut sind, müssen die
  Bibliotheken selbst als zusätzliches Paket installiert werden. Prüfen Sie mit
  dem Paketmanager Ihrer gewählten Distribution, ob entsprechende Pakete
  verfügbar sind.
 </para>

 <para>
  Falls Ihre Unixdistribution kein Binärpaket von PHP mit einer verfügbaren
  <literal>mysqli</literal>-Erweiterung enthält, müssen Sie PHP aus dem
  Sourcecode neu bauen. Dies erlaubt es Ihnen anzugeben, welche
  MySQL-Erweiterungen Sie verwenden wollen, und auch, welche Client-Bibliothek
  Sie für die jeweilige Erweiterung nutzen möchten.
 </para>

 <para>
  Um die <literal>mysqli</literal>-Erweiterung für PHP zu aktivieren, müssen
  Sie den PHP-Sourcecode so konfigurieren, dass er <literal>mysqli</literal>
  verwendet. Dies erreichen Sie, indem Sie das
  <command>configure</command>-Skript mit der Option <option
  role="configure">--with-mysqli=mysql_config_path/mysql_config</option>
  aufrufen, bevor Sie den Build von PHP starten. Dadurch aktivieren Sie
  <literal>mysqli</literal> und verwenden die MySQL-Client-Bibliothek (libmysql),
  um mit dem MySQL-Server zu kommunizieren.
 </para>

 <note>
  <para>
   Der <literal>mysql_config_path</literal> repräsentiert den Ort, an dem die
   <literal>mysql_config</literal> liegt, die mit dem MySQL-Server
   ausgeliefert wird.
  </para>
 </note>

 <para>
  Seit PHP-Version 5.3 können Sie alternativ den neuen MySQL-Native-Treiber
  zusammen mit <literal>mysqli</literal> verwenden. Sie erhalten dadurch eine
  Reihe von Vorteilen gegenüber der Verwendung der libmysql.
 </para>

 <para>
  Um den MySQL-Native-Treiber mit <literal>mysqli</literal> zu verwenden, müssen
  Sie den PHP-Sourcecode mit <option
  role="configure">--with-mysqli=mysqlnd</option> konfigurieren, bevor Sie den
  PHP-Build starten.
 </para>

 <para>
  Dies ist die empfohlene Option, da die Verwendung des MySQL-Native-Treibers
  zu einer verbesserten Performance führt und Zugriff auf Funktionen gewährt,
  die bei der Verwendung der MySQL-Client-Bibliothek nicht zur Verfügung stehen.
  Lesen Sie <link linkend="mysqli.overview.mysqlnd">Was versteht man unter
  dem MySQL-Native-Treiber von PHP?</link>, um einen kurzen Überblick über die
  Vorteile des MySQL-Native-Treibers zu erhalten.
 </para>

 <para>
  Es ist möglich, MySQL-Erweiterungen und Client-Bibliotheken
  frei zu mischen. Zum Beispiel ist es denkbar, dass die MySQL-Erweiterung
  die MySQL-Client-Bibliothek (libmysql) verwendet, während die
  <literal>mysqli</literal>-Erweiterung so konfiguriert ist, dass sie den
  MySQL-Native-Treiber verwendet. Alle Kombinationen von Erweiterungen und
  Client-Bibliotheken sind möglich.
 </para>

 <para>
  Das folgende Beispiel baut die MySQL-Erweiterung unter Verwendung der
  MySQL-Client-Bibliothek und <literal>mysqli</literal>- sowie
  PDO-MYSQL-Erweiterungen, die den MySQL-Native-Treiber verwenden:
 </para>

 <programlisting role="shell">
./configure --with-mysql=/usr/bin/mysql_config  \
--with-mysqli=mysqlnd \
--with-pdo-mysql=mysqlnd
[other options]
 </programlisting>

 <section xml:id="mysqli.installation.windows">

  <title>Installation auf Windows-Systemen</title>

  <para>
   Unter Windows wird PHP in der Regel durch den Binärinstaller installiert.
   Sobald PHP installiert wurde, sind einige Konfigurationseinstellungen
   notwendig, um <literal>mysqli</literal> zu aktivieren und die
   Client-Bibliothek anzugeben, die verwendet werden soll.
  </para>

  <para>
   Wie zuvor erwähnt, ist die <literal>mysqli</literal>-Erweiterung nicht
   standardmäßig aktiviert, daher muss die
   <filename>php_mysqli.dll</filename>-DLL in der &php.ini; aktiviert werden.
   Um dies zu tun, müssen Sie die &php.ini;-Datei finden (typischerweise liegt
   diese unter <filename>c:\php</filename>) und überprüfen, dass das
   Kommentarzeichen (ein Semikolon) vom Anfang der Zeile
   <literal>extension=php_mysqli.dll</literal> in der Sektion
   <literal>[PHP_MYSQLI]</literal> entfernt wurde.
  </para>

  <para>
   Wenn Sie die MySQL-Client-Bibliothek mit <literal>mysqli</literal> verwenden
   wollen, stellen Sie sicher, dass PHP auf die Bibliothek zugreifen kann. Die
   MySQL-Client-Bibliothek ist in einer Datei namens
   <filename>libmysql.dll</filename> der PHP-Windowsdistribution enthalten. Um
   sie erfolgreich laden zu können, muss sie innerhalb des Pfades liegen, der
   von der Windows-Umgebungsvariablen <envar>PATH</envar> bestimmt wird. Lesen
   Sie dazu auch den FAQ-Eintrag "<link
   linkend="faq.installation.addtopath">Wie füge ich mein PHP-Verzeichnis der
   PATH-Variablen unter Windows hinzu?</link>", um mehr Informationen darüber zu
   erhalten. Das Kopieren <filename>libmysql.dll</filename> in das
   Windows-Systemverzeichnis (typischerweise
   <filename>c:\Windows\system</filename>) funktioniert ebenfalls, da das
   Systemverzeichnis standardmäßig im <envar>PATH</envar> enthalten ist.
   Allerdings raten wir von dieser Arbeitsweise stark ab.
  </para>

  <para>
   Unter Windows gilt für die PHP-Versionen 5.3 und neuer, dass die
   <literal>mysqli</literal>-Erweiterung standardmäßig den MySQL-Native-Treiber
   verwendet. Das bedeutet, dass Sie sich keine Gedanken über die Konfiguration
   des Zugriffs auf die <filename>libmysql.dll</filename> machen brauchen; Sie
   müssen nur sicherstellen, dass die Erweiterung in der &php.ini; aktiviert
   ist.
  </para>

  <para>
   Wie bei der Aktivierung jeder anderen PHP-Extension (wie z.B.
   <filename>php_mysqli.dll</filename>) sollte auch hier die PHP-Direktive
   <link linkend="ini.extension-dir">extension_dir</link> auf das Verzeichnis
   zeigen, in dem die vorhandenen PHP-Extensions liegen. Lesen Sie dazu auch den
   Abschnitt <link linkend="install.windows.manual">Manual Windows Installation
   Instructions</link>. Ein entsprechender <literal>extension_dir</literal>-Wert
   für PHP 5 ist zum Beispiel <filename>c:\php\ext</filename>.
  </para>

  <note>
   <para>
    Wenn beim Starten des Webservers ein Fehler ähnlich dem folgenden auftritt:
    <literal>"Unable to load dynamic library './php_mysqli.dll'"</literal>,
    wird im Normalfall die <filename>php_mysqli.dll</filename> und/oder die
    <filename>libmysql.dll</filename> nicht vom System gefunden.
   </para>
  </note>

 </section>

</section>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
