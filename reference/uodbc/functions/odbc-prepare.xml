<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 317502 Maintainer: nobody Status: ready -->

<refentry xml:id="function.odbc-prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>odbc_prepare</refname>
  <refpurpose>Bereitet eine Anweisung für die Ausführung vor</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>odbc_prepare</methodname>
   <methodparam><type>resource</type><parameter>connection_id</parameter></methodparam>
   <methodparam><type>string</type><parameter>query_string</parameter></methodparam>
  </methodsynopsis>
  <para>
   Bereitet eine Anweisung für die Ausführung vor. Die Ergebniskennung kann
   später verwendet werden, um die Anweisung mit
   <function>odbc_execute</function> auszuführen.
  </para>
  <para>
   Einige Datenbanken (wie beispielsweise IBM DB2, MS SQL Server und Oracle)
   unterstützen gespeicherte Prozeduren, die Parameter vom Typ IN, INOUT und OUT
   akzeptieren können, wie von der ODBC-Spezifikation definiert. Allerdings
   unterstützt der Unified ODBC Treiber zurzeit nur Parameter vom Typ IN für
   gespeicherte Prozeduren.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection_id</parameter></term>
     <listitem>
      &odbc.connection.id;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query_string</parameter></term>
     <listitem>
      <para>
       Die Abfrage-Anweisung, die vorbereitet werden soll, als Zeichenkette.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt eine ODBC-Ergebniskennung zurück, wenn das SQL-Kommando erfolgreich
   vorbereitet wurde. Im Fehlerfall wird &false; zurückgegeben.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>odbc_execute</function> und <function>odbc_prepare</function> Beispiel</title>
    <para>
     Im folgenden Code ist <varname>$success</varname> nur dann &true;, wenn
     alle drei Parameter für myproc Eingabeparameter (IN) sind:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;
$c = 3;
$stmt    = odbc_prepare($conn, 'CALL myproc(?,?,?)');
$success = odbc_execute($stmt, array($a, $b, $c));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Wenn eine gespeicherte Prozedur aufgerufen werden soll, die Ein-Ausgabe-
   (INOUT) oder Ausgabeparameter (OUT) verwendet, wird als Workaround empfohlen,
   eine native Extension für die jeweilige Datenbank zu verwenden
   (beispielsweise <link linkend="ref.mssql">mssql</link> für MS SQL Server oder
   <link linkend="ref.mssql">oci8</link> für Oracle).
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>odbc_execute</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
