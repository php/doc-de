<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342548 Maintainer: sammywg Status: ready -->

<appendix xml:id="json.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  Die folgenden Konstanten geben den Typ des Fehlers an, der von
  <function>json_last_error</function> zurückgegeben wurde.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-error-none">
   <term>
    <constant>JSON_ERROR_NONE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Kein Fehler aufgetreten.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-depth">
   <term>
    <constant>JSON_ERROR_DEPTH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Die maximale Stacktiefe wurde überschritten.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-state-mismatch">
   <term>
    <constant>JSON_ERROR_STATE_MISMATCH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Tritt ein bei Unterlauf oder State-Mismatch.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-ctrl-char">
   <term>
    <constant>JSON_ERROR_CTRL_CHAR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Steuerzeichenfehler, möglicherweise unkorrekt kodiert.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-syntax">
   <term>
    <constant>JSON_ERROR_SYNTAX</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Syntaxfehler.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf8">
   <term>
    <constant>JSON_ERROR_UTF8</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Ungültige UTF-8 Zeichen, eventuall falsch kodiert.
     Verfügbar seit PHP 5.3.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-recursion">
   <term>
    <constant>JSON_ERROR_RECURSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Das an <function>json_encode</function> übergebene Objekt oder Array
     enthält rekursive Referenzen und kann nicht kodiert werden. Wenn
     die <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> Option übergeben
     wurde, wird &null; an Stelle der rekursiven Referenz kodiert.
     Verfügbar seit PHP 5.5.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-inf-or-nan">
   <term>
    <constant>JSON_ERROR_INF_OR_NAN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Der an <function>json_encode</function> übergebene Wert enthält entweder
     <link linkend="language.types.float.nan"><constant>NAN</constant></link>
     oder <link linkend="function.is-infinite"><constant>INF</constant></link>.
     Wenn die <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> Option übergeben
     wurde, wird <literal>0</literal> an Stelle dieser speziellen Zahlen kodiert.
     Verfügbar seit PHP 5.5.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-unsupported-type">
   <term>
    <constant>JSON_ERROR_UNSUPPORTED_TYPE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Der an <function>json_encode</function> übergebene Wert enthält einen
     nicht unterstützten Typ, beispielweise <type>resource</type>.
     Wenn die <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> Option übergeben
     wurde, wird &null; an Stelle des nicht unterstützten Wertes kodiert.
     Verfügbar seit PHP 5.5.0.
    </simpara>
   </listitem>
  </varlistentry> 
  <varlistentry xml:id="constant.json-error-invalid-property-name">
   <term>
    <constant>JSON_ERROR_INVALID_PROPERTY_NAME</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Ein Schlüssel beginnend mit einem \u0000 Zeichen war in der Zeichenkette
     enthalten, die an <function>json_decode</function> übergeben wurde, wenn
     ein JSON-Objekt in ein PHP-Objekt konvertiert werden sollte.
     Verfügbar seit PHP 7.0.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf16">
   <term>
    <constant>JSON_ERROR_UTF16</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Ein einzelnes, alleinstehendes UTF-16-Surrogat war im JSON-String enthalten, der an
     <function>json_decode</function> übergeben wurde.
     Verfügbar seit PHP 7.0.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  Die folgenden Konstanten können kombiniert (verodert) werden, 
  um Optionen für <function>json_decode</function> zu bilden.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-bigint-as-string">
   <term>
    <constant>JSON_BIGINT_AS_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Dekodiert große Zahlen als ihre originale Zeichenkette.
     Verfügbar seit PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-object-as-array">
   <term>
    <constant>JSON_OBJECT_AS_ARRAY</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Dekodiert JSON-Objekte als PHP-Arrays. Diese Option kann automatisch
     angefügt werden, indem <function>json_decode</function> mit &true; als
     zweitem Parameter aufgerufen wird.
     Verfügbar seit PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 <para>
  Die folgenden Konstanten können kombiniert (verodert) werden, 
  um Optionen für <function>json_encode</function> zu bilden.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-hex-tag">
   <term>
    <constant>JSON_HEX_TAG</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Alle &lt; und &gt; werden zu \u003C und \u003E konvertiert.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-amp">
   <term>
    <constant>JSON_HEX_AMP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Alle &amp;s werden zu \u0026 konvertiert.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-apos">
   <term>
    <constant>JSON_HEX_APOS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Alle ' werden zu \u0027 konvertiert.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-quot">
   <term>
    <constant>JSON_HEX_QUOT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Alle " werden zu \u0022 konvertiert.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-force-object">
   <term>
    <constant>JSON_FORCE_OBJECT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Gibt ein Objekt statt einem Array aus, wenn ein nichtassoziatives
     Array verwendet wird. Besonders nützlich, wenn der Empfänger der Ausgabe
     ein Objekt erwartet und das Array leer ist.
     Verfügbar seit PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-numeric-check">
   <term>
    <constant>JSON_NUMERIC_CHECK</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Kodiert numerische Zeichenketten als Zahlen.
     Verfügbar seit PHP 5.3.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-pretty-print">
   <term>
    <constant>JSON_PRETTY_PRINT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Nutzt Whitespace um die zurückgegebenen Daten zu formatieren.
     Verfügbar seit PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-slashes">
   <term>
    <constant>JSON_UNESCAPED_SLASHES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Escape <literal>/</literal> nicht.
     Verfügbar seit PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-unicode">
   <term>
    <constant>JSON_UNESCAPED_UNICODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Kodiere Unicode Zeichen, welche aus mehreren Bytes bestehen, direkt
     (standardmäßig werden \uXXXX Escapes genutzt).
     Verfügbar seit PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-partial-output-on-error">
   <term>
    <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Ersetze einige unkodierbare Werte anstatt fehlzuschlagen.
     Verfügbar seit PHP 5.5.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-preserve-zero-fraction">
   <term>
    <constant>JSON_PRESERVE_ZERO_FRACTION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Stellt sicher, dass <type>float</type> Werte immer als Fließkomma-Werte
     kodiert werden. Verfügbar seit PHP 5.6.6.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-line-terminators">
   <term>
    <constant>JSON_UNESCAPED_LINE_TERMINATORS</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Die Zeilentrenner bleiben unmaskiert, wenn
     <constant>JSON_UNESCAPE_UNICODE</constant> übergeben wird. Das ist das
     gleiche Verhalten wie vor PHP 7.1 ohne diese Konstante.
     Verfügbar seit PHP 7.1.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 
</appendix>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
