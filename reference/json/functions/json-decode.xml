<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 20717145cf4551420cc8aa421f159ed55aa779f4 Maintainer: simp Status: ready -->
<!-- Credits: sammywg -->
<refentry xml:id="function.json-decode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_decode</refname>
  <refpurpose>Dekodiert eine JSON-Zeichenkette</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>json_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>bool</type><type>null</type></type><parameter>associative</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Konvertiert eine JSON-kodierte Zeichenkette in eine PHP-Variable.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>json</parameter></term>
     <listitem>
      <para>
       Der zu dekodierende <parameter>json</parameter>-&string;.
      </para>
      <para>
       Diese Funktion funktioniert nur mit Zeichenketten, die UTF-8-kodiert
       sind.
      </para>
      &json.implementation.superset;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>associative</parameter></term>
     <listitem>
      <para>
       Wenn &true;, werden JSON-Objekte als assoziative &array;s zurückgegeben.
       Wenn &false;, werden JSON-Objekte als &object;e zurückgegeben. Wenn
       &null;, werden JSON-Objekte als assoziative &array;s oder &object;e
       zurückgegeben, abhängig davon, ob
       <constant>JSON_OBJECT_AS_ARRAY</constant> in den
       <parameter>flags</parameter> gesetzt ist.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>depth</parameter></term>
     <listitem>
      <para>
       Die maximale Verschachtelungstiefe der zu dekodierenden Struktur.
       Der Wert muss größer als <literal>0</literal> sein und kleiner als oder
       gleich <literal>2147483647</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Eine Bitmaske von <constant>JSON_BIGINT_AS_STRING</constant>,
       <constant>JSON_INVALID_UTF8_IGNORE</constant>,
       <constant>JSON_INVALID_UTF8_SUBSTITUTE</constant>,
       <constant>JSON_OBJECT_AS_ARRAY</constant>,
       <constant>JSON_THROW_ON_ERROR</constant>. Das Verhalten dieser
       Konstanten ist auf der Seite über die
       <link linkend="json.constants">JSON-Konstanten</link> beschrieben.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt den Wert von <parameter>json</parameter> im passenden PHP-Typ zurück.
   Die Werte <literal>true</literal>, <literal>false</literal> und
   <literal>null</literal> werden entsprechend als &true;, &false; und &null;
   zurückgegeben. &null; wird zurückgegeben, wenn der Parameter
   <parameter>json</parameter> nicht dekodiert werden kann oder wenn die
   dekodierten Daten tiefer verschachtelt sind, als es der Parameter für
   Verschachtelungstiefe erlaubt.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Wenn <parameter>depth</parameter> außerhalb des erlaubten Bereichs liegt,
   wird ab PHP 8.0.0 ein <classname>ValueError</classname> ausgelöst, während
   vorher ein Fehler der Stufe <constant>E_WARNING</constant> ausgelöst wurde.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Die <parameter>flags</parameter>-Konstante
        <constant>JSON_THROW_ON_ERROR</constant> wurde hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <parameter>associative</parameter> ist nun ein Nullable-Typ.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Die <parameter>flags</parameter>-Konstanten
        <constant>JSON_INVALID_UTF8_IGNORE</constant> und
        <constant>JSON_INVALID_UTF8_SUBSTITUTE</constant> wurden hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        Ein leerer JSON-Schlüssel ("") kann als leere Objekt-Eigenschaft
        kodiert werden, anstatt einen Schlüssel mit dem Wert
        <literal>_empty_</literal> zu verwenden.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>json_decode</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';

var_dump(json_decode($json));
var_dump(json_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

array(5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}
]]>
    </screen>
   </example>
   <example>
    <title>Zugriff auf ungültige Objekteigenschaften</title>
    <simpara>
     Auf Elemente von Objekten, die Zeichen enthalten, welche gemäß den
     Namenskonventionen von PHP nicht gültig sind (z. B. der Bindestrich), kann
     durch ein Umschließen des Namens mit geschweiften Klammern und einfachen
     Anführungszeichen zugegriffen werden.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

$json = '{"foo-bar": 12345}';

$obj = json_decode($json);
print $obj->{'foo-bar'}; // 12345

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Häufige Fehler bei der Verwendung von <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// die folgenden Zeichenketten sind gültiges JavaScript aber kein gültiges JSON

// der Name und der Wert müssen in doppelten Anführungszeichen eingeschlossen werden
// einfache Anführungszeichen sind ungültig
$bad_json = "{ 'bar': 'baz' }";
json_decode($bad_json); // null

// der Name muss in doppelten Anführungszeichen eingeschlossen werden
$bad_json = '{ bar: "baz" }';
json_decode($bad_json); // null

// nachfolgende Kommata sind nicht erlaubt
$bad_json = '{ bar: "baz", }';
json_decode($bad_json); // null

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Fehler bei der Verwendung von <parameter>depth</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Einige Daten mit einer maximalen Tiefe von 4
// (array -> array -> array -> string) kodieren
$json = json_encode(
    array(
        1 => array(
            'englisch' => array(
                'One',
                'January'
            ),
            'französisch' => array(
                'Une',
                'Janvier'
            )
        )
    )
);

// Die Fehler für unterschiedliche Verschachtelungstiefen anzeigen.
var_dump(json_decode($json, true, 4));
echo 'Letzter Fehler: ', json_last_error_msg(), PHP_EOL, PHP_EOL;

var_dump(json_decode($json, true, 3));
echo 'Letzter Fehler: ', json_last_error_msg(), PHP_EOL, PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Letzter Fehler: No error

NULL
Letzter Fehler: Maximum stack depth exceeded
]]>
    </screen>
   </example>
   <example>
    <title><function>json_decode</function> von großen Ganzzahlen</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"number": 12345678901234567890}';

var_dump(json_decode($json));
var_dump(json_decode($json, false, 512, JSON_BIGINT_AS_STRING));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["number"]=>
  float(1.2345678901235E+19)
}
object(stdClass)#1 (1) {
  ["number"]=>
  string(20) "12345678901234567890"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Die JSON-Spezifikation ist kein JavaScript, sondern eine Teilmenge davon.
   </para>
  </note>
  <note>
   <para>
    Tritt ein Dekodierungsfehler auf, kann
    <function>json_last_error</function> verwendet werden, um die exakte Art
    des Fehlers zu ermitteln.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_last_error</function></member>
   </simplelist>
  </para>

 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
