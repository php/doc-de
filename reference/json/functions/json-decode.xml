<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 291072 Maintainer: sammywg Status: ready -->

<refentry xml:id="function.json-decode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_decode</refname>
  <refpurpose>Dekodiert eine JSON-Zeichenkette</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>json_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>assoc</parameter><initializer>false</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
  </methodsynopsis>
  <para>
   Konvertiert eine JSON-kodierte Zeichenkette in eine PHP-Variable.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>json</parameter></term>
     <listitem>
      <para>
       Der zu dekodierende <parameter>json</parameter>-<type>String</type>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>assoc</parameter></term>
     <listitem>
      <para>
       Wenn &true;, werden zurückgegebene <type>Objekte</type> in assoziative
       <type>Array</type>s konvertiert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>depth</parameter></term>
     <listitem>
      <para>
       Benutzerspezifische Verschachtelungstiefe.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt den Wert von <parameter>json</parameter> im passenden PHP-Typ zurück.
   Die Werte <literal>true</literal>, <literal>false</literal> und
   <literal>null</literal> werden (unabhängig von Groß-/Kleinschreibung)
   entsprechend als &true;, &false; und &null; zurückgegeben. &null; wird
   zurückgegeben, wenn der Parameter <parameter>json</parameter> nicht dekodiert
   werden kann oder wenn die dekodierten Daten tiefer verschachtelt sind, als es
   der Parameter für Verschachtelungstiefe erlaubt.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>json_decode</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';

var_dump(json_decode($json));
var_dump(json_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

array(5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}
]]>
    </screen>
   </example>
   <example>
    <title>Ein weiteres Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php

$json = '{"foo-bar": 12345}';

$obj = json_decode($json);
print $obj->{'foo-bar'}; // 12345

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Häufige Fehler bei der Verwendung von <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// die folgenden Zeichenketten sind gültiges JavaScript aber kein gültiges JSON

// der Name und der Wert müssen in doppelten Anführungszeichen eingeschlossen werden
// einfache Anführungszeichen sind ungültig
$bad_json = "{ 'bar': 'baz' }";
json_decode($bad_json); // null

// der Name muss in doppelten Anführungszeichen eingeschlossen werden
$bad_json = '{ bar: "baz" }';
json_decode($bad_json); // null

// nachfolgende Kommata sind nicht erlaubt
$bad_json = '{ bar: "baz", }';
json_decode($bad_json); // null

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Fehler bei der Verwendung von <parameter>depth</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Daten kodieren
$json = json_encode(
    array(
        1 => array(
            'englisch' => array(
                'One',
                'January'
            ),
            'französisch' => array(
                'Une',
                'Janvier'
            )
        )
    )
);

// Errordefinitionen
$json_errors = array(
    JSON_ERROR_NONE => 'Es ist kein Fehler aufgetreten',
    JSON_ERROR_DEPTH => 'Die maximale Stacktiefe wurde erreicht',
    JSON_ERROR_CTRL_CHAR => 'Steuerzeichenfehler, möglicherweise fehlerhaft kodiert',
    JSON_ERROR_SYNTAX => 'Syntaxfehler',
);

// Zeige die Fehler für unterschiedliche Verschachtelungstiefen
foreach(range(4, 3, -1) as $depth) {
    var_dump(json_decode($json, true, $depth));
    echo 'Letzter Fehler : ', $json_errors[json_last_error()], PHP_EOL, PHP_EOL;
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Letzter Fehler : Es ist kein Fehler aufgetreten

NULL
Letzter Fehler : Die maximale Stacktiefe wurde erreicht
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Die JSON-Spezifikation ist nicht JavaScript, aber ein Subset davon.
   </para>
  </note>
  <note>
   <para>
    Tritt ein Dekodierungsfehler auf, kann <function>json_last_error</function>
    verwendet werden, um die exakte Natur des Fehlers zu ermitteln.
   </para>
  </note>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>Der optionale Parameter <parameter>depth</parameter> wurde
        hinzugefügt. Die Standardrekursionstiefe wurde von 128 auf 512
        heraufgesetzt.</entry>
      </row>
      <row>
       <entry>5.2.3</entry>
       <entry>Die Verschachtelungsgrenze wurde von 20 auf 128 angehoben.</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_last_error</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
