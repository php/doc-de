<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336513 Maintainer: simp Status: ready -->
<!-- Credits: sammywg -->

<refentry xml:id="function.json-encode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_encode</refname>
  <refpurpose>Gibt die JSON-Repräsentation eines Wertes zurück</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>json_encode</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
  </methodsynopsis>
  <para>
   Gibt eine Zeichenkette zurück, die die JSON-Darstellung von
   <parameter>value</parameter> beinhaltet.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Der zu kodierende <parameter>value</parameter>. Kann von jedem Typ außer
       <type>Ressource</type> sein.
      </para>
      <para>
       Alle Strings müssen in UTF-8 kodiert sein-
      </para>
      &json.implementation.superset;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Bitmaske bestehend aus <constant>JSON_HEX_QUOT</constant>,
       <constant>JSON_HEX_TAG</constant>,
       <constant>JSON_HEX_AMP</constant>,
       <constant>JSON_HEX_APOS</constant>,
       <constant>JSON_NUMERIC_CHECK</constant>,
       <constant>JSON_PRETTY_PRINT</constant>,
       <constant>JSON_UNESCAPED_SLASHES</constant>,
       <constant>JSON_FORCE_OBJECT</constant>,
       <constant>JSON_PRESERVE_ZERO_FRACTION</constant>,
       <constant>JSON_UNESCAPED_UNICODE</constant>.
       Das Verhalten dieser Konstanten ist auf der Seite über die
       <link linkend="json.constants">JSON Konstanten</link>
       beschrieben.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>depth</parameter></term>
     <listitem>
      <para>
       Setzt die maximale Tiefe. Muss größer sein als Null.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt einen JSON-kodierten <type>String</type> zurück oder 
   &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.6.6</entry>
       <entry>
        Die <constant>JSON_PRESERVE_ZERO_FRACTION</constant> <parameter>option</parameter> wurde hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>5.5.0</entry>
       <entry>
        Der Parameter <parameter>depth</parameter> wurde hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>5.4.0</entry>
       <entry>
        <constant>JSON_PRETTY_PRINT</constant>, <constant>JSON_UNESCAPED_SLASHES</constant>, und <constant>JSON_UNESCAPED_UNICODE</constant> für <parameter>options</parameter> wurden hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>5.3.3</entry>
       <entry>
        <constant>JSON_NUMERIC_CHECK</constant> für <parameter>options</parameter> wurde hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Der Parameter <parameter>options</parameter> wurde hinzugefügt.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>json_encode</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);

echo json_encode($arr);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
{"a":1,"b":2,"c":3,"d":4,"e":5}
]]>
    </screen>
   </example>


   <example>
    <title>Ein <function>json_encode</function>-Beispiel, das den Einsatz
     einiger Optionen zeigt</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = array('<foo>',"'bar'",'"baz"','&blong&', "\xc3\xa9");

echo "Normal: ",  json_encode($a), "\n";
echo "Tags: ",    json_encode($a, JSON_HEX_TAG), "\n";
echo "Apos: ",    json_encode($a, JSON_HEX_APOS), "\n";
echo "Quot: ",    json_encode($a, JSON_HEX_QUOT), "\n";
echo "Amp: ",     json_encode($a, JSON_HEX_AMP), "\n";
echo "Unicode: ", json_encode($a, JSON_UNESCAPED_UNICODE), "\n";
echo "All: ",     json_encode($a, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE), "\n\n";

$b = array();

echo "Ausgabe eines leeren Arrays als Array: ", json_encode($b), "\n";
echo "Ausgabe eines leeren Arrays als Objekt: ", json_encode($b, JSON_FORCE_OBJECT), "\n\n";

$c = array(array(1,2,3));

echo "Ausgabe eines nichtassoziativen Arrays als Array: ", json_encode($c), "\n";
echo "Ausgabe eines nichtassoziativen Arrays als Objekt: ", json_encode($c, JSON_FORCE_OBJECT), "\n\n";

$d = array('foo' => 'bar', 'baz' => 'long');

echo "Assoziative Arrays werden immer als Objekt ausgegeben: ", json_encode($d), "\n";
echo "Assoziative Arrays werden immer als Objekt ausgegeben: ", json_encode($d, JSON_FORCE_OBJECT), "\n\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Normal: ["<foo>","'bar'","\"baz\"","&blong&","\u00e9"]
Tags: ["\u003Cfoo\u003E","'bar'","\"baz\"","&blong&","\u00e9"]
Apos: ["<foo>","\u0027bar\u0027","\"baz\"","&blong&","\u00e9"]
Quot: ["<foo>","'bar'","\u0022baz\u0022","&blong&","\u00e9"]
Amp: ["<foo>","'bar'","\"baz\"","\u0026blong\u0026","\u00e9"]
Unicode: ["<foo>","'bar'","\"baz\"","&blong&","é"]
All: ["\u003Cfoo\u003E","\u0027bar\u0027","\u0022baz\u0022","\u0026blong\u0026","é"]

Ausgabe eines leeren Arrays als Array: []
Ausgabe eines leeren Arrays als Objekt: {}

Ausgabe eines nichtassoziativen Arrays als Array: [[1,2,3]]
Ausgabe eines nichtassoziativen Arrays als Objekt: {"0":{"0":1,"1":2,"2":3}}

Assoziative Arrays werden immer als Objekt ausgegeben: {"foo":"bar","baz":"long"}
Assoziative Arrays werden immer als Objekt ausgegeben: {"foo":"bar","baz":"long"}
]]>
    </screen>
   </example>
   <example>
    <title>JSON_NUMERIC_CHECK-Option-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
echo "Zeichenketten, die Zahlen repräsentieren, die automatisch in Zahlen gewandelt wurden".PHP_EOL;
$numbers = array('+123123', '-123123', '1.2e3', '0.00001');
var_dump(
 $numbers,
 json_encode($numbers, JSON_NUMERIC_CHECK)
);
echo "Zeichenketten, die unsachgemäß formartierte Zahlen enthalten".PHP_EOL;
$strings = array('+a33123456789', 'a123');
var_dump(
 $strings,
 json_encode($strings, JSON_NUMERIC_CHECK)
);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Zeichenketten, die Zahlen repräsentieren, die automatisch in Zahlen gewandelt wurden
array(4) {
  [0]=>
  string(7) "+123123"
  [1]=>
  string(7) "-123123"
  [2]=>
  string(5) "1.2e3"
  [3]=>
  string(7) "0.00001"
}
string(28) "[123123,-123123,1200,1.0e-5]"
Zeichenketten, die unsachgemäß formartierte Zahlen enthalten
array(2) {
  [0]=>
  string(13) "+a33123456789"
  [1]=>
  string(4) "a123"
}
string(24) "["+a33123456789","a123"]"
]]>
    </screen>
   </example>
   <example>
    <title>Beispiel für sequentielle und nicht sequentielle Arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
echo "Sequentielles Array".PHP_EOL;
$sequential = array("foo", "bar", "baz", "blong");
var_dump(
 $sequential,
 json_encode($sequential)
);

echo PHP_EOL."Nicht sequentielles Array".PHP_EOL;
$nonsequential = array(1=>"foo", 2=>"bar", 3=>"baz", 4=>"blong");
var_dump(
 $nonsequential,
 json_encode($nonsequential)
);

echo PHP_EOL."Sequentielles Array mit einem entfernten Schlüssel".PHP_EOL;
unset($sequential[1]);
var_dump(
 $sequential,
 json_encode($sequential)
);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Sequentielles Array
array(4) {
  [0]=>
  string(3) "foo"
  [1]=>
  string(3) "bar"
  [2]=>
  string(3) "baz"
  [3]=>
  string(5) "blong"
}
string(27) "["foo","bar","baz","blong"]"

Nicht sequentielles Array
array(4) {
  [1]=>
  string(3) "foo"
  [2]=>
  string(3) "bar"
  [3]=>
  string(3) "baz"
  [4]=>
  string(5) "blong"
}
string(43) "{"1":"foo","2":"bar","3":"baz","4":"blong"}"

Sequentielles Array mit einem entfernten Schlüssel
array(3) {
  [0]=>
  string(3) "foo"
  [2]=>
  string(3) "baz"
  [3]=>
  string(5) "blong"
}
string(33) "{"0":"foo","2":"baz","3":"blong"}"
]]>
    </screen>
   </example>
  </para>
   <example>
    <title><constant>JSON_PRESERVE_ZERO_FRACTION</constant>-Option-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(json_encode(12.0, JSON_PRESERVE_ZERO_FRACTION));
var_dump(json_encode(12.0));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "12.0"
string(2) "12"
]]>
    </screen>
   </example>
 </refsect1>
 
 <refsect1 role="notes">
   &reftitle.notes;
   <note>
    <para>
    Falls ein Fehler beim kodieren auftritt, kann 
    <function>json_last_error</function> verwendet werden, um die genaue
    Ursache des Fehlers festzustellen.
    </para>
   </note>
   <note>
    <para>
    Wenn ein Array kodiert wird werden alle Schlüssel als Strings kodiert
    und für alle Schlüssel-Wert-Paare explizit angegeben, wenn die Schlüssel
    keine kontinuierliche aufsteigende Sequenz sind die bei 0 beginnt.
    </para>
   </note>
   <note>
    <para>
    Wie der Referenz JSON-Encoder gibt auch <function>json_encode</function>
    einen einfachen Wert (also weder ein Objekt noch ein Array) aus, wenn ein
    <type>String</type>, <type>Integer</type>, <type>Float</type> oder
    <type>Boolean</type> als Eingabe für <parameter>value</parameter> übergeben
    wird. Während die meisten Decoder diese Werte als gültiges JSON akzeptieren
    könnte es einige geben die dies ablehnen, da die Spezifikationen in diesem
    Punkt mehrdeutig sind.
    </para>
    <para>
    Um zusammenzufassen: Prüfen Sie immer, ob ihr JSON-Decoder die Ausgabe, die Sie
    mittels <function>json_encode</function> erzeugen, verarbeiten kann.
    </para>
   </note>
  </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><interfacename>JsonSerializable</interfacename></member>
    <member><function>json_decode</function></member>
    <member><function>json_last_error</function></member>
    <member><function>serialize</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
