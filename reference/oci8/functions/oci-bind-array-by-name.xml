<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.3 Maintainer: oliver Status: ready -->
  <refentry id="function.oci-bind-array-by-name">
   <refnamediv>
    <refname>oci_bind_array_by_name</refname>
    <refpurpose>
     Bindet ein PHP-Array namentlich an ein Oracle-PL/SQL-Array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>oci_bind_array_by_name</methodname>
      <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
      <methodparam><type>array</type><parameter role="reference">var_array</parameter></methodparam>
      <methodparam><type>int</type><parameter>max_table_length</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>max_item_length</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <note>
     <para>
      Diese Funktion ist seit dem OCI8-Release 1.2 und der PHP-Version 5.1.2 
      verfügbar.
     </para>
    </note>
    <para>
     <function>oci_bind_array_by_name</function> bindet ein PHP-Array 
     <function>oci_bind_array_by_name</function> an einen Oracle-Platzhalter 
     <parameter>name</parameter>, der auf ein Oracle-PL/SQL-Array zeigt. Ob es 
     als Ein- oder Ausgabe benutzt wird, wird zur Laufzeit ermittelt. Der 
     Parameter <parameter>max_table_length</parameter> setzt die maximale Länge 
     sowohl für die Eingabe- als auch die Ergebnis-Arrays. Der Parameter 
     <parameter>max_item_length</parameter> setzt die maximale Länge für 
     Array-Elemente. Wenn <parameter>max_item_length</parameter> nicht 
     spezifiziert wurde or gleich -1 ist, sucht 
     <function>oci_bind_array_by_name</function> das längste Element im 
     Eingabe-Array und nutzt dieses als maximale Länge der Array-Elemente. Der 
     Parameter <parameter>type</parameter> sollte benutzt werden, um den Typ der 
     PL/SQL-Array-Elemente zu bestimmen. Siehe untenstehende Liste verfügbarer 
     Typen.
    </para>
    <para>
     <itemizedlist>
      <listitem>
       <para>
        <constant>SQLT_NUM</constant> - für NUMBER-Arrays.
       </para>
      </listitem>
      <listitem>
       <para>
        <constant>SQLT_INT</constant> - für INTEGER-Arrays (beachte: INTEGER 
        ist ein Synonym für NUMBER(38), aber der <constant>SQLT_NUM</constant>-Typ
        wird nicht funktionieren, obwohl es Synonyme sind).
       </para>
      </listitem>
      <listitem>
       <para>
        <constant>SQLT_FLT</constant> - für FLOAT-Arrays.
       </para>
      </listitem>
      <listitem>
       <para>
        <constant>SQLT_AFC</constant> - für CHAR-Arrays.
       </para>
      </listitem>
      <listitem>
       <para>
        <constant>SQLT_CHR</constant> - für VARCHAR2-Arrays.
       </para>
      </listitem>
      <listitem>
       <para>
        <constant>SQLT_VCS</constant> - für VARCHAR-Arrays.
       </para>
      </listitem>
      <listitem>
       <para>
        <constant>SQLT_AVC</constant> - für CHARZ-Arrays.
       </para>
      </listitem>
      <listitem>
       <para>
        <constant>SQLT_STR</constant> - für STRING-Arrays.
       </para>
      </listitem>
      <listitem>
       <para>
        <constant>SQLT_LVC</constant> - für LONG-VARCHAR-Arrays.
       </para>
      </listitem>
     <listitem>
       <para>
        <constant>SQLT_ODT</constant> - für DATE-Arrays.
       </para>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     <example>
      <title><function>oci_bind_array_by_name</function> Beispiel</title>
      <programlisting role="php">
<![CDATA[
<?php

$c = oci_connect("scott", "tiger");

$create = "CREATE TABLE bind_beispiel(name VARCHAR(20))";
$statement = oci_parse($c, $create);
oci_execute($statement);

$create_pkg = "
CREATE OR REPLACE PACKAGE ARRAYBINDPKG1 AS
  TYPE ARRTYPE IS TABLE OF VARCHAR(20) INDEX BY BINARY_INTEGER;
  PROCEDURE iobind(c1 IN OUT ARRTYPE);
END ARRAYBINDPKG1;";
$statement = oci_parse($c, $create_pkg);
oci_execute($statement);

$create_pkg_body = "
CREATE OR REPLACE PACKAGE BODY ARRAYBINDPKG1 AS
  CURSOR CUR IS SELECT name FROM bind_beispiel;
  PROCEDURE iobind(c1 IN OUT ARRTYPE) IS
    BEGIN
    FOR i IN 1..5 LOOP
      INSERT INTO bind_beispiel VALUES (c1(i));
    END LOOP;
    IF NOT CUR%ISOPEN THEN
      OPEN CUR;
    END IF;
    FOR i IN REVERSE 1..5 LOOP
      FETCH CUR INTO c1(i);
      IF CUR%NOTFOUND THEN
        CLOSE CUR;
        EXIT;
      END IF;
    END LOOP;
  END iobind;
END ARRAYBINDPKG1;";
$statement = oci_parse($c, $create_pkg_body);
oci_execute($statement);

$statement = oci_parse($c, "BEGIN ARRAYBINDPKG1.iobind(:c1); END;");

$array = array("eins", "zwei", "drei", "vier", "fuenf");

oci_bind_array_by_name($statement, ":c1", $array, 5, -1, SQLT_CHR);

oci_execute($statement);

var_dump($array);

 ?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

