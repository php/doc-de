<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- splitted from ./de/functions/oci8.xml, last change in rev 1.2 -->
<!-- last change to 'ocibindbyname' in en/ tree in rev 1.2 -->
  <refentry id="function.ocibindbyname">
   <refnamediv>
    <refname>ocibindbyname</refname>
    <refpurpose>Bindet eine PHP-Variable an einen Oracle Platzhalter</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>OCIBindByName</methodname>
      <methodparam><type>int</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>string</type><parameter>Platzhaltername</parameter></methodparam>
      <methodparam><type>mixed &amp;</type><parameter>Variable</parameter></methodparam>
      <methodparam><type>int</type><parameter>Länge</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>Typ</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>OCIBindByName</function> bindet die PHP Variable
     <parameter>variable</parameter> an den Oracle Platzhalter
     <parameter>ph_name</parameter>.  Es wird genutzt um den benötigten
     Speicherplatz fuer die Ein/Ausgabe zu Laufzeit festzulegen.
     <parameter>length</parameter> gibt dabei die maximale Grösse
     des Speicherplatzes an. Wenn <parameter>length</parameter> auf -1
     gesetzt wird, nimmt <function>OCIBindByName</function> die Grösse des 
     Inhalts von <parameter>variable</parameter> als maximale Grösse.
    </para>
    <para>
     Wenn ein abstrakter Datentyp wie (LOB/ROWID/BFILE) gebunden werden soll,
     muss zuerst <function>OCINewDescriptor</function> verwendet werden.
     <parameter>length</parameter> gilt nicht für abstrakte Datentypen und 
     sollte denn auf -1 gesetzt sein.
     <parameter>type</parameter> zeigt Oracle, welchen Typ wir binden wollen.
     Mögliche Typen sind: OCI_B_FILE (Binärdatei), OCI_B_CFILE (Textdatei),
     OCI_B_CLOB (Text-LOB), OCI_B_BLOB (Binär-LOB) and OCI_B_ROWID (ROWID).
    </para>
     <example>
      <title>OCIDefineByName</title>
      <programlisting>
&lt;?php
/* OCIBindByPos example thies@thieso.net (980221)

  trägt 3 Datensätze in emp ein und benutzt ROWID für das UPDATE nach dem
  INSERT
*/

$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"insert into emp (empno, ename) ".
					   "values (:empno,:ename) ".
					   "returning ROWID into :rid");

$data = array(1111 => "Larry", 2222 => "Bill", 3333 => "Jim");

$rowid = OCINewDescriptor($conn,OCI_D_ROWID);

OCIBindByName($stmt,":empno",&amp;$empno,32);
OCIBindByName($stmt,":ename",&amp;$ename,32);
OCIBindByName($stmt,":rid",&amp;$rowid,-1,OCI_B_ROWID);

$update = OCIParse($conn,"update emp set sal = :sal where ROWID = :rid");
OCIBindByName($update,":rid",&amp;$rowid,-1,OCI_B_ROWID);
OCIBindByName($update,":sal",&amp;$sal,32);

$sal = 10000;

while (list($empno,$ename) = each($data)) {
	OCIExecute($stmt);
	OCIExecute($update);
} 

$rowid->free();

OCIFreeStatement($update);
OCIFreeStatement($stmt);

$stmt = OCIParse($conn,"select * from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
while (OCIFetchInto($stmt,&amp;$arr,OCI_ASSOC)) {
	var_dump($arr);
}
OCIFreeStatement($stmt);

/* delete our "junk" from the emp table.... */
$stmt = OCIParse($conn,"delete from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
OCIFreeStatement($stmt);

OCILogoff($conn);
?></programlisting></example>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
