<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.9 Maintainer: oliver Status: ready -->
<refentry id="function.oci-fetch-array">
 <refnamediv>
  <refname>oci_fetch_array</refname>
  <refpurpose>Liefert die nächste Zeile der Ergebnisdaten als
  assoziatives und/oder numerisches Array
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>oci_fetch_array</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter></methodparam>
  </methodsynopsis>
  <para>
   Liefert ein Array, welches mit der nächsten Ergebniszeile übereinstimmt.
  </para>
  &oci.datatypes;
  <para>
   Es sollte hier noch erwähnt sein, das <function>oci_fetch_array</function>
   nur <emphasis>unwesentlich</emphasis> langsamer ist, als 
   <function>oci_fetch_row</function>, dafür aber viel handlicher ist.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Ein Zeiger auf eine gültige OCI-Anweisung.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Der optionale zweite Parameter kann eine beliebige
       Kombination aus dem folgenden Konstanten sein:
       <simplelist>
        <member>
         <constant>OCI_BOTH</constant> - liefert ein Array sowohl mit assoziativen
         als auch numerischem Index (gleichzusetzen mit <constant>OCI_ASSOC</constant>
         + <constant>OCI_NUM</constant>). Dieses ist das Standardverhalten.
        </member>
        <member>
         <constant>OCI_ASSOC</constant> - liefert ein assiziatives Array
         (funktioniert wie <function>oci_fetch_assoc</function>).
        </member>
        <member>
         <constant>OCI_NUM</constant> - liefert ein indiziertes Array
         (funktioniert wie <function>oci_fetch_row</function>).
        </member>
        <member>
         <constant>OCI_RETURN_NULLS</constant> - erstellt leere Elemente
         für &null;-Felder.
        </member>
        <member>
         <constant>OCI_RETURN_LOBS</constant> - liefert den Wert eines LOB-Deskriptors.
        </member>
       </simplelist>
       Standard für <parameter>mode</parameter> ist <constant>OCI_BOTH</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Liefert ein Array sowohl mit assiziativem wie numerischem Index oder &false;,
   wenn es keine weiteren Zeilen für das <parameter>statement</parameter> gibt.
  </para>
  &database.fetch-null;
  <note>
   <simpara>
    Oracle liefert alle Feldnamen in Großschrift zurück und deswegen sind auch
    die assoziativen Indizes im Ergebnisarray in Großschrift.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>oci_fetch_array</function> mit <constant>OCI_BOTH</constant>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$connection = oci_connect("apelsin", "kanistra");

$query = "SELECT id, name FROM fruechte";

$statement = oci_parse ($connection, $query);
oci_execute ($statement);

while ($row = oci_fetch_array ($statement, OCI_BOTH)) {
    echo $row[0]." und ".$row['ID']." ist gleich<br>";
    echo $row[1]." und ".$row['NAME']." ist gleich<br>";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> mit
     <constant>OCI_NUM</constant>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$connection = oci_connect("user", "password");

$query = "SELECT id, name, lob_field FROM fruechte";

$statement = oci_parse ($connection, $query);
oci_execute ($statement);

while ($row = oci_fetch_array ($statement, OCI_NUM)) {
    echo $row[0]."<br>";
    echo $row[1]."<br>";
    echo $row[2]->read(100)."<br>";  // dies gibt die ersten 100 Bytes des LOBs aus
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> mit
     <constant>OCI_ASSOC</constant>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$connection = oci_connect("user", "password");

$query = "SELECT id, name, lob_field FROM fruechte";

$statement = oci_parse ($connection, $query);
oci_execute ($statement);

while ($row = oci_fetch_array ($statement, OCI_ASSOC)) {
    echo $row['ID']."<br>";
    echo $row['NAME']."<br>";
    echo $row['LOB_FIELD']."<br>";  // dies gibt "Object id #1" aus
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> mit
     <constant>OCI_RETURN_LOBS</constant>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$connection = oci_connect("user", "password");

$query = "SELECT id, name, lob_field FROM fruechte";

$statement = oci_parse ($connection, $query);
oci_execute ($statement);

while ($row = oci_fetch_array ($statement, (OCI_NUM+OCI_RETURN_LOBS))) {
    echo $row[0]."<br>";
    echo $row[1]."<br>";
    echo $row['LOB_FIELD']."<br>";  // dies gibt den Inhalt des LOBs aus
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_fetch_assoc</function></member>
    <member><function>oci_fetch_object</function></member>
    <member><function>oci_fetch_row</function></member>
    <member><function>oci_fetch_all</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

