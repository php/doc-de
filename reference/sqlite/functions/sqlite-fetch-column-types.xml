<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.1 $ -->
<refentry id="function.sqlite-fetch-column-types">
 <refnamediv>
  <refname>sqlite_fetch_column_types</refname>
  <refname>SQLiteDatabase->fetchColumnTypes</refname>
  <refpurpose>
   Liefert ein Array mit den Spaltentypen einer bestimmten Tabelle
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>sqlite_fetch_column_types</methodname>
   <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
  </methodsynopsis>
  <para>Objektorientierter Stil (Methode):</para>
  <classsynopsis>
   <ooclass><classname>SQLiteDatabase</classname></ooclass>
   <methodsynopsis>
    <type>array</type><methodname>fetchColumnTypes</methodname>
    <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   <function>sqlite_fetch_column_types</function> liefert ein Array mit den 
   Datentypen aller Spalten in der angegebenen Tabelle <parameter>table_name</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>table_name</parameter></term>
     <listitem>
      <para>
       Der abzufragende Tabellenname.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dbhandle</parameter></term>
     <listitem>
      <para>
       Die Ressource der SQLite-Datenbank, die bei prozeduraler Benutzung von 
       <function>sqlite_open</function> zurückgegeben wurden. Der Parameter 
       wird bei der objektorientierten Methode nicht benötigt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>result_type</parameter></term>
     <listitem>
      <para>
       Der optionale Parameter <parameter>result_type</parameter> akzeptiert 
       eine Konstante und bestimmt, wie das Rückgabearray indiziert wird. Mit 
       <constant>SQLITE_ASSOC</constant> werden nur assoziative Indices 
       (Namensfelder) und mit <constant>SQLITE_NUM</constant> werden nur 
       numerische Indices (geordnete Feldnummern) gesetzt. 
       <constant>SQLITE_BOTH</constant> liefert sowohl assoziative als auch 
       numerische Indices. <constant>SQLITE_ASSOC</constant> ist Standard.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Liefert ein Array der Datentypen aller Spalten oder &false; im Fehlerfall.
  </para>
  &sqlite.case-fold;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>Added <parameter>result_type</parameter></entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Prozedurales Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$db = sqlite_open('mysqlitedb');
sqlite_query($db, 'CREATE TABLE foo (bar varchar(10), arf text)');
$cols = sqlite_fetch_column_types('foo', $db, SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Spalte: $column  Typ: $type";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Objektorientiertes Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$db = new SQLiteDatabase('mysqlitedb');
$db->query('CREATE TABLE foo (bar varchar(10), arf text)');
$cols = $db->fetchColumnTypes('foo', SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Spalte: $column  Typ: $type";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Spalte: bar  Typ: VARCHAR
Spalte: arf  Typ: TEXT
]]>
    </screen>
   </example>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
