<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.1 Maintainer: hartmann Status: working -->
<refentry id="function.sqlite-query">
 <refnamediv>
  <refname>sqlite_query</refname>
  <refpurpose>Führt auf einer Datenbank eine Abfrage durch und liefert das Abfrageergebnis zurück.</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Beschreibung</title>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_query</methodname>
   <methodparam><type>resource</type><parameter>db</parameter></methodparam>
   <methodparam><type>string</type><parameter>Abfrage</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_query</methodname>
   <methodparam><type>string</type><parameter>Abfrage</parameter></methodparam>
   <methodparam><type>resource</type><parameter>db</parameter></methodparam>
  </methodsynopsis>
  <para>
   Führt die den durch <parameter>Abfrage</parameter> gegebenen SQL-Befehl 
   auf der Datenbank <parameter>db</parameter> durch, 
  </para>
  <para>
   Für Abfrage, die Zeilen zurückliefern, gibt diese Funktion ein
   Abfrageergebnis zurück, dass von Funkionen wie <function>
    sqlite_fetch_array</function> oder auch <function>sqlite_seek</function>
   genutzt werden kann.
  </para>
  <para>
   Für alle anderen Arten von Abfragen gibt diese Funktion ein boolsches
   Resultat zurück, &true; bei Erfolg und &false; bei einem Fehler. 
  </para>
  <para>
   Unabhänging vom Abfragetyp liefert die Funktion &false; zurück wenn 
   die Abfrage fehlschlägt.
  </para>
  <para>
   <function>sqlite_query</function> gib ein gepuffertes Ergebnis, dessen Zeilen 
   einzeln Ansprechbar sind. Dies ist für kleine Abfragen nützlich, bei 
   denen man abwechselnd unterschiedliche Zeilen abfragen will. 
   Die gepufferten Ergebnisse belegen Speicher, um das gesamte Ergebnis
   halten zu können. Dieser Speicher wird erst dann wieder freigegeben, 
   wenn das komplette Ergebnis durchlaufen wurde. Wenn nur ein sequentieller 
   Zugriff auf die Daten nötig ist, wird empfohlen, die performantere 
   Funktion <function>sqlite_unbuffered_query</function> zu nutzen. 
  </para>
  <note>
   <simpara>
    
    Two alternative syntaxes are supported for compatibility with other
    database extensions (such as MySQL).
    The preferred form is the first one, where the
    <parameter>db</parameter> parameter is the first parameter to the
    function.
   </simpara>
  </note>
  <warning>
   <simpara>
    SQLite <emphasis>will</emphasis> execute multiple queries separated by
    semicolons, so you can use it to execute a batch of SQL that you have
    loaded from a file or have embedded in a script.
   </simpara>
   <simpara>
    When executing multiple queries, the return value of this function
    will be &false; if the was an error, but undefined otherwise (it might
    be &true; for success or it might return a result handle).
   </simpara>
  </warning>
  <para>
   See also <function>sqlite_array_query</function>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
