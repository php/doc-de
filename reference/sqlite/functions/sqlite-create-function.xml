<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<refentry id="function.sqlite-create-function">
 <refnamediv>
  <refname>sqlite_create_function</refname>
  <refpurpose>Erzeugt eine "reguläre" nutzerdefinierte Funktion für den Gebrauch in SQL-Befehlen.</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Beschreibung</title>
  <methodsynopsis>
   <type>bool</type><methodname>sqlite_create_function</methodname>
   <methodparam><type>resource</type><parameter>db</parameter></methodparam>
   <methodparam><type>string</type><parameter>SQL-Funktionsname</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
  </methodsynopsis>
  <para>   
   <function>sqlite_create_function</function> erlaubt Ihnen, eine 
   PHP-Funktion in SQLite als <acronym>UDF</acronym> (User Defined 
   Function = Nutzerdefinierte Funktion> zu erzeugen, so dass diese 
   direkt in SQL-Befehlen genutzt werden kann. 
  </para>
  <para>
   <parameter>db</parameter> spezifiziert die Datenbank, die um die Funktion
   erweitert werden soll, <parameter>SQL-Funktionsname</parameter> den Namen
   der Funktion, wie er in den SQL-Befehlen genutzt werden soll. 
   <parameter>callback</parameter> ist eine beliebige gültige PHP-Funktion oder 
   Methode, die aufgerufen werden soll, um die SQL-Funktion abzuarbeiten.
   Der optionale Parameter <parameter>num_args</parameter> wird vom 
   SQLite-Parser als Hinweis auf die Parameterzahl genutzt.
   Es wird empfohlen, diesen Wert zu definieren, wenn Ihre Funktion immer
   mit der gleichen Parameterzahl arbeitet. 
  </para>
  <para>
   Die UDF kann in jedem SQL-Befehl, der Funktionsaufrufe beinhalten
   kann, genutzt werden, wie z.B. SELECT, UPDATE oder auch Trigger.
  </para>

  <para>
   <example>
    <title><function>sqlite_create_function</function> Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
function md5_rueckwaerts($string) {
    return strrev(md5($string));
}

sqlite_create_function($db, 'md5rw', 'md5_rueckwaerts', 1);

$rows = sqlite_array_query($db, 'SELECT md5rw(filename) from files');
?>]]>
    </programlisting>
   </example>
  </para>
  <para>
   In diesem Beispiel haben wir eine Funktion, die die md5-Summe eines
   Strings berechnet und dann rueckwaerts ausliefert. Wenn der SQL-Befehl 
   durchgeführt wird, liefert er den Wert der Spalte filename durch unsere 
   Funktion transformiert zurück. Die Daten, die in <parameter>$rows</parameter>
   stehen, enhalten also die bereits gewandelten Daten. 
  </para>
  <para>
   Die Eleganz dieser Technik ist das Vermeiden des Durchfahrens des kompletten
   Abfrageergebnisses mit einer foreach()-Schleife.
  </para>

  <para>
   PHP registriert ausserdem automatisch eine spezielle Funktion 
   mit dem Namen <literal>php</literal>
   wenn die Datenbank <parameter>db</parameter> zum ersten Mal geöffnet wird. 
   Diese Funktion kann genutzt werden, um eine beliebige PHP-Funktion 
   aufzurufen, ohne dass sie zunächst für SQLite erzeugt werden muss. 
  </para>
  <para>
   <example>
    <title>Beispiel der Nutzung einer PHP-Funktion</title>
    <programlisting role="php">
<![CDATA[
<?php
$rows = sqlite_array_query($db, "SELECT php('md5', filename) from files");
?>]]>
    </programlisting>
    <para>
     In diesem Beispiel wird die Funktion <function>md5</function> für
     jeden Eintrag der Spalte <literal>filename</literal> in der Datenbank
     aufgerufen und das Ergebnis in <parameter>$rows</parameter> geschrieben.
    </para>
   </example>
  </para>
  <note>
   <para>
    Aus Performancegründen kodiert/dekodiert PHP nicht automatisch die 
    Binärdaten der Spalten, die in die UDF/aus der UDF geliefert werden. 
    Daher müssen Sie die Parameter und Rückgabewerte der Funktion jeweils selbst 
    wandeln.
   </para>
  </note>
  <tip>
   <para>
    Es wird empfohlen, die UDFs nicht für Binärdaten zu nutzen, wenn 
    Ihre Anwendung eine hohe Geschwindigkeit aufweisen soll.
   </para>
  </tip>
  <para>
   Siehe auch <function>sqlite_register_aggregate</function>. 
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
