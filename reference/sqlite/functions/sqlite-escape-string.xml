<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: lapistano Status: ready -->
<refentry xml:id="function.sqlite-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sqlite_escape_string</refname>
  <refpurpose>Bereitet einen String für die Verwendung als SQL-Parameter auf</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sqlite_escape_string</methodname>
   <methodparam><type>string</type><parameter>item</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_escape_string</function> bereitet den String
   <parameter>item</parameter> so auf, dass er korrekt innerhalb eines
   SQL-Befehls als Parameter genutzt werden kann. Diese Wandlung enhält 
   die Verdopplung von einfachen Anführungszeichen (<literal>'</literal>)
   und die Überprüfung von nicht binärkompatiblen Zeichen. 
  </para>
  <para>
   Auch wenn die Aufbereitung ein sicheres Einfügen der Daten ermöglicht, 
   werden einfache Stringvergleiche und <literal>LIKE</literal>-Bedingungen
   in Ihren Abfragen unbrauchbar gemacht, wenn die Spalten Binärdaten enthalten. 
   In der Praxis sollte dies kein Problem darstellen, weil Ihr Datenbankschema 
   so ausgelegt sein sollte, dass keine Binärdaten genutzt werden 
   (denn eigentlich könnte es besser sein, die Binärdaten auf andere Art 
   und Weise z.B. in Dateien zu speichern).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>item</parameter></term>
     <listitem>
      <para>
       The <type>string</type> being quoted.
      </para>
      <para>
       Beinhaltet der Parameter <parameter>item</parameter> einen 
       <literal>NUL</literal> Zeichen oder wenn er mit einem Zeichen beginnt,
       dessen ORDINAL Wert <literal>0x01</literal> ist, wird PHP ein binäres 
       ENCODING Format anwenden, dass man sicher binäre Daten speichern 
       und auslesenn kann.
        
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns an escaped <type>string</type> for use in an SQLite SQL statement.
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    Nutzen Sie diese Funktion nicht, um Rückgabewerte von 
    benutzerdefinierten Funktionen (UDF) vorzubereiten, die mittels 
    von <function>sqlite_create_funtion</function> oder
    <function>sqlite_create_aggregate</function>erzeugt wurden.
    Nutzen Sie <function>sqlite_udf_encode_binary</function> stattdessen.
   </simpara>
  </note>
  <warning>
   <simpara>
    <function>addslashes</function> sollte <emphasis>NICHT</emphasis> genutzt 
    werden, um Strings für SQLite-Anfragen aufzubereiten; es kann zu undefinierten
    Resultaten beim Abfragen der Daten führen.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlite_udf_encode_binary</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
