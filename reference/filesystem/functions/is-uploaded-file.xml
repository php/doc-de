<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.3 Maintainer: tom Status: ready -->
  <refentry xml:id="function.is-uploaded-file" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>is_uploaded_file</refname>
    <refpurpose>Prüft, ob die Datei mittels HTTP POST upgeloaded wurde
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_uploaded_file</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt &true; zurück, wenn die Datei <parameter>filename</parameter>
     mittels HTTP POST upgeloaded wurde. Das ist hilfreich sicherzustellen,
     dass kein böswilliger User versucht hat das Script zu überlisten, indem 
     er es Dateien bearbeiten lässt, die es gar nicht bearbeiten sollte.
     Zum Beispiel <filename>/etc/passwd</filename>.
    </para>
    <para>
     Diese Prüfung ist speziell dort interessant, wo irgendeine Aktion mit 
     upgeloadeten Dateien deren Inhalt dem User zugänglich machen könnte 
     (oder auch anderen Usern auf dem selben System).
    </para>
    <para>
     <function>is_uploaded_file</function> ist in PHP 3 nur nach Version
     3.0.16, und in PHP 4 nur nach Version 4.0.2 verfügbar. Sollten Sie
     eine frühere Version benutzen, können Sie sich mit der folgenden
     Funktion weiterhelfen:
     <note>
      <para>
       Das folgende Beispiel funktioniert <emphasis>nicht</emphasis> in
       Versionen nach PHP 4.0.2. Das liegt an der internen Funktionalität
       von PHP, welche sich nach dieser Version geändert hat.
      </para>
     </note>
     <programlisting role="php">
<![CDATA[
<?php
/* Userland Test für hochgeladene Datei. */
function is_uploaded_file($filename) {
    if (!$tmp_file = get_cfg_var('upload_tmp_dir')) {
        $tmp_file = dirname(tempnam('', ''));
    }
    $tmp_file .= '/' . basename($filename);
    /* Der Benutzer könnte einen führenden Slash in php.ini haben... */
    return (ereg_replace('/+', '/', $tmp_file) == $filename);
}

/* So verwenden Sie sie, nachdem Sie in diesen älteren
 * Versionen auch keine move_uploaded_file() haben: */
if (is_uploaded_file($HTTP_POST_FILES['userfile'])) {
    copy($HTTP_POST_FILES['userfile'], "/place/to/put/uploaded/file");
} else {
    echo "Mögliche Dateiupload-Attacke: Dateiname '$HTTP_POST_FILES[userfile]'.";
}
?>
]]>
     </programlisting>
    </para>
    <para>
     Siehe auch <function>move_uploaded_file</function>, und das Kapitel
     <link linkend="features.file-upload">Steuerung von Dateiuploads</link>
     für ein einfaches Anwendungsbeispiel.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
