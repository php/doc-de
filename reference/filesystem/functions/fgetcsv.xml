<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.3 Maintainer: tom Status: ready -->
  <refentry id="function.fgetcsv">
   <refnamediv>
    <refname>fgetcsv</refname>
    <refpurpose>
     Liest eine Zeile von der Position des Dateizeigers und 
     prüft diese auf Komma-Separierte-Werte (CSV)
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>fgetcsv</methodname>
      <methodparam><type>int</type><parameter>fp</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>delimiter</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Die Funktion <function>fgetcsv</function> handelt ähnlich der
     Funktion <function>fgets</function>, bis auf den Umstand, das
     <function>fgetcsv</function> die eingelesene Zeile auf
     Kommaseparierte Felder hin überprüft. Das Ergebnis wird als Array
     zurückgegeben.  Als Trennzeichen (Delimiter) wird - wenn kein
     anderes Trennzeichen im dritten optionalen Parameter angegeben
     wird - das Komma benutzt.
    </simpara>
    <simpara>
     Der Dateizeiger <parameter>fp</parameter> muss gültig sein,
     d.h. die Datei, auf die gezeigt wird, muss zuvor mit
     <function>fopen</function>, <function>popen</function> oder
     <function>fsockopen</function> geöffnet worden sein.
    </simpara>
    <simpara>
     <parameter>Length</parameter> muss größer sein als die längste in der
     CSV-Datei vorhandene Zeile (um das Erkennen von EndOfLine (Ende der
     Zeile) Zeichen zu ermöglichen).
    </simpara>
    <simpara>
     <function>fgetcsv</function> gibt bei Lesefehlern und am Dateiende
     &false; zurück.
    </simpara>
    <note>
     <simpara>
      Eine leere Zeile der CSV-Datei wird als Array mit einem Feld das
      den Wert &null; hält zurückgegeben. Sie wird nicht als Fehler
      behandelt.
     </simpara>
    </note>
    <example>
     <title>
      <function>fgetcsv</function> Beispiel - Lesen und Ausgabe des
      Inhalts einer CSV-Datei
     </title>
     <programlisting role="php">
<![CDATA[
$row = 1;                                  // Anzahl der Arrays
$fp = fopen ("test.csv","r");              // Datei wird zum Lesen 
                                           // geöffnet
while ($data = fgetcsv ($fp, 1000, ",")) { // Daten werden aus der Datei
                                           // in einen Array $data gelesen
    $num = count ($data);                  // Felder im Array $data 
                                           // werden gezählt
    print "<p> $num fields in line $row: <br>";
    $row++;                                // Anzahl der Arrays wird 
                                           // inkrementiert
    for ($c=0; $c < $num; $c++) {          // FOR-Schleife, um Felder 
        print $data[$c] . "<br>";          // des Arrays auszugeben
    }
}
fclose ($fp);
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
