<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.7 Maintainer: tom Status: ready -->
  <refentry id="function.fgets">
   <refnamediv>
    <refname>fgets</refname>
    <refpurpose>
     Liest eine Zeile von der Position des Dateizeigers
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>fgets</methodname>
      <methodparam><type>resource</type><parameter>handle</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt eine Zeile bis zu <parameter>length</parameter> -1 Bytes 
     Länge zurück, welche aus der Datei von der aktuellen Position des 
     Dateizeigers <parameter>handle</parameter> aus ausgelesen wird. Die 
     Zeile endet an einem Zeilenumbruch (welcher im Rückgabewert enthalten 
     ist), EOF (Ende der Datei) oder bei <parameter>length</parameter>
     - 1 Bytes (je nachdem, was eher auftritt). Ist keine Länge angegeben,
     wird diese auf 1k bzw. 1024 Bytes gesetzt.
    </para>
    <para>
     Wenn ein Fehler auftritt, wird &false; zurückgegeben.
    </para>
    <para>
     Häufig auftretende Fehler:
    </para>
    <simpara>
     Wenn Sie an die C-Semantik von <function>fgets</function> gewöhnt sind,
     sollten Sie auf die unterschiedliche Behandlung von <literal>EOF</literal>
     (genauer: wie EOF zurückgegeben wird) achten.
    </simpara>
    <simpara>
     Der Datei-Zeiger <parameter>fp</parameter> muss gültig sein,
     d.h. die Datei, auf die gezeigt wird, muss zuvor mit
     <function>fopen</function>, <function>popen</function>, oder
     <function>fsockopen</function> geöffnet worden sein.
    </simpara>
    <para>
     Ein einfaches Beispiel:
     <example>
      <title>Eine Datei Zeile für Zeile einlesen</title>
      <programlisting role="php">
<![CDATA[
$handle = fopen ("/tmp/inputfile.txt", "r");
while (!feof($handle)) {
    $buffer = fgets($handle, 4096);
    echo $buffer;
}
fclose ($handle);
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      Der Parameter <parameter>length</parameter> wurde in PHP 4.2.0
      optional. Ist er nicht angegeben, wird als Zeilenlänge 1024
      angenommen. Seit PHP 4.3 wird bei einem fehlenden Parameter
      <parameter>length</parameter> so lange gelesen, bis das Ende der
      Zeile erreicht ist. Ist der Großteil der Zeilen in der Datei
      größer als 8 kB, ist es effizienter, wenn Sie die maximale
      Zeilenlänge spezifizieren.
     </simpara>
    </note>
    <note>
     <simpara>
      Diese Funktion ist seit PHP 4.3 "binary safe", was aus frühere
      Versionen nicht zutrifft.
     </simpara>
    </note>
    &note.line-endings;
    <para>
     Siehe auch <function>fread</function>, <function>fopen</function>,
     <function>popen</function>, <function>fgetc</function>,
     <function>fsockopen</function> und 
     <function>socket_set_timeout</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
