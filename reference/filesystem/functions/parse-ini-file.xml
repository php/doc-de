<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334762 Maintainer: simp Status: ready -->

<refentry xml:id="function.parse-ini-file" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>parse_ini_file</refname>
  <refpurpose>Parst eine Konfigurationsdatei</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>parse_ini_file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>process_sections</parameter><initializer>false</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>scanner_mode</parameter><initializer>INI_SCANNER_NORMAL</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>parse_ini_file</function> lädt die in
   <parameter>filename</parameter> angegebene Datei, und gibt
   die darin enthaltenen Einstellungen in einem assoziativen
   Array zurück.
  </para>
  <para>
   Die Struktur der Ini-Datei ist identisch zur &php.ini;.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Der Dateiname der zu ladenden ini-Datei.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>process_sections</parameter></term>
     <listitem>
      <para>
       Setzt man den Parameter <parameter>process_sections</parameter>
       auf &true;, erhält man ein mehrdimensionales Array mit den 
       Gruppennamen und Einstellungen. Der Standardwert für 
       <parameter>process_sections</parameter> ist &false;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>scanner_mode</parameter></term>
     <listitem>
      <para>
       Kann entweder <constant>INI_SCANNER_NORMAL</constant> (Standard) oder
       <constant>INI_SCANNER_RAW</constant> sein. Ist 
       <constant>INI_SCANNER_RAW</constant> gesetzt, so werden die Werte der
       Optionen nicht geparst.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Im Erfolgsfall werden die Einstellungen als assoziatives <type>Array</type>
   zurückgegeben, ansonsten &false;.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Der optionale Parameter <parameter>scanner_mode</parameter> wurde
        hinzugefügt. 
        Einfache Anführungszeichen können nun um Variablenzuordnungen herum
        verwendet werden.
        Rautezeichen (<literal>#</literal> können nicht länger für Kommentare
        verwendet werden und bei Verwendung wird eine Warnung zur veralteten
        Benutzung ausgegeben.
       </entry>
      </row>
      <row>
       <entry>5.2.7</entry>
       <entry>
        Bei einem Syntaxfehler gibt die Funktion nun &false; statt eines leeren
        Array zurück.
       </entry>
      </row>
      <row>
       <entry>5.2.4</entry>
       <entry>
        Schlüssel und Gruppennamen mit Ziffern werden nun als 
        <link linkend="language.types.integer">Integer</link> von PHP ausgewertet,
        weshalb Zahlen, die mit einer 0 beginnen, als Oktalzahlen und Zahlen, die mit
        0x beginnen, als Hexadezimalzahlen verstanden werden.
       </entry>
      </row>
      <row>
       <entry>5.0.0</entry>
       <entry>
        In doppelten Anführungszeichen eingeschlossene Werte können nun Zeilenumbrüche
        enthalten.
       </entry>
      </row>
      <row>
       <entry>4.2.1</entry>
       <entry>
        Die Funktion wird nun durch die Einstellungen &safemode;
        und <link linkend="ini.open-basedir">open_basedir</link> beeinflusst.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
   </refsect1>
   
   <refsect1 role="examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Inhalt der <filename>sample.ini</filename></title>
      <programlisting>
<![CDATA[
; Dies ist ein Beispiel für eine Konfigurationsdatei
; Kommentare beginnen wie in der php.ini mit ';'

[erste_gruppe]
eins = 1
fünf = 5
tier = VOGEL

[zweite_gruppe]
pfad = /usr/local/bin
URL = "http://www.example.com/~username"

[dritte_gruppe]
phpversion[] = "5.0"
phpversion[] = "5.1"
phpversion[] = "5.2"
phpversion[] = "5.3"
]]>
           </programlisting>
          </example>
          <example>
           <title><function>parse_ini_file</function>-Beispiel</title>
           <para>
            <link linkend="language.constants">Konstanten</link> in einer Ini-Datei
            können ebenfalls geparst werden indem man eine Konstante als INI-Wert
            definiert, bevor <function>parse_ini_file</function> aufgerufen wird.
            Dieser Wert wird in die Ergebnisse integriert, dabei werden nur INI-Werte
            ausgewertet. Zum Beispiel:
           </para>
<programlisting role="php"><![CDATA[
<?php

define ('VOGEL', 'Amsel');

// Ohne Gruppen analysieren
$ini_array = parse_ini_file("sample.ini");
print_r($ini_array);

// Mit Gruppen analysieren
$ini_array = parse_ini_file("sample.ini", TRUE);
print_r($ini_array);

?>
]]>
      </programlisting>
      &example.outputs.similar;
      <screen>
<![CDATA[
Array
(
  [eins] => 1
  [fünf] => 5
  [tier] => Amsel
  [pfad] => /usr/local/bin
  [URL] => http://www.example.com/~username
  [phpversion] => Array
      (
          [0] => 5.0
          [1] => 5.1
          [2] => 5.2
          [3] => 5.3
      )

)
Array
(
  [erste_gruppe] => Array
      (
          [eins] => 1
          [fünf] => 5
          [tier] => Amsel
      )

  [zweite_gruppe] => Array
      (
          [pfad] => /usr/local/bin
          [URL] => http://www.example.com/~username
      )

  [dritte_gruppe] => Array
      (
          [phpversion] => Array
              (
                  [0] => 5.0
                  [1] => 5.1
                  [2] => 5.2
                  [3] => 5.3
              )

      )


)
]]>
      </screen>
          </example>
     </para>
     
     <para>
      <example>
       <title><function>parse_ini_file</function> parst eine php.ini</title>
       <programlisting role="php">
<![CDATA[
    <?php
    // Eine einfache Funktion, um das Ergebnis zu vergleichen
    function janein($expression)
    {
        return($expression ? 'Ja' : 'Nein');
    }
    
    // Pfad der php.ini mittels der Funktion php_ini_loaded_file()
    // holen, die seit PHP 5.2.4 verfügbar ist
    $ini_path = php_ini_loaded_file();
    
    // Parsen der php.ini
    $ini = parse_ini_file($ini_path);
    
    // Werte ausgeben und vergleichen. Beachten Sie dass die Verwendung von
    // get_cfg_var() die gleichen Ergebnisse für geparste und geladene
    // Werte geben wird
    echo '(geparst) magic_quotes_gpc = ' . janein($ini['magic_quotes_gpc']) . PHP_EOL;
    echo '(geladen) magic_quotes_gpc = ' . janein(get_cfg_var('magic_quotes_gpc')) . PHP_EOL;
    ?>
    ]]>
        </programlisting>
        &example.outputs.similar;
        <screen>
<![CDATA[
    (geparst) magic_quotes_gpc = Ja
    (geladen) magic_quotes_gpc = Nein
    ]]>
        </screen>
     </example>
     </para>
   </refsect1>
   
   <refsect1 role="notes">
    &reftitle.notes;
    <note>
     <para>
      Diese Funktion hat nichts mit dem Laden der &php.ini;-Datei
      zu tun. Diese ist zum Ausführungszeitpunkt Ihres Skriptes
      bereits vollständig verarbeitet. Diese Funktion kann verwendet
      werden, um die Konfigurationsdateien Ihrer eigenen Anwendung
      zu lesen.
     </para>
    </note>
    <note>
     <para>
      Falls ein Wert der Ini-Datei ein nicht alphanumerisches
      Zeichen enthält muss dieser Wert in doppelte Anführungszeichen (")
      eingeschlossen werden.
     </para>
    </note>
    <note>
     <simpara>
      Es gibt reservierte Schlüsselwörter, welche nicht als Schlüssel
      in Ini-Dateien verwendet werden dürfen. Diese umfassen: null, yes, 
      no, true, false, on, off, none.
      Die Werte null, off, no und false ergeben "".
      Die Werte on, yes and true ergeben "1".
      Die Zeichen <literal>?{}|&amp;~![()^"</literal> dürfen in einem Schlüssel
      nicht verwendet werden und haben im Wert besondere Bedeutung.
     </simpara>
    </note>
    <note>
     <para>
      Einträge ohne Gleichheitszeichen werden ignoriert. Beispielsweise
      würde "foo" ignoriert werden, während "bar =" geparst und mit einem
      leeren Wert hinzugefügt würde. Beispielsweise hat MySQL eine 
      Einstellung "no-auto-rehash" in der <filename>my.cnf</filename> welche
      keinen Wert enthält und somit ignoriert würde.
     </para>
    </note>
   </refsect1>
   
   <refsect1 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><function>parse_ini_string</function></member>
     </simplelist>
    </para>
   </refsect1>
   
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
