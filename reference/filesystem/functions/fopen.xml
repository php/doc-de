<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336902 Maintainer: khp Status: ready -->
<refentry xml:id="function.fopen" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>fopen</refname>
  <refpurpose>Öffnet eine Datei oder URL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>fopen</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam><type>string</type><parameter>mode</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>use_include_path</parameter><initializer>false</initializer></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>context</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>fopen</function> bindet eine benannte Ressource, die durch
   <parameter>filename</parameter> spezifiziert wurde, an einen Stream.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Hat <parameter>filename</parameter> die Form "schema://..."
       wird angenommen, dass es sich hier um einen URL handelt und PHP sucht
       nach einem Protokollhandler (auch als Wrapper bekannt) für dieses
       Schema. Sind keine Wrapper für dieses Protokoll registriert, gibt
       PHP als Hilfe zum Verfolgen potentieller Probleme in Ihrem Skript
       einen Hinweis aus und setzt dann weiter fort, als wenn
       <parameter>filename</parameter> eine reguläre Datei spezifiziert.
      </para>
      <para>
       Ist PHP zu dem Schluss gekommen, dass <parameter>filename</parameter>
       eine lokale Datei spezifiziert, wird es versuchen, einen Stream
       an dieser Datei zu öffnen. Die Datei muss für PHP zugreifbar sein,
       weshalb Sie sicherstellen müssen, dass die Dateirechte diesen
       Zugriff ermöglichen. Wenn Sie &safemode; oder
       <link linkend="ini.open-basedir">open_basedir</link> aktiviert haben,
       können weitere Einschränkungen zutreffen.
      </para>
      <para>
       Kam PHP zum Schluss, dass es sich bei <parameter>filename</parameter>
       um ein registriertes Protokoll handelt, und ist dieses Protokoll
       als ein Netzwerk URL registriert, prüft PHP, ob
       <link linkend="ini.allow-url-fopen">allow_url_fopen</link> aktiviert
       ist. Ist es nicht aktiviert, gibt PHP eine Warnung aus, und der
       Aufruf von fopen wird scheitern.
      </para>
      <note>
       <para>
        Die Liste der unterstützten Protokolle können Sie unter
        <xref linkend="wrappers"/> finden. Einige Protokolle (auch als
        <literal>Wrapper</literal> bezeichnet)
        unterstützen <literal>context</literal> und/oder &php.ini; Optionen.
        Beziehen sie sich auf die jeweilige Seite für das genutzte Potokoll,
        um eine Liste der Optionen, die gesetzt werden können, zu erhalten.
        (z.B. &php.ini; Wert <literal>user_agent</literal> genutzt vom
        <literal>http</literal> Wrapper).
       </para>
      </note>
      <para>
       Achten sie darauf, unter Windows alle Backslash-Zeichen, die in Pfaden
       genutzt werden, zu maskieren oder nutzen sie Schrägstriche (Slash).
       <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
$handle = fopen("c:\\verzeichnis\\ressource.txt", "r");
?>
]]>
        </programlisting>
       </informalexample>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Der <parameter>mode</parameter> Parameter spezifiziert den Zugriffstyp,
       den sie auf den Stream anfordern. Es kann einer der folgenden sein:
       <table>
        <title>
         Eine Liste der möglichen Modi von <function>fopen</function> mittels
         <parameter>mode</parameter>
        </title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry><parameter>mode</parameter></entry>
           <entry>Beschreibung</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><literal>'r'</literal></entry>
           <entry>
            Nur zum Lesen geöffnet; platziere Dateizeiger auf Dateianfang.
           </entry>
          </row>
          <row>
           <entry><literal>'r+'</literal></entry>
           <entry>
            Zum Lesen und Schreiben geöffnet; platziere Dateizeiger auf
            Dateianfang.
           </entry>
          </row>
          <row>
           <entry><literal>'w'</literal></entry>
           <entry>
            Nur zum Schreiben geöffnet; platziere Dateizeiger auf Dateianfang
            und kürze die Datei auf eine Länge von 0. Existiert die Datei
            nicht, versuche, diese zu erzeugen.
           </entry>
          </row>
          <row>
           <entry><literal>'w+'</literal></entry>
           <entry>
            Zum Schreiben und Lesen geöffnet; platziere Dateizeiger auf
            Dateianfang und kürze die Datei auf eine Länge von 0. Existiert
            die Datei nicht, versuche, diese zu erzeugen.
           </entry>
          </row>
          <row>
           <entry><literal>'a'</literal></entry>
           <entry>
            Nur zum Schreiben geöffnet; platziere Dateizeiger auf Dateiende.
            Existiert die Datei nicht, versuche, diese zu erzeugen.
            In diesem Modus wirkt sich <function>fseek()</function> nur auf die
            Leseposition aus; beim Schreiben wird immer angehängt.
           </entry>
          </row>
          <row>
           <entry><literal>'a+'</literal></entry>
           <entry>
            Zum Schreiben und Lesen geöffnet; platziere Dateizeiger auf
            Dateiende. Existiert die Datei nicht, versuche, diese zu erzeugen.
            In diesem Modus wirkt sich <function>fseek()</function> nur auf die
            Leseposition aus; beim Schreiben wird immer angehängt.
           </entry>
          </row>
          <row>
           <entry><literal>'x'</literal></entry>
           <entry>
            Erzeuge und Öffne nur zum Schreiben; platziere Dateizeiger auf
            Dateianfang. Falls die Datei schon existiert, wird der
            <function>fopen</function> Aufruf fehlschlagen durch Rückgabe von
            &false; und dem Auslösen eines Fehlers der Stufe
            <constant>E_WARNING</constant>. Existiert die Datei nicht,
            versuche, diese zu erzeugen. Dies ist zur Angabe der
            <literal>O_EXCL|O_CREAT</literal> Flags für den darunterliegenden
            <literal>open(2)</literal> System Aufruf äquivalent.
           </entry>
          </row>
          <row>
           <entry><literal>'x+'</literal></entry>
           <entry>
            Erzeuge und Öffne zum Schreiben und Lesen; ansonsten ist das
            Verhalten gleich wie bei <literal>'x'</literal>.
           </entry>
          </row>
          <row>
           <entry><literal>'c'</literal></entry>
           <entry>
            Öffne Datei nur zum Schreiben. Wenn die Datei nicht existiert,
            wird diese erzeugt. Wenn sie existiert, wird sie weder gekürzt (im
            Gegensatz zu <literal>'w'</literal>), noch schlägt der Aufruf
            dieser Funktion fehl (wie dies mit <literal>'x'</literal> der Fall
            ist). Der Dateizeiger wird auf den Dateianfang platziert. Dies
            kann nützlich sein, wenn man eine "beratende" (kooperative) Sperre
            erhalten möchte (siehe <function>flock</function>) bevor man
            versucht, die Datei zu ändern, da die Nutzung
            von <literal>'w'</literal> die Datei kürzen könnte, bevor die
            Sperre erhalten wurde (falls Kürzen gewünscht ist, kann
            <function>ftruncate</function> genutzt werden, nachdem die Sperre
            angefragt wurde).
           </entry>
          </row>
          <row>
           <entry><literal>'c+'</literal></entry>
           <entry>
            Öffne Datei zum Lesen und Schreiben; ansonsten ist das
            Verhalten gleich wie bei <literal>'c'</literal>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <note>
       <para>
        Verschiedene Betriebssysteme haben unterschiedliche Konventionen für das Zeilenende.
        Wenn Sie eine Textdatei schreiben und einen
        Zeilenumbruch einfügen möchten, müssen Sie das/die korrekte(n)
        Zeilenendszeichen für Ihr Betriebssystem nutzen. Unix-basierte
        Systeme nutzen <literal>\n</literal> als Zeilenendszeichen, Windows-basierte
        Systeme nutzen <literal>\r\n</literal> als Zeilenendszeichen
        und Macintosh-basierte Systeme nutzen <literal>\r</literal> als
        Zeilenendszeichen.
       </para>
       <para>
        Wenn Sie die falschen Zeilenendszeichen beim Schreiben Ihrer Dateien
        nutzen, kann es sein, dass andere Anwendungen, die diese Dateien
        öffnen, "seltsam aussehen".
       </para>
       <para>
        Windows bietet einen Text-Mode translations Flag
        (<literal>'t'</literal>) an, der transparent <literal>\n</literal> zu
        <literal>\r\n</literal> übersetzt, wenn mit der Datei gearbeitet wird.
        Andererseits können sie auch <literal>'b'</literal> nutzen, um
        Binärmode zu erzwingen, der ihre Daten nicht übersetzt. Um diese Flags
        zu nutzen, geben sie entweder <literal>'b'</literal>
        oder <literal>'t'</literal> als das letzte Zeichen des
        <parameter>mode</parameter> Parameters an.
       </para>
       <para>
        Der Standard Übersetzungsmodus hängt von der SAPI und der PHP Version
        ab, die sie nutzen, daher ist es empfehlenswert, immer den passenden
        Flag aus Portabilitätsgründen anzugeben. Sie
        sollten <literal>'t'</literal> Modus nutzen, wenn sie mit Textdateien
        arbeiten und sie nutzen <literal>\n</literal> um die Zeilenenden im
        Skript zu begrenzen, erwarten aber, dass ihre Dateien mit Anwendungen
        wie etwa Notepad lesbar sind. Ansonsten sollten
        sie <literal>'b'</literal> nutzen.
       </para>
       <para>
        Wenn sie beim Arbeiten mit binären Dateien nicht das 'b' Flag angeben,
        können sie seltsame Probleme mit ihren Daten erleben, einschließlich
        zerstörter Bild Dateien und merkwürdiger Probleme mit
        <literal>\r\n</literal> Zeichen.
       </para>
      </note>
      <note>
       <para>
        Aus Portabilitätsgründen wird dringend empfohlen, dass sie immer das
        'b' Flag nutzen, wenn sie Dateien mit <function>fopen</function>
        öffnen.
       </para>
      </note>
      <note>
       <para>
        Außerdem wird aus Gründen der Portabilität dringend empfohlen, dass
        sie Code umschreiben, der den <literal>'t'</literal> Modus nutzt oder
        sich darauf verlässt, so dass die korrekten Zeilenendungen und der
        <literal>'b'</literal> Modus stattdessen genutzt werden.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>use_include_path</parameter></term>
     <listitem>
      <para>
       Der optionale dritte Parameter <parameter>use_include_path</parameter>
       kann auf '1' oder &true; gesetzt werden, wenn sie wollen, dass nach der
       Datei auch im <link linkend="ini.include-path">include_path</link>
       gesucht wird.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      &note.context-support;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt bei Erfolg eine Dateizeiger Ressource zurück oder &false; bei Fehlern.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Wenn das Öffnen fehlschlägt, wird ein Fehler der Stufe
   <constant>E_WARNING</constant> erzeugt. Sie können <link
   linkend="language.operators.errorcontrol">@</link> um diese Warnung zu
   unterdrücken.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.6</entry>
       <entry>
        Die <literal>'c'</literal> und <literal>'c+'</literal> Optionen wurde
        hinzugefügt
       </entry>
      </row>
      <row>
       <entry>4.3.2</entry>
       <entry>
        Die <literal>'x'</literal> und <literal>'x+'</literal> Optionen wurden
        hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>5.2.6</entry>
       <entry>
        Die <literal>'c'</literal> und <literal>'c+'</literal> Optionen wurden
        hinzugefügt.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>fopen</function> Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
$handle = fopen("/home/rasmus/file.txt", "r");
$handle = fopen("/home/rasmus/file.gif", "wb");
$handle = fopen("http://www.example.com/", "r");
$handle = fopen("ftp://user:password@example.com/somefile.txt", "w");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &warn.ssl-non-standard;
  &note.sm.uidcheck.dir;
  <note>
   <para>
    Wenn sie Probleme beim Lesen und Schreiben von Dateien haben und sie nutzen
    die Server Modul Version von PHP, denken sie daran, sicherzustellen, dass
    die Dateien und Verzeichnisse, die sie nutzen, für den Server Prozess
    zugänglich sind.
   </para>
  </note>
  <note>
   <para>
    Diese Funktion kann ebenfalls gelingen, wenn <parameter>filename</parameter>
    ein Verzeichnis ist. Im Zweifelsfall sollte vor dem Aufruf von
    <function>fopen</function> mit <function>is_dir</function> geprüft werden,
    ob <parameter>filename</parameter> eine Datei oder ein Verzeichnis ist.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="wrappers"/></member>
    <member><function>fclose</function></member>
    <member><function>fgets</function></member>
    <member><function>fread</function></member>
    <member><function>fwrite</function></member>
    <member><function>fsockopen</function></member>
    <member><function>file</function></member>
    <member><function>file_exists</function></member>
    <member><function>is_readable</function></member>
    <member><function>stream_set_timeout</function></member>
    <member><function>popen</function></member>
    <member><function>stream_context_create</function></member>
    <member><function>umask</function></member>
    <member><classname>SplFileObject</classname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
