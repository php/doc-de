<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- splitted from ./de/functions/filesystem.xml, last change in rev 1.22 -->
<!-- last change to 'fopen' in en/ tree in rev 1.2 -->
<!-- EN-Revision: 1.2 Maintainer: tom Status: ready -->
<!-- OLD-Revision: 1.142/EN.1.2 -->
  <refentry id="function.fopen">
   <refnamediv>
    <refname>fopen</refname>
    <refpurpose>Öffnet eine Datei oder URL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>fopen</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>string</type><parameter>mode</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>
        use_include_path
       </parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Wenn <parameter>filename</parameter> mit "http://" (nicht case
     sensitive) beginnt, wird zu dem spezifiziertem Server eine HTTP
     1.0 Verbindung geöffnet, die Seite mittels der HTTP GET Methode
     angefordert, und ein Dateizeiger auf den Anfang des Textes der 
     Antwort zurückgegeben. Ein 'Host:' header wird mit der Anfrage 
	 geschickt, um namens-basierte Virtual Hosts zu verarbeiten.
    </simpara>
    <simpara>
     Ab PHP 4.3.0 (noch nicht freigegeben) können Sie eine HTTP Verbindung
     über SSL mit "https://" verwenden, wenn Sie PHP mit Unterstützung für
     OpenSSL kompiliert haben.
    </simpara>
    <simpara>
     Beachten Sie, dass Ihnen der Dateizeiger nur den Empfang des 
     <emphasis>body</emphasis> aus der Antwort erlaubt. Um den HTTP
     Antwortheader zu erhalten, benötigen Sie PHP ab Version 4.0.5. Die
     Headers werden in der Variable $http_response_header gespeichert.
     Ab PHP 4.3.0 (noch nicht freigegeben) kann die Header Information
     mittels <function>file_get_wrapper_data</function> geholt werden.
    </simpara>
    <simpara>
     HTTP Verbindungen sind nur zum Lesen, d.h. Sie können keine Daten
     schreiben oder Dateien an eine HTTP Ressource kopieren.
    </simpara>
    <simpara>
     In älteren Versionen als PHP 4.0.5 werden Weiterleitungen (HTTP 
     Redirects) nicht unterstützt, hier muss die Datei daher vollständig 
     und mit abschließendem "/" beschrieben werden.
    </simpara>
    <simpara>
     Wenn <parameter>filename</parameter> mit "ftp://" (nicht case
     sensitive) beginnt, wird eine ftp-Connection zu dem
     spezifizierten Server geöffnet und ein Zeiger auf die
     angeforderte Datei zurückgegeben.  Wenn der Server keinen
     passiven FTP-Modus unterstützt, wird diese Methode
     fehlschlagen. Sie können Dateien entweder zum Schreiben oder
     zum Lesen öffnen, jedoch nicht für beides gleichzeitig. Wenn die
     entfernte Datei bereits auf dem FTP-Server existiert und Sie
     versuchen sie zum Schreiben zu öffnen, wird das nicht funktionieren.
     Wenn Sie bestehende Dateien über FTP aktualisieren wollen, verwenden
     Sie <function>ftp_connect</function>.
    </simpara>
    <simpara>
     Wenn <parameter>filename</parameter> "php://stdin",
     "php://stdout", oder "php://stderr" ist, wird der
     korrespondierende stdio stream geöffnet (Feature wurde in Version
     3.0.13 eingeführt, in früheren Versionen muss der Dateiname wie
     z.B. "/dev/stdin" oder "/dev/fd/0" benutzt werden, um auf die
     stdio streams zuzugreifen).
    </simpara>
    <simpara>
     Wenn <parameter>filename</parameter> mit irgendetwas anderem
     beginnt, wird die Datei vom lokalen Dateisystem geöffnet und ein
     Dateizeiger auf die geöffnete Datei zurückgegeben.
    </simpara>
    <simpara>
     Wenn das Öffnen scheitert, gibt die Funktion &false; zurück.
    </simpara>
    <para>
     <parameter>mode</parameter> kann einen der folgenden Werte
     einnehmen:
     <itemizedlist>
      <listitem>
       <simpara>
	'r' - öffnet die Datei nur zum Lesen und positioniert den
	Dateizeiger auf den Anfang der Datei.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
       	'r+' - Öffnet die Datei zum Lesen und Schreiben und setzt den
       	Dateizeiger auf den Anfang der Datei.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	'w' - Öffnet die Datei nur zum Schreiben und setzt den
	Dateizeiger auf den Anfang der Datei sowie die Länge der Datei
	auf 0 Byte. Wenn die Datei nicht existiert wird versucht sie
	anzulegen.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	'w+' - Öffnet die Datei zum Lesen und Schreiben und setzt den
	Dateizeiger auf den Anfang der Datei sowie die Länge der Datei
	auf 0 Byte. Wenn die Datei nicht existiert, wird versucht sie
	anzulegen.
      </simpara>
      </listitem>
      <listitem>
       <simpara>
	'a' - Öffnet die Datei nur zum Schreiben. Positioniert den
	Dateizeiger auf das Ende der Datei. Wenn die Datei nicht
	existiert, wird versucht sie anzulegen.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	'a+' - Öffnet die Datei zum Lesen und Schreiben. Positioniert
	den Dateizeiger auf das Ende der Datei. Wenn die Datei nicht
	existiert, wird versucht sie anzulegen.
       </simpara>
      </listitem>
     </itemizedlist>
     Zusätzlich kann <parameter>mode</parameter> der Buchstabe 'b'
     hinzugefügt werden, der die Behandlung von Binär-Dateien
     erlaubt. Dies ist nur auf Systemen sinnvoll, welche zwischen Binär-
     und Text-Dateien unterscheiden (z.B. Windows. Ist bei Unix sinnlos).
     Wenn das Feature nicht gebraucht wird, wird es einfach ignoriert.
    </para>
    <para>
     Sie können optional ein dritten Parameter benutzen und diesen auf
     '1' setzten, wenn Sie auch im <link
     linkend="ini.include-path">include_path</link> nach der Datei
     suchen möchten.
    </para>
    <para>
     <example>
      <title>fopen()</title>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("/home/simi/simi.txt", "r");
$fp = fopen ("/home/simi/simi.gif", "wb");
$fp = fopen ("http://www.example.com/", "r");
$fp = fopen ("ftp://user:password@example.com/", "w");
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Wenn Sie Probleme mit dem Lesen oder Schreiben von Dateien haben 
     und PHP als Servermodul benutzen, stellen Sie zunächst
     sicher, dass die Dateien und Verzeichnisse die Sie benutzen
     wollen auch für den Server-Prozess zugänglich sind
     (Rechtevergabe).
    </simpara>
    <para>
     Achten Sie auf Windows-Systemen darauf, dass Sie als
     Verzeichnistrenner normale Schrägstriche '/' benutzen um
     plattformunabhängig programmieren zu können. Sollten Sie dennoch
     Backslashes verwenden, vergessen Sie nicht diese zu escapen '\\'
     <informalexample>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("c:\\data\\info.txt", "r");
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Siehe auch <function>fclose</function>,
     <function>fsockopen</function>,
     <function>socket_set_timeout</function>, und 
     <function>popen</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
