<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.9 Maintainer: sammywg Status: ready -->
<refentry xml:id="function.setcookie" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>setcookie</refname>
  <refpurpose>Sendet ein Cookie</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>setcookie</methodname>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>path</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>domain</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>secure</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>httponly</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>setcookie</function> definiert ein mit den HTTP
   Header-Informationen zu übertragendes Cookie. Wie andere Header auch,
   müssen Cookies <emphasis>vor</emphasis> jeglicher Ausgabe Ihres Skriptes
   gesendet werden (dies ist eine Einschränkung des Protokolls). Das bedeutet,
   dass Sie diese Funktion aufrufen müssen, bevor Sie eine Ausgabe, dazu
   zählen auch <literal>&lt;html&gt;</literal>- oder
   <literal>&lt;head&gt;</literal>-Tags sowie jede Art von Whitespaces,
   übermitteln.
  </para>
  <para>
   Sind die Cookies einmal gesetzt, können Sie beim nächsten Seitenaufruf
   anhand der <link linkend="reserved.variables.cookies">$_COOKIE</link>
   oder <varname>$HTTP_COOKIE_VARS</varname> Arrays auf diese zugreifen.
   Beachten Sie, dass die <link
   linkend="language.variables.superglobals">Superglobals</link> wie
   <varname>$_COOKIE</varname> seit PHP 4.1.0 verfügbar sind.
   <varname>$HTTP_COOKIE_VARS</varname> existierte seit PHP 3. Die
   Cookie-Werte stehen auch in <link
   linkend="reserved.variables.request">$_REQUEST</link>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   Alle Argumente außer <parameter>name</parameter> sind optional. Sie können
   ein Argument auch mit einem leeren String (<emphasis>&quot;&quot;</emphasis>)
   ersetzen, wenn Sie es übergehen wollen. Da der
   <parameter>expire</parameter>-Parameter einen Integer-Wert darstellt, kann
   er nicht durch die Angabe eines Leerstrings übersprungen werden, verwenden
   Sie daher statt dessen die Null (<emphasis>0</emphasis>).
  </para>
  <para>
   Lesen Sie die <link xlink:href="&spec.cookies;">Netscape cookie specification</link>
   für die spezifische Funktionsweise der einzelnen <function>setcookie</function>
   Parameter.
   <variablelist>
    <varlistentry>
     <term><parameter>name</parameter></term>
     <listitem>
      <para>
       Der Name des Cookies.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Der Wert des Cookies. Dieser Wert wird auf dem Computer des Benutzers
       gespeichert, speichern Sie deshalb darin keine sensiblen Informationen.
       Angenommen der Parameter <parameter>name</parameter> ist 'cookiename',
       so erhält man seinen Wert mittels <varname>$_COOKIE['cookiename']</varname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expire</parameter></term>
     <listitem>
      <para>
       Der Zeitpunkt, an dem das Cookie ungültig wird. Dies ist ein Unix
       Timestamp, also die Anzahl Sekunden seit Beginn der Epoche. Mit anderen
       Worten, Sie werden diesen Wert wahrscheinlich mittels der Funktion
       <function>time</function> plus der Anzahl Sekunden bis zum gewünschten
       Ablauf des Cookies setzen. Sie könnten aber auch <function>mktime</function>
       verwenden.
       <literal>time()+60*60*24*30</literal> wird das Cookie in 30 Tagen
       ablaufen lassen. Hat der Parameter den Wert 0 oder ist er nicht
       gesetzt, verfällt das Cookie am Ende der Session (wenn der Browser
       geschlossen wird).
      </para>
      <para>
       <note>
        <para>
         Beachten Sie, dass der <parameter>expire</parameter>-Parameter einen
         Unix-Timestamp enthält, im Gegensatz zum Datumsformat <literal>Wdy,
         DD-Mon-YYYY HH:MM:SS GMT</literal>. Die Konvertierung wird von PHP intern
         durchgeführt.
        </para>
        <para>
         <parameter>expire</parameter> wird mit der lokalen Zeit des Clients verglichen,
         da diese von der Server-Zeit differieren kann.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>path</parameter></term>
     <listitem>
      <para>
       Der Pfad auf dem Server, für welchen das Cookie verfügbar sein wird.
       Ist er auf <literal>'/'</literal> gesetzt, wird das Cookie innerhalb
       der gesamten <parameter>domain</parameter> verfügbar. Ist er auf
       <literal>'/foo/'</literal> gesetzt, wird das Cookie nur innerhalb des
       Verzeichnisses <literal>/foo/</literal> sowie allen Unterverzeichnissen
       wie z.B. <literal>/foo/bar/</literal> der <parameter>domain</parameter>
       verfügbar. Der Standardwert ist das aktuelle Verzeichnis, in dem das
       Cookie gesetzt wurde.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>domain</parameter></term>
     <listitem>
      <para>
       Die Domain, der das Cookie zur Verfügung steht.
       Um das Cookie für alle Subdomains von example.com verfügbar zu
       machen, setzen Sie es auf <literal>'.example.com'</literal>. Der
       <literal>.</literal> ist zwar nicht erforderlich, macht die Angabe
       aber zu mehr Browsern kompatibel. Ein Setzen auf
       <literal>www.example.com</literal> macht das Cookie nur in der
       Subdomain <literal>www</literal> verfügbar. Weitere Details hierzu
       finden Sie in der <link xlink:href="&spec.cookies;">Spezifikation</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>secure</parameter></term>
     <listitem>
      <para>
       Gibt an, dass das Cookie vom Client nur über eine sichere
       HTTPS-Verbindung übertragen werden soll. Ist der Wert auf &true;
       gesetzt, wird das Cookie nur gesendet, wenn eine sichere Verbindung
       besteht. Der Standardwert ist &false;. Auf der Serverseite muss der
       Programmierer selbst darauf achten, dass entsprechende Cookies über
       eine sichere Verbindung gesendet werden (z.B. unter Berücksichtigung
       von <literal>$_SERVER['HTTPS']</literal>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>httponly</parameter></term>
     <listitem>
      <para>
       Wenn auf &true; gesetzt, ist das Cookie nur via HTTP-Protokoll
       zugreifbar. Das bedeutet, dass das Cookie nicht mehr für Skriptsprachen
       wie JavaScript auslesbar/veränderbar ist. Diese Einstellung kann
       eine effektive Hilfe sein, um Identitaetsdiebstahl per XSS-Angriff
       zu vermindern (allerdings wird dies nicht von allen Browsern
       unterstützt). Hinzugefügt in PHP 5.2.0.
       &true; oder &false;
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Erfolgt eine Ausgabe vor dem Aufruf dieser Funktion, wird
   <function>setcookie</function> fehlschlagen und &false; zurückgeben. Wenn
   <function>setcookie</function> erfolgreich durchgeführt wird, wird &true;
   zurückgegeben. Dies sagt jedoch nichts darüber aus, ob der Benutzer das
   Cookie auch akzeptiert hat.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Einige Beispiele, wie Cookies gesetzt werden:
   <example>
    <title><function>setcookie</function>-Beispiele:</title>
    <programlisting role="php">
<![CDATA[
<?php
$value = 'irgendetwas von irgendwo';

setcookie("TestCookie", $value);
setcookie("TestCookie", $value, time()+3600);  /* verfällt in 1 Stunde */
setcookie("TestCookie", $value, time()+3600, "/~rasmus/", ".example.com", 1);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Beachten Sie, dass der Wertebereich des Cookies automatisch URL-konform
   kodiert (urlencoded) wird, sobald Sie das Cookie senden, und es beim Erhalt
   automatisch dekodiert und einer Variablen zugewiesen wird, die den selben
   Namen wie das Cookie trägt. Wenn Sie dies nicht möchten, können Sie
   stattdessen <function>setrawcookie</function> verwenden, wenn sie PHP 5
   nutzen. Um die Inhalte unseres Test-Cookies in einem Skript sichtbar zu
   machen, verwenden Sie einfach eines der folgenden Beispiele:
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
// ein bestimmtes Cookie ausgeben
echo $_COOKIE["TestCookie"];
echo $HTTP_COOKIE_VARS["TestCookie"];

// Ein anderer Weg zu Debuggen/Testen ist, alle Cookies anzuzeigen
print_r($_COOKIE);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   <example>
    <title><function>setcookie</function>-Beispiele zum Löschen</title>
    <para>
     Beim Löschen eines Cookies sollten Sie sicherstellen, dass das
     Verfallsdatum in der Vergangenheit liegt, um den Mechanismus zum
     Löschen des Cookies im Browser auszulösen. Die folgenden Beispiele
     zeigen, wie die im vorigen Beispiel gesendeten Cookies wieder gelöscht
     werden:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Setzen des Verfalls-Zeitpunktes auf 1 Stunde in der Vergangenheit
setcookie ("TestCookie", "", time() - 3600);
setcookie ("TestCookie", "", time() - 3600, "/~rasmus/", ".example.com", 1);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>setcookie</function> und Arrays</title>
    <para>
     Sie können auch ein Array von Cookies setzen, in dem Sie die
     Array-Schreibweise im Cookienamen verwenden. Dadurch werden so viele
     Cookies gesetzt, wie Ihr Array Elemente hat. Sobald das Cookie aber von
     Ihrem Skript gelesen wird, werden alle Werte in ein einziges
     Array mit dem Cookienamen eingelesen:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Setzen der Cookies
setcookie ("cookie[three]", "cookiethree");
setcookie ("cookie[two]", "cookietwo");
setcookie ("cookie[one]", "cookieone");

// Nach dem Neuladen der Seite wieder ausgeben
if (isset($_COOKIE['cookie'])) {
    foreach ($_COOKIE['cookie'] as $name => $value) {
        echo "$name : $value <br />\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
three : cookiethree
two : cookietwo
one : cookieone
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    In PHP 4 können Sie den Ausgabepuffer verwenden, um Ausgaben vor dem
    Aufruf dieser Funktion duchführen zu können. Dies hat allerdings zur Folge,
    dass alle Ihre Ausgaben zum Browser am Server zwischengespeichert werden,
    bis Sie diese senden. Sie können dies in Ihrem Skript mittels der
    Funktionen <function>ob_start</function> und
    <function>ob_end_flush</function> oder mittels der
    Konfigurationseinstellung <literal>output_buffering</literal>
    in Ihrer &php.ini; mitteilen, oder Sie ändern entsprechende
    Konfigurationseinstellungen am Server.
   </para>
  </note>
  <note>
   <para>
    Ist die PHP-Direktive <link
    linkend="ini.register-globals">register_globals</link> auf
    <literal>on</literal> gesetzt, stehen die Cookies auch als eigene
    Variablen zur Verfügung. In den nachstehenden Beispielen wird
    <varname>$TextCookie</varname> also existieren. Es ist jedoch dringend
    empfohlen, <varname>$_COOKIE</varname> zu verwenden.
   </para>
  </note>
  <para>
   Häufige Probleme:
   <itemizedlist>
    <listitem>
     <simpara>
      Cookies werden nicht sichtbar, bevor nicht eine Seite geladen
      wird, für die das Cookie sichtbar sein soll. Um zu testen, ob ein
      Cookie erfolgreich gesetzt wurde, prüfen Sie noch vor der Ablaufzeit
      auf der nächsten geladenen Seite, ob das Cookie vorhanden ist. Die
      Ablaufzeit wird mittels des Parameters <parameter>expire</parameter>
      gesetzt. Eine gute Möglichkeit, die Existenz von Cookies zu prüfen, ist
      einfach <literal>print_r($_COOKIE);</literal> aufzurufen.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Cookies müssen mit den selben Parametern gelöscht werden, mit
      denen sie gesetzt wurden. Ist der value-Parameter ein leerer String oder
      &false; und alle anderen Werte entsprechen dem früheren Aufruf von
      setcookie, wird das Cookie mit dem angegebenen Namen vom Client gelöscht.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Da beim Setzen eines Cookies mit dem Value &false; versucht wird, das
      entsprechende Cookie zu löschen, sollten Sie keine boolschen Werte
      verwenden. Nutzen Sie statt dessen <emphasis>0</emphasis> für &false;
      und <emphasis>1</emphasis> für &true;.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Namen von Cookies können auch als Arraynamen gesetzt werden und stehen
      dann in Ihren Skripten als Arrays zu Verfügung, während sie auf dem System
      des Benutzers als separate Cookies abgespeichert werden. Erwägen Sie den
      Einsatz von <function>explode</function>, um ein ein Cookie mit mehreren
      Namen und Werten zu setzen. Es ist nicht empfehlenswert, zu diesem Zweck
      <function>serialize</function> einzusetzen, da hieraus Sicherheitslöcher
      erwachsen können.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   In PHP 3 werden mehrfache Aufrufe von <function>setcookie</function>
   im selben Skript in umgekehrter Reihenfolge abgearbeitet. Sollten
   Sie also ein Cookie löschen wollen bevor Sie ein anderes setzen,
   sollten sie das Setzen vor dem Löschen vornehmen. Ab PHP 4 werden
   mehrfache Aufrufe von <function>setcookie</function> in der
   Reihenfolge ihres Aufrufs ausgeführt.
  </simpara>
  <note>
   <simpara>
    Microsofts Internet-Explorer 4 mit Service-Pack 1 geht nicht
    korrekt mit Cookies um, die den Pfad-Parameter beinhalten.
   </simpara>
   <simpara>
    Netscape Communicator 4.05 und Microsoft Internet Explorer 3.x
    scheinen mit Cookies Probleme zu haben, wenn die Argumente für
    Pfad und Zeit nicht angegeben sind.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>header</function></member>
    <member><function>setrawcookie</function></member>
    <member><link linkend="features.cookies">Cookies</link></member>
    <member><link xlink:href="&url.rfc;2109">RFC 2109</link></member>
    <member><link xlink:href="&url.rfc;2965">RFC 2965</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
