<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c2eca73ef79ebe78cebb34053e41b565af504c4f Maintainer: conni Status: ready -->
<refentry xml:id="function.pg-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_execute</refname>
  <refpurpose>
   Fordert den Datenankserver auf, eine vorbereitete Anfrage mit den
   angegebenen Parametern auszuführen und wartet auf das Ergebnis
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>PgSql\Result</type><type>false</type></type><methodname>pg_execute</methodname>
   <methodparam choice="opt"><type>PgSql\Connection</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>stmtname</parameter></methodparam>
   <methodparam><type>array</type><parameter>params</parameter></methodparam>
  </methodsynopsis>
  <para>
   Fordert den Datenankserver auf, eine vorbereitete Anfrage mit den
   angegebenen Parametern auszuführen und wartet auf das Ergebnis.
  </para>
  <para>
   <function>pg_execute</function> ist ähnlich wie
   <function>pg_query_params</function>, mit dem Unterschied, dass das
   auszuführende Kommando zuvor als vorbereitete Abfrage definiert wurde und
   kein SQL-String ist. Damit werden Abfragen, die wiederholt verwendet
   werden, nur ein einziges Mal geparst und geplant und nicht jedesmal, wenn
   sie ausgeführt werden. Das Kommando muss zuvor in der aktuellen
   Datenbanksitzung vorbereitet worden sein. <function>pg_execute</function>
   wird von PostgreSQL ab der Version 7.4 unterstützt und wird in allen
   früheren Versionen fehlschlagen.
  </para>
  <para>
   Die Parameter sind identisch zu denen in
   <function>pg_query_params</function>, außer dass der Name eines
   vorbereiteten Kommandos anstatt einer SQL-Abfrage übergeben wird.
  </para>
 </refsect1>

<refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      &pgsql.parameter.connection-with-unspecified-default;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>stmtname</parameter></term>
     <listitem>
      <para>
       Der Name der vorbereiteten Abfrage, die ausgeführt werden soll. Falls
       "" angegeben wurde, wird die unbenannte Abfrage ausgeführt. Dieser Name
       muss zuvor mit <function>pg_prepare</function>,
       <function>pg_send_prepare</function> oder dem SQL-Kommando
       <literal>PREPARE</literal> vorbereitet worden sein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
       Ein Array, das die Parameter enthält, mit denen die Platzhalter $1, $2
       usw. im originalen Abfragestring ersetzt werden. Die Anzahl der
       Arrayelemente muss mit der Anzahl der Platzhalter übereinstimmen.
      </para>
      <warning>
       <para>
        Beim Aufruf dieser Funktion werden die Elemente in Strings konvertiert.
       </para>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Bei Erfolg wird eine <classname>PgSql\Result</classname>-Instanz zurückgegeben. &return.falseforfailure;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &pgsql.changelog.return-result-object;
     &pgsql.changelog.connection-object;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pg_execute</function> benutzen:</title>
    <programlisting role="php">
<![CDATA[
<?php
// Zu der Datenbank "mary" verbinden
$dbconn = pg_connect("dbname=mary");

// Eine Abfrage zur Ausführung vorbereiten
$result = pg_prepare($dbconn, "my_query", 'SELECT * FROM shops WHERE name = $1');

// Die vorbereitete Abfrage ausführen. Es ist nicht notwendig,
// den String "Joe's Widgets" zu maskieren
$result = pg_execute($dbconn, "my_query", array("Joe's Widgets"));

// Dieselbe vorbereitete Abfrage nochmal ausführen,
// diesmal mit einem anderen Parameter
$result = pg_execute($dbconn, "my_query", array("Clothes Clothes Clothes"));

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_prepare</function></member>
    <member><function>pg_send_prepare</function></member>
    <member><function>pg_query_params</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
