<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331237 Maintainer: conni Status: ready -->
<refentry xml:id="function.pg-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_query</refname>
  <refpurpose>Führt eine Abfrage aus</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>pg_query</methodname>
   <methodparam choice="opt"><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>pg_query</function> führt die <parameter>query</parameter>
   auf der angegebenen Datenbank-<parameter>connection</parameter> aus.
   In der Regel sollte <function>pg_query_params</function> bevorzugt werden.
  </para>
  <para>
   Falls ein Fehler auftritt und &false; zurückgegeben wird, können Sie
   Details zu diesem Fehler mit <function>pg_last_error</function> anzeigen,
   vorausgesetzt, die Verbindungskennung ist gültig.
  </para>
  <para>
   <note>
    <simpara>
     Obwohl der Parameter <parameter>connection</parameter> weggelassen werden
     kann, ist dies nicht empfehlenswert, da es die Fehlersuche in
     Skripten erschweren kann.
    </simpara>
   </note>
  </para>
  <note>
   <para>
    Diese Funktion ersetzt die Funktion <function>pg_exec</function>.
    <function>pg_exec</function> wird aus Gründen der Kompatibilität
    immer noch unterstützt, es wird jedoch empfohlen, den neuen
    Funktionsnamen zu verwenden.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       PostgreSQL Verbindungskennung. Falls <parameter>connection</parameter>
       nicht angegeben wurde, wird die zuletzt mit <function>pg_connect</function> oder
       <function>pg_pconnect</function> geöffnete Verbindung benutzt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Die auszuführende(n) SQL-Anweisung(en). Werden mehrere Anweisungen
       an <function>pg_query</function> übergeben, werden sie automatisch
       in einer einzigen Transaktion ausgeführt, es sei denn, die
       Anweisungsfolge enthält explizite BEGIN/COMMIT Anweisungen. Von
       der Ausführung mehrerer Transaktionen innerhalb eines
       Funktionsaufrufs wird abgeraten.
      </para>
      <warning>
       <para>
        String-Interpolation von Anwenderdaten ist sehr gefährlich, und führt
        wahrscheinlich zu <link
        linkend="security.database.sql-injection">SQL-Injection</link>
        Sicherheistlücken. In der Regel sollte
        <function>pg_query_params</function> bevorzugt werden, wobei
        Anwenderdaten als Parameter übergeben werden anstatt sie in der
        Abfragezeichenkette zu ersetzen.
       </para>
       <para>
        Jegliche Anwenderdaten, die direkt in eine Abfragezeichenkette
        interpoliert werden, sollten <link
        linkend="function.pg-escape-string">ordnungsgemäß maskiert</link>
        werden.
       </para>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    Bei Erfolg wird eine Ergebniskennung für die Abfrage zurückgegeben.
    &return.falseforfailure;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pg_query</function> Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = pg_pconnect("dbname=publisher");
if (!$conn) {
  echo "Ein Fehler ist aufgetreten.\n";
  exit;
}

$result = pg_query($conn, "SELECT author, email FROM authors");
if (!$result) {
  echo "Ein Fehler ist aufgetreten.\n";
  exit;
}

while ($row = pg_fetch_row($result)) {
  echo "Autor: $row[0]  E-Mail: $row[1]";
  echo "<br />\n";
}
 
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>pg_query</function> mit mehreren Anweisungen</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = pg_pconnect("dbname=publisher");

// diese Anweisungen werden in einer einzigen Transaktion ausgeführt.

$query = "UPDATE authors SET author=UPPER(author) WHERE id=1;";
$query .= "UPDATE authors SET author=LOWER(author) WHERE id=2;";
$query .= "UPDATE authors SET author=NULL WHERE id=3;";

pg_query($conn, $query);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_connect</function></member>
    <member><function>pg_pconnect</function></member>
    <member><function>pg_fetch_array</function></member>
    <member><function>pg_fetch_object</function></member>
    <member><function>pg_num_rows</function></member>
    <member><function>pg_affected_rows</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
