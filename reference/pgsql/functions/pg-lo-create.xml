<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 58645a79f1993effc0571f7b49acc9aace0e417f Maintainer: conni Status: ready -->
<!-- Reviewed: yes Maintainer: samesch -->
<refentry xml:id="function.pg-lo-create" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_lo_create</refname>
  <refpurpose>Erzeugt ein Large Object</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pg_lo_create</methodname>
   <methodparam choice="opt"><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>object_id</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>int</type><methodname>pg_lo_create</methodname>
   <methodparam><type>mixed</type><parameter>object_id</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>pg_lo_create</function> erzeugt ein Large Object und gibt dessen
   <varname>OID</varname> zurück. Die <constant>INV_READ</constant>-,
   <constant>INV_WRITE</constant>- und
   <constant>INV_ARCHIVE</constant>-Zugriffsmodi von PostgreSQL werden nicht
   unterstützt. Ein Large Object wird immer mit Lese- und Schreibzugriff erzeugt.
   <constant>INV_ARCHIVE</constant> wurde aus PostgreSQL (ab Version 6.3 und
   höher) entfernt.
  </para>
  <para>
   Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die
   Kommandos innerhalb einer Transaktion ausgeführt werden.
  </para>
  <para>
   Anstelle der Large-Object-Schnittstelle (für die es keine Zugriffssteuerung
   gibt und deren Benutzung etwas schwerfällig ist) können Sie den
   PostgreSQL-Datentyp <varname>bytea</varname> und die Funktion
   <function>pg_escape_bytea</function> benutzen.
  </para>
  <note>
   <para>
    Diese Funktion ersetzt die Funktion <function>pg_locreate</function>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      &pgsql.parameter.connection-with-unspecified-default;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>object_id</parameter></term>
     <listitem>
      <para>
       Wenn es einen Parameter <parameter>object_id</parameter> gibt, wird
       diese Funktion versuchen, ein Large Object mit dieser ID zu erzeugen.
       Anderenfalls wird dem Large Object vom Server eine freie ID zugewiesen.
       Dieser Parameter basiert auf Funktionalitäten, die seit PostgreSQL 8.1
       implementiert sind.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Ein Large Object <varname>OID</varname> oder &false;, falls ein Fehler
   auftrat.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pg_lo_create</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
 $database = pg_connect("dbname=jacarta");
 pg_query($database, "begin");
 $oid = pg_lo_create($database);
 echo "$oid\n";
 $handle = pg_lo_open($database, $oid, "w");
 echo "$handle\n";
 pg_lo_write($handle, "Daten fuer das Large Object");
 pg_lo_close($handle);
 pg_query($database, "commit");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
