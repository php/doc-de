<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.9 Maintainer: conni Status: ready -->
<refentry xml:id="function.pg-trace" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>pg_trace</refname>
  <refpurpose>Ermöglicht die Ablaufverfolgung einer Verbindung</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>pg_trace</methodname>
   <methodparam><type>string</type><parameter>pathname</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>mode</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>connection</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>pg_trace</function> ermöglicht die Protokollierung der
   frontend/backend Kommunikation in eine Datei, die durch den
   Pfadnamen <parameter>pathname</parameter> bestimmt wurde. Um die
   Ergebnisse ganz zu verstehen, sollte man sich mit den Interna des
   PostgreSQL-Kommunikationsprotokolls auskennen.
  </para>
  <para>
   Für diejenigen, die sich damit nicht auskennen kann es trotzdem
   hilfreich sein, um Fehler in Abfragen zu finden, die an den Server
   gesendet wurden. Beispielsweise können Sie das Kommando 
   <command>grep '^To backend' trace.log</command> eingeben und
   schauen, welche Abfrage gerade an den PostgreSQL Server geschickt
   wurde. Weitere Informationen finden Sie in der <link xlink:href="&url.pgsql.manual;">PostgreSQL Documentation</link>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pathname</parameter></term>
     <listitem>
      <para>
       Der vollständige Pfad- und Dateiname der Datei, in die das
       Ablauf-Protokoll geschrieben werden soll. Genau wie bei
       <function>fopen</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pathname</parameter></term>
     <listitem>
      <para>
       Optional kann ein Zugriffsmodus übergeben werden, genauso wie bei
       <function>fopen</function>. Der Vorgabewert ist "w".
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       PostgreSQL Verbindungkennung. Falls <parameter>connection</parameter>
       nicht angegeben wurde, wird die zuletzt mit <function>pg_connect</function> oder
       <function>pg_pconnect</function> geöffnete Verbindung benutzt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pg_trace</function> Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$pgsql_conn = pg_connect("dbname=mark host=localhost");

if ($pgsql_conn) {
   pg_trace('/tmp/trace.log', 'w', $pgsql_conn);
   pg_query("SELECT 1");
   pg_untrace($pgsql_conn);
   // Jetzt enthält  /tmp/trace.log die Kommunikation mit dem Server
} else {
   print pg_last_error($pgsql_conn);
   exit;
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fopen</function></member>
    <member><function>pg_untrace</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
