<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.4 Maintainer: conni Status: ready -->
<refentry id="function.pg-query-params">
 <refnamediv>
  <refname>pg_query_params</refname>
  <refpurpose>Sendet ein Kommando zum Server und wartet seine Ausführung
  ab. Getrennt vom SQL-Kommando können dabei Parameter übergeben werden.
 </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>pg_query_params</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam><type>array</type><parameter>params</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>resource</type><methodname>pg_query_params</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam><type>array</type><parameter>params</parameter></methodparam>
  </methodsynopsis>
  <para>
   Sendet ein Kommando zum Server und wartet seine Ausführung
   ab. Getrennt vom SQL-Kommando können dabei Parameter übergeben werden.
  </para>
  <para>
    <function>pg_query_params</function> ist ähnlich wie
    <function>pg_query</function>, bietet aber zusätzlich die Möglichkeit,
    Parameterwerte ausserhalb des SQL-Kommandos separat zu übergeben.
    <function>pg_query_params</function> wird nur für Verbindungen zu
    PostgreSQL ab der Version 7.4 unterstützt und schlägt bei allen
    niedrigeren Versionen fehl.
  </para>
  <para>
    Falls irgendwelche Parameter übergeben wurden, werden diese in
    <parameter>query</parameter> als $1, $2 usw. referenziert. Im Array
    <parameter>params</parameter> werden die aktuellen Parameterwerte
    übergeben. Der Wert &null; in diesm Array repräsentiert den SQL-Wert
    <literal>NULL</literal>.     
  </para>
  <para>
    Der Hauptvorteil von <function>pg_query_params</function> gegenüber
    <function>pg_query</function> liegt darin, dass Parameterwerte vom
    SQL-Kommando getrennt übergeben werden können und damit das
    fehlerträchtige und lästige Maskieren und Setzen von Anführungszeichen
    vermieden werden kann. Im Unterschied zu <function>pg_query</function>
    ist bei <function>pg_query_params</function> nur ein einziges
    SQL-Kommando erlaubt. (Es können auch Semikolons enthalten sein, aber
    nicht mehr als ein nichtleeres Kommando.)
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       PostgreSQL Verbindungkennung. Falls <parameter>connection</parameter>
       nicht angegeben wurde, wird die zuletzt mit <function>pg_connect</function>
       oder <function>pg_pconnect</function> geöffnete Verbindung benutzt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Die parametrisierte Abfrage. Diese darf nur ein einziges
       SQL-Kommando enthalten (mehrere Kommandos, durch Semikolon
       getrennt, sind nicht zulässig). Falls Parameter übergeben werden,
       werden sie als $1, $2, ... referenziert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
        Ein Array mit Parameterwerten, mit denen die Platzhalter $1, $2
        usw. in der ursprünglichen vorbereiteten Abfrage ersetzt werden.
        Die Anzahl der Elemente dieses Arrays muss mit der Anzahl der
        Platzhalter übereinstimmen.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    Bei Erfolg wird eine Ergebniskennung zurückgegeben, ansonsten &false;.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pg_query_params</function> benutzen:</title>
    <programlisting role="php">
<![CDATA[
<?php
// Verbindung zu einer Datenbank namens "mary" aufbauen
$dbconn = pg_connect("dbname=mary");

// Alle Shops mit dem Namen Joe's Widgets finden. Beachten Sie, dass es
// nicht nötig ist, den String "Joe's Widgets" zu maskieren.
$result = pg_query_params($dbconn, 'SELECT * FROM shops WHERE name = $1', array("Joe's Widgets"));

// Vergleich mit pg_query
$str = pg_escape_string("Joe's Widgets");
$result = pg_query($dbconn, "SELECT * FROM shops WHERE name = '{$str}'");

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_query</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
