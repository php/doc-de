<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: conni Status: ready -->
<refentry xml:id="function.pg-prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_prepare</refname>
  <refpurpose>
   Sendet eine Aufforderung an den Server, eine vorbereitete Anfrage mit den
   übergebenen Parametern zu erzeugen und wartet auf ihre Beendigung. 
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>pg_prepare</methodname>
   <methodparam choice="opt"><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>stmtname</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
    <function>pg_prepare</function> erzeugt eine vorbereitete Abfrage, die
    später mit <function>pg_execute</function> oder
    <function>pg_send_execute</function> ausgeführt werden kann. Dank dieser
    Eigenschaft brauchen wiederholt ausgeführte Abfragen nur ein einziges
    Mal geparst werden und es muss auch nur einmal ein Abfrageplan erstellt
    werden, anstatt die Abfrage bei jeder Ausführung zu parsen und zu planen. 
    <function>pg_prepare</function> wird nur für Verbindungen zu PostgreSQL
    ab der Version 7.4 unterstützt und schlägt bei allen niedrigeren Versionen fehl. 
  </para>
  <para>
    Diese Funktion erzeugt aus der Abfrage <parameter>query</parameter> eine
    vorbereitete Abfrage mit dem Namen <parameter>stmtname</parameter>.
    <parameter>query</parameter> darf nur ein einzelnes SQL-Kommando
    enthalten. <parameter>stmtname</parameter> kann "" sein, um eine
    unbenannte Abfrage zu erzeugen, wobei zuvor definierte unbenannte
    Abfragen automatisch überschrieben werden. Falls der Name der
    vorbereiteten Abfrage in der aktuellen Datenbanksitzung schon vergeben
    ist, wird ein Fehler zurückgegeben. Falls irgendwelche Parameter
    übergeben wurden, werden diese in <parameter>query</parameter> als $1,
    $2 usw. referenziert.
  </para>
  <para>
    Vorbereitete Abfragen, die mit <function>pg_prepare</function> erzeugt
    wurden, können ebenso mit dem SQL-Kommando <literal>PREPARE</literal>
    erzeugt werden. (Allerdings ist <function>pg_prepare</function>
    flexibler, weil Parametertypen nicht vorab deklariert werden müssen.)
    Obwohl es keine PHP-Funktion zum Löschen vorbereiteter Anfragen gibt,
    können diese mit dem SQL-Kommando <literal>DEALLOCATE</literal> gelöscht
    werden.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       PostgreSQL Verbindungskennung. Falls <parameter>connection</parameter>
       nicht angegeben wurde, wird die zuletzt mit <function>pg_connect</function> oder
       <function>pg_pconnect</function> geöffnete Verbindung benutzt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>stmtname</parameter></term>
     <listitem>
      <para>
       Der Name, unter dem die vorbereitete Abfrage gespeichert wird.
       Dieser muss für jede Verbindung eindeutig sein. Falls "" angegeben
       wurde, wird eine unbenannte Abfrage erzeugt, die alle zuvor
       definierten unbenannten Abfragen überschreibt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Die parametrisierte vorbereitete Abfrage. Diese darf nur ein
       einziges SQL-Kommando enthalten (mehrere Kommandos, durch Semikolon
       getrennt, sind nicht zulässig). Falls Parameter übergeben werden,
       werden sie als $1, $2, ... referenziert.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Bei Erfolg wird eine Ergebniskennung zurückgegeben. &return.falseforfailure;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pg_prepare</function> Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// Verbindung zu einer Datenbank namens "mary" aufbauen
$dbconn = pg_connect("dbname=mary");

// Abfrage vorbereiten
$result = pg_prepare($dbconn, "my_query", 'SELECT * FROM shops WHERE name = $1');

// die vorbereitete Abfrage ausführen. Beachten Sie, dass es
// nicht nötig ist, den String "Joe's Widgets" zu maskieren.
$result = pg_execute($dbconn, "my_query", array("Joe's Widgets"));

// Dieselbe Abfrage mit einem anderen Parameter nochmal ausführen
$result = pg_execute($dbconn, "my_query", array("Clothes Clothes Clothes"));

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_execute</function></member>
    <member><function>pg_send_execute</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
