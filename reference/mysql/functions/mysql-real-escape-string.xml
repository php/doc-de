<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.27 Maintainer: sammywg Status: ready -->
<refentry xml:id="function.mysql-real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Maskiert spezielle Zeichen innerhalb eines Strings für die
   Verwendung in einer SQL-Anweisung</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>unescaped_string</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter></methodparam>
  </methodsynopsis>
  <para>
   Maskiert spezielle Zeichen im <parameter>unescaped_string</parameter> unter
   Berücksichtigung des aktuellen Zeichensatzes der Verbindung, so dass das
   Ergebnis ohne Probleme in <function>mysql_query</function> verwendet werden
   kann. Wenn Sie Binärdaten einfügen wollen, müssen Sie die Funktion auf jeden
   Fall verwenden.
  </para>
  <para>
   <function>mysql_real_escape_string</function> ruft die Funktion
   mysql_real_escape_string der MySQL-Bibliothek auf, die folgende Zeichen mit
   einem Backslash ('\') versieht:
   <literal>\x00</literal>, <literal>\n</literal>, <literal>\r</literal>,
   <literal>\</literal>, <literal>'</literal>, <literal>"</literal> und
   <literal>\x1a</literal>.
  </para>
  <para>
   Die Funktion muss immer (mit wenigen Ausnahmen) verwendet werden, um Daten
   abzusichern, bevor sie per Query an MySQL übermittelt werden.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>unescaped_string</parameter></term>
     <listitem>
      <para>
       Der zu maskierende String.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt einen maskierten String oder im Fehlerfall &false; zurück.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Einfaches <function>mysql_real_escape_string</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// Verbindung herstellen
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
    OR die(mysql_error());

// Anfrage erstellen
$query = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'",
            mysql_real_escape_string($user),
            mysql_real_escape_string($password));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ein beispielhafter SQL Injection Angriff</title>
    <programlisting role="php">
<![CDATA[
<?php
// Datenbankabfrage zur Ueberpruefung der Logindaten
$query = "SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($query);

// Wir haben $_POST['password'] nicht geprueft, es koennte also alles darin
// stehen, was der User will. Zum Beispiel:
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// Das bedeutet, der an MySQL gesendete Query wuerde sein:
echo $query;
?>
]]>
    </programlisting>
     <para>
      Die Abfrage, die an MySQL übermittelt wird:
     </para>
    <screen>
<![CDATA[
SELECT * FROM users WHERE user='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
     Dies würde jedermann erlauben, sich ohne valides Passwort einzuloggen.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>Optimale Vorgehensweise zur Querybehandlung</title>
    <para>
     Die Verwendung von <function>mysql_real_escape_string</function> bei jeder
     Variablen beugt SQL Injection Angriffen vor. Das Beispiel demonstriert
     ein optimales Verfahren für Datenbankanfragen, das unabhängig vom für
     <link linkend="security.magicquotes">Magic Quotes</link> gesetzten Wert
     funktioniert.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

if (isset($_POST['product_name'])
    && isset($_POST['product_description'])
    && isset($_POST['user_id'])) {

 // Verbinden mit der Datenbank
    $link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')

    if(!is_resource($link)) {

        echo "Verbindung zum Server fehlgeschlagen\n";
     // ... den Fehler loggen

    } else {

     // Die Auswirkungen von magic_quotes_gpc/magic_quotes_sybase zurücksetzen,
     // sofern die Option auf ON gesetzt ist

        if(get_magic_quotes_gpc()) {
            $product_name        = stripslashes($_POST['product_name']);
            $product_description = stripslashes($_POST['product_description']);
        } else {
            $product_name        = $_POST['product_name'];
            $product_description = $_POST['product_description'];
        }

     // einen sicheren Query zusammenstellen
        $query = sprintf("INSERT INTO products (`name`, `description`, `user_id`) VALUES ('%s', '%s', %d)",
                    mysql_real_escape_string($product_name, $link),
                    mysql_real_escape_string($product_description, $link),
                    $_POST['user_id']);

        mysql_query($query, $link);

        if (mysql_affected_rows($link) > 0) {
            echo "Produkt eingefuegt\n";
        }
    }
} else {
    echo "Fuellen Sie das Formular korrekt aus.\n";
}
?>
]]>
    </programlisting>
    <para>
     Die Anfrage wird jetzt korrekt ausgeführt und SQL Injection Angriffe
     funktionieren nicht mehr.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Sie müssen eine Verbindung zu MySQL geöffnet haben, bevor Sie
    <function>mysql_real_escape_string</function> verwenden, ansonsten erhalten
    Sie einen Fehler vom Typ <literal>E_WARNING</literal> und der Rückgabewert
    wird zu &false;. Ist <parameter>link_identifier</parameter> nicht angegeben,
    wird die letzte MySQL-Verbindung verwendet.
   </para>
  </note>
  <note>
   <para>
    Ist <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> aktiviert,
    wenden Sie zuerst <function>stripslashes</function> auf die Daten an. Das
    Bearbeiten bereits in irgend einer Form maskierter Daten durch
    mysql_real_escape_string führt ansonsten dazu, dass bereits Maskiertes
    doppelt maskiert wird.
   </para>
  </note>
  <note>
   <para>
    Wenn die Funktion nicht verwendet wird, um die Daten zu maskieren, ist der
    Query anfällig für <link linkend="security.database.sql-injection">SQL
    Injection Angriffe</link>.
   </para>
  </note>
  <note>
   <simpara>
    <function>mysql_real_escape_string</function> maskiert weder
    <literal>%</literal> noch <literal>_</literal>. Diese Zeichen werden in MySQL
    als Platzhalter interpretiert, wenn sie mit <literal>LIKE</literal>,
    <literal>GRANT</literal> oder <literal>REVOKE</literal> kombiniert werden.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_client_encoding</function></member>
    <member><function>addslashes</function></member>
    <member><function>stripslashes</function></member>
    <member>Die <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> Directive</member>
    <member>Die <link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link> Directive</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
