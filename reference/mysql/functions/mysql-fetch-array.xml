<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: hholzgra Status: ready -->

<refentry xml:id="function.mysql-fetch-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_fetch_array</refname> 
  <refpurpose>
   Liefert einen Datensatz als assoziatives Array, als numerisches Array oder beides
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>mysql_fetch_array</methodname>
   <methodparam><type>resource</type><parameter>result</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>result_type</parameter><initializer>MYSQL_BOTH</initializer></methodparam>
  </methodsynopsis>
  <para>
   Gibt ein Array zurück das der gelesenen Zeile entspricht und bewegt den
   internen Datenzeiger nach vorwärts.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &mysql.result.description;
    <varlistentry>
     <term><parameter>result_type</parameter></term>
     <listitem>
      <para>
       Der Typ des Arrays, das gelesen werden soll. Er ist ein Konstante, die
       folgende Werte haben kann: <constant>MYSQL_ASSOC</constant>,
       <constant>MYSQL_NUM</constant> und
       <constant>MYSQL_BOTH</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt ein Array von Zeichenketten zurück, das der gelesenen Zeile entspricht
   oder &false; falls keine weiteren Zeilen vorhanden sind.
   Der Typ des zurückgegebenen Arrays hängt davon ab,
   wie <parameter>result_type</parameter> definiert ist. Nutzen sie
   <constant>MYSQL_BOTH</constant> (Standard), erhalten sie ein Array mit
   sowohl assoziativen als auch numerischen Indice. Nutzen
   sie <constant>MYSQL_ASSOC</constant> erhalten sie nur assoziative Indice
   (wie <function>mysql_fetch_assoc</function> arbeitet),
   mit <constant>MYSQL_NUM</constant> erhalten sie nur numerische Indice
   (wie <function>mysql_fetch_row</function> arbeitet).
  </para>
  <para>
   Falls zwei oder mehrere Spalten des Ergebnisses den gleichen
   Feldnamen haben, dann wird nur der Wert der letzten Spalte im Array
   unter diesem Feldnamen abgelegt. Um auch auf die anderen gleichnamigen
   Spalten zugreifen zu können, müssen Sie den numerischen Index der Spalte
   verwenden oder einen Alias für die Spalte vergeben. Falls Sie Aliase für
   Spalten verwenden, können Sie auf die Inhalte dieser Spalten nicht über
   ihren ursprünglichen Namen zugreifen.
  </para>
 </refsect1>

<refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Abfrage mit alias für identische Feldnamen</title>
    <programlisting role="sql">
<![CDATA[
SELECT table1.field AS foo, table2.field AS bar FROM table1, table2
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>mysql_fetch_array</function> mit <constant>MYSQL_NUM</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
mysql_connect("localhost", "mysql_user", "mysql_password") or
    die("Keine Verbindung möglich: " . mysql_error());
mysql_select_db("mydb");

$result = mysql_query("SELECT id, name FROM mytable");

while ($row = mysql_fetch_array($result, MYSQL_NUM)) {
    printf("ID: %s  Name: %s", $row[0], $row[1]);
}

mysql_free_result($result);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>mysql_fetch_array</function> mit <constant>MYSQL_ASSOC</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
mysql_connect("localhost", "mysql_user", "mysql_password") or
    die("Keine Verbindung möglich: " . mysql_error());
mysql_select_db("mydb");

$result = mysql_query("SELECT id, name FROM mytable");

while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
    printf("ID: %s  Name: %s", $row["id"], $row["name"]);
}

mysql_free_result($result);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>mysql_fetch_array</function> mit <constant>MYSQL_BOTH</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
mysql_connect("localhost", "mysql_user", "mysql_password") or
    die("Keine Verbindung möglich: " . mysql_error());
mysql_select_db("mydb");

$result = mysql_query("SELECT id, name FROM mytable");

while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {
    printf ("ID: %s  Name: %s", $row[0], $row["name"]);
}

mysql_free_result($result);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>Performance</title>
   <para>
    Zu betonen ist, dass der Gebrauch von
    <function>mysql_fetch_array</function>
    <emphasis> nicht signifikant</emphasis> langsamer ist als
    <function>mysql_fetch_row</function>, obwohl die Funktion einen
    sichtlichen Mehrwert bietet.
   </para>
  </note>
  &database.field-case;
  &database.fetch-null;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_fetch_row</function></member>
    <member><function>mysql_fetch_assoc</function></member>
    <member><function>mysql_data_seek</function></member>
    <member><function>mysql_query</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
