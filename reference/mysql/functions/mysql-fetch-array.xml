<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.5 Maintainer: betz Status: ready -->

  <refentry id="function.mysql-fetch-array">
   <refnamediv>
    <refname>mysql_fetch_array</refname> 
    <refpurpose>
     Liefert einen Datensatz als assoziatives Array, als numerisches Array oder beides
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>array</type><methodname>mysql_fetch_array</methodname>
      <methodparam><type>resource</type><parameter>Ergebnis-Kennung</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>Ergebnistyp</parameter></methodparam>
     </methodsynopsis>
    <para> 
     Liefert ein Array das dem aktuellen Datensatz entspricht oder &false;,
     wenn keine weiteren Datensätze vorliegen.
    </para>
    <para>
     <function>mysql_fetch_array</function> ist eine erweiterte
     Version von <function>mysql_fetch_row</function>. Die Daten
     werden sowohl unter numerischen Indizes des Ergebnis-Arrays abgelegt,
     als auch unter assoziativen Indizes. Als Schlüssel für die assoziativen
     Indizes werden die Feldnamen benutzt.
    </para>
    <para>
     Falls zwei oder mehrere Spalten des Ergebnisses den gleichen
     Feldnamen haben, dann wird nur der Wert der letzten Spalte im Array
     unter diesem Feldnamen abgelegt. Um auch auf die anderen gleichnamigen
     Spalten zugreifen zu können, müssen Sie den numerischen Index der Spalte
     verwenden oder einen Alias für die Spalte vergeben. Falls Sie Aliase für
     Spalten verwenden, können Sie auf die Inhalte dieser Spalten nicht über
     ihren ursprünglichen Namen zugreifen. (In folgendem Beispiel können Sie
     <literal>'field'</literal> nicht benutzen).
     <example>
      <title>Query with duplicate field names</title>
      <programlisting role="sql">
<![CDATA[
select tone.field as foo ttwo.field as bar from tone, ttwo
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Zu betonen ist, dass der Gebrauch von
     <function>mysql_fetch_array</function>
     <emphasis> nicht signifikant</emphasis> langsamer ist als
     <function>mysql_fetch_row</function>, obwohl die Funktion einen
     sichtlichen Mehrwert bietet.
    </para>
    <para>
     Das optionale zweite Argumente <parameter>Ergebnistyp</parameter>
     in <function>mysql_fetch_array</function> ist eine Konstante und
     kann die folgenden Werte annehmen: MYSQL_ASSOC, MYSQL_NUM und
     MYSQL_BOTH. Diese Eigenschaft steht seit PHP 3.0.7 zur Verfügung. MYSQL_BOTH
     ist der Standard für diesen Paramater.
    </para>
    <para>
     Verwenden Sie MYSQL_BOTH, erhalten Sie ein Array mit assoziativen und
     numerischen Indizes. Bei MYSQL_ASSOC erhalten Sie nur aasoziative
     Indizes (genau wie bei <function>mysql_fetch_assoc</function>).
     Bei MYSQL_NUM erhalten Sie nur numerische Indizes (genau wie bei 
     <function>mysql_fetch_row</function>).
    </para>
    <example>
     <title>mysql_fetch_array mit MYSQL_NUM</title>
     <programlisting role="php">
<![CDATA[
<?php
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Keine Verbindung möglich");
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_NUM)) {
        printf ("ID: %s  Name: %s", $row[0], $row[1]);  
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>mysql_fetch_array mit MYSQL_ASSOC</title>
     <programlisting role="php">
<![CDATA[
<?php
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Keine Verbindung möglich");
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
        printf ("ID: %s  Name: %s", $row["id"], $row["name"]);
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>mysql_fetch_array mit MYSQL_BOTH</title>
     <programlisting role="php">
<![CDATA[
<?php
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Keine Verbindung möglich");
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {
        printf ("ID: %s  Name: %s", $row[0], $row["name"]);
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <para>
     Für weitere Details, siehe auch
     <function>mysql_fetch_row</function> und
     <function>mysql_fetch_assoc</function>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
