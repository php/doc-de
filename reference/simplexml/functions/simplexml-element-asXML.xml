<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.9 Maintainer: sammywg Status: ready -->

<refentry xml:id='function.simplexml-element-asXML' xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SimpleXMLElement::asXML</refname>
  <refpurpose>Gibt einen wohlgeformten XML String zurück, der auf einem
   SimpleXML-Element basiert</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>SimpleXMLElement</classname></ooclass>
   <methodsynopsis>
    <type>mixed</type><methodname>asXML</methodname>
    <methodparam choice="opt"><type>string</type><parameter>filename</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   Die <literal>asXML</literal> Methode formatiert den Inhalt des Elternobjekts
   als XML Version 1.0.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Sofern angegeben, schreibt die Funktion die Daten in das File anstatt
       sie direkt zurück zu geben.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Ist der Parameter <parameter>filename</parameter> nicht angegeben, gibt die
   Funktion einen <type>String</type> bei erfolgreicher Umwandlung oder &false;
   bei einem Fehler zurück. Ist der Parameter angegeben, wird &true; zurückgegeben,
   wenn die Datei erfolgreich erstellt werden konnte; ansonsten ist der
   Rückgabewert &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>XML erstellen</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = <<<XML
<a>
 <b>
  <c>text</c>
  <c>zeugs</c>
 </b>
 <d>
  <c>code</c>
 </d>
</a>
XML;

$xml = new SimpleXMLElement($string);

echo $xml->asXML(); // <?xml ... <a><b><c>text</c><c>zeugs</c> ...

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <literal>asXML</literal> lässt sich ebenfalls auf Xpath-Ergebnisse anwenden:
   <example>
    <title>
     Anwendung von asXML() auf
     <link linkend="function.simplexml-element-xpath">Xpath</link>-Ergebnisse
    </title>
    <programlisting role="php">
<![CDATA[
<?php
// Fortsetzung des obigen Beispiels

/* Suche nach <a><b><c> */
$result = $xml->xpath('/a/b/c');

while(list( , $node) = each($result)) {
    echo $node->asXML(); // <c>text</c> and <c>zeugs</c>
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
