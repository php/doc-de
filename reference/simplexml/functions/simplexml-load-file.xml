<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.23 Maintainer: sammywg Status: ready -->

<refentry xml:id='function.simplexml-load-file' xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>simplexml_load_file</refname>
  <refpurpose>
   Übersetzt ein XML-File in ein Objekt</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>object</type><methodname>simplexml_load_file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>class_name</parameter><initializer>"SimpleXMLElement"</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>ns</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>is_prefix</parameter><initializer>false</initializer></methodparam>
  </methodsynopsis>
  <para>
   Die Funktion wandelt das übergebene wohlgeformte (well-formed) XML-Dokument
   in ein Objekt um.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Pfad zur XML-Datei.
      </para>
      <note>
       <para>
        Libxml 2 demaskiert den URI, wollen Sie also zum Beispiel
        <literal>b&amp;c</literal> als Wert für den URI Parameter <literal>a</literal>
        verwenden, müssen Sie die Funktion wie folgt aufrufen:
        <literal>simplexml_load_file(rawurlencode('http://example.com/?a=' .
        urlencode('b&amp;c')))</literal>. Seit PHP 5.1.0 wird Ihnen dieser Schritt
        von PHP abgenommen.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class_name</parameter></term>
     <listitem>
      <para>
       Sie können den optionalen Parameter <parameter>class_name</parameter>
       verwenden, wenn <function>simple_load_file</function> ein Objekt der
       spezifischen Klasse zurückgeben soll. Die gewählte Klasse sollte von der
       Klasse <type>SimpleXMLElement</type> abgeleitet sein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Seit PHP 5.1.0 und Libxml 2.6.0 können Sie zusätzlich den Parameter
       <parameter>options</parameter> verwenden, um <link
       linkend="libxml.constants">weitere Libxml-Parameter</link> anzugeben.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ns</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>is_prefix</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt ein <type>object</type> der Klasse <type>SimpleXMLElement</type> zurück,
   dessen Eigenschaften die Daten des XML-Dokuments enthalten. Im Fehlerfall
   wird &false; zurückgegeben.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ein XML-Dokument auswerten</title>
    <programlisting role="php">
<![CDATA[
<?php
// Die Datei test.xml enthält ein XML-Dokument mit einem Wurzel-Element
// und mindestens einem Element /[root]/title.

if (file_exists('test.xml')) {
    $xml = simplexml_load_file('test.xml');

    print_r($xml);
} else {
    exit('Konnte test.xml nicht öffnen.');
}
?>
]]>
    </programlisting>
    <para>
     Das Skript gibt nach erfolgreichem Laden folgendes aus:
    </para>
    <screen>
<![CDATA[
SimpleXMLElement Object
(
  [title] => Beispiel-Titel
  ...
)
]]>
    </screen>
    <simpara>
     Ab diesem Punkt können Sie <literal>$xml->title</literal> und andere
     Elemente verwenden.
    </simpara>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>simplexml_load_string</function></member>
    <member><methodname>SimpleXMLElement::__construct</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
