<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5916fd8f742127259912e6510904451849928020 Maintainer: sammywg Status: ready -->
<refentry xml:id="function.simplexml-load-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>simplexml_load_string</refname>
  <refpurpose>Übersetzt einen XML-String in ein Objekt</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>SimpleXMLElement</type><type>false</type></type><methodname>simplexml_load_string</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>class_name</parameter><initializer>SimpleXMLElement::class</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>namespace_or_prefix</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>is_prefix</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Die Funktion erwartet einen wohlgeformten (well-formed) XML-String und gibt
   ihn als Objekt zurück.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Ein wohlgeformter XML-String.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class_name</parameter></term>
     <listitem>
      <para>
       Der optionale Parameter <parameter>class_name</parameter> kann
       verwendet werden, wenn <function>simplexml_load_string</function> ein
       Objekt der spezifischen Klasse zurückgeben soll. Die gewählte Klasse
       sollte von der Klasse <type>SimpleXMLElement</type> abgeleitet sein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Seit Libxml 2.6.0 kann zusätzlich der Parameter
       <parameter>options</parameter> verwendet werden, um
       <link linkend="libxml.constants">weitere Libxml-Parameter</link>
       anzugeben.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>namespace_or_prefix</parameter></term>
     <listitem>
      <para>
       Namensraum-Präfix oder URI.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>is_prefix</parameter></term>
     <listitem>
      <para>
       &true;, wenn <parameter>namespace_or_prefix</parameter> ein Präfix ist, &false;, wenn er
       ein URI ist. Standardwert ist &false;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt ein &object; der Klasse <type>SimpleXMLElement</type> zurück, dessen
   Eigenschaften die Daten beinhalten, wie sie im XML-Dokument abgebildet
   sind. Tritt ein Fehler auf, wird &false; zurückgegeben.
  </para>
  &return.falseproblem;
 </refsect1>

 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Generiert eine Fehlermeldung vom Typ <constant>E_WARNING</constant> für
   jeden in den XML-Daten gefundenen Fehler.
  </para>
  <tip>
   <para>
    <function>libxml_use_internal_errors</function> kann hier verwendet
    werden, um alle XML-Fehlermeldungen auszublenden, und
    <function>libxml_get_errors</function>, um danach darüber zu iterieren.
   </para>
  </tip>
 </refsect1><!-- }}} -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Einen XML-String auswerten</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = <<<XML
<?xml version='1.0'?>
<document>
 <title>Zweiundvierz...?</title>
 <from>Joe</from>
 <to>Jane</to>
 <body>
  Ich kenne die Antwort -- aber was ist die Frage?
 </body>
</document>
XML;

$xml = simplexml_load_string($string);

print_r($xml);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
SimpleXMLElement Object
(
  [title] => Zweiundvierz...?
  [from] => Joe
  [to] => Jane
  [body] =>
   Ich kenne die Antwort -- aber was ist die Frage?
)
]]>
    </screen>
    <simpara>
     Ab diesem Punkt können Sie <literal>$xml-&gt;body</literal> etc. verwenden.
    </simpara>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>simplexml_load_file</function></member>
    <member><methodname>SimpleXMLElement::__construct</methodname></member>
    <member><xref linkend="simplexml.examples-errors"/></member>
    <member><function>libxml_use_internal_errors</function></member>
    <member><xref linkend="simplexml.examples-basic"/></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
