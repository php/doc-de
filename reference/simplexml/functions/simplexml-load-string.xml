<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.9 Maintainer: sammywg Status: working -->
  <refentry id='function.simplexml-load-string'>
   <refnamediv>
    <refname>simplexml_load_string</refname>
    <refpurpose>
     Übersetzt einen XML-String in ein Objekt
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <methodsynopsis>
     <type>object</type><methodname>simplexml_load_string</methodname>
     <methodparam><type>string</type><parameter>data</parameter></methodparam>
     <methodparam choice="opt"><type>string</type><parameter>class_name</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>options</parameter></methodparam>
    </methodsynopsis>
    <para>
     Die Funktion erwartet einen wohlgeformten (well-formed) XML-String als
     <type>data</type> Parameter und gibt ein <type>Objekt</type> der Klasse
     <type>SimpleXMLElement</type> zurück, dessen Eigenschaften die Daten
     beinhalten, wie sie im XML-Dokument abgebildet sind. Tritt ein Fehler auf,
     wird &false; zurück gegeben.
    </para>
    <para>
     Sie können den optionalen Parameter <parameter>class_name</parameter>
     verwenden, wenn <function>simple_load_string</function> ein Objekt der
     spezifischen Klasse zurückgeben soll. Die gewählte Klasse sollte von der
     Klasse <type>SimpleXMLElement</type> abgeleitet sein.
    </para>
    <para>
     Seit PHP 5.1.0 und Libxml 2.6.0 können Sie zusätzlich den Parameter
     <parameter>options</parameter> verwenden, um <link
     linkend="libxml.constants">weitere Libxml-Parameter</link> anzugeben.
    </para>
    <para>
     <example>
      <title>Einen XML-String auswerten</title>
      <programlisting role="php">
<![CDATA[
<?php
$string = <<<XML
<?xml version='1.0'?>
<document>
 <title>Zweiundvierz...?</title>
 <from>Joe</from>
 <to>Jane</to>
 <body>
  Ich kenne die Antwort -- aber was ist die Frage?
 </body>
</document>
XML;

$xml = simplexml_load_string($string);

var_dump($xml);
?>
]]>
      </programlisting>
      <para>
       Das Skript erzeugt folgende Ausgabe:
      </para>
      <screen>
<![CDATA[
SimpleXMLElement Object
(
  [title] => Zweiundvierz...?
  [from] => Joe
  [to] => Jane
  [body] =>
   Ich kenne die Antwort -- aber was ist die Frage?
)
]]>
      </screen>
      <simpara>
       Ab diesem Punkt können Sie <literal>$xml->body</literal> etc. verwenden.
      </simpara>
     </example>
    </para>
    <para>
     Siehe auch: <function>simplexml_load_file</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
