<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 770c6facae667218f69c8ea2715ea20f6fab32f3 Maintainer: sammywg Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 5916fd8f742127259912e6510904451849928020 Reviewer: samesch -->
<refentry xml:id="simplexmlelement.children" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SimpleXMLElement::children</refname>
  <refpurpose>Findet Kindelemente des gegebenen Knotens</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="SimpleXMLElement">
   <modifier>public</modifier> <type class="union"><type>SimpleXMLElement</type><type>null</type></type><methodname>SimpleXMLElement::children</methodname>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>namespaceOrPrefix</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>isPrefix</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Die Methode findet Kinder eines Elements. Das Ergebnis entspricht den
   normalen Iterierungsregeln.
  </para>
  &simplexml.iteration;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>namespaceOrPrefix</parameter></term>
     <listitem>
      <para>
       Ein <acronym>XML</acronym>-Namensraum.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>isPrefix</parameter></term>
     <listitem>
      <para>
       Ist <parameter>isPrefix</parameter> &true;, dann wird
       <parameter>namespaceOrPrefix</parameter> als Prefix interpretiert. Ist
       es &false;, dann wird <parameter>namespaceOrPrefix</parameter> als
       Namensraum-<acronym>URL</acronym> interpretiert.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt ein <classname>SimpleXMLElement</classname>-Objekt zurück, unabhängig
   davon, ob der Knoten Kindknoten hat oder nicht, außer der Knoten stellt ein
   Attribut dar, denn in diesem Fall wird &null; zurückgegeben.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
  <example>
   <title>Ein <literal>children()</literal>-Pseudo-Array durchlaufen</title>
   <programlisting role="php">
<![CDATA[
<?php
$xml = new SimpleXMLElement(
'<person>
 <child role="Sohn">
  <child role="Tochter"/>
 </child>
 <child role="Tochter">
  <child role="Sohn">
   <child role="Sohn"/>
  </child>
 </child>
</person>');

foreach ($xml->children() as $second_gen) {
    echo ' Die Person zeugte eine/n ' . $second_gen['role'];

    foreach ($second_gen->children() as $third_gen) {
        echo ', die/der eine/n ' . $third_gen['role'] . ' zeugte;';

        foreach ($third_gen->children() as $fourth_gen) {
            echo ' und diese/r ' . $third_gen['role'] .
                ' zeugte eine/n ' . $fourth_gen['role'];
        }
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
 Die Person zeugte eine/n Sohn, die/der eine/n Tochter zeugte; Die Person zeugte
 eine/n Tochter, die/der eine/n Sohn zeugte; und diese/r Sohn zeugte eine/n Sohn
]]>
    </screen>
   </example>
   <example>
    <title>Arbeiten mit Namensräumen</title>
    <programlisting role="php">
<![CDATA[
<?php
$xml = '<example xmlns:foo="my.foo.urn">
  <foo:a>Apfel</foo:a>
  <foo:b>Banane</foo:b>
  <c>Kirsche</c>
</example>';

$sxe = new SimpleXMLElement($xml);

$kids = $sxe->children('foo');
var_dump(count($kids));

$kids = $sxe->children('foo', TRUE);
var_dump(count($kids));

$kids = $sxe->children('my.foo.urn');
var_dump(count($kids));

$kids = $sxe->children('my.foo.urn', TRUE);
var_dump(count($kids));

$kids = $sxe->children();
var_dump(count($kids));
?>
]]>
    </programlisting>
    <screen>
<![CDATA[
int(0)
int(2)
int(2)
int(0)
int(1)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>SimpleXMLElement::count</methodname></member>
    <member><function>count</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
