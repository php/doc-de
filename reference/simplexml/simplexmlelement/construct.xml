<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5916fd8f742127259912e6510904451849928020 Maintainer: sammywg Status: ready -->

<refentry xml:id="simplexmlelement.construct" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SimpleXMLElement::__construct</refname>
  <refpurpose>Erstellt ein neues SimpleXMLElement-Objekt</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier> <methodname>SimpleXMLElement::__construct</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>dataIsURL</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>namespaceOrPrefix</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>isPrefix</parameter><initializer>&false;</initializer></methodparam>
  </constructorsynopsis>
  <para>
   Erstellt ein neues <classname>SimpleXMLElement</classname>-Objekt.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Ein wohlgeformter XML-String, oder der Pfad oder URL zu einem
       XML-Dokument, wenn <parameter>dataIsURL</parameter> &true; ist.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Optional zu verwenden, um <link linkend="libxml.constants">weitere
       Libxml Parameter</link> anzugeben, die das Lesen von XML-Dokumenten
       betreffen. Optionen, die die Ausgabe von XML-Dokumenten betreffen (z. B. <constant>LIBXML_NOEMPTYTAG</constant>) werden stillschweigend
       ignoriert.
      </para>
      <note>
       <para>
        Es kann erforderlich sein, die Option <constant><link
        linkend="constant.libxml-parsehuge">LIBXML_PARSEHUGE</link></constant>
        zu übergeben, um tief verschachteltes XML oder sehr große Textknoten
        verarbeiten zu können.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dataIsURL</parameter></term>
     <listitem>
      <para>
       Standardmäßig ist <parameter>dataIsURL</parameter> &false;. Verwenden
       Sie &true;, um <parameter>data</parameter> als Pfad oder URL zu einem
       XML-Dokument an Stelle eines Daten-<type>Strings</type> anzugeben.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>namespaceOrPrefix</parameter></term>
     <listitem>
      <para>
       Namensraum-Präfix oder -URI.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>isPrefix</parameter></term>
     <listitem>
      <para>
       &true;, wenn <parameter>namespaceOrPrefix</parameter> ein Präfix ist, &false;, wenn es
       ein URI ist; der Standardwert ist &false;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt ein <type>SimpleXMLElement</type>-Objekt zurück, das
   <parameter>data</parameter> repräsentiert.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Erzeugt eine <constant>E_WARNING</constant>-Fehlermeldung für jeden
   gefundenen Fehler in den XML-Daten und wirft zusätzlich eine
   <classname>Exception</classname>, wenn die XML-Daten nicht geparst werden
   konnten.
  </para>
  <tip>
   <para>
    <function>libxml_use_internal_errors</function> kann verwendet werden, um
    alle XML-Fehler zu unterdrücken, und
    <function>libxml_get_errors</function>, um danach über diese zu iterieren.
   </para>
  </tip>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <note>
    <para>
     Die aufgeführten Beispiele binden möglicherweise
     <literal>example.php</literal> ein, das die XML-Zeichenkette enthält, die
     im ersten Beispiel über die
     <link linkend="simplexml.examples-basic">grundlegende Verwendung</link>
     zu finden ist.
    </para>
   </note>
   <example>
    <title>Erstellen eines SimpleXMLElement-Objekts</title>
    <programlisting role="php">
<![CDATA[
<?php

include 'example.php';

$sxe = new SimpleXMLElement($xmlstr);
echo $sxe->movie[0]->title;

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PHP: Behind the Parser
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Erstellen eines SimpleXMLElement-Objekts von einer URL</title>
    <programlisting role="php">
<![CDATA[
<?php

$sxe = new SimpleXMLElement('http://example.org/document.xml', NULL, TRUE);
echo $sxe->asXML();

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="simplexml.examples-basic"/></member>
    <member><function>simplexml_load_string</function></member>
    <member><function>simplexml_load_file</function></member>
    <member><xref linkend="simplexml.examples-errors"/></member>
    <member><function>libxml_use_internal_errors</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
