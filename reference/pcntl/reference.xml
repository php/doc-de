<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- Purpose: fileprocess.process -->
<!-- Membership: bundled -->
<!-- EN-Revision: 1.10 Maintainer: simp Status: ready -->

 <reference xml:id="ref.pcntl" xmlns="http://docbook.org/ns/docbook">
  <title>Prozesskontrollfunktionen</title>
  <titleabbrev>PCNTL</titleabbrev>

  <partintro>
   <section xml:id="pcntl.intro">
    &reftitle.intro;
    <para>
     Die Prozesskontrollunterstützung in PHP implementiert die Unixausführung
     von Prozesserzeugung, Programmausführung, Signalverarbeitung und
     Prozesstermination. Prozesskontrolle sollte nicht innerhalb einer
     Webserverumgebung aktiviert werden und unerwartete Ergebnisse können
     auftreten, wenn eine Prozesskontrollfunktion innerhalb einer
     Webserverumgebung verwendet wird.
    </para>
    <para>
     Die Absicht dieser Dokumentation ist es, die allgemeine Verwendung jeder
     der Prozesskontrollfunktionen zu erklären. Für detaillierte Informationen
     über Unix Prozesskontrolle empfehlen wir Ihnen, die Dokumentation
     Ihres Systems einschließlich fork(2), waitpid(2) und signal(2) oder eine
     umfassende Referenz wie zum Beispiel Advanced Programming in the
     UNIX Environment von W. Richard Stevens (Addison-Wesley) hinzuzuziehen.
    </para>
    <para>
     PCNT verwendet mitlerweile Ticks als Signalverarbeitungs-Callbackmechanismus,
     welcher wesentlich schneller als der zuvor verwendete Mechanismus ist. 
     Dieser Wechsel folgt der selben Semantik wie die Verwendung von "Benutzer
     Ticks". Man verwendet die <function>declare</function> Anweisung, um die 
     Stellen in seinem Programm anzugeben, in denen Callbacks stattfinden dürfen.
     Dies erlaubt Ihnen den Overhead durch die Behandlung von asynchronen 
     Ereignissen zu minimieren. In der Vergangenheit zog das Kompilieren von PHP
     mit eingeschaltetem Pcntl immer diesen Overhead hinzu, egal ob ein Skript
     tatsächlich Pcntl verwendete oder nicht.
    </para>
    <para>
     Es gibt eine Anpassung, die an allen Pcntl Skripten vor PHP Version 4.3.0
     vorgenommen werden muss, damit diese weiterhin funktionieren. Entweder muss
     <function>declare</function> für einen Abschnitt verwendet werden, in dem
     man Callbacks erlauben will, oder diese für das gesamte Skript aktivieren, 
     indem man die neue, globale Syntax von <function>declare</function>
     verwendet.
    </para>

    &note.no-windows.extension;
   </section>

   <section xml:id="pcntl.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.pcntl.configure;

   <section xml:id="pcntl.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section xml:id="pcntl.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.pcntl.constants;

   <section xml:id="pcntl.example">
    &reftitle.examples;
    <para>
     Dieses Beispiel zweigt einen Daemon Prozess mit Signalverarbeitung ab.
    </para>
    <example>
     <title>Prozesskontrollbeispiel</title>
     <programlisting role="php">
<![CDATA[
<?php
declare(ticks=1);

$pid = pcntl_fork();
if ($pid == -1) {
     die("Konnte nicht abzweigen"); 
} else if ($pid) {
     exit(); // Wir sind der Vater 
} else {
     // Wir sind das Kind
}

// Vom kontrollierenden Terminal ablösen
if (!posix_setsid()) {
    die("Konnte nicht vom Terminal ablösen");
}

// Endlosschleife, die Aufgaben erfüllt
while (1) {

    // Hier etwas interessantes tun

}

function sig_handler($signo) 
{

     switch ($signo) {
         case SIGTERM:
             // Aufgaben zum Abschalten bearbeiten
             exit;
             break;
         case SIGHUP:
             // Aufgaben zum Neustarten bearbeiten
             break;
         default:
             // Alle anderen Signale bearbeiten
     }

}

// Signalverarbeitung einrichten
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP, "sig_handler");

?>
]]>
     </programlisting>
    </example>
   </section>

   <section xml:id="pcntl.seealso">
    &reftitle.seealso;
    <para>
     Ein Blick in den Abschnitt über
     <link linkend="ref.posix">POSIX Funktionen</link>
     kann hilfreich sein.
    </para>
   </section>

  </partintro>

&reference.pcntl.entities.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

