<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 348420 Maintainer: lapistano Status: ready -->

<refentry xml:id="sqlite3.createaggregate" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3::createAggregate</refname>
  <refpurpose>
  Registriert eine PHP-Funktion zum Gebrauch als SQL-Aggregat-Funktion
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>SQLite3::createAggregate</methodname>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>step_callback</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>final_callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>argument_count</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Registriert eine PHP-Funktion zum Gebrauch als SQL-Aggregat-Funktion.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>Name</parameter></term>
     <listitem>
      <para>
       Name des erstellten oder redefinierten SQL-Aggregates. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>step_callback</parameter></term>
     <listitem>
      <para>
       'Callback'-Funktion, welche für jede Reihe des Abfrageergebnisses ausgeführt wird.
       Ihr PHP sollte das Ergebnis akkumulieren und in der Aggregation 'context' speichern.
      </para>
      <para>
       Es ist notwendig, diese Funktion wie folgt zu definieren:
       <methodsynopsis>
        <type>mixed</type><methodname><replaceable>step</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>context</parameter></methodparam>
        <methodparam><type>int</type><parameter>rownumber</parameter></methodparam>
        <methodparam><type>mixed</type><parameter>value1</parameter></methodparam>
        <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>context</parameter></term>
         <listitem>
          <para>
           &null; für die erste Reihe. Folgende Reihen 
           werden den zuvor zurückgegebenen Wert haben. Sie sollten diesen nutzen, um den
           Status der Aggregation zu pflegen.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>rownumber</parameter></term>
         <listitem>
          <para>
           Die Nummer der aktuellen Reihe.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>value1</parameter></term>
         <listitem>
          <para>
           Das erste Argument, das an das Aggregat übergeben wurde.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>...</parameter></term>
         <listitem>
          <para>
           Weitere Argumente, die an das Aggregat übergeben wurden.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
       Der Rückgabewert dieser Funktion wird als <parameter>context</parameter>
       Argument im nächsten Aufruf der step oder finalize Funktion verwendet.
      </para> 
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>final_callback</parameter></term>
     <listitem>
      <para>
       'Callback'-Funktion, die die Informationen aller Reihen aggregiert.
       Sind alle Reihen abgearbeitet, wird diese Funktion aufgerufen. Diese
       sollte dann die Daten der Aggregation 'context' auswerten und das 
       Ergebnis zurückgeben. 'Callback'-Funktionen sollten einen Variablentyp 
       liefern, der von SQLite erwartet wird (z.B. <link 
       linkend="language.types.intro">scalar type</link>).
      </para>
      <para>
       Diese Funktion ist wie folgt zu definieren:
       <methodsynopsis>
        <type>mixed</type><methodname><replaceable>fini</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>context</parameter></methodparam>
        <methodparam><type>int</type><parameter>rownumber</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>context</parameter></term>
         <listitem>
          <para>
           Enthält den Rückgabewert des letzten Aufrufs der Schritt-Funktion.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>rownumber</parameter></term>
         <listitem>
          <para>
           Immer <literal>0</literal>.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
       Der Rückgabewert dieser Funktion wird als Rückgabewert für die
       Aggregation genutzt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>argument_count</parameter></term>
     <listitem>
      <para>
       Anzahl der Argumente, welche das SQL-Aggregat erwartet.
       Ist dieser Parameter negativ, wird das SQL-Aggregat jedwede Zahl von Argumenten erkennen.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt &true; zurück, wenn die Aggregierung erfolgreich war. &return.falseforfailure;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Beispiel für eine 'max_length'-Aggregierungs-Funktion</title>
    <programlisting role="php">
<![CDATA[
<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$db = new SQLite3(':memory:');
$db->exec("CREATE TABLE strings(a)");
$insert = $db->prepare('INSERT INTO strings VALUES (?)');
foreach ($data as $str) {
    $insert->bindValue(1, $str);
    $insert->execute();
}
$insert = null;

function max_len_step($context, $rownumber, $string)
{
    if (strlen($string) > $context) {
        $context = strlen($string);
    }
    return $context;
}

function max_len_finalize($context, $rownumber)
{
    return $context === null ? 0 : $context;
}

$db->createAggregate('max_len', 'max_len_step', 'max_len_finalize');

var_dump($db->querySingle('SELECT max_len(a) from strings'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(5)
]]>
    </screen>
   </example>
  </para>
  <para>
   In diesem Beispiel erzeugen wir eine Aggregat-Funktion, die die Länge
   der längsten Zeichenkette innerhalb einer der Tabellenspalten ermittelt.
   Die <literal>max_len_step</literal>-Funktion wird für jede durchlaufene Reihe
   mit dem Parameter <literal>$context</literal> aufgerufen. Der Parameter
   'context' ist eine normal PHP Variable, welche Listen oder Objektinhalte
   beinhalten kann. In diesem Beispiel benötigen wir sie als Speicher für die
   größte bisher gefundene Länge der geprüften Zeichenketten. Wenn also die
   die Zeichenkette in <literal>$string</literal> länger ist, als die aktuell
   Längste, wird der Inhalt von 'context' mit der neuen Länge überschrieben.
  </para>
  <para>
   Nachdem alle Reihen abgearbeitet wurden, ruft SQLite die
   <literal>max_len_finalize</literal>-Funktion auf, um das Endergebnis
   zu ermitteln. Hier können wir nun jede Art von Berechnungen,
   basierend auf den in <literal>$context</literal> gesammelten Daten,
   durchführen. In unserem Beispiel haben wir die Berechgungen bereits bei
   der Datenerhebung getätigt, dass wir nun nur noch das Ergebnis -
   den Inhalt von 'context' - zurückgeben brauchen.
  </para>
  <tip>
   <para>
    Es ist nicht ratsam, eine Kopie der Inhalte in 'context' zu speichern, 
    um diese dann am Ende auszuwerten. Das würde dazu führen, dass SQLite eine
    große Menge an Speicher benötigt, um die Abfrage abzuarbeiten. Überlegen Sie
    nur mal, wieviel Speicher eine Abfrage braucht, die 1 Millionen Reihen mit
    je 32 Byte Inhalt aus der Datenbank liest.
   </para>
  </tip>
  <tip>
   <para>
    <methodname>SQLite3::createAggregate</methodname> kann verwendet werden, um
    native SQL-Funktionen von SQLite zu übersteuern.
   </para>
  </tip>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
