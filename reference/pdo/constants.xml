<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Reviewer: samesch -->
<appendix xml:id="pdo.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;
 <variablelist>
  <varlistentry xml:id="pdo.constants.param-bool">
   <term>
    <constant>PDO::PARAM_BOOL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Stellt den Datentyp Boolean dar.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-null">
   <term>
    <constant>PDO::PARAM_NULL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Stellt den Datentyp SQL-NULL dar.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-int">
   <term>
    <constant>PDO::PARAM_INT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Stellt den Datentyp SQL-INTEGER dar.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str">
   <term>
    <constant>PDO::PARAM_STR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Stellt SQL-CHAR, VARCHAR und andere String-Datentypen dar.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str-natl">
   <term>
    <constant>PDO::PARAM_STR_NATL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ein Flag, das angibt, dass eine Zeichenkette den nationalen Zeichensatz
     verwendet.
    </simpara>
    <simpara>
     Verfügbar seit PHP 7.2.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str-char">
   <term>
    <constant>PDO::PARAM_STR_CHAR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ein Flag, das angibt, dass eine Zeichenkette den regulären Zeichensatz
     verwendet.
    </simpara>
    <simpara>
     Verfügbar seit PHP 7.2.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-lob">
   <term>
    <constant>PDO::PARAM_LOB</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Stellt den SQL-Datentyp LOB (large object) dar.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-stmt">
   <term>
    <constant>PDO::PARAM_STMT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Stellt einen Datensatztyp dar. Wird derzeit von keinem Treiber
     unterstützt.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-input-output">
   <term>
    <constant>PDO::PARAM_INPUT_OUTPUT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass der Parameter ein INOUT-Parameter für eine Stored
     Procedure sein muss. Auf den Wert muss ein bitweises OR mit einem
     eindeutigen PDO::PARAM_*-Parameter ausgeführt werden.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-default">
   <term>
    <constant>PDO::FETCH_DEFAULT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass der standardmäßige Abrufmodus verwendet werden soll.
     Verfügbar seit PHP 8.0.7.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-lazy">
   <term>
    <constant>PDO::FETCH_LAZY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten jede Zeile als
     eigenständiges Objekt mit variablem Namen zurückgeben soll, welcher
     gleichlautend mit den Spaltennamen in der Ergebnismenge ist.
     <constant>PDO::FETCH_LAZY</constant> erstellt die variablen Objektnamen,
     sobald auf diese zugegriffen wird. Ungültig innerhalb von
     <methodname>PDOStatement::fetchAll</methodname>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-assoc">
   <term>
    <constant>PDO::FETCH_ASSOC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten jede Zeile in einem
     assoziativen Array zurückgibt, das mit den Spaltennamen aus der
     Ergebnismenge indiziert wird. Wenn die Ergebnismenge mehrere
     gleichlautende Spaltennamen enthält, gibt
     <constant>PDO::FETCH_ASSOC</constant> nur einen Wert pro Spaltenname
     zurück.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-named">
   <term>
    <constant>PDO::FETCH_NAMED</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten jede Zeile als ein
     Array mit dem Index des Spaltennamens der entsprechenden Ergebnismenge
     zurückgeben soll. Wenn die Ergebnismenge mehrere Spalten mit dem gleichen
     Namen besitzt, gibt <constant>PDO::FETCH_NAMED</constant> ein Array von
     Werten pro Spaltenname zurück.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-num">
   <term>
    <constant>PDO::FETCH_NUM</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten jede Zeile als Array
     zurückgeben soll, indiziert durch die Spaltennummer, wie sie in der
     entsprechenden Ergebnismenge zurückgegeben wird, beginnend bei Spalte 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-both">
   <term>
    <constant>PDO::FETCH_BOTH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten jede Zeile als Array
     zurückgeben soll, das durch den Spaltennamen und die Spaltennummer
     indiziert ist, wie sie in der entsprechenden Ergebnismenge zurückgegeben
     werden, beginnend bei Spalte 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-obj">
   <term>
    <constant>PDO::FETCH_OBJ</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten jede Zeile als ein
     Objekt mit Eigenschaftsnamen zurückgeben soll, die den in der
     Ergebnismenge zurückgegebenen Spaltennamen entsprechen.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-bound">
   <term>
    <constant>PDO::FETCH_BOUND</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten TRUE zurückgeben soll
     und die Werte der Spalten in der Ergebnismenge den PHP-Variablen zuweist,
     an die sie mit der Methode <methodname>PDOStatement::bindParam</methodname>
     oder der Methode <methodname>PDOStatement::bindColumn</methodname> gebunden
     wurden.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-column">
   <term>
    <constant>PDO::FETCH_COLUMN</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten nur eine einzige
     angeforderte Spalte aus der nächsten Zeile in der Ergebnismenge
     zurückgeben soll.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-class">
   <term>
    <constant>PDO::FETCH_CLASS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten eine neue Instanz der
     angeforderten Klasse zurückgeben soll, die die Spalten den benannten
     Eigenschaften der Klasse zuordnet.
    </simpara>
    <note>
     <simpara>
      Die magische
      <link linkend="language.oop5.overloading.members"><methodname>__set</methodname></link>-Methode
      wird aufgerufen, wenn die Eigenschaft in der angeforderten Klasse nicht
      vorhanden ist
     </simpara>
    </note>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-into">
   <term>
    <constant>PDO::FETCH_INTO</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt fest, dass die Methode zum Abrufen von Daten eine vorhandene Instanz
     der angeforderten Klasse aktualisieren soll, indem die Spalten den
     benannten Eigenschaften der Klasse zugeordnet werden.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-func">
   <term>
    <constant>PDO::FETCH_FUNC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ermöglicht die ad-hoc Anpassung der Daten (nur gültig innerhalb von
     <methodname>PDOStatement::fetchAll</methodname>).
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-group">
   <term>
    <constant>PDO::FETCH_GROUP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Gruppiert die Rückgabe nach den Werten. Üblicherweise in Verbindung mit
     <constant>PDO::FETCH_COLUMN</constant> oder
     <constant>PDO::FETCH_KEY_PAIR</constant>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-unique">
   <term>
    <constant>PDO::FETCH_UNIQUE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ruft nur eindeutige Werte abrufen.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-key-pair">
   <term>
    <constant>PDO::FETCH_KEY_PAIR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Liefert das Ergebnis von zwei Spalten als Array. Der Inhalt der ersten
     Spalte ist der Schlüssel und der Inhalt der zweiten Spalte ist der Wert.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-classtype">
   <term>
    <constant>PDO::FETCH_CLASSTYPE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ermittelt den Klassennamen aus dem Wert der ersten Spalte.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-serialize">
   <term>
    <constant>PDO::FETCH_SERIALIZE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ähnlich wie <constant>PDO::FETCH_INTO</constant>, liefert aber das Objekt
     als serialisierte Zeichenkette. Der Konstruktor wird nicht aufgerufen,
     wenn dieses Flag gesetzt ist.
     Ab PHP 8.1.0 veraltet.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-props-late">
   <term>
    <constant>PDO::FETCH_PROPS_LATE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ruft den Konstrutor auf, bevor die Eigenschaften gesetzt werden.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-autocommit">
   <term>
    <constant>PDO::ATTR_AUTOCOMMIT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Wenn dieser Wert &false; ist, versucht PDO, Autocommit zu deaktivieren,
     damit die Verbindung eine Transaktion starten kann.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-prefetch">
   <term>
    <constant>PDO::ATTR_PREFETCH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Durch Ändern der Prefetch-Puffergröße können Sie die Balance zwischen
     Speicherverbrauch und Datenbankgeschwindigkeit einstellen. Nicht alle
     Datenbank/Treiber-Kombinationen unterstützen die Größenänderung dieses
     Puffers. Je größer der Puffer ist, desto höher ist die Leistung, aber
     auch der Speicherverbrauch.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-timeout">
   <term>
    <constant>PDO::ATTR_TIMEOUT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt den Timeout-Wert für die Kommunikation mit der Datenbank in Sekunden
     fest.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-errmode">
   <term>
    <constant>PDO::ATTR_ERRMODE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Informationen zu diesem Attribut finden Sie im Abschnitt
     <link linkend="pdo.error-handling">Fehler und Fehlerbehandlung</link>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-version">
   <term>
    <constant>PDO::ATTR_SERVER_VERSION</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Dieses Attribut ist schreibgeschützt; es gibt Informationen über die
     Version des Datenbankservers zurück, mit dem PDO verbunden ist.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-client-version">
   <term>
    <constant>PDO::ATTR_CLIENT_VERSION</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Dieses Attribut ist schreibgeschützt; es gibt Informationen über die
     Versionen der Client-Bibliotheken zurück, die der PDO-Treiber verwendet.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-info">
   <term>
    <constant>PDO::ATTR_SERVER_INFO</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Dieses Attribut ist schreibgeschützt; es gibt einige Metainformationen
     über den Datenbankserver zurück, mit dem PDO verbunden ist.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-connection-status">
   <term>
    <constant>PDO::ATTR_CONNECTION_STATUS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-case">
   <term>
    <constant>PDO::ATTR_CASE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Erzwingt die Zuordnung von Spaltennamen zur Groß- oder Kleinschreibung,
     die durch die <literal>PDO::CASE_*</literal>-Konstanten festgelegt wird.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor-name">
   <term>
    <constant>PDO::ATTR_CURSOR_NAME</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Liefert oder setzt den Namen, der für einen Cursor verwendet werden soll.
     Am nützlichsten bei der Verwendung von scrollbaren Cursorn und
     positionierten Aktualisierungen.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor">
   <term>
    <constant>PDO::ATTR_CURSOR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Wählt den Cursortyp aus. PDO unterstützt derzeit entweder
     <constant>PDO::CURSOR_FWDONLY</constant> oder
     <constant>PDO::CURSOR_SCROLL</constant>. Bleiben Sie bei
     <constant>PDO::CURSOR_FWDONLY</constant>, es sei denn, Sie wissen, dass
     Sie einen scrollbaren Cursor benötigen.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.attr-driver-name">
   <term>
    <constant>PDO::ATTR_DRIVER_NAME</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Gibt den Namen des Treibers zurück.
    </simpara>
    <para>
     <example><title>Die Verwendung von <constant>PDO::ATTR_DRIVER_NAME</constant></title>
     <programlisting role="php">
<![CDATA[
<?php
if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
  echo "Läuft auf MySQL; macht hier etwas MySQL-spezifisches\n";
}
?>
]]>
     </programlisting>
     </example>
     </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-oracle-nulls">
   <term>
    <constant>PDO::ATTR_ORACLE_NULLS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Konvertiert leere Zeichenketten bei Datenabfragen in SQL-NULL-Werte.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-persistent">
   <term>
    <constant>PDO::ATTR_PERSISTENT</constant>
    (<type>mixed</type>)
   </term>
   <listitem>
    <simpara>
     Fordert eine persistente Verbindung an, anstatt eine neue Verbindung zu
     erstellen. Weitere Informationen zu diesem Attribut finden Sie im
     Abschnitt
     <link linkend="pdo.connections">Verbindungen und Verbindungsmanagement</link>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-statement-class">
   <term>
    <constant>PDO::ATTR_STATEMENT_CLASS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt den Name der Klasse fest, die als Statement zurückgegeben wird.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-catalog-names">
   <term>
    <constant>PDO::ATTR_FETCH_CATALOG_NAMES</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Stellt jedem Spaltennamen, der in der Ergebnismenge zurückgegeben wird,
     den Namen des enthaltenden Katalogs voran. Der Katalogname und der
     Spaltenname werden durch einen Punkt (.) getrennt. Die Unterstützung
     dieses Attributs liegt auf der Treiberebene; es kann sein, dass es von
     Ihrem Treiber nicht unterstützt wird.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-table-names">
   <term>
    <constant>PDO::ATTR_FETCH_TABLE_NAMES</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Stellt jedem Spaltennamen, der in der Ergebnismenge zurückgegeben wird,
     den Namen der enthaltenden Tabelle voran. Der Tabellenname und der
     Spaltenname werden durch einen Punkt (.) getrennt. Die Unterstützung
     dieses Attributs liegt auf der Treiberebene; es kann sein, dass es von
     Ihrem Treiber nicht unterstützt wird.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-stringify-fetches">
   <term>
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Erzwingt, dass alle Werte als Zeichenkette abgerufen werden.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-max-column-len">
   <term>
    <constant>PDO::ATTR_MAX_COLUMN_LEN</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt die maximale Länge der Spaltennamen fest.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-default-fetch-mode">
   <term>
    <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-emulate-prepares">
   <term>
    <constant>PDO::ATTR_EMULATE_PREPARES</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-default-str-param">
   <term>
    <constant>PDO::ATTR_DEFAULT_STR_PARAM</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Legt den Standard-Zeichenketten-Parametertypen fest; entweder
     <constant>PDO::PARAM_STR_NATL</constant> oder
     <constant>PDO::PARAM_STR_CHAR</constant>.
    </simpara>
    <simpara>
     Verfügbar seit PHP 7.2.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-silent">
   <term>
    <constant>PDO::ERRMODE_SILENT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Löst keinen Fehler und keine Ausnahme aus, wenn ein Fehler auftritt. Es
     wird erwartet, dass der Entwickler explizit auf Fehler prüft. Dies ist
     der Standardmodus. Weitere Informationen zu diesem Attribut finden Sie im
     Abschnitt
     <link linkend="pdo.error-handling">Fehler und Fehlerbehandlung</link>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-warning">
   <term>
    <constant>PDO::ERRMODE_WARNING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Gibt eine PHP-<constant>E_WARNING</constant>-Meldung aus, wenn ein Fehler
     auftritt. Weitere Informationen zu diesem Attribut finden Sie im
     Abschnitt
     <link linkend="pdo.error-handling">Fehler und Fehlerbehandlung</link>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-exception">
   <term>
    <constant>PDO::ERRMODE_EXCEPTION</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Löst eine <classname>PDOException</classname> aus, wenn ein Fehler
     auftritt. Weitere Informationen zu diesem Attribut finden Sie im
     Abschnitt
     <link linkend="pdo.error-handling">Fehler und Fehlerbehandlung</link>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-natural">
   <term>
    <constant>PDO::CASE_NATURAL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Belässt die Spaltennamen so, wie sie vom Datenbanktreiber zurückgegeben
     werden.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-lower">
   <term>
    <constant>PDO::CASE_LOWER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Erzwingt die Kleinschreibung von Spaltennamen.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-upper">
   <term>
    <constant>PDO::CASE_UPPER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Erzwingt die Großschreibung von Spaltennamen.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-natural">
   <term>
    <constant>PDO::NULL_NATURAL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-empty-string">
   <term>
    <constant>PDO::NULL_EMPTY_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-to-string">
   <term>
    <constant>PDO::NULL_TO_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-next">
   <term>
    <constant>PDO::FETCH_ORI_NEXT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Liefert die nächste Zeile aus der Ergebnismenge. Gilt nur für scrollbare
     Cursor.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-prior">
   <term>
    <constant>PDO::FETCH_ORI_PRIOR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Liefert die vorherige Zeile aus der Ergebnismenge. Gilt nur für
     scrollbare Cursor.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-first">
   <term>
    <constant>PDO::FETCH_ORI_FIRST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Liefert die erste Zeile aus der Ergebnismenge. Gilt nur für scrollbare
     Cursor.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-last">
   <term>
    <constant>PDO::FETCH_ORI_LAST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Liefert die vorherige Zeile aus der Ergebnismenge. Gilt nur für
     scrollbare Cursor.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-abs">
   <term>
    <constant>PDO::FETCH_ORI_ABS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Liefert die angeforderte Zeile anhand der Zeilennummer aus der
     Ergebnismenge. Gilt nur für scrollbare Cursor.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-rel">
   <term>
    <constant>PDO::FETCH_ORI_REL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Liefert die angeforderte Zeile an einer Position relativ zur aktuellen
     Position des Cursors aus der Ergebnismenge. Gilt nur für scrollbare
     Cursor.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-fwdonly">
   <term>
    <constant>PDO::CURSOR_FWDONLY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Erzeugt ein <classname>PDOStatement</classname>-Objekt mit einem
     Nur-Vorwärts-Cursor. Dies ist die Standard-Cursor-Wahl, da es das
     schnellste und häufigste Datenzugriffsmuster in PHP ist.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-scroll">
   <term>
    <constant>PDO::CURSOR_SCROLL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Erzeugt ein <classname>PDOStatement</classname>-Objekt mit einem
     scrollbaren Cursor. Übergeben Sie die Konstante
     <literal>PDO::FETCH_ORI_*</literal>, um die aus der Ergebnismenge
     abgerufenen Zeilen zu steuern.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.err-none">
   <term>
    <constant>PDO::ERR_NONE</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Entspricht dem SQLSTATE '00000', d. h. die SQL-Anweisung wurde
     erfolgreich und ohne Fehler oder Warnungen ausgegeben. Diese Konstante
     ist für die Unterstützung bei der Überprüfung von
     <methodname>PDO::errorCode</methodname> oder
     <methodname>PDOStatement::errorCode</methodname>, um festzustellen, ob ein
     Fehler aufgetreten ist. Normalerweise wissen Sie sowieso, ob dies der
     Fall ist, indem Sie den Rückgabewert der Methode untersuchen, die die
     Fehlerbedingung ausgelöst hat.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-alloc">
   <term>
    <constant>PDO::PARAM_EVT_ALLOC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ein Zuweisungsereignis (Allocation).
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-free">
   <term>
    <constant>PDO::PARAM_EVT_FREE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ein Freigabe-Ereignis (Deallocation).
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-pre">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_PRE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Löst ein Ereignis vor der Ausführung einer vorbereiteten Anweisung aus.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-post">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_POST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Löst ein Ereignis nach der Ausführung einer vorbereiteten Anweisung aus.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-pre">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_PRE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Löst ein Ereignis vor dem Abrufen eines Ergebnisses aus einer
     Ergebnismenge aus.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-post">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_POST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Löst ein Ereignis nach dem Abrufen eines Ergebnisses aus einer
     Ergebnismenge aus.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-normalize">
   <term>
    <constant>PDO::PARAM_EVT_NORMALIZE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Löst ein Ereignis während der Registrierung eines gebundenen Parameters
     aus, was es dem Treiber ermöglicht, den Parameternamen zu normalisieren.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.sqlite_deterministic">
   <term>
    <constant>PDO::SQLITE_DETERMINISTIC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Signalisiert, dass eine Funktion die mit
     <methodname>PDO::sqliteCreateFunction</methodname> erzeugt wurde,
     deterministisch ist, d. h. dass sie immer dasselbe Ergebnis liefert,
     wenn sie innerhalb derselben SQL-Anweisung mit den gleichen Parametern
     aufgerufen wird. (Verfügbar seit PHP 7.1.4.)
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
