<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: fa Status: ready -->

<chapter xml:id="pdo.prepared-statements" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Prepared Statements und Stored Procedures</title>
 <para>
  Viele der ausgereifteren Datenbanken unterstützen das Konzept der Prepared
  Statements. Was ist das? Man kann sie sich als eine Art von kompiliertem
  Template für SQL das eine Anwendung ausführen will vorstellen, 
  das durch variable Parameter angepasst werden
  kann. Prepared Statements haben zwei wichtige Vorteile:
 </para>
 <itemizedlist>
  <listitem>
   <simpara>
    Die Abfrage muss nur einmal geparst (oder vorbereitet) werden, kann dann
    aber mehrere Male mit denselben oder anderen Parametern ausgeführt werden.
    Wenn die Abfrage vorbereitet wird, kann die Datenbank ihre Vorgehensweise
    zur Ausführung der Abfrage analysieren, kompilieren und optimieren. Für
    komplexe Abfragen kann dieser Vorgang genug Zeit benötigen, dass es eine
    Anwendung merklich verlangsamt, wenn dieselbe Abfrage oft mit
    verschiedenen Parametern wiederholt wird. Mit einem Prepared Statement
    vermeidet die Anwendung den Zyklus der Analyse/Kompilierung/Optimierung.
    Kurz gesagt benötigen Prepared Statements weniger Ressourcen und laufen
    deswegen schneller.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    Die Parameter für Prepared Statements müssen nicht maskiert werden. Der
    Treiber übernimmt das automatisch. Wenn eine Anwendung ausschließlich
    Prepared Statements benutzt, kann sich der Entwickler sicher sein, dass keine
    SQL-Injection auftreten wird. (Wenn aber trotzdem andere Teile der
    Abfrage aus nicht zuverlässigen Eingaben generiert werden en, ist dies
    immer noch möglich.)
   </simpara>
  </listitem>
 </itemizedlist>
 <para>
  Prepared Statements sind so nützlich, dass sie das einzige Feature sind, das
  PDO auch für Treiber emulieren wird, die diese nicht unterstützen. Das
  garantiert, dass eine Anwendung unabhängig von den Möglichkeiten der 
  Datenbank dieselbe Art des Datenzugriffs nutzen können.
 </para>
 <para>
  <example>
   <title>Wiederholte Inserts mit Prepared Statements</title>
   <simpara>
    Dieses Beispiel führt eine INSERT-Abfrage durch, in der ein
    <literal>name</literal> und ein <literal>value</literal> für die
    benannten Platzhalter eingesetzt werden.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (:name, :value)");
$stmt->bindParam(':name', $name);
$stmt->bindParam(':value', $value);

// eine Zeile einfügen
$name = 'one';
$value = 1;
$stmt->execute();

// eine weitere Zeile mit anderen Werten einfügen
$name = 'two';
$value = 2;
$stmt->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Wiederholte Inserts mit Prepared Statements</title>
   <simpara>
    Dieses Beispiel führt eine INSERT-Abfrage durch, in der ein
    <literal>name</literal> und ein <literal>value</literal> für die
    positionsabhängigen <literal>?</literal>-Platzhalter eingesetzt werden.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (?, ?)");
$stmt->bindParam(1, $name);
$stmt->bindParam(2, $value);

// eine Zeile einfügen
$name = 'one';
$value = 1;
$stmt->execute();

// eine weitere Zeile mit anderen Werten einfügen
$name = 'two';
$value = 2;
$stmt->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Abfragen von Daten mit Prepared Statements</title>
   <simpara>
    Dieses Beispiel ruft Daten basierend auf einem Schlüsselwert ab, der von
    einem Formular geliefert wird. Die Benutzereingabe wird automatisch
    maskiert, deswegen gibt es kein Risiko eines SQL-Injection-Angriffs.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name = ?");
if ($stmt->execute(array($_GET['name']))) {
  while ($row = $stmt->fetch()) {
    print_r($row);
  }
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Wenn es der Datenbanktreiber unterstützt, kann eine Anwendung auch Parameter für die
  Ausgabe einführen, ähnlich der Eingabe. Ausgabeparameter werden typischerweise
  benutzt, um Werte von Stored Procedures abzurufen. Ausgabeparameter sind
  etwas komplexer in der Verwendung als Eingabeparameter, weil die Entwickler wissen
  muss, wie groß ein gegebener Parameter sein könnte, wenn sie ihn einführen.
  Wenn der Wert sich als größer herausstellt als die vorgeschlagene Größe,
  wird eine Fehlermeldung erzeugt.
 </para>

 <para>
  <example>
   <title>Eine Stored Procedure mit einem Ausgabeparameter aufrufen</title>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("CALL sp_returns_string(?)");
$stmt->bindParam(1, $return_value, PDO::PARAM_STR, 4000);

// Aufruf der Stored Procedure
$stmt->execute();

print "Rückgabewert der Stored Procedure: $return_value\n";
?>
]]>
   </programlisting>
  </example>
 </para>

 <para>
  Entwickler können auch Parameter angeben, die Werte für Eingabe und Ausgabe
  enthalten. Die Syntax ist ähnlich den Ausgabeparametern. In diesem nächsten
  Beispiel wird die Zeichenkette 'hallo' der Stored Procedure übergeben. Wenn
  diese etwas zurückgibt, wird 'hallo' durch den Rückgabewert der Stored
  Procedure ersetzt.
 </para>

 <para>
  <example>
   <title>Eine Stored Procedure mit einem Eingabe-/Ausgabe-Parameter
    aufrufen</title>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("CALL sp_takes_string_returns_string(?)");
$value = 'hallo';
$stmt->bindParam(1, $value, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 4000);

// Aufruf der Stored Procedure
$stmt->execute();

print "Rückgabewert der Stored Procedure: $value\n";
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Ungültige Verwendung von Platzhaltern</title>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE '%?%'");
$stmt->execute(array($_GET['name']));

// Platzhalter müssen anstelle des ganzen Wertes verwendet werden
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE ?");
$stmt->execute(array("%$_GET[name]%"));
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
