<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.6 Maintainer: fa Status: ready -->
<section xml:id="pdo.installation" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.install;
 <procedure xml:id='pdo.install.unix51up'>
  <title>PHP 5.1 und höher auf Unix-Systemen</title>
  <step>
   <para>
    Wenn Sie ein PHP 5.1-Release verwenden, sind PDO und <link
    linkend="ref.pdo-sqlite">PDO_SQLITE</link>bereits enthalten.
    Es wird automatisch angeschaltet, wenn Sie configure ausführen. Es wird
    empfohlen, PDO als shared module zu kompilieren, da Sie so die durch PECL
    bereitgestellen Updates nutzen können. Das empfohlene configure-Kommando,
    um PHP mit PDO zu kompilieren, sollte auch die zlib-Unterstützung (für den
    PEAR-Installer) aktivieren. Sie müssen eventuell auch den PDO-Treiber für
    die Datenbank Ihrer Wahl aktivieren. Ziehen Sie die Dokumentation für <link
    linkend="pdo.drivers">datenbankspezifische PDO-Treiber</link> zu Rate, um
    mehr darüber herauszufinden, aber beachten Sie, dass Sie, wenn Sie PDO als
    Shared Extension bauen, Sie auch die PDO-Treiber als Shared Extensions bauen
    müssen.
    Die SQLite-Extension ist abhängig von PDO, das bedeutet, wenn Sie PDO als
    Shared Extension bauen, benötigt SQLite die gleichen Build-Einstellungen
    <screen>
<![CDATA[
 ./configure --with-zlib --enable-pdo=shared
]]>
    </screen>
   </para>
  </step>
  <step>
   <para>
    Nach der Installation von PDO als Shared Module müssen Sie Ihre
    &php.ini;-Datei bearbeiten, damit die PDO-Erweiterung automatisch geladen
    wird, wenn PHP ausgeführt wird. Sie müssen dort auch alle
    datenbankspezifischen Treiber aktivieren. Versichern Sie sich, dass diese
    nach der Zeile mit pdo.so stehen, da PDO initialisiert werden muss, bevor
    die datenbankspezifischen Erweiterungen geladen werden können. Wenn Sie
    PDO und die datenbankspezifischen Erweiterungen statisch kompiliert haben,
    können Sie diesen Schritt überspringen.
    <screen>
<![CDATA[
extension=pdo.so
]]>
    </screen>
   </para>
  </step>
  <step>
   <para>
    PDO als Shared Module zu benutzen erlaubt Ihnen, <command>pecl upgrade
    pdo</command> auszuführen, wenn neue Versionen von PDO veröffentlicht
    werden, ohne dass Sie PHP komplett neu kompilieren müssen. Beachten Sie,
    dass Sie in diesem Fall gleichzeitig auch die datenbankspezifischen Treiber
    aktualisieren müssen.
   </para>
  </step>
 </procedure>
 <procedure xml:id='pdo.install.pecl'>
  <title>PHP 5.0 und höher auf Unix-Systemen</title>
  <step>
   <para>
    PDO ist als PECL-Erweiterung verfügbar auf
    <link xlink:href='&url.pecl.package;pdo'>&url.pecl.package;pdo</link>.
    Die Installation kann mit Hilfe des <command>pecl</command>-Tools
    durchgeführt werden. Dies ist standardmäßig aktiviert, wenn sie PHP
    konfigurieren. Sie sollten sich vergewissern, dass PHP mit --with-zlib
    erstellt wurde, damit <command>pecl</command> mit der komprimierten
    Paketdatei umgehen kann.
   </para>
  </step>
  <step>
   <para>
    Führen Sie den folgenden Befehl aus, um die neueste stabile Version von PDO
    herunterzuladen, zu kompilieren und zu installieren:
    <screen>
<![CDATA[
pecl install pdo
]]>
    </screen>
   </para>
  </step>
  <step>
   <para>
    Der <command>pecl</command>-Befehl installiert das PDO-Modul automatisch
    in Ihr PHP-Extensionsverzeichnis. Um die PDO-Erweiterung auf Linux oder
    Unix-Betriebssystemen zu aktivieren, müssen Sie die folgende Zeile an Ihre
    &php.ini; anfügen:
    <screen>
<![CDATA[
extension=pdo.so
]]>
    </screen>
   </para>
   <para>
    Für weitere Informationen über das Erstellen von PECL-Paketen lesen Sie am
    besten das Kapitel <link linkend="install.pecl">PECL-Installation</link>
    des Handbuchs.
   </para>
  </step>
 </procedure>
 <procedure xml:id='pdo.install.win32php51'>
  <title>PHP 5.1 und höher unter Windows</title>
  <step>
   <para>
    PDO und alle gängigen Treiber werden mit PHP als Shared Module mitgeliefert
    und müssen nur durch Bearbeiten der Datei &php.ini; aktiviert werden:
    <screen>
<![CDATA[
extension=php_pdo.dll
]]>
    </screen>
   </para>
  </step>
  <step>
   <para>
    Als nächstes wählen Sie die datenbankspezifischen DLL-Dateien und laden sie
    entweder per <function>dl</function> zur Laufzeit oder aktivieren sie in der
    Datei &php.ini; unterhalb von <filename>php_pdo.dll</filename>. Zum Beispiel:
    <screen>
<![CDATA[
extension=php_pdo.dll
extension=php_pdo_firebird.dll
extension=php_pdo_informix.dll
extension=php_pdo_mssql.dll
extension=php_pdo_mysql.dll
extension=php_pdo_oci.dll
extension=php_pdo_oci8.dll
extension=php_pdo_odbc.dll
extension=php_pdo_pgsql.dll
extension=php_pdo_sqlite.dll
]]>
    </screen>
   </para>
   <para>
    Diese DLLs sollten im <link linkend="ini.extension-dir">extension_dir</link>
    des Systems vorhanden sein. Beachten Sie bitte, dass <link
    linkend="ref.pdo-informix">PDO_INFORMIX</link> nur als PECL-Erweiterung
    verfügbar ist.
   </para>
  </step>
 </procedure>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
