<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 44bcc82c7d1a0dea5578093833d3172c0c742f5a Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetchAll</refname>
  <refpurpose>Ruft die verbleibenden Zeilen aus einer Ergebnismenge ab</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
  </methodsynopsis>
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_COLUMN</initializer></methodparam>
   <methodparam><type>int</type><parameter>column</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_CLASS</initializer></methodparam>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter>constructorArgs</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_FUNC</initializer></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Legt die Struktur des zurückgegebenen Arrays fest, wie in
       <methodname>PDOStatement::fetch</methodname> dokumentiert.
       Voreingestellt ist <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
       (das standardmäßig auf <constant>PDO::FETCH_BOTH</constant> gesetzt
       ist).
      </para>
      <para>
       Damit ein Array zurückgegeben wird, das aus allen Werten einer
       einzelnen Spalte der Ergebnismenge besteht, muss
       <constant>PDO::FETCH_COLUMN</constant> verwendet werden. Die gewünschte
       Spalte kann mit dem Parameter <parameter>column</parameter> angegeben
       werden.
      </para>
      <para>
       Um das resultierende Array mit dem Wert einer bestimmten Spalte zu
       indizieren (anstatt mit fortlaufenden Zahlen), muss der Name dieser
       Spalte in SQL an erster Stelle der Liste der Spalten stehen und
       <constant>PDO::FETCH_UNIQUE</constant> verwendet werden.
       Diese Spalte darf nur eindeutige Werte enthalten, da sonst einige Daten
       verloren gehen.
      </para>
      <para>
       Um die Ergebnisse in Form eines dreidimensionalen Arrays zu gruppieren,
       das durch die Werte einer bestimmten Spalte indiziert ist, muss der Name
       dieser Spalte in SQL an erster Stelle der Liste der Spalten stehen und
       <constant>PDO::FETCH_GROUP</constant> verwendet werden.
      </para>
      <para>
       Um Ergebnisse in Form eines 2-dimensionalen Arrays zu gruppieren, muss
       die bitweise ODER-Verknüpfung von <constant>PDO::FETCH_GROUP</constant>
       und <constant>PDO::FETCH_COLUMN</constant> verwendet werden.
       Die Ergebnisse werden nach der ersten Spalte gruppiert, wobei der Wert
       des Array-Elements ein Listen-Array mit den entsprechenden Einträgen der
       zweiten Spalte ist.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   Bei den folgenden Parametern handelt es sich um dynamische Parameter, die
   vom Abrufmodus abhängig sind. Sie können nicht in Verbindung mit benannten
   Parametern verwendet werden.
   <variablelist>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       Wird zusammen mit <constant>PDO::FETCH_COLUMN</constant> verwendet.
       Gibt die angegebene Spalte zurück (der Index beginnt bei 0).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class</parameter></term>
     <listitem>
      <para>
       Wird zusammen mit <constant>PDO::FETCH_CLASS</constant> verwendet. Gibt
       Instanzen der angegebenen Klasse zurück, wobei die Spalten jeder Zeile
       auf benannte Eigenschaften der Klasse abgebildet werden.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>constructorArgs</parameter></term>
     <listitem>
      <para>
       Argumente des benutzerdefinierten Klassenkonstruktors, wenn der
       Parameter <parameter>mode</parameter> auf
       <constant>PDO::FETCH_CLASS</constant> gesetzt ist.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Wird zusammen mit <constant>PDO::FETCH_FUNC</constant> verwendet. Gibt
       die Ergebnisse des angegebenen Funktionsaufrufs zurück, wobei die
       Spalten jeder Zeile als Parameter für den Aufruf verwendet werden.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <methodname>PDOStatement::fetchAll</methodname> gibt ein Array zurück, das
   die restlichen Zeilen der Ergebnismenge enthält. Das Array enthält jede
   Zeile entweder als Array von Spaltenwerten oder als Objekt mit
   Eigenschaften, die den einzelnen Spaltennamen entsprechen. Wenn es keine
   Ergebnisse gibt, die abgerufen werden können, wird ein leeres Array
   zurückgegeben.
  </para>
  <para>
   Wenn diese Methode verwendet wird, um große Ergebnismengen abzurufen, kann
   dies zu einer hohen Beanspruchung der System- und Netzwerkressourcen
   führen. Anstatt alle Daten abzurufen und in PHP zu bearbeiten, sollte in
   Betracht gezogen werden, den Datenbankserver für die Bearbeitung der
   Ergebnismengen zu verwenden. Zum Beispiel könnten WHERE- und ORDER
   BY-Klauseln in SQL verwendet werden, um die Ergebnismenge einzuschränken,
   bevor sie mit PHP abgerufen und verarbeitet wird.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Diese Methode gibt nun immer ein &array; zurück, während zuvor bei
       einem Fehler möglicherweise &false; zurückgegeben wurde.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Abrufen der restlichen Zeilen einer Ergebnismenge</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Abrufen der restlichen Zeilen der Ergebnismenge */
print "Abrufen der restlichen Zeilen der Ergebnismenge:\n";
$result = $sth->fetchAll();
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Abrufen der restlichen Zeilen der Ergebnismenge:
Array
(
    [0] => Array
        (
            [name] => apple
            [0] => apple
            [colour] => red
            [1] => red
        )

    [1] => Array
        (
            [name] => pear
            [0] => pear
            [colour] => green
            [1] => green
        )

    [2] => Array
        (
            [name] => watermelon
            [0] => watermelon
            [colour] => pink
            [1] => pink
        )

)
]]>
    </screen>
   </example>
   <example>
    <title>Abrufen aller Werte einer einzelnen Spalte einer Ergebnismenge</title>
    <para>
     Das folgende Beispiel zeigt, wie alle Werte einer einzelnen Spalte aus
     einer Ergebnismenge abgerufen werden können, auch wenn die SQL-Anweisung
     selbst mehrere Spalten pro Zeile zurückgibt.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Abrufen aller Werte der ersten Spalte */
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example>
    <title>Gruppieren aller Werte nach einer einzelnen Spalte</title>
    <para>
     Das folgende Beispiel zeigt, wie ein assoziatives Array abgerufen werden
     kann, das nach den Werten der angegebenen Spalte in der Ergebnismenge
     gruppiert ist. Das Array enthält drei Schlüssel: Die Werte
     <literal>apple</literal> und <literal>pear</literal> werden als Arrays
     zurückgegeben, die zwei verschiedene Farben enthalten, während
     <literal>watermelon</literal> als Array zurückgegeben wird, das nur eine
     Farbe enthält.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Gruppieren der Werte nach der ersten Spalte */
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(3) "red"
  }
  ["pear"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(6) "yellow"
  }
  ["watermelon"]=>
  array(1) {
    [0]=>
    string(5) "pink"
  }
}

]]>
    </screen>
   </example>
   <example>
    <title>Instanziieren einer Klasse für jedes Ergebnis</title>
    <para>
     Das folgende Beispiel zeigt das Verhalten im Modus
     <constant>PDO::FETCH_CLASS</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class fruit {
    public $name;
    public $colour;
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  object(fruit)#1 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(5) "green"
  }
  [1]=>
  object(fruit)#2 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(6) "yellow"
  }
  [2]=>
  object(fruit)#3 (2) {
    ["name"]=>
    string(10) "watermelon"
    ["colour"]=>
    string(4) "pink"
  }
  [3]=>
  object(fruit)#4 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(3) "red"
  }
  [4]=>
  object(fruit)#5 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(5) "green"
  }
}
]]>
    </screen>
   </example>
   <example>
    <title>Aufrufen einer Funktion für jedes Ergebnis</title>
    <para>
     Das folgende Beispiel zeigt das Verhalten im Modus
     <constant>PDO::FETCH_FUNC</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function fruit($name, $colour) {
    return "{$name}: {$colour}";
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(12) "apple: green"
  [1]=>
  string(12) "pear: yellow"
  [2]=>
  string(16) "watermelon: pink"
  [3]=>
  string(10) "apple: red"
  [4]=>
  string(11) "pear: green"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::fetch</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
