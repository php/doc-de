<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- splitted from ./en/functions/ifx.xml, last change in rev 1.2 -->
  <refentry id="function.ifx-prepare">
   <refnamediv>
    <refname>ifx_prepare</refname>
    <refpurpose>Prepare an SQL-statement for execution</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>ifx_prepare</methodname>
      <methodparam><type>string</type><parameter>query</parameter></methodparam>
      <methodparam><type>int</type><parameter>conn_id</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>cursor_def</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>blobidarray</parameter></methodparam>
     </methodsynopsis>
    <para>
     Returns a integer <parameter>result_id</parameter> for use by
     <function>ifx_do</function>.  Sets
     <parameter>affected_rows</parameter> for retrieval by the
     <function>ifx_affected_rows</function> function.  
    </para>
    <para>
     Prepares <parameter>query</parameter> on connection
     <parameter>conn_id</parameter>.  For "select-type" queries a
     cursor is declared and opened. The optional
     <parameter>cursor_type</parameter> parameter allows you to make
     this a "scroll" and/or "hold" cursor.  It's a bitmask and can be
     either IFX_SCROLL, IFX_HOLD, or both or'ed together.
    </para>
    <para> 
     For either query type the estimated number of affected rows is
     saved for retrieval by <function>ifx_affected_rows</function>.
    </para>
    <para>
     If you have BLOB (BYTE or TEXT) columns in the query, you can add
     a <parameter>blobidarray</parameter> parameter containing the
     corresponding "blob ids", and you should replace those columns
     with a "?" in the query text.
    </para>
    <para>
     If the contents of the TEXT (or BYTE) column allow it, you can
     also use "ifx_textasvarchar(1)" and "ifx_byteasvarchar(1)".  This
     allows you to treat TEXT (or BYTE) columns just as if they were
     ordinary (but long) VARCHAR columns for select queries, and you
     don't need to bother with blob id's.
    </para>
    <para>
     With ifx_textasvarchar(0) or ifx_byteasvarchar(0) (the default
     situation), select queries will return BLOB columns as blob id's
     (integer value).  You can get the value of the blob as a string
     or file with the blob functions (see below).
    </para>
    <para>
     See also: <function>ifx_do</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
