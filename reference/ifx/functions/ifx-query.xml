<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.7 Maintainer: conni Status: ready -->
  <refentry id="function.ifx-query">
   <refnamediv>
    <refname>ifx_query</refname>
    <refpurpose>Schickt eine Informix Abfrage an den Server</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>ifx_query</methodname>
      <methodparam><type>string</type><parameter>query</parameter></methodparam>
      <methodparam><type>int</type><parameter>link_identifier</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>cursor_type</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>
        blobidarray
       </parameter></methodparam>
     </methodsynopsis>
    <para> 
     Gibt bei Erfolg einen positiven Integerwert als Ergebniskennung
     zurück oder &false;, falls ein Fehler auftrat.
    </para>
    <para>
     Die Ergebniskennung, "result-id", wird von anderen Funktionen
     benutzt. Die Zahl der betroffenen Zeilen wird für spätere Abfragen
     mit <function>ifx_affected_rows</function> gesetzt. 
    </para>
    <para>
     <function>ifx_query</function> schickt eine Abfrage an die
     gegenwärtig aktive Datenbank auf dem Server, die durch die angegebene
     Verbindungskennung bezeichnet wird.     
    </para>
    <para>
     Auf der Verbindung <parameter>conn_id</parameter> wird eine
     <parameter>query</parameter> ausgeführt. Bei SELECT-Abfragen wird ein
     Cursor deklariert und geöffnet. Mit dem optionalen Parameter
     <parameter>cursor_type</parameter> können Sie bestimmen, ob dies ein
     "scroll"- und/oder ein "hold"-Cursor sein soll. Dies ist eine
     Bitmaske, die entweder die Werte IFX_SCROLL, IFX_HOLD oder beides
     (mit OR verknüpft) annehmen kann. Andere Abfragen auuser SELECTs
     werden unverzüglich ausgeführt. IFX_SCROLL und IFX_HOLD sind
     symbolische Konstanten und sollten nicht in Anführungszeichen eingeschlossen werden. Wenn Sie den Parameter weglassen, definieren
     Sie einen ganz normalen sequentiellen Cursor.
    </para>
    <para>
     Für jeden Abfragetyp wird die Anzahl der betroffenen Zeilen (geschätzt oder wirklich) für spätere Abfragen mit <function>ifx_affected_rows</function> gespeichert.
    </para>
    <para>
     Falls Sie BLOB-Felder (BYTE oder TEXT) in einem UPDATE haben, können
     Sie den Parameter <parameter>blobidarray</parameter> benutzen, der
     die entsprechenden blob-ids enthält und Sie sollten diese Felder in
     der Abfrage durch "?" ersetzen.
    </para>
    <para>
     Falls der Inhalt der TEXT- (oder BYTE) Spalte es erlaubt, können Sie
     auch "ifx_textasvarchar(1)" und "ifx_byteasvarchar(1)" benutzen.
     Damit können Sie TEXT- oder BYTE-Felder behandeln, als wären sie
     normale (nur sehr lange) VARCHAR-Felder in SELECT-Abfragen und Sie
     brauchen sich nicht um blob-IDs kümmern.
    </para>
    <para>
     Mit ifx_textasvarchar(0) oder ifx_byteasvarchar(0) (der
     Standardeinstellung) werden für BLOB-Spalten in SELECT-Abfragen die
     blob-ids (Integerwerte) zurückgegeben. Sie können die Inhalte der
     BLOBs mit den BLOB-Funktionen als Zeichenketten oder Dateien erhalten
     (siehe weiter unten). 
    </para>
    <para>     
     <example>
      <title>
       Gibt alle Zeilen der "orders"-Tabelle als HTML-Tabelle zurück
      </title>
      <programlisting role="php">
<![CDATA[
<?php
ifx_textasvarchar(1);      // "text mode" bei blobs benutzen
$res_id = ifx_query("select * from orders", $conn_id);
if (! $res_id) {
    printf("Kann orders nicht abfragen: %s\n<br />%s<br />\n", ifx_error());
    ifx_errormsg();
    die;
}
ifx_htmltbl_result($res_id, "border=\"1\"");
ifx_free_result($res_id);
?>
]]>
       </programlisting>
      </example>
      <example>
       <title>Ein paar Werte in die "catalog"-Tabelle einfügen</title>
       <programlisting role="php">
<![CDATA[ 
<?php
// blob id's für byte- und text-Spalten erzeugen
$textid = ifx_create_blob(0, 0, "Text Spalte im Speicher");
$byteid = ifx_create_blob(1, 0, "Byte Spalte im Speicher");

// blob id's in einem blobid array speichern
$blobidarray[] = $textid;
$blobidarray[] = $byteid;

// Abfrage ausführen
$query = "insert into catalog (stock_num, manu_code, " .
         "cat_descr,cat_picture) values(1,'HRO',?,?)";
$res_id = ifx_query($query, $conn_id, $blobidarray);
if (! $res_id) {
  /* ... Fehler ... */
}

// Speicher freigeben
ifx_free_result($res_id);
?>
]]>
       </programlisting>
      </example>
     </para>
     <para>
       Siehe auch: <function>ifx_connect</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->