<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision 1.5: Maintainer: conni Status: ready -->
 <reference id="ref.ifx">
  <title>Informix Funktionen</title>
  <titleabbrev>Informix</titleabbrev>

  <partintro>
   <section id="ifx.intro">
   &reftitle.intro;
    <para>
     Der Informix-Treiber für Informix (IDS) 7.x, SE 7.x, Universal
     Server (IUS) 9.x und IDS 2000 ist in "ifx.ec" und "php3_ifx.h" im
     Verzeichnis der Informix Erweiterung implementiert. Die Unterstützung
     für IDS 7.x ist mit der vollen Unterstützung für TEXT- und BYTE-Felder
     ziemlich vollständig. Die Unterstützung von IUS 9.x ist nur teilweise
     fertig: die neuen Datentypen gibt es zwar, aber die Unterstützung von
     SLOB- und CLOB-Datentypen ist noch in Arbeit.     
    </para>
   </section>

   <section id="ifx.requirements">
    &reftitle.required;
     <note>
     <title>Bemerkungen zur Konfiguration</title>
      <para>
       Sie brauchen ESQL/C, um den PHP Informix-Treiber zu kompilieren.
       ESQL/C Versionen ab 7.2x sollten genügen. ESQL/C ist jetzt Teil des
       Informix Client SDK.
      </para>
      <para>
       Versichern Sie sich, dass die Variable "INFORMIXDIR" gesetzt ist und
       dass Sie $INFORMIXDIR/bin in Ihren Pfad eingebunden haben, bevor Sie
       das "configure" Skript aufrufen. 
      </para>
     </note>
   </section>

   <section id="ifx.installation">
    &reftitle.install;
    <note>
     <para>
      Das Konfigurationsskript findet die Bibliotheken und
      Include-Verzeichnisse selbständig, wenn Sie configure mit der Option 
      <option role="configure">--with_informix=yes</option> aufrufen. Sie
      können diese automatische Erkennung überschreiben, wenn Sie in der
      Systemumgebung "IFX_LIBDIR", "IFX_LIBS" und "IFX_INCDIR" setzen. Das
      Konfigurationsskript wird ebenso versuchen, die Version Ihres Informix
      Servers zu erkennen. Es setzt die Variable "HAVE_IFX_IUS" für eine
      bedingte Kompilation, falls Ihre Version &gt;= 9.00 ist. 
     </para>
    </note>
   </section>

   <section id="ifx.configuration">
    &reftitle.runtime;
    <note>
     <para>
      Die Umgebungsvariablen INFORMIXDIR und INFORMIXSERVER müssen für den
      PHP-Treiber verfügbar sein und das INFORMIX bin-Verzeichnis muss im
      Pfad enthalten sein. Prüfen Sie diese Voraussetzungen mit einem Skript,
      das einen Aufruf von <function>phpinfo</function> enthält, bevor Sie
      testen. Die Ausgabe von <function>phpinfo</function> sollte diese
      Umgebungsvariablen auflisten. Dies ist sowohl für CGI PHP als auch
      Apache mod_php &true;. Möglicherweise müssen Sie diese
      Umgebungsvariablen in Ihrem Apache Startskript setzen.
     </para>
     <para>
      Die Informix shared libraries sollten für den Lader ebenfalls verfügbar
      sein (überprüfen Sie den LD_LINBRARY_PATH oder ld.so.conf/ldconfig).
     </para>
    </note>
    <note>
     <title>
      Einige Anmerkungen zum Gebrauch von BLOBs (TEXT- und BYTE Felder)
     </title>
     <para>
      BLOBs werden normalerweise durch BLOB-Identifikatoren adressiert.
      Select Abfragen geben eine "blob id" für alle TEXT- und BYTE-Felder
      zurück. Sie können die Inhalte mit "string_var =
      ifx_get_blob($blob_id);" auslesen, falls Sie angeben, dass Sie die
      BLOBS in den Speicher schreiben möchten (mit "ifx_blobinfile(0);").
      Wenn Sie die Inhalte von BLOB-Felder lieber in eine Datei ausgeben
      möchten, benutzen Sie "ifx_blobinfile(1);" und mit
      "ifx_get_blob($blob_id);" ermitteln Sie den Dateinamen. Benutzen Sie
      normale Datei I/O-Routinen, um die Inhalte von BLOBs zu erhalten. 
     </para>
     <para>
      Bei insert/update Abfragen müssen Sie diese "blob id's" mit der
      Funktion "<function>ifx_create_blob</function>;" selber erzeugen.
      Danach schreiben Sie die blob id's in ein Array und ersetzen die
      BLOB-Felder durch ein Fragezeichen (?) im Abfragestring. Für die
      Inhalte der BLOBs, die mit der Funktion
      <function>ifx_update_blob</function> gesetzt werden, sind Sie bei
      updates/inserts selber verantwortlich. 
     </para>
     <para>
      Das Verhalten einer BLOB-Spalte kann auch zur Laufzeit durch
      Konfigurationsvariablen verändert werden.  
     </para>
     <para>
      Konfigurationsvariable : ifx.textasvarchar
     </para>
     <para>
      Konfigurationsvariable : ifx.byteasvarchar
     </para>
     <para>
      Laufzeitfunktionen :
     </para>
     <para>
      ifx_textasvarchar(0) : benutzt bei SELECT Abfragen von TEXT-Felder die blob-id  
     </para>
     <para>
      ifx_byteasvarchar(0) : benutzt bei SELECT Abfragen von BYTE-Felder die blob-id  
     </para>
     <para>
      ifx_textasvarchar(1) : gibt TEXT-Felder so zurück, als wären es VARCHAR Felder, so dass Sie keine blob-is für select Abfragen brauchen.  
     </para>
     <para>
      ifx_byteasvarchar(1) : gibt BYTE-Felder so zurück, als wären es VARCHAR Felder, so dass Sie keine blob-is für select Abfragen brauchen.  
     </para>
     <para>
      Konfigurationsvariable : ifx.blobinfile
     </para>
     <para>
      Laufzeitfunktionen :
     </para>
     <para>
      ifx_blobinfile_mode(0) : gibt BYTE-Felder in den Speicher zurück, mit
      der blob-id können Sie auf den Inhalt zugreifen. 
     </para>
     <para>
      ifx_blobinfile_mode(1) : gibt BYTE-Felder in einer Datei zurück, mit
      der blob-id können Sie den Dateinamen ermitteln. 
     </para>
     <para>
      Wenn Sie ifx_text/byteasvarchar auf 1 setzen, können Sie TEXT- und
      BYTE-Felder in select Abfragen genauso benutzen, wie normale
      (allerdings sehr lange) VARCHAR-Felder. Da alle Zeichenketten in PHP
      "gezählt" werden, bleibt dies "binary safe". Es bleibt Ihnen
      überlassen, korrekt damit umzugehen. Die zurückgegebenen Daten können
      alles mögliche enthalten, so dass Sie für die Inhalte verantwortlich
      sind. 
     </para>
     <para>
      Wenn Sie ifx_blobinfile auf 1 setzen, benutzen Sie den Dateinamen, der
      von ifx_get_blob(..) zurückgegeben wird, um auf den Inhalt des BLOB
      zuzugreifen. Beachten Sie, dass Sie in diesem Fall FÜR DAS LÖSCHEN DER
      TEMPORÄREN DATEIEN, DIE VON INFORMIX ERSTELLT WERDEN VERANTWORTLLICH
      SIND, wenn sie ein Tupel auslesen. Jedes neue Tupel, das gelesen wird,
      erzeugt für jedes BYTE-Feld eine neue temporäre Datei.   
     </para>
     <para>
      Der Speicherort für die temporären Dateien kann mit der
      Umgebungsvariablen "blobdir" beeinflusst werden, die
      Standardeinstellung ist "." (das aktuelle Verzeichnis). Etwas Ähnliches
      wie : putenv(blobdir=tmpblob"); erleichtert das Bereinigen der
      temporären Dateien, die versehentlich stehen geblieben sind (ihre Namen
      beginnen alle mit "blb").   
     </para>
    </note>
    <note>
     <title>Automatisches Abschneiden von Leerzeichen bei "char" (SQLCHAR und
     SQLNCHAR) Daten </title>
     <para>
      Dies kann mit einer Konfigurationsvariablen eingestellt werden
     </para>
     <para>
      ifx.charasvarchar : falls auf 1 gesetzt, werden abschliessende
      Leerzeichen automatisch abgeschnitten. Dies erspart den Aufruf der
      chop() Funktion. 
     </para>
    </note>
    <note>
     <title>&null;-Werte</title>
     <para>
      Wenn die Konfigurationsvariable ifx.nullformat (und die
      Laufzeitfunktion <function>ifx_nullformat</function>) auf &true;
      gesetzt sind, werden &null;-werte in Spalten als Zeichenkette &null;
      zurückgegeben, wenn die Variable auf &false; gesetzt ist, werden leere
      Strings für &null;werte zurückgegeben. So können sie zwischen
      &null;werten und leeren Spalten unterscheiden. 
     </para>
    </note>
   </section>

   <section id="ifx.resources">
    &reftitle.resources;
    <para>
    </para>
   </section>

   <section id="ifx.constants">
    &reftitle.constants;
    &no.constants;
   </section>



  </partintro>

&reference.ifx.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

