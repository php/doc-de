<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./de/functions/misc.xml, last change in rev 1.2 -->
<!-- last change to 'eval' in en/ tree in rev 1.58 -->
  <refentry id="function.eval">
   <refnamediv>
    <refname>eval</refname>
    <refpurpose>
     Wertet einen String aus, als wäre er PHP-Code
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
     <methodsynopsis>
      <type>mixed</type><methodname>eval</methodname>
      <methodparam><type>string</type><parameter>code_str</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>eval</function> versucht, den in
     <parameter>code_str</parameter> enthaltenen String als PHP-Code
     auszuführen. Abgesehen von anderen Zwecken kann dies nützlich
     sein, um Code auszuführen, der aus einer Datenbank ausgelesen
     wird.
    </simpara>
    <simpara>
     Beim Gebrauch von <function>eval</function> gilt es einige
     Faktoren zu beachten. Die Zeichenkette
     <parameter>code_str</parameter> muss gültigen PHP-Code enthalten,
     einschließlich syntaktisch richtiger Begrenzungszeichen (also
     incl. ";"-Abschluss-Zeichen für einzelne Anweisungen, sonst
     bricht der PHP-Parser in der folgenden Zeile mit einem Fehler ab.
     </simpara>
    <simpara>
     Beachten sie, dass die innerhalb von <function>eval</function>
     vorgenommenen Variablen-Zuweisungen nach Abarbeitung auch im
     Hauptskript ihre Gültigkeit behalten.
    </simpara>
    <simpara>
     Eine <literal>return</literal>-Angabe beendet sofort die
     Auswertung des Strings. Mit PHP4 können sie ein
     <literal>return</literal> verwenden, um das Ergebnis der Funktion
     <function>eval</function> zu erhalten. In PHP3 ist
     <function>eval</function> nämlich vom Typ <literal>void</literal>
     und liefert nichts zurück.
    </simpara>
    <para>
     <example>
      <title>
       <function>eval</function>-Beispiel (einfache Texteinfügung):
      </title>
      <programlisting role="php">
&lt;?php
$string = 'Bierglas';
$name = 'Binding-Lager';
$str = 'Das ist mein $string, voll mit $name.&lt;br&gt;';
echo $str;
eval ("\$str = \"$str\";");
echo $str;
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     Das obige Beispiel gibt aus:
     <programlisting>
Das ist mein $string, voll mit $name.
Das ist mein Bierglas, voll mit Binding-Lager.
     </programlisting>
    </para>
    <para>
     Beachten sie bitte das Setzen des Begrenzungs-Zeichens ";" in
     <parameter>code_str</parameter> sowie den Gebrauch des
     "\"-Zeichens.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
