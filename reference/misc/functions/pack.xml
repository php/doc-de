<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.10 Maintainer: nobody Status: ready -->
<refentry xml:id="function.pack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pack</refname>
  <refpurpose>Packt Daten in eine Binär-Zeichenkette</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>pack</methodname>
   <methodparam><type>string</type><parameter>Format</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>Argumente</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Packt die angegebenen Argumente unter Beachtung von
   <parameter>Format</parameter> in eine Binär-Zeichenkette.
  </para>
  <para>
   Die Idee für diese Funktion entstammt Perl. Alle Formatierungs-Anweisungen
   funktionieren genau wie dort, allerdings fehlen in PHP einige Format-Codes
   von Perl (z.B. "u").
  </para>
  <para>
   Beachten sie, dass der Unterschied zwischen vorzeichenlosen und
   vorzeichenbehafteten Werten nur Einfluss auf die Funktion
   <function>unpack</function> hat, wogegen die Funktion
   <function>pack</function> bei vorzeichenlosen und vorzeichenbehafteten
   Format-Codes dasselbe Ergebnis liefert.
  </para>
  <para>
   Beachten sie auch, dass PHP <type>Ganzzahl</type>werte intern als
   vorzeichenbehaftete Werte speichert, deren Größe vom Maschinentyp abhängig
   ist. Wenn Sie PHP einen vorzeichenlosen Ganzzahlwert geben, der für diese
   Art der Speicherung zu groß ist, wird er in eine
   <type>Gleitkommazahl</type> umgewandelt, was oft zu unerwünschten
   Ergebnissen führt.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>Format</parameter></term>
     <listitem>
      <para>
       Die Zeichenkette <parameter>Format</parameter> besteht aus
       Format-Codes, gefolgt von einem optionalen Wiederholungs-Argument.
       Dieses Argument kann ein ganzzahliger Wert sein oder ein
       <literal>*</literal> für Wiederholung bis ans Ende der Daten. Bei den
       Format-Codes a, A, h und H gibt das Wiederholungs-Argument an, wie
       viele gleiche Zeichen folgen. Im Zusammenhang mit "@" gibt das
       Wiederholungs-Argument die absolute Position an, ab der das nächste
       Zeichen steht. Bei allen anderen steht der Wiederholungs-Zähler für die
       Anzahl der benutzten Daten-Argumente, die in die sich ergebende
       Binär-Zeichenkette gepackt werden sollen.
      </para>
      <para>
       Zurzeit sind folgende Formate implementiert:
       <table>
        <title><function>pack</function> Formatzeichen</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Code</entry>
           <entry>Beschreibung</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>a</entry>
           <entry>mit NUL gefüllte Zeichenkette</entry>
          </row>
          <row>
           <entry>A</entry>
           <entry>mit Leerzeichen gefüllte Zeichenkette</entry>
          </row>
          <row>
           <entry>h</entry>
           <entry>Hex-Zeichenkette, unterer Halbwert zuerst</entry>
          </row>
          <row>
           <entry>H</entry>
           <entry>Hex-Zeichenkette, oberer Halbwert zuerst</entry>
          </row>
          <row>
           <entry>c</entry>
           <entry>vorzeichenbehaftetes Zeichen</entry>
          </row>
          <row>
           <entry>C</entry>
           <entry>vorzeichenloses Zeichen</entry>
          </row>
          <row>
           <entry>s</entry>
           <entry>
            vorzeichenbehafteter Short-Typ (immer 16 Bit, Byte-Folge
            maschinenabhängig)
           </entry>
          </row>
          <row>
           <entry>S</entry>
           <entry>
            vorzeichenloser Short-Typ (immer 16 Bit, Byte-Folge
            maschinenabhängig)
           </entry>
          </row>
          <row>
           <entry>n</entry>
           <entry>
            vorzeichenloser Short-Typ (immer 16 Bit, Byte-Folge Big Endian)
           </entry>
          </row>
          <row>
           <entry>v</entry>
           <entry>
            vorzeichenloser Short-Typ (immer 16 Bit, Byte-Folge Little Endian)
           </entry>
          </row>
          <row>
           <entry>i</entry>
           <entry>
            vorzeichenbehaftete Ganzzahl (Größe und Byte-Folge
            maschinenabhängig)
           </entry>
          </row>
          <row>
           <entry>I</entry>
           <entry>
            vorzeichenlose Ganzzahl (Größe und Byte-Folge maschinenabhängig)
           </entry>
          </row>
          <row>
           <entry>l</entry>
           <entry>
            vorzeichenbehafteter Long-Typ (immer 32 Bit, Byte-Folge
            maschinenabhängig)
           </entry>
          </row>
          <row>
           <entry>L</entry>
           <entry>
            vorzeichenloser Long-Typ (immer 32 Bit, Byte-Folge
            maschinenabhängig)
           </entry>
          </row>
          <row>
           <entry>N</entry>
           <entry>
            vorzeichenloser Long-Typ (immer 32 Bit, Byte-Folge Big Endian)
           </entry>
          </row>
          <row>
           <entry>V</entry>
           <entry>
            vorzeichenloser Long-Typ (immer 32 Bit, Byte-Folge Little Endian)
           </entry>
          </row>
          <row>
           <entry>f</entry>
           <entry>
            Gleitkommazahl (maschinenabhängige Größe und Wiedergabe)
           </entry>
          </row>
          <row>
           <entry>d</entry>
           <entry>Double-Typ (maschinenabhängige Größe und Wiedergabe)</entry>
          </row>
          <row>
           <entry>x</entry>
           <entry>NUL Byte</entry>
          </row>
          <row>
           <entry>X</entry>
           <entry>geht in der Zeichenkette ein Byte rückwärts</entry>
          </row>
          <row>
           <entry>@</entry>
           <entry>NUL-Auffüllung bis zur absoluten Position</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>Argumente</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt die Daten als Binär-Zeichenkette zurück.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pack</function> Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$binaerdaten = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>
]]>
    </programlisting>
    <para>
     Die sich daraus ergebende Binär-Zeichenkette ist sechs Bytes lang und
     enthält die Byte-Folge 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unpack</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
