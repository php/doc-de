<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: ready -->
  <refentry xml:id="function.pack" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>Packt Daten in einen Binär-String</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung:</title>
     <methodsynopsis>
      <type>string</type><methodname>pack</methodname>
      <methodparam><type>string</type><parameter>format</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
     </methodsynopsis>
    <para>
     Diese Funktion packt ein oder mehrere Argumente - unter Beachtung
     der Argument-Formate - in einen Binär-String. In dem zurück
     gegebenen Binär-String stehen anschließend die Daten.
    </para>
    <para>
     Die Idee entstammt Perl. Alle Formatierungs-Anweisungen
     funktionieren genau wie dort. In PHP fehlen aber einige
     Format-Codes von Perl (z.B. "u"). Der Format-String besteht aus
     Format-Codes, gefolgt von einem optionalen
     Wiederholungs-Argument.  Dieses Argument kann ein Integer-Wert
     oder ein "*" (für Wiederholung bis ans Ende der Daten) sein. Bei
     "a", "A", "h" und dem "H" Format-Code gibt das
     Wiederholungs-Argument an, wie viele gleiche Zeichen folgen. Im
     Zusammenhang mit "@" gibt das Wiederholungs-Argument die absolute
     Position an, ab der das nächste Zeichen steht. Bei allen anderen
     steht der Wiederholungs-Zähler für die Anzahl der benutzten
     Daten-Argumente, die in den Binär-String gepackt werden sollen.
     Z. Zt. sind folgende Codes implementiert:
     <itemizedlist>
      <listitem>
       <simpara>
        a mit NUL gefüllte Zeichenkette (String)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        A mit Leerzeichen (SPACE) gefüllte Zeichenkette (String)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        h Hex Zeichenkette (String), unterer Halbwert zuerst
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        H Hex Zeichenkette (String), höherer Halbwert zuerst
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        c signed char
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        C unsigned char
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        s Short-Typ mit Vorzeichen (immer 16 Bit, Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        S Short-Typ ohne Vorzeichen (immer 16 Bit, Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        n Short-Typ ohne Vorzeichen (immer 16 Bit, big endian byte
        order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        v Short-Typ ohne Vorzeichen (immer 16 Bit, little endian byte
        order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        i Integer mit Vorzeichen (Größe und Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        I Integer-Typ ohne Vorzeichen (Größe und Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        l Long-Typ mit Vorzeichen (immer 32 Bit, Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        L Long-Typ ohne Vorzeichen (immer 32 Bit, Byte-Folge
        maschinenabhängig)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        N Long-Typ ohne Vorzeichen (immer 32 Bit, big endian Byte-
        Folge)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        V Long-Typ ohne Vorzeichen (immer 32 Bit, little endian Byte-
        Folge)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        f Fließkomma-Typ (maschinenabhängige Größe und Wiedergabe)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        d Double-Typ (maschinenabhängige Größe und Wiedergabe)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        x NUL Byte
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        X Geht im String ein Byte rückwärts
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        @ NUL-Auffüllung bis zur absoluten Position
       </simpara>
      </listitem>
     </itemizedlist>
     <example>
      <title>Mit Pack formatierter String:</title>
      <programlisting role="php">
$binarydata = pack ("nvc*", 0x1234, 0x5678, 65, 66);
      </programlisting>
      <para>
       Der sich daraus ergebende Binär-String ist 6 Bytes lang und
       enthält: 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
      </para>
     </example>
    </para>
    <para>
     Bedenken sie, dass der Unterschied zwischen vorzeichen-losen und
     vorzeichen-behafteten Werten nur Einfluss auf die Funktion
     <function>unpack</function> hat, wogegen dies bei der Funktion
     <function>pack</function> egal ist.
    </para>
    <para>
     Beachten sie auch, dass PHP intern Ganzzahl-Werte als
     vorzeichen-behaftete Werte speichert, deren Umfang vom
     Maschinen-Typ abhängig ist. Geben sie PHP einen vorzeichen-losen
     Ganzzahl-Wert, der zu groß ist für diese Art der Speicherung,
     wird er ins Double-Format umgesetzt, was oft zu unerwünschten
     Resultaten führt.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
