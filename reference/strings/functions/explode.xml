<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.20 Maintainer: sammywg Status: ready -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.explode">
 <refnamediv>
  <refname>explode</refname>
  <refpurpose>Teilt einen String anhand einer Zeichenkette</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>explode</methodname>
   <methodparam><type>string</type><parameter>delimiter</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
  </methodsynopsis>
  <para>
   Gibt ein Array aus Strings zurück, die jeweils Teil von
   <parameter>string</parameter> sind. Die Abtrennung erfolgt dabei an der
   mit <parameter>delimiter</parameter> angegebenen Zeichenkette.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>delimiter</parameter></term>
     <listitem>
      <para>
       Die Begrenzungszeichenkette.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       Die Eingabezeichenkette.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       Ist der Parameter <parameter>limit</parameter> angegeben und positiv, 
       enthält das zurückgegebene Array maximal <parameter>limit</parameter> 
       Elemente, wobei das letzte Element den Rest von 
       <parameter>string</parameter> beinhaltet.
      </para>
      <para>
       Ist der Parameter <parameter>limit</parameter> negativ, werden alle
       Teilstrings bis auf die letzten -<parameter>limit</parameter> Teile
       zurückgegeben.
      </para>
      <para>
       Wenn der Parameter <parameter>limit</parameter> gleich null ist, 
       wird er wie 1 behandelt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   Obgleich <function>implode</function> aus historischen Gründen die
   Parameter in anderer Reihenfolge akzeptiert, verarbeitet
   <function>explode</function> ausschließlich die hier angegebene Reihenfolge.
   Stellen Sie daher sicher, dass Sie den Parameter
   <parameter>delimiter</parameter> vor dem Parameter
   <parameter>string</parameter> notieren.
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Ist <parameter>delimiter</parameter> ein leerer String (""), so gibt
   <function>explode</function> &false; zurück. Enthält
   <parameter>delimiter</parameter> einen Wert, der nicht in
   <parameter>string</parameter> vorkommt, gibt <function>explode</function>
   ein Array zurück, das den <parameter>string</parameter> als einziges
   Element enthält.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Die Unterstützung für negative <parameter>limit</parameter>-Werte
        wurde hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>4.0.1</entry>
       <entry>
        Der Parameter <parameter>limit</parameter> wurde hinzugefügt.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>explode</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
// Beispiel 1
$pizza  = "Teil1 Teil2 Teil3 Teil4 Teil5 Teil6";
$teile = explode(" ", $pizza);
echo $teile[0]; // Teil1
echo $teile[1]; // Teil2

// Beispiel 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><parameter>limit</parameter>-Parameterbeispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'eins|zwei|drei|vier';

// positiver Wert in "limit"
print_r(explode('|', $str, 2));

// negative Wert in "limit" (ab PHP 5.1)
print_r(explode('|', $str, -1));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => eins
    [1] => zwei|drei|vier
)
Array
(
    [0] => eins
    [1] => zwei
    [2] => drei
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_split</function></member>
    <member><function>str_split</function></member>
    <member><function>str_word_count</function></member>
    <member><function>strtok</function></member>
    <member><function>implode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
