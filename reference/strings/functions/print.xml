<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325214 Maintainer: sammywg Status: ready -->

<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.print">
 <refnamediv>
  <refname>print</refname>
  <refpurpose>Ausgabe eines Strings</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>print</methodname>
   <methodparam><type>string</type><parameter>arg</parameter></methodparam>
  </methodsynopsis>
  <para>
   Gibt <parameter>arg</parameter> aus.
  </para>
  <para>
   <literal>print</literal> ist keine wirkliche Funktion (sondern ein
   Sprachkonstrukt), weshalb Sie beim Aufruf nicht unbedingt
   Klammern um die Argumentliste setzen müssen.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arg</parameter></term>
     <listitem>
      <para>
       Die Eingabedaten.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt immer <literal>1</literal> zurück.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><literal>print</literal>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
print("Hallo Welt");

print "print() funktioniert auch ohne Klammern.";

print "Dies umfasst
mehrere Zeilen. Die Zeilenumbrüche werden
ebenfalls ausgegeben";

print "Dies umfasst\nmehrere Zeilen. Die Zeilenumbrüche werden\nebenfalls ausgegeben.";

print "Escape-Zeichen werden \"so\" geschrieben.";

// Sie können in einer print-Anweisung auch Variablen benutzen
$foo = "foobar";
$bar = "barbaz";

print "foo ist $foo"; // foo ist foobar

// Sie können auch Arrays verwenden
$bar = array("value" => "foo");

print "Das ist {$bar['value']} !"; // Das ist foo !

// Einfache Anführungsstriche geben den Variablennamen aus, nicht den Inhalt
print 'foo ist $foo'; // foo ist $foo

// Benutzen Sie keine anderen Zeichen, können Sie auch nur
// Variablen ausgeben
print $foo;          // foobar

print <<<END
Dies verwendet die "here document" Syntax zur Ausgabe von
mehreren Zeilen mit $Variablen-Interpolation. Beachten Sie,
dass das "here document" Endezeichen in einer Zeile nur mit
einem Semikolon ohne Whitespaces stehen muss!
END;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>echo</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
    <member><link linkend="language.types.string.syntax.heredoc">Heredoc-Syntax</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
