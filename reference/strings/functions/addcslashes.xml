<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.9 Maintainer: sammywg Status: ready -->
<!-- splitted from ./de/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.addcslashes">
   <refnamediv>
    <refname>addcslashes</refname>
    <refpurpose>Stellt bestimmten Zeichen eines Strings ein "\" voran (wie in C)</refpurpose>
   </refnamediv>
   <refsect1 role="description">
    &reftitle.description;
     <methodsynopsis>
      <type>string</type><methodname>addcslashes</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam><type>string</type><parameter>charlist</parameter></methodparam>
     </methodsynopsis>
    <para>
     Gibt eine Zeichenkette zurück, in der allen Zeichen, die in 
     <parameter>charlist</parameter> aufgeführt sind, ein "\" vorangestellt ist.
     Falls <parameter>charlist</parameter> die Zeichen <literal>\n</literal>, 
     <literal>\r</literal> etc. enthält, werden diese im C-Stil
     konvertiert, während andere nicht-alphanumerische Zeichen mit einem 
     ASCII-Wert kleiner als 32 oder höher als 126 in ihre oktale
     Repräsentation umgewandelt werden.
    </para>
    <para>
     Seien Sie besonders vorsichtig, wenn Sie Zeichen wie 0, a, b, f, n, r
     t oder v escapen möchten. Sie werden zu \0, \a, \b, \f, \n, \r, \t 
     oder \v gewandelt.
     In PHP sind \0 (NULL), \r (Wagenrücklauf), \n (Neue Zeile) und \t
     (Tabulator) vordefinierte Escape-Sequenzen, während in C alle der 
     genannten Zeichen vordefinierte Escape-Sequenzen sind.
    </para>
    <para>
     <parameter>charlist</parameter>-Angaben wie "\0..\37" (oktal) bewirken 
     ein Escapen aller Zeichen mit einem ASCII-Code zwischen 0 und 31 (dezimal).
     <example>
      <title><function>addcslashes</function> Beispiel</title>
      <programlisting role="php">
<![CDATA[
<?php
$escaped = addcslashes($nicht_escaped, "\0..\37!@\177..\377");
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Wenn Sie eine Zeichensequenz im charlist-Parameter notieren, 
     informieren Sie sich darüber, welche Zeichen sich zwischen dem
     ersten und dem letzten Zeichen befinden!
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
echo addcslashes('foo[ ]', 'A..z');
// Ausgabe:  \f\o\o\[ \]
// Alle groß- und kleingeschriebenen Buchstaben werden escaped
// ... aber ebenfalls die Zeichen [\]^_` sowie die Tabulatoren, Zeilenwechsel
// Wagenvorlauf-Zeichen etc.
?>
]]>
      </programlisting>
     </informalexample>
     Beachten Sie zudem, dass sofern das erste Zeichen einer Sequenz einen höheren
     ASCII-Wert hat als das zweite, keine Sequenz erstellt wird. Nur das erste und 
     das letzte Zeichen sowie Punkte werden dann escaped. Verwenden Sie die Funktion 
     <function>ord</function>, um den ASCII-Wert eines Zeichens zu ermitteln.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
echo addcslashes("zoo['.']", 'z..A');
// Ausgabe:  \zoo['\.']
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Siehe auch 
     <function>stripcslashes</function>, 
     <function>stripslashes</function>, 
     <function>addslashes</function>,
     <function>htmlspecialchars</function> und 
     <function>quotemeta</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
