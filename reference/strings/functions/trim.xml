<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.10 Maintainer: sammywg Status: working -->
<!-- splitted from ./de/functions/strings.xml, last change in rev 1.2 -->
<refentry id="function.trim">
 <refnamediv>
  <refname>trim</refname> 
  <refpurpose>
   Entfernt Whitespaces (oder andere Zeichen) am Anfang und Ende eines Strings
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
    <type>string</type><methodname>trim</methodname>
    <methodparam><type>string</type><parameter>str</parameter></methodparam>
    <methodparam choice="opt"><type>string</type><parameter>charlist</parameter></methodparam>
  </methodsynopsis>
  <para>
   Die Funktion entfernt Whitespaces an Anfang und Ende von 
   <parameter>str</parameter> und gibt den String dann zurück.
   Ohne Verwendung des zweiten Parameters entfernt <function>trim</function>
   folgende Zeichen:
   <!-- sorted by importance. Printed 3 times: trim, ltrim, rtrim -->
   <itemizedlist>
    <listitem>
     <simpara>
      " " (<acronym>ASCII</acronym> <literal>32</literal> 
      (<literal>0x20</literal>)), ein normales Leerzeichen.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "\t" (<acronym>ASCII</acronym> <literal>9</literal> 
      (<literal>0x09</literal>)), ein Tabulatorzeichen.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "\n" (<acronym>ASCII</acronym> <literal>10</literal> 
      (<literal>0x0A</literal>)), einen Zeilenvorschub (Line Feed).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "\r" (<acronym>ASCII</acronym> <literal>13</literal> 
      (<literal>0x0D</literal>)), ein Wagenrücklaufzeichen (Carriage Return).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "\0" (<acronym>ASCII</acronym> <literal>0</literal> 
      (<literal>0x00</literal>)), das <literal>NUL</literal>-Byte.
     </simpara>
    </listitem>
    <listitem>
     <simpara> <!-- not \v, since not supported by PHP -->
      "\x0B" (<acronym>ASCII</acronym> <literal>11</literal> 
      (<literal>0x0B</literal>)), ein vertikaler Tabulator.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       <type>string</type> erwartet die zu trimmende Zeichenkette.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>charlist</parameter></term>
     <listitem>
      <para>
       Optional kann eine Liste weiterer Zeichen angefügt werden, die an
       Anfang und Ende der Zeichenkette entfernt werden sollen. Um diese Zeichen
       anzugeben, wird der <parameter>charlist</parameter> Parameter verwendet.
       Er enthält eine Liste aller zu entfernenden Zeichen. Mit
       <literal>..</literal> können darüber hinaus auch ganze Bereiche von
       Zeichen angegeben werden.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Der gekürzte String.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.1.0</entry>
       <entry>
        Einführung des optionalen <parameter>charlist</parameter> Parameters.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Beispiel zur Verwendung von <function>trim</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$text = "\t\tDieser Text besteht aus mehreren Wörtern :) ...  ";

echo trim($text);           // "Dieser Text besteht aus mehreren Wörtern :) ..."
echo trim($text, " \t.");   // "Dieser Text besteht aus mehreren Wörtern :)"

// Trimmen der ASCII Steuerzeichen an Anfang und Ende von $binary
// (inklusive der Zeichen von ASCII 0 bis 31)
$clean = trim($binary, "\x00..\x1F");

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Trimmen von Array Werten mittels <function>trim</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function trim_value(&$value) 
{ 
	$value = trim($value); 
}

$fruechte = array('Apfel','Banane ', ' Preiselbeere ');
var_dump($fruechte);

array_walk($fruechte, 'trim_value');
var_dump($fruechte);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(5) "Apfel"
  [1]=>
  string(7) "Banane "
  [2]=>
  string(11) " Preiselbeere "
}
array(3) {
  [0]=>
  string(5) "Apfel"
  [1]=>
  string(6) "Banane"
  [2]=>
  string(9) "Preiselbeere"
}

]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ltrim</function></member>
    <member><function>rtrim</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
