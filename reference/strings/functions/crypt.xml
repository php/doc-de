<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 313299 Maintainer: sammywg Status: ready -->

<refentry xmlns:xlink="http://www.w3.org/1999/xlink"  xmlns="http://docbook.org/ns/docbook" xml:id="function.crypt">
 <refnamediv>
  <refname>crypt</refname>
  <refpurpose>Einweg-String-Hashing</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>crypt</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>salt</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>crypt</function> gibt einen Hash-String zurück, der unter
   Verwendung des <abbrev>DES</abbrev>-basierenden Unix-Standard-Hashingalgorithmus
   oder einem anderen auf ihrem System verfügbaren Algorithmus erstellt wurde.
  </para>
  <para>
   Einige Betriebssystem unterstützen mehr als eine Methode zum Hashen. So wird
   manchmal der DES- durch einen MD5-Algorithmus ersetzt. Der verwendete Algorithmus
   wird durch das Salt-Argument bestimmt. Vor PHP 5.3 wurden die verfügbaren Algorithmen
   zum Installationszeitpunkt anhand der systemeigenen crypt() Funktion untersucht.
   Wird kein Salt angegeben, erzeugt PHP entweder einen 12-Zeichen MD5 Salt oder,
   falls MD5 nicht verfügbar ist, einen einen 2-Zeichen DES-Salt. PHP setzt eine
   Konstante <constant>CRYPT_SALT_LENGTH</constant>, welche die Länge des längsten von
   den Algorithmen unterstützen Salts enthält.
  </para>
  <para>
   Der Standard-DES-Algorithmus gibt den Salt als erste 2 Zeichen zurück.
   Weiterhin werden nur die ersten acht Zeichen von <parameter>str</parameter>
   genutzt. Wenn also eine längere Zeichenkette verwendet wird, die mit den
   selben 8 Buchstaben beginnt, so erhalten Sie denselben Rückgabewert
   (sofern Sie ebenfalls den gleichen Salt genutzt haben).
  </para>
  <simpara>
   Auf Systemen, wo <function>crypt</function> mehrere Hashingalgorithmen
   unterstützt, werden die folgenden Konstanten auf 0 oder 1
   gesetzt, je nachdem, ob der entsprechende Typ verfügbar ist:
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <constant>CRYPT_STD_DES</constant> - Standard DES-Hash mit einem 2-Zeichen-Salt
     aus dem Alphabet "./0-9A-Za-z". Bei Nutzung eines ungültigen Zeichens schlägt
     <function>crypt</function> fehl.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_EXT_DES</constant> - Erweiterte DES-basiertes Hashing
     mit einem 9-Zeichen-Salt, welcher aus einem Unterstrich, 4 Zeichen Iterationsanzahl
     und 4 Zeichen Salt besteht. Iterationsanzahl und Salt werden dargestellt durch Zeichen
     aus dem Alphabet "./0-9A-Za-z" dargestellt. Bei Nutzung eines ungültigen Zeichens
     schlägt <function>crypt</function> fehl.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_MD5</constant> - MD5-Hashing mit 12-Zeichen-Salt,
     beginnend mit "$1$"
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_BLOWFISH</constant> - Blowfish-Hash mit 22-Zeichen-Salt
     folgenden Aufbaus: "$2a$", gefolgt von einem zweistelligen Kostenparameter, einem
     weiteren "$", und 22 Zahlen des Alphabets "./0-9A-Za-z". Bei Nutzung eines
     ungültigen Zeichens gibt crypt() einen leeren String zurück. Der zweistellige
     Kostenparameter ist der binäre Logarithmus der Iterationsanzahl und muss im
     Bereich von 04-31 liegen. Bei Nutzung von Werten außerhalb dieses Bereichs schlägt
     crypt() fehl.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA256</constant> - SHA-256 Hash mit einem 16-Zeichen Salt, beginnend mit
     "$5$". Wenn anschließend "rounds=&lt;N&gt;$" folgt, gibt der Zahlenwert von N die
     Iterationsanzahl an, ansonsten wird 5000 als Anzahl angenommen. Die Anzahl muss zwischen
     1000 und 999,999,999 liegen. Falls ein Wert außerhalb dieses Bereichs angegeben wird, wird
     die jeweils näher liegende Grenze als Anzahl genutzt.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA512</constant> - SHA-512 Hash mit einem 16-Zeichen Salt, beginnend mit
      "$6$". Wenn anschließend "rounds=&lt;N&gt;$" folgt, gibt der Zahlenwert von N die
     Iterationsanzahl an, ansonsten wird 5000 als Anzahl angenommen. Die Anzahl muss zwischen
     1000 und 999,999,999 liegen. Falls ein Wert außerhalb dieses Bereichs angegeben wird, wird
     die jeweils näher liegende Grenze als Anzahl genutzt.
    </simpara>
   </listitem>
  </itemizedlist>
  <note>
   <para>
    Seit PHP 5.3.0 enthält PHP eine eigene Implementation und verwendet diese,
    wenn das System einen oder mehrere der Algorithmen nicht unterstützt.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       Die zu hashende Zeichenkette.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       Ein optionaler Salt-String, der die Schlüsselbasis bildet. Falls dieser
       nicht angegeben wird hängt das Verhalten von der Implementierung des
       Algorithmus ab und kann daher zu unerwarteten Ergebnissen führen.
       (Wenn beispielsweise ein Server MD5 unterstützt und der andere nur DES,
       dann würden beide unterschiedliche Rückgabewerte produzieren, obwohl der
       String eigentlich gleich ist.)
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt die gehashte Zeichenkette zurück oder im Fehlerfall eine Zeichenkette,
   die kürzer ist als 13 Zeichen und garantiert ist, nicht dem Salt zu entsprechen.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.2</entry>
       <entry>
        SHA-256 und SHA-512 wurden hinuzgefügt auf Basis von
        Ulrich Drepper's <link xlink:href="&url.crypt.sha;">Implementierung</link>.
       </entry>
      </row>
      <row>
       <entry>5.3.2</entry>
       <entry>
        Blowfishs fehlerhaftes Verhalten wurde behoben, durch welches ein ungültiger
        Kostenparameter dazu führte, dass auf DES zurückgefallen wurde, anstatt einen
        Fehlerstring ("*0" or "*1") zurückzugeben.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        PHP enthält jetzt eine eigene Implementation der MD5-Crypt, Standard DES,
        Extended DES und des Blowfish-Algorithmus und verwendet diese, wenn das
        System eine oder mehrere der Algorithmen nicht unterstützt.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>crypt</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
$passwort = crypt('mein_Pwd'); // Der Salt wird automatisch generiert

/* Sie sollten das vollständige Ergebnis von crypt() als Salt zum
   Passwort-Vergleich übergeben, um Problemen mit unterschiedlichen
   Hash-Algorithmen vorzubeugen. (Wie bereits ausgeführt, verwendet
   ein Standard-DES-Passwort-Hash einen 2-Zeichen-Salt, ein
   MD5-basierter hingegen nutzt 12 Zeichen. */
if (crypt($benutzer_eingabe, $passwort) == $passwort) {
   echo "Passwort stimmt überein!";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Verwendung von <function>crypt</function> für htpasswd</title>
    <programlisting role="php">
<![CDATA[
<?php
// Passwort setzen
$passwort = 'mein_Pwd';

// Hash mit automatisch erstelltem Salt generieren
$hash = crypt($passwort);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Verwendung von <function>crypt</function> mit verschiedenen Hasharten</title>
    <programlisting role="php">
<![CDATA[
<?php
if (CRYPT_STD_DES == 1) {
    echo 'Standard DES: ' . crypt('rasmuslerdorf', 'rl') . "\n";
}

if (CRYPT_EXT_DES == 1) {
    echo 'Extended DES: ' . crypt('rasmuslerdorf', '_J9..rasm') . "\n";
}

if (CRYPT_MD5 == 1) {
    echo 'MD5:          ' . crypt('rasmuslerdorf', '$1$rasmusle$') . "\n";
}

if (CRYPT_BLOWFISH == 1) {
    echo 'Blowfish:     ' . crypt('rasmuslerdorf', '$2a$07$usesomesillystringforsalt$') . "\n";
}

if (CRYPT_SHA256 == 1) {
    echo 'SHA-256:      ' . crypt('rasmuslerdorf', '$5$rounds=5000$usesomesillystringforsalt$') . "\n";
}

if (CRYPT_SHA512 == 1) {
    echo 'SHA-512:      ' . crypt('rasmuslerdorf', '$6$rounds=5000$usesomesillystringforsalt$') . "\n";
}
?>
]]>
    </programlisting>
     &example.outputs.similar;
    <screen>
<![CDATA[
Standard DES: rl.3StKT.4T8M
Extended DES: _J9..rasmBYk8r9AiWNc
MD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0
Blowfish:     $2a$07$usesomesillystringfore2uDLvp1Ii2e./U9C8sBjqp8I90dH6hi
SHA-256:      $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH/Tp.6
SHA-512:      $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    Es existiert keine decrypt Funktion, da <function>crypt</function>
    ein Einweg-Algorithmus ist.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>md5</function></member>
    <member>Die <link linkend="ref.mcrypt">Mcrypt</link>-Erweiterung</member>
    <member>Lesen Sie die Man-Pages ihres Unix-Systems, wenn Sie weitere
       Informationen zu crypt benötigen.</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
