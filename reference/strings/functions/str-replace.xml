<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.20 Maintainer: sammywg Status: ready -->
  <refentry xml:id="function.str-replace" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>str_replace</refname>
    <refpurpose>
     Ersetzt alle Vorkommen des Suchstrings durch einen anderen String
    </refpurpose>
   </refnamediv>
   <refsect1 role="description">
    &reftitle.description;
     <methodsynopsis>
      <type>mixed</type><methodname>str_replace</methodname>
      <methodparam><type>mixed</type><parameter>search</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>replace</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
     </methodsynopsis>
    <para>
     Diese Funktion gibt einen String oder ein Array zurück, in dem alle
     Vorkommen von <parameter>search</parameter> innerhalb von
     <parameter>subject</parameter> durch den angegebenen
     <parameter>replace</parameter>-Wert ersetzt wurden. Wenn Sie keine
     ausgefallenen Ersetzungsregeln (wie Regular Expressions) benötigen, sollten
     Sie immer diese Funktion anstelle von <function>ereg_replace</function>
     oder <function>preg_replace</function> verwenden.
    </para>
    <para>
     Seit PHP 4.0.5 kann jeder Parameter von <function>str_replace</function>
     vom Type <type>array</type> sein.
    </para>
    <warning>
     <simpara>
      Die PHP-Versionen vor PHP 4.3.3 enthalten einen Bug, der bei der
      Verwendung von Arrays für <parameter>search</parameter> und
      <parameter>replace</parameter> dazu führt, dass leere
      <parameter>search</parameter>-Indexe übersprungen werden, ohne dabei den
      internen Zeiger innerhalb des <parameter>replace</parameter>-Arrays
      ebenfalls weiter zu bewegen. Dies wurde in PHP 4.3.3 korrigiert. Alle
      Skripte, die sich auf diesen Bug verlassen, sollten leere Suchwerte
      entfernen, bevor diese Funktion aufgerufen wird, um die ursprüngliche
      Verhalten zu imitieren.
     </simpara>
    </warning>
    <para>
     Ist <parameter>subject</parameter> ein Array, erfolgt das Suchen
     und Ersetzen für jeder Wert von <parameter>subject</parameter>,
     und der Rückgabewert ist ebenfalls ein Array.
    </para>
    <para>
     Sind <parameter>search</parameter> und <parameter>replace</parameter>
     Arrays, nimmt <function>str_replace</function> je einen Wert beider Arrays
     und verwendet diese zum Suchen und Ersetzen in
     <parameter>subject</parameter>. Hat <parameter>replace</parameter>
     weniger Werte als <parameter>search</parameter>, so wird ein leerer
     String zum Ersetzen für den Rest der Werte verwendet. Ist
     <parameter>search</parameter> ein Array und <parameter>replace</parameter>
     ein String, dann wird dieser String für jeden Wert von
     <parameter>search</parameter> angewandt. Das Gegenteil ist nicht sinnvoll.
    </para>
    <para>
     Sind <parameter>search</parameter> und/oder <parameter>replace</parameter>
     Arrays, werden ihre Elemente vom ersten zum letzten hin verarbeitet.
    </para>
    <para>
     <example>
      <title><function>str_replace</function>-Beispiele</title>
      <programlisting role="php">
<![CDATA[
<?php
// Liefert: <body text='schwarz'>
$bodytag = str_replace("%body%", "schwarz", "<body text='%body%'>");

// Liefert: Hll PHP-Wlt
$vokale = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
$onlyconsonants = str_replace($vokale, "", "Hallo PHP-Welt");

// Liefert: Sie sollten taeglich Pizza, Bier und Eiscreme essen.
$phrase = "Sie sollten taeglich Fruechte, Gemuese und Ballaststoffe essen.";
$gesund = array("Fruechte", "Gemuese", "Ballaststoffe");
$lecker = array("Pizza", "Bier", "Eiscreme");

$newphrase = str_replace($gesund, $lecker, $phrase);

// Die Verwendung des count-Parameters ist ab PHP 5.0.0 möglich
$str = str_replace("ll", "", "good golly miss molly!", $count);
echo $count; // 2

// Reihenfolge von Ersetzungen
$str     = "Zeile 1\nZeile 2\rZeile 3\r\nZeile 4\n";
$order   = array("\r\n", "\n", "\r");
$replace = '<br />';
// Verarbeitet \r\n's zuerst, so dass sie nicht doppelt konvertiert werden
$newstr = str_replace($order, $replace, $str);

?>
]]>
      </programlisting>
     </example>
    </para>

    &note.bin-safe;

    <note>
     <simpara>
      Ab PHP 5.0.0 wird die Anzahl der gefundenen und ersetzten Suchbegriffe
      (<parameter>search</parameter>) mittels <parameter>count</parameter>
      zurück gegeben, der als Referenz übergeben wird. Vor PHP 5.0.0 ist dieser
      Parameter nicht verfügbar.
     </simpara>
    </note>
    <para>
     Siehe auch
     <function>str_ireplace</function>,
     <function>substr_replace</function>,
     <function>preg_replace</function> und
     <function>strtr</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
