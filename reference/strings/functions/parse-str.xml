<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343797 Maintainer: sammywg Status: ready -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.parse-str">
 <refnamediv>
  <refname>parse_str</refname>
  <refpurpose>Überträgt einen String in Variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>parse_str</methodname>
   <methodparam><type>string</type><parameter>encoded_string</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">result</parameter></methodparam>
  </methodsynopsis>
  <para>
   Verarbeitet <parameter>encoded_string</parameter>, als ob er der Query-String
   einer URL-Übergabe via GET wäre, und erstellt Variablen im aktuellen
   Geltungsbereich (oder im Array, wenn der Parameter <parameter>result</parameter>
   übergeben wurde).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>encoded_string</parameter></term>
     <listitem>
      <para>
       Die Eingabezeichenkette.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>result</parameter></term>
     <listitem>
      <para>
       Ist der zweite Parameter <parameter>arr</parameter>
       angegeben, werden die Variablen in diesem Array als dessen Elemente
       gespeichert.
      </para>

      <warning>
       <para>
        Von der Verwendung dieser Funktion ohne den zweiten Parameter wird
        unbedingt <emphasis>ABGERATEN</emphasis>, und von PHP 7.2 an
        <emphasis>MISSBILLIGT</emphasis>.
       </para>
       <para> 
        Das dynamische Zuweisen von Variablen im
        Geltungsbereich einer Funktion hat genaue dieselben Probleme wie
        <link linkend="ini.register-globals">register_globals</link>.
       </para>
       <para>
        Die Erklärung warum dies gefährlich ist, kann dem Sicherheits-Abschnitt
        zur <link linkend="security.globals">Verwendung von Register Globals</link>
        entnommen werden.
       </para>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Die Verwendung von <function>parse_str</function> ohne den zweiten Parameter
        erzeugt nun einen <constant>E_DEPRECATED</constant> Fehler.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Der Gebrauch von <function>parse_str</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$str = "erstes=wert&arr[]=foo+bar&arr[]=baz";

// Empfohlen
parse_str($str, $output);
echo $output['erstes'];  // value
echo $output['arr'][0]; // foo bar
echo $output['arr'][1]; // baz

// NICHT EMPFOHLEN
parse_str($str);
echo $erstes;  // value
echo $arr[0]; // foo bar
echo $arr[1]; // baz
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Weil PHP-Variablen keine Punkte oder Leerzeichen im Namen enthalten dürfen,
   werden dieser in Unterstriche umgewandelt. Dasselbe gilt für die entsprechenden
   Schlüsselnamen, für den Fall, dass diese Funktion mit dem Parameter
   <parameter>result</parameter> verwendet wird.
   <example>
    <title><function>parse_str</function> name mangling</title>
    <programlisting role="php">
<![CDATA[
<?php
parse_str("Mein Wert=Etwas");
echo $Mein_Wert; // Etwas

parse_str("Mein Wert=Etwas", $output);
echo $output['Mein_Wert']; // Etwas
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  <note>
   <para>
    Alle erzeugten Variablen (oder Werte, die im Array zurückgegeben werden, wenn
    der zweite Parameter übergeben wurde) wurden bereits mit <function>urldecode</function>
    vorbereitet.
   </para>
  </note>
  <note>
   <para>
    Um auf den aktuellen <literal>QUERY_STRING</literal> zuzugreifen, kann
    die Variable <varname>$_SERVER['QUERY_STRING']</varname> verwendet werden.
    Weitere Informationen finden sich auch im Abschnitt <link
    linkend="language.variables.external">Variablen aus externen Quellen</link>.
   </para>
  </note>
  <note>
   <para>
    Die <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>-Einstellung
    beeinflusst die Ausgabe dieser Funktion, da <function>parse_str</function>
    dieselben Mechanismen verwendet, die PHP zum Füllen der Variablen
    <varname>$_GET</varname>, <varname>$_POST</varname>, etc. nutzt.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>parse_url</function></member>
    <member><function>pathinfo</function></member>
    <member><function>http_build_query</function></member>
    <member><function>urldecode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
