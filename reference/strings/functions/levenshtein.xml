<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: sammywg Status: ready -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.levenshtein" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>levenshtein</refname>
  <refpurpose>Berechnet die Levenshtein-Distanz zwischen zwei Strings</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>str1</parameter></methodparam>
   <methodparam><type>string</type><parameter>str2</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>str1</parameter></methodparam>
   <methodparam><type>string</type><parameter>str2</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_ins</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_rep</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_del</parameter></methodparam>
  </methodsynopsis>
  <para>
   Die Levenshtein-Distanz bezeichnet die minimale Anzahl von Zeichen, die
   Sie ersetzen, einfügen oder löschen müssen, um <parameter>str1</parameter>
   in <parameter>str2</parameter> umzuwandeln. Die Komplexität des Algorithmus
   ist <literal>0(m*n)</literal>, wobei <literal>n</literal> und
   <literal>m</literal> die Länge von <parameter>str1</parameter> und
   <parameter>str2</parameter> darstellen (deutlich besser, wenn man mit
   <function>similar_text</function> vergleicht, was mit 0(max(n,m)**3) daher
   kommt, aber trotzdem immer noch teuer).
  </para>
  <para>
   In ihrer einfachsten Form erhält die Funktion nur die zwei Strings als
   Parameter und berechnet nur die Anzahl der Einfügungen, Ersetzungen und
   Löschungen, die benötigt werden, um <parameter>str1</parameter> in
   <parameter>str2</parameter> zu überführen.
  </para>
  <para>
   Eine zweite Variante verwendet drei zusätzliche Parameter, die die Kosten
   von Einfügungen, Ersetzungen und Löschungen festlegen. Dies ist eine
   allgemeingültigere und anpassungsfähigere Version als Variante eins, aber
   nicht so effizient.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str1</parameter></term>
     <listitem>
      <para>
       Eine der Zeichenketten, für die die Levenshtein-Distanz zu berechnen ist.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>str2</parameter></term>
     <listitem>
      <para>
       Eine der Zeichenketten, für die die Levenshtein-Distanz zu berechnen ist.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_ins</parameter></term>
     <listitem>
      <para>
       Definiert die Kosten des Einfügens.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_rep</parameter></term>
     <listitem>
      <para>
       Definiert die Kosten des Ersetzens.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_del</parameter></term>
     <listitem>
      <para>
       Definiert die Kosten des Löschens.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Die Funktion gibt die Levenshtein-Distanz zwischen den beiden
   Argument-Strings oder -1 zurück, sofern eines der Argumente länger als 255
   Zeichen ist.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>levenshtein</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// eingegebenes falsch geschriebenes Wort
$input = 'carrrot';

// Wörterarray als Vergleichsquelle
$words  = array('apple','pineapple','banana','orange',
              'radish','carrot','pea','bean','potato');

// noch keine kürzeste Distanz gefunden
$shortest = -1;

// durch die Wortliste gehen, um das ähnlichste Wort zu finden
foreach ($words as $word) {

  // berechne die Distanz zwischen Inputwort und aktuellem Wort
  $lev = levenshtein($input, $word);

  // auf einen exakten Treffer prüfen
  if ($lev == 0) {

      // das nächste Wort ist das Wort selbst (exakter Treffer)
      $closest = $word;
      $shortest = 0;

      // Schleife beenden, da wir einen exakten Treffer gefunden haben
      break;
  }

  // Wenn die Distanz kleiner ist als die nächste gefundene kleinste Distanz
  // ODER wenn ein nächstkleineres Wort noch nicht gefunden wurde
  if ($lev <= $shortest || $shortest < 0) {
      // setze den nächstliegenden Treffer und die kürzestes Distanz
      $closest  = $word;
      $shortest = $lev;
  }
}

echo "Eingegebenes Wort: $input\n";
if ($shortest == 0) {
  echo "Exakter Treffer gefunden: $closest\n";
} else {
  echo "Meinten Sie: $closest?\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Eingegebenes Word: carrrot
Meinten Sie: carrot?
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>soundex</function></member>
    <member><function>similar_text</function></member>
    <member><function>metaphone</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
