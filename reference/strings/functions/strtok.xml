<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.6 Maintainer: sammywg Status: working -->
  <refentry id="function.strtok">
   <refnamediv>
    <refname>strtok</refname>
    <refpurpose>Zerlegt einen String</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>string</type><methodname>strtok</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam><type>string</type><parameter>token</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>strtok</function> zerlegt einen String (<parameter>str</parameter>)
     in kürzere Strings (Tokens), wobei jeder Token von im Parameter 
     <parameter>token</parameter> festgelegten Zeichen begrenzt wird.
     Das bedeutet, dass, wenn Sie einen String wie "Dies ist ein Beispiel-String"
     haben, Sie ihn in seine einzelnen Worte zerlegen können, wenn Sie das
     Leerzeichen als Token verwenden.
     <example>
      <title><function>strtok</function> Beispiel</title>
      <programlisting role="php">
<![CDATA[
<?php
$string = "Dies ist\tein Beispiel-\nString";
/* Sowohl das Tabulator- als auch das Newline-Zeichen werden 
   zusätzlich zum Leerzeichen als Token zum Zerlegen verwendet */
$tok = strtok($string, " \n\t");

while ($tok !== false) {
    echo "Wort=$tok<br />";
    $tok = strtok(" \n\t");
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Beachten Sie, dass nur der erste Aufruf von strtok das String-Argument
     verwendet. Jeder Folgeaufruf von strtok benötigt nur die zu
     beachtenden Token, um die für den aktuellen String notwendigen
     herauszufinden. Um neu zu beginnen oder einen neuen String zu zerlegen,
     müssen Sie nur erneut strtok mit dem string-Parameter aufrufen,
     damit die Funktion neu initialisiert wird. Beachten Sie, dass Sie
     mehrere Tokens im Token-Parameter angeben können. Der String wird
     dann an jeder Stelle zerlegt, an der eines der angegebenen Zeichen
     gefunden wird.
    </para>
    <para>
     Das Verhalten der Funktion beim Auffinden eines leeren Teils veränderte
     sich mit PHP Version 4.1.0. Zuvor wurde ein leerer String zurückgegeben,
     wohingegen das neue, korrekte Verhalten diesen Teil des Strings verwirft.
    </para>
     <example>
      <title>Altes Verhalten von <function>strtok</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$erster_token  = strtok('/irgendetwas', '/');
$zweiter_token = strtok('/');
var_dump($erster_token, $zweiter_token);
?>
]]>
      </programlisting>
      <para>
       Ausgabe:
      </para>
      <screen>
<![CDATA[
    string(0) ""
    string(11) "irgendetwas"
]]>
      </screen>
     </example>
     <example>
      <title>Neues Verhalten von <function>strtok</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$erster_token  = strtok('/irgendetwas', '/');
$zweiter_token = strtok('/');
var_dump($erster_token, $zweiter_token);
?>
]]>
      </programlisting>
      <para>
       Ausgabe:
      </para>
      <screen>
<![CDATA[
    string(11) "irgendetwas"
    bool(false)
]]>
      </screen>
     </example>
    </para>
    &return.falseproblem;
    <para>
     Siehe auch <function>split</function> und
     <function>explode</function>.
    </para>
   </refsect1>
  </refentry>

  
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
