<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: sammywg Status: ready -->

<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.echo">
 <refnamediv>
  <refname>echo</refname>
  <refpurpose>Gibt einen oder mehrere Strings aus</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>echo</methodname>
   <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <simpara>
    Gibt alle Parameter aus.
  </simpara>
  <para>
   <function>echo</function> ist nicht wirklich eine Funktion sondern
   ein Sprach-Konstrukt, daher brauchen Sie keine Klammern verwenden.
   <function>echo</function> verhält sich im Gegensatz zu einigen anderen
   Sprach-Konstrukten nicht wie eine Funktion, deshalb kann es nicht immer
   in einem Funktionskontext verwendet werden. Hinzu kommt, dass bei der
   Angabe mehrerer Parameter für <function>echo</function> diese nicht
   von Klammern umschlossen sein dürfen.
  </para>
  <para>
   <function>echo</function> besitzt zusätzlich eine Syntax-Kurzform, Sie
   können also ein öffnendes PHP-Tag von einem Gleichheitszeichen gefolgt
   notieren. Diese Syntax-Kurzform funktioniert nur, wenn <link
   linkend="ini.short-open-tag">short_open_tag</link> in der php.ini
   eingeschaltet ist.
   <informalexample>
    <programlisting role="php">
<![CDATA[
Ich habe <?=$foo?> foo.
]]>
    </programlisting>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arg1</parameter></term>
     <listitem>
      <para>
       Der auszugebende Parameter.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>echo</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
echo "Hallo Welt";

echo "Diese Ausgabe geht über
mehrere Zeilen. Die Zeilenumbrüche werden
ebenfalls ausgegeben.";

echo "Diese Ausgabe geht über\nmehrere Zeilen. Die Zeilenumbrüche werden\nebenfalls ausgegeben.";

echo "Escape Zeichen werden \"so realisiert\".";

// Sie können Variablen innerhalb eines echo-Statements verwenden
$foo = "foobar";
$bar = "barbaz";

echo "foo ist $foo"; // foo ist foobar

// Sie können auch Arrays nutzen
$bar = array("wert" => "foo");

echo "Das ist {$bar['wert']} !"; // Das ist foo !

// Wenn Sie einfache Anführungszeichen verwenden, wird der Name der Variable
// anstelle ihres Inhalts ausgegeben
echo 'foo ist $foo'; // foo ist $foo

// Sie können auch ausschließlich Variablen ausgeben,
// sofern Sie keine weiteren Zeichen ausgeben wollen
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

// Einige Programmierer bevorzugen es, mehrere Parameter
// mithilfe von Stringverkettung auszugeben
echo 'Dieser ', 'String ', 'besteht ', 'aus ', 'mehreren Parametern.', chr(10);
echo 'Dieser  ' . 'String ' . 'wurde ' . 'mit ' . 'Stringverkettung erzeugt.' . "\n";

echo <<<END
Hier wird die "here document"-Syntax verwendet, um mehrere
Zeilen mit $variablen Interpolation auszugeben. Beachten Sie,
dass das sich das "here document"-Endzeichen in einer Zeile
mit nur einem Strichpunkt aber ohne Leerzeichen o.ä. stehen muss!
END;

// Da echo sich nicht wie eine Funktion verhält, ist der folgende Code ungültig.
($eine_variable) ? echo 'true' : echo 'false';

// Folgende Beispiele funktionieren hingegen:
($eine_variable) ? print 'true': print 'false' ;   // print ist ebenfalls ein
                         // Konstrukt, aber es verhält sich wie eine Funktion,
                         // so dass es in diesem Kontext verwendet werden kann
echo $eine_variable ? 'true': 'false';            // Das Statement herumgedreht
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>print</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
    <member><link linkend="language.types.string.syntax.heredoc">Heredoc-Syntax</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
