<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.15 Maintainer: sammywg Status: working -->
  <refentry id="function.echo">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>Gibt einen oder mehrere Strings aus</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>void</type><methodname>echo</methodname>
      <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Gibt alle als Parameter angegebenen Strings aus.
    </simpara>
    <para>
     <function>echo</function> ist keine Funktion, sondern ein
     Sprach-Konstrukt, deshalb müssen Sie keine Klammern verwenden. 
     Wenn Sie echo mehr als einen Parameter übergeben
     wollen, dürfen Sie diese nicht mit Klammern umgeben.
    </para>
    <para>
     <example>
      <title><function>echo</function> Beispiele</title>
      <programlisting role="php">
<![CDATA[
<?php
echo "Hallo World";

echo "Diese Ausgabe geht über
mehrere Zeilen. Die Zeilenumbrüche werden
ebenfalls ausgegeben.";

echo "Diese Ausgabe geht über\nmehrere Zeilen. Die Zeilenumbrüche werden\nebenfalls ausgegeben.";

echo "Escape Zeichen werden \"so realisiert\".";

// Sie können Variablen innerhalb eines echo-Statements verwenden
$foo = "foobar";
$bar = "barbaz";

echo "foo ist $foo"; // foo ist foobar

// Sie können auch Arrays nutzen
$bar = array("wert" => "foo");

echo "Das ist {$bar['wert']} !"; // Das ist foo !

// Wenn Sie einfache Anführungszeichen verwenden, wird der Name der Variable
// anstelle ihres Inhalts ausgegeben
echo 'foo ist $foo'; // foo ist $foo

// Sie können auch ausschließlich Variablen ausgeben, 
// sofern Sie keine weiteren Zeichen ausgeben wollen
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

// Einige Programmierer bevorzugen es, mehrere Parameter 
// mithilfe von Stringverkettung auszugeben
echo 'Dieser ', 'String ', 'besteht ', 'aus ', 'mehreren Parametern.', chr(10);
echo 'Dieser  ' . 'String ' . 'wurde ' . 'mit ' . 'Stringverkettung erzeugt.' . "\n";

echo <<<END
Hier wird die "here document"-Syntax verwendet, um mehrere
Zeilen mit $variablen Interpolation auszugeben. Beachten Sie,
dass das sich das "here document"-Endzeichen in einer Zeile
mit nur einem Strichpunkt aber ohne Leerzeichen o.ä. stehen muss!
END;

// Da echo keine Funktion darstellt, ist der folgende Code ungültig.
($eine_variable) ? echo('true'): echo('false');

// Folgende Beispiele funktionieren hingegen:
($eine_variable) ? print('true'): print('false'); // print ist eine Funktion
echo $eine_variable ? 'true': 'false';            // Das Statement herumgedreht
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>echo</function> besitzt zusätzlich eine Syntax-Kurzform, Sie
     können also ein öffnendes PHP-Tag von einem Gleichheitszeichen gefolgt
     notieren. Diese Syntax-Kurzform funktioniert nur, wenn <link
     linkend="ini.short-open-tag">short_open_tag</link> in der php.ini
     eingeschaltet ist.
     <informalexample>
      <programlisting role="php">
<![CDATA[
Ich habe <?=$foo?> foo.
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Eine kurze Erörterung über die Unterschiede zwischen <function>print</function>
     und <function>echo</function> finden Sie in folgendem FAQT Knowledge 
     Base-Artikel: <ulink url="&url.echo-print;">&url.echo-print;
     </ulink>
    </simpara>
    
    &note.language-construct;
    
    <simpara>
     Siehe auch
     <function>print</function>,
     <function>printf</function> und
     <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
