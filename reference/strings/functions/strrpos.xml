<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 347577 Maintainer: simp Status: ready -->
<!-- Credits: sammywg -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.strrpos">
 <refnamediv>
  <refname>strrpos</refname>
  <refpurpose>Findet die Position des letzten Vorkommens eines Teilstrings innerhalb einer Zeichenkette</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>strrpos</methodname>
   <methodparam><type>string</type><parameter>haystack</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>needle</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Gibt die numerische Position des letzten Vorkommens von
   <parameter>needle</parameter> innerhalb der Zeichenkette
   <parameter>haystack</parameter> zurück.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>haystack</parameter></term>
     <listitem>
      <para>
       Die Zeichenkette in der gesucht werden soll.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>needle</parameter></term>
     <listitem>
      &strings.parameter.needle.non-string;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para> 
       Wenn null (<literal>0</literal>) oder positiv, wird die Suche von links
       nach rechts durchgeführt, wobei die ersten <parameter>offset</parameter>
       Bytes des <parameter>haystack</parameter> übersprungen werden.
      </para>
      <para>
       Wenn negativ, wird die Suche von rechts nach links durchgeführt, wobei die
       letzten <parameter>offset</parameter> Bytes des <parameter>haystack</parameter>
       übersprungen werden.
       <note>
        <para>
         Dies bedeutet, dass das letzte Vorkommen von <parameter>needle</parameter>
         vor den letzten <parameter>offset</parameter> Bytes gesucht wird.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt die Position des Vorkommens des gesuchten Teilstrings relativ
   zum Anfang der Zeichenkette <parameter>haystack</parameter> (unabhängig
   von Suchrichtung oder Offset) zurück.
   <note>
    <simpara>
     Positionen in Zeichenketten werden ab 0 gezählt, und nicht ab 1.
    </simpara>
   </note>
  </para>
  <para>
   Gibt &false; zurück, falls der gesuchte teilstring nicht gefunden wurde.
  </para>
  &return.falseproblem;
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Prüfen ob needle in haystack vorkommt</title>
    <para>
     Es liegt nahe, einen Fehler bei der Auswertung der Rückgabewerte von
     "Zeichen an Position 0 gefunden" und "Zeichen nicht gefunden" zu begehen.
     Am einfachsten finden Sie den Unterschied wie folgt heraus:
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$pos = strrpos($meinstring, "b");
if ($pos === false) { // Beachten sie die drei Gleichheitszeichen
    // nicht gefunden ...
}

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Mit Offsets suchen</title>
    <programlisting role="php">
<![CDATA[
<?php
$foo = "0123456789a123456789b123456789c";

// Sucht '0' ab dem nullten Byte (vom Anfang an)
var_dump(strrpos($foo, '0', 0));

// Sucht '0' ab dem ersten Byte (nach Byte "0")
var_dump(strrpos($foo, '0', 1));

// Sucht '7' ab dem 21ten Byte (nach Byte 20)
var_dump(strrpos($foo, '7', 20));

// Sucht '7' ab dem 29ten Byte (nach Byte 28)
var_dump(strrpos($foo, '7', 28));

// Sucht '7' von rechts nach links ab dem fünften Byte vom Ende
var_dump(strrpos($foo, '7', -5));

// Sucht 'c' von rechts nach links ab dem zweiten Byte vom Ende
var_dump(strrpos($foo, 'c', -2));

// Sucht '9c' von rechts nach links ab dem zweiten Byte vom Ende
var_dump(strrpos($foo, '9c', -2));
?>
]]>
    </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(0)
bool(false)
int(27)
bool(false)
int(17)
bool(false)
int(29)
]]>
   </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strpos</function></member>
    <member><function>stripos</function></member>
    <member><function>strripos</function></member>
    <member><function>strrchr</function></member>
    <member><function>substr</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
