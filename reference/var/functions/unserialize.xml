<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337373 Maintainer: sammywg Status: ready -->

<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>Erzeugt aus einem gespeicherten Datenformat einen Wert in PHP</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   <function>unserialize</function> nimmt eine einzelne Variable aus einer
   serialisierten Datenmenge und wandelt sie in einen PHP-Wert zurück.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       Der serialisierte String.
      </para>
      <para>
       Wenn die zu deserialisierende Variable ein Objekt ist, wird PHP nach der
       erfolgreichen Wiederherstellung des Objekts automatisch versuchen, die
       <link linkend="object.wakeup">__wakeup</link>-Methode
       aufzurufen (sofern diese existiert).
      </para>
      <para>
       <note>
        <title>Die unserialize_callback_func-Direktive</title>
        <para>
         Es ist möglich, eine Callback-Funktion anzugeben, die aufgerufen wird,
         wenn eine undefinierte Klasse während des Deserialisierens instanziiert
         werden soll (um dem Erhalt des unvollständigen <type>object</type>
         "__PHP_Incomplete_Class" vorzubeugen). Nutzen Sie Ihre &php.ini;,
         <function>ini_set</function> oder &htaccess;, um
         '<literal>unserialize_callback_func</literal>' festzulegen. Jedesmal,
         wenn eine undefinierte Klasse instanziiert werden soll, wird diese
         Funktion aufgerufen. Um dieses Feature abzuschalten, muss die
         Einstellung nur ungefüllt sein.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Optionen, die <function>unserialize</function> als assoziatives Array
       zur Verfügung gestellt werden sollen.
      </para>
      <table>
       <title>Gültige Optionen</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Name</entry>
          <entry>Typ</entry>
          <entry>Beschreibung</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>allowed_classes</literal></entry>
          <entry><type>mixed</type></entry>
          <entry>
           <simpara>
            Entweder ein <type>Array</type> von Klassennamen, die akzeptiert
            werden sollen, oder &false; um keine Klassen oder &true; um alle
            Klassen zu akzeptieren. Ist diese Option angegeben und
            <function>unserialize</function> trifft auf ein Objekt einer Klasse,
            die nicht akzeptierbar ist, wird das Objekt statt dessen als
            <classname>__PHP_Incomplete_Class</classname> instantiiert.
           </simpara>
           <simpara>
            Das Auslassen dieser Option hat die gleiche Wirkung wie sie als
            &true; anzugeben: PHP wird versuchen Objekte beliebiger Klassen zu
            instantiieren.
           </simpara>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Der konvertierte Wert wird zurückgegeben und kann vom Typ <type>boolean</type>,
   <type>integer</type>, <type>float</type>, <type>string</type>,
   <type>array</type> oder <type>object</type> sein.
  </para>
  <para>
   Falls der übergebene String nicht deserialisierbar ist, wird &false; zurück
   gegeben und <constant>E_NOTICE</constant> produziert.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        Der <parameter>options</parameter> Parameter wurde hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>5.6.0</entry>
       <entry>
        Die Manipulation der serialisierten Daten durch das Ersetzen von
        <literal>C:</literal> mit <literal>O:</literal> um die Objektinstanziierung
        ohne Aufruf des Konstruktors zu erzwingen, schlägt nun fehl.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>unserialize</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// Als Beispiel benutzen wir unserialize(), um Daten aus einer Datenbank in das
// $session_data-Array zu laden. Das Beispiel vervollständigt das unter
// serialize() beschriebene.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // wenn execute oder fetch fehlschlägt, initialisiere ein leeres Array
    $session_data = array();
} else {
    // die serialisierten Daten sollten nun in $tmp[0] stehen.
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // etwas ging schief, also wieder ein leeres Array initialisieren
        $session_data = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>unserialize_callback_func-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

// unserialize_callback_func Direktive ist ab PHP 4.2.0 verfuegbar
ini_set('unserialize_callback_func', 'mycallback'); // Festlegen der callback_function

function mycallback($classname)
{
    // einfach ein File einbinden, dass die Klassendefinitionen enthaelt
    // Sie erhalten $classname, womit Sie herausfinden koennen, welche
    // Klassendefinition benoetigt wird
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    &false; wird sowohl im Fehlerfall als auch bei einem serialisierten
    &false;-Wert zurückgegeben. Es ist möglich, diesen speziellen Fall
    abzufangen, indem man <parameter>str</parameter> mit
    <literal>serialize(false)</literal> vergleicht oder prüft, ob ein
    <constant>E_NOTICE</constant> produziert wurde.
   </para>
  </warning>
  <warning>
   <para>
    Unvertrauenswürdige Benutzereingaben sollten nicht an
    <function>unserialize</function> übergeben werden. Die Deserialisierung kann
    durch Objektinstanziierung und Autoloading dazu führen, dass Code geladen
    und ausgeführt wird, und ein böswilliger Anwender kann in der Lage sein das
    auszunutzen. Es ist ein sicheres, standardisiertes Austauschformat wie JSON
    (per <function>json_decode</function> und <function>json_encode</function>)
    zu verwenden, wenn serialisierte Daten an den Nutzer übergeben werden müssen.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">Autoloading von Klassen</link></member>
    <member><link linkend="unserialize-callback-func">unserialize_callback_func</link></member>
    <member><link linkend="object.wakeup">__wakeup</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
