<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: sammywg Status: ready -->

<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose>Löschen einer angegebenen Variablen</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> löscht die angegebene Variable.
  </para>
  <para>
   Das Verhalten von <function>unset</function> innerhalb einer Funktion kann
   abhängig davon, was für einen Variablentyp Sie zu löschen versuchen,
   variieren.
  </para>
  <para>
   Wenn eine globalisierte Variable innerhalb einer Funktion mit
   <function>unset</function> behandelt wird, wird nur die lokale Variable
   gelöscht. Die Variable innerhalb der aufrufenden Umgebung behält den selben
   Wert wie vor dem Aufruf von <function>unset</function>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
bar
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Um eine globale Variable innerhalb einer Funktion zu löschen,
   kann das <varname>$GLOBALS</varname>-Array verwendet werden:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   Wenn eine Variable, die als Referenz übergeben wird ("Passed by Reference"),
   innerhalb einer Funktion gelöscht wird, wird nur die lokale Variable
   gelöscht. Die Variable im aufrufenden Environment enthält den selben Wert
   wie vor dem Aufruf von <function>unset</function>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
something
something
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Wenn eine statische Variable innerhalb einer Funktion gelöscht wird, löscht
   <function>unset</function> die Variable nur im Kontext des verbleibenden
   Funktionsablaufs. Die folgenden Aufrufe stellen den vorhergehenden Wert der
   Variablen wieder her.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Vor unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "nach unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
Vor unset: 1, nach unset: 23
Vor unset: 2, nach unset: 23
Vor unset: 3, nach unset: 23
]]>
    </screen>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Die zu löschende Variable.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Eine weitere Variable ...
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.1</entry>
       <entry>
        Unterstützung für multiple Argumente hinzugefügt.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>unset</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// löscht eine einzelne Variable
unset($foo);

// löscht ein einzelnes Element eines Arrays
unset($bar['quux']);

// löscht mehr als eine Variable
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Verwendung von (unset) Casting</title>
    <programlisting role="php">
<![CDATA[
<?php
$name = 'Felipe';

var_dump((unset) $name);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    Es ist möglich, sogar Objekteigenschaften zu löschen, die im aktuellen
    Kontext sichtbar sind.
   </para>
  </note>
  <note>
   <para>
    Es ist ab PHP 5 nicht mehr möglich, <literal>$this</literal> innerhalb
    einer Objektmethode zu löschen.
   </para>
  </note>
  <note>
   <para>
    Wenn <function>unset</function> auf Objekteigenschaften angewendet wird,
    auf die nicht direkt zugegriffen werden kann, wird, sofern sie deklariert
    wurde, die Überladungsmethode <link
    linkend="language.oop5.overloading.members">__unset</link> aufgerufen.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><link linkend="language.oop5.overloading.members">__unset</link></member>
    <member><function>array_splice</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
