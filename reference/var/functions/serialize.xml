<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: sammywg Status: ready -->

<refentry xml:id="function.serialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>serialize</refname>
  <refpurpose>Erzeugt eine speicherbare Repräsentation eines Wertes</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>serialize</methodname>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
  <para>
   Erzeugt eine speicherbare Repräsentation eines Wertes.
  </para>
  <para>
   Diese Funktion dient der Speicherung oder Übergabe von PHP-Werten, ohne
   dass diese ihren Typ oder ihre Struktur verlieren.
  </para>
  <para>
   Um eine serialisierte Zeichenkette wieder als PHP-Wert verfügbar zu machen,
   verwenden Sie <function>unserialize</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Der zu serialisierende Wert. <function>serialize</function> kann mit allen
       Typen umgehen, ausgenommen mit dem <type>resource</type>-Typ. Sie können
       sogar Arrays serialisieren, die Referenzen auf sich selbst enthalten.
       Zirkelbezüge innerhalb des Arrays/Objekts, das Sie serialisieren, werden
       ebenfalls gespeichert. Alle anderen Referenzen gehen verloren.
      </para>
      <para>
       Wenn Objekte serialisiert werden, versucht PHP die Methode <link
       linkend="language.oop5.magic">__sleep</link> vor der Serialisierung
       aufzurufen. Dies erlaubt einem Objekt z.B. letzte "Aufräumaktionen",
       bevor es serialisiert wird. Ebenso wird die Methode <link
       linkend="language.oop5.magic">__wakeup</link> aufgerufen, wenn das
       Objekt mittels <function>unserialize</function> wiederhergestellt wird.
      </para>
      <note>
       <para>
        Den Namen der privaten Eigenschaften eines Objekts wird der Klassenname
        vorangestellt; den Namen geschützter Eigenschaften wird ein '*'
        vorangestellt. Diese vorangestellten Werte werden von Nullbytes
        umschlossen.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt einen String zurück, der eine Byte-Stream-Repräsentation von
   <parameter>value</parameter> enthält, die beliebig gespeichert werden kann.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>serialize</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// $session_data enthält ein mehrdimensionales Array mit Session-Informationen
// des aktuellen Benutzers. Wir benutzen serialize() um diese Infos am Ende
// der Anfrage in eine Datenbank zu speichern.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, $sqldata)) {
        /* Irgendwas ging schief ... */
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.7</entry>
       <entry>
        Die Serialisierung von Objekten funktioniert korrekt.
       </entry>
      </row>
      <row>
       <entry>4.0.0</entry>
       <entry>
        Bei der Serialisierung eines Objekts gehen die Methoden nicht verloren.
        Lesen Sie dazu bitte den Abschnitt
        <link linkend="language.oop5.serialization">Objekte serialisieren</link>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Es ist nicht möglich, PHP-eigene Objekte zu serialisieren.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unserialize</function></member>
    <member><link linkend="language.oop5.serialization">Objekte serialisieren</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
