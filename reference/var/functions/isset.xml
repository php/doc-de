<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 311886 Maintainer: fa Status: ready -->
<refentry xml:id="function.isset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>isset</refname>
  <refpurpose>Prüft, ob eine Variable existiert und ob sie nicht &null; ist</refpurpose>
 </refnamediv>

 <refsect1 role="description">
 &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>isset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Prüft, ob eine Variable existiert und nicht &null; ist.
  </para>
  <para>
   Wenn eine Variable mittels <function>unset</function> zurückgesetzt wird, gilt
   sie nicht länger als existent. <function>isset</function> wird &false;
   zurückgeben, wenn eine überprüfte Variable auf &null; gesetzt ist. Beachten
   Sie außerdem, dass das Null-Byte (<literal>"\0"</literal>) nicht äquivalent
   ist zur PHP-Konstante &null;.
  </para>
  <para>
   Wenn mehrere Parameter übergeben werden, gibt <function>isset</function>
   nur dann &true; zurück, wenn alle Parameter belegt sind. Die Auswertung
   geht von links nach rechts und wird abgebrochen, sobald eine Variable
   nicht belegt ist.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Die zu überprüfende Variable.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Eine weitere Variable ...
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt &true; zurück, wenn <parameter>var</parameter> existiert und einen von
   &null; verschiedenen Wert hat, andernfalls &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>isset</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php

$var = '';

// Dieser Ausdruck wird zu TRUE ausgewertet, also wird der Text angezeigt
if (isset($var)) {
    echo "Die Variable ist gesetzt, also wird etwas ausgegeben.";
}

// In den nächsten Beispielen wird var_dump() benutzt, um den Rückgabewert von
// isset() auszugeben.

$a = "test";
$b = "anothertest";

var_dump(isset($a));     // TRUE
var_dump(isset($a, $b)); // TRUE

unset ($a);

var_dump(isset($a));     // FALSE
var_dump(isset($a, $b)); // FALSE

$foo = NULL;
var_dump(isset($foo));   // FALSE

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Die funktioniert ebenfalls für Arrayelemente:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php


$a = array ('test' => 1, 'hello' => NULL, 'pie' => array('a' => 'apple'));

var_dump(isset($a['test']));            // TRUE
var_dump(isset($a['foo']));             // FALSE
var_dump(isset($a['hello']));           // FALSE

// Der Schlüssel 'hello' hat den Wert NULL, 
// daher wird sein Inhalt nicht betrachtet
// Wenn man herausfinden willen, ob ein 
// Schlüssel mit dem Wert NULL vorhanden
// ist, verwendet man:
var_dump(array_key_exists('hello', $a)); // TRUE

// Tiefer verschachtelte Array-Strukturen prüfen:
var_dump(isset($a['pie']['a']));        // TRUE
var_dump(isset($a['pie']['b']));        // FALSE
var_dump(isset($a['cake']['a']['b']));  // FALSE
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    <function>isset</function> funktioniert nur mit Variablen, da der Aufruf
    mit etwas anderem einen Parse-Error verursacht. Um zu überprüfen, ob
    <link linkend="language.constants">Konstanten</link> gesetzt sind, sollte
    die Funktion <function>defined</function> benutzt werden.
   </para>
  </warning>
  &note.language-construct;
  <note>
   <para>
    Bei Aufruf von <function>isset</function> auf nicht-öffentliche Objekteigenschaten
    wird die überladene Methode <link linkend="language.oop5.overloading.members">__isset</link>
    aufgerufen, falls deklariert.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>empty</function></member>
    <member><link linkend="language.oop5.overloading.members">__isset</link></member>
    <member><function>unset</function></member>
    <member><function>defined</function></member>
    <member><link linkend="types.comparisons">die Tabelle zum Typenvergleich</link></member>
    <member><function>array_key_exists</function></member>
    <member><function>is_null</function></member>
    <member>Fehler-Kontroll-Operator <link linkend="language.operators.errorcontrol">@</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
