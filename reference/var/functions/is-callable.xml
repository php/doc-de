<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.13  Maintainer: hholzgra  Status: ready -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Prüft ob der Inhalt einer Variable als Funktion aufgerufen werden kann
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter></methodparam>
  </methodsynopsis>
  <para>
   Prüft ob der Inhalt einer Variable als Funktion aufgerufen werden kann.
   Es wird geprüft ob eine einfache Variable den Namen einer gültigen 
   Funktion enthält, oder ob in einem Array ein gültig codierter
   Objekt- und Funktionsname enthalten ist.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Kann entweder der Name einer Funktion als String oder ein Objekt
       und der Name einer seiner Methoden als Array in der Form
       <screen>array($SomeObject, 'MethodName')</screen> sein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>syntax_only</parameter></term>
     <listitem>
      <para>
       Wenn dieser Parameter auf &true; gesetzt wird so prüft die
       Funktion nur ob <parameter>var</parameter> möglicherweise eine
       Funktion oder Methode enthält. Einfache Variablen werden nur 
       zurückgewiesen wenn sie keinen String enthalten. Arrays werden
       auf die richtige Struktur geprüft, d.g. das das Array zwei 
       Elemente hat von denen der erste ein Objekt oder String und 
       der zweite ein String ist.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Hier wird der "aufrufbare Name" abgelegt. Für das obige Beispiel
       ist dies "someClass::someMethod". Beachten Sie dass dies keine
       statische Methode ist auch wenn die Syntax das nahelegt. 
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Liefet &true; wenn <parameter>var</parameter> aufrufbar is, 
   sonst &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>is_callable</function> Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// Wie man prüft ob eine Variable als Funktion aufgerufen werden kann

//
//  Einfache Variable die eine Funktion enthält
//

function someFunction() 
{
}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));  // bool(true)

echo $callable_name, "\n";  // someFunction

//
//  Array das eine Methode enthält
//

class someClass {

  function someMethod() 
  {
  }

}

$anObject = new someClass();

$methodVariable = array($anObject, 'someMethod');

var_dump(is_callable($methodVariable, true, $callable_name));  //  bool(true)

echo $callable_name, "\n";  //  someClass::someMethod

?>
]]>
    </programlisting>
   </example>   
  </para>   
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
