<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.4 Maintainer: tom Status: ready -->
  <refentry id="function.array-walk">
   <refnamediv>
    <refname>array_walk</refname>
    <refpurpose>
     Wendet eine Benutzerfunktion an jedem Element eines Arrays an
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>int</type><methodname>array_walk</methodname>
      <methodparam><type>array</type><parameter>array</parameter></methodparam>
      <methodparam><type>string</type><parameter>func</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>userdata</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Wendet die mittels <parameter>func</parameter> angegebene
     Benutzerfunktion für jedes Element von <parameter>arr</parameter>
     an. <parameter>func</parameter> wird der Wert als erster, und der
     Schlüssel als zweiter Parameter übergeben. Sofern angegeben, wird
     <parameter>userdata</parameter>, als dritter Parameter an die
     Funktion <parameter>func</parameter> übergeben.
     <parameter>func</parameter> muss eine vom Benutzer definierte
     Funktion sein, und nicht eine native PHP Funktion. Deshalb können
     Sie <function>array_walk</function> nicht direkt mit
     <function>str2lower</function> benutzen, sondern müssen erst eine
     eigene Funktion damit erstellen, und diese Funktion als Argument
     übergeben.
    </simpara>
    &note.func-callback;
    <simpara>
     Sollte <parameter>func</parameter> mehr als zwei oder drei
     Argumente verlangen, wird - abhängig von
     <parameter>userdata</parameter> - bei jedem Aufruf von
     <parameter>func</parameter> seitens
     <function>array_walk</function> eine Warnmeldung generiert. Diese
     Warnmeldungen können unterdrückt werden, indem man dem
     Funktionsaufruf von <function>array_walk</function> ein '@'
     Zeichen voranstellt, oder mittels der Verwendung von
     <function>error_reporting</function>.
    </simpara>
    <note>
     <para>
      Wenn <parameter>func</parameter> mit den Werten des Arrays
      direkt arbeiten soll, geben Sie an, dass der erste Parameter von
      <parameter>func</parameter> als Referenz übergeben werden muss.
      Dann werden alle Änderungen an diesen Elementen direkt in dem
      selbst durchgeführt.
     </para>
     <para>
      Die Modifizierung des Arrays aus <parameter>func</parameter>
      heraus könnte ein unvorhersehbares Verhalten hervorrufen.
     </para>
    </note>
    <note>
     <para>
      Die Übergabe des Schlüssels und von
      <parameter>userdata</parameter> an <parameter>func</parameter>
      wurde mit PHP 4.0 eingeführt.
     </para>
     <para>
      In PHP 4 muss <function>reset</function> aufgerufen werden, da
      <function>array_walk</function> den internen Zeiger nicht
      selbsttätig wieder auf das erste Element zurücksetzt.
     </para>
     <para>
      Von der Benutzerfunktion aus darf das Array selbst nicht geändert
      werden, wie zum Beispiel durch Hinzufügen oder Löschen eines
      Elementes, oder auch Löschen des Arrays, auf das
      <function>array_walk</function> angewendet wird. Ist das Array
      geändert, so ist das Verhalten dieser Funktion undefiniert.
     </para>
    </note>
    <para>
     <example>
      <title><function>array_walk</function></title>
      <programlisting role="php">
<![CDATA[
$fruits = array ("d"=>"Zitrone", "a"=>"Orange", "b"=>"Banane", "c"=>"Apfel");

function test_alter (&$item1, $key, $prefix) {
    $item1 = "$prefix: $item1";
}

function test_print ($item2, $key) {
    echo "$key. $item2<br>\n";
}
echo "Vorher ...:\n";
array_walk ($fruits, 'test_print');
reset ($fruits);
array_walk ($fruits, 'test_alter', 'Frucht');
echo "... und nachher:\n";
reset ($fruits);
array_walk ($fruits, 'test_print');
]]>
      </programlisting>
      <para>
       Das obige Programm wird folgendes ausgeben:
       <screen role="php">
<![CDATA[
Vorher ...:
d. Zitrone
a. Orange
b. Banane
c. Apfel
... und nachher:
d. Frucht: Zitrone
a. Frucht: Orange
b. Frucht: Banane
c. Frucht: Apfel
]]>
       </screen>
      </para>
     </example>
    </para>
    <simpara>
     Siehe auch <function>each</function> und
     <function>list</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
