<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 308188 Maintainer: wiesemann Status: ready -->
<!-- CREDITS: tom -->
<refentry xml:id="function.array-walk" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_walk</refname>
  <refpurpose>Wendet eine Benutzerfunktion auf jedem Element eines Arrays an</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_walk</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callback</type><parameter>funcname</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>userdata</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Wendet die mittels <parameter>funcname</parameter> angegebene
   Benutzerfunktion auf jedes Element von <parameter>array</parameter>
   an.
  </simpara>
  <para>
   <function>array_walk</function> ist nicht von dem internen
   Arrayzeiger von <parameter>array</parameter> betroffen.
   <function>array_walk</function> geht ungeachtet der Zeigerposition
   das gesamte Array durch.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Das Eingabe-Array.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>funcname</parameter></term>
     <listitem>
      <para>
       Typischerweise akzeptiert <parameter>funcname</parameter> zwei
       Parameter. Der Wert von <parameter>array</parameter> wird als
       erster übergeben, und der Schlüssel/Index als zweiter.
      </para>
      <note>
       <para>
        Wenn <parameter>funcname</parameter> direkt mit den Werten des
        Arrays arbeiten soll, spezifizieren Sie den ersten Parameter
        von <parameter>funcname</parameter> als <link
        linkend="language.references">Referenz</link>. Dann werden alle
        Änderungen an diesen Elementen direkt in dem originalen Array
        durchgeführt.
       </para>
      </note>
      <note>
        <para>
          Viele interne Funktionen (wie z.B. <function>strtolower</function>)
          erzeugen eine Warnung, wenn mehr als die erwartete Anzahl von
          Parametern übergeben wird; sie sind auch nicht direkt nutzbar als
          <parameter>funcname</parameter>.
        </para>
      </note>
      <para>
       Nur die Werte von <parameter>array</parameter> können geändert werden.
       Die Struktur des Arrays kann nicht geändert werden, d.h. dass der
       Programmierer keine Elemente hinzufügen oder löschen kann und dass
       die Reihenfolge der Elemente nicht geändert werden kann. Falls die
       Callback-Funktion diese Anforderung nicht beachtet, ist der Verhalten
       dieser Funktion nicht definiert und auch nicht vorhersagbar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>userdata</parameter></term>
     <listitem>
      <para>
       Wenn der optionale Parameter <parameter>userdata</parameter>
       angegeben ist, wird er als dritter Parameter dem Callback
       <parameter>funcname</parameter> übergeben.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Sollte die Funktion <parameter>funcname</parameter> mehr als die
   ihr übergebenen Parameter benötigen, wird bei jedem Aufruf von
   <parameter>funcname</parameter> durch <function>array_walk</function>
   eine Fehlermeldung der Stufe <link linkend="errorfunc.constants">
   E_WARNING</link> generiert. Diese Warnmeldungen können unterdrückt
   werden, indem man dem Funktionsaufruf von
   <function>array_walk</function> den Operator <link
   linkend="language.operators.errorcontrol">@</link> voranstellt,
   oder <function>error_reporting</function> verwendet.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_walk</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$fruits = array("d" => "Zitrone", "a" => "Orange", "b" => "Banane", "c" => "Apfel");

function test_alter(&$item1, $key, $prefix)
{
    $item1 = "$prefix: $item1";
}

function test_print($item2, $key)
{
    echo "$key. $item2<br>\n";
}

echo "Vorher ...:\n";
array_walk($fruits, 'test_print');

array_walk($fruits, 'test_alter', 'Frucht');
echo "... und nachher:\n";

array_walk($fruits, 'test_print');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Vorher ...:
d. Zitrone
a. Orange
b. Banane
c. Apfel
... und nachher:
d. Frucht: Zitrone
a. Frucht: Orange
b. Frucht: Banane
c. Frucht: Apfel
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_walk_recursive</function></member>
    <member><function>iterator_apply</function></member>
    <member><function>create_function</function></member>
    <member><function>list</function></member>
    <member><function>each</function></member>
    <member><function>call_user_func_array</function></member>
    <member><function>array_map</function></member>
    <member>&seealso.callback;</member>
    <member>&foreach;</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
