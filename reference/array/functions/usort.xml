<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336314 Maintainer: hholzgra Status: ready -->
<!-- CREDITS: tom, simp -->
<refentry xml:id="function.usort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>usort</refname>
  <refpurpose>Sortiert ein Array nach Werten mittels einer benutzerdefinierten
   Vergleichsfunktion</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>usort</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callable</type><parameter>value_compare_func</parameter></methodparam>
  </methodsynopsis>
  <para>
   Diese Funktion sortiert ein Array nach seinen Werten mittels
   einer benutzerdefinierten Vergleichsfunktion. Soll das Array nach
   nicht trivialen Kriterien sortiert werden, sollten Sie diese
   Funktion verwenden.
  </para>
  <note>
   <para>
    Wenn zwei Elemente als gleich verglichen werden, ist ihre relative Reihenfolge
    im sortierten Array undefiniert.
   </para>
  </note>
  &note.no-key-association;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Das zu sortierende Array.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value_compare_func</parameter></term>
     <listitem>
      <para>
       &return.callbacksort;
      </para>
      &callback.cmp;
      <caution>
       <para>
        Werden von der Vergleichsfunktion <emphasis>nicht-integer</emphasis>
        Werte zurückgegeben so werden diese auf <type>integer</type> gecastet.
        Gibt die Funktion zB. <type>float</type> Werte zurück so werden Werte
        wie 0.99 oder 0.1 zu 0 und die verglichenen Werte werden als gleich
        angesehen.
       </para>
      </caution>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example xml:id="function.usort.examples.basic">
    <title><function>usort</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b)
{
    if ($a == $b) {
        return 0;
    }
    return ($a < $b) ? -1 : 1;
}

$a = array(3, 2, 5, 6, 1);

usort($a, "cmp");

foreach ($a as $key => $value) {
    echo "$key: $value\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0: 1
1: 2
2: 3
3: 5
4: 6
]]>
    </screen>
   </example>
  </para>
  <note>
   <para>
    Für dieses einfache Beispiel wäre die
    <function>sort</function>-Funktion offensichtlich
    die bessere Wahl.
   </para>
  </note>
  <para>
   <example xml:id="function.usort.examples.multi">
    <title>
     <function>usort</function>-Beispiel für multidimensionale Arrays
    </title>
    <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b)
{
    return strcmp($a["frucht"], $b["frucht"]);
}

$fruechte[0]["frucht"] = "Zitronen";
$fruechte[1]["frucht"] = "Aepfel";
$fruechte[2]["frucht"] = "Orangen";

usort($fruechte, "cmp");

while (list($key, $value) = each($fruits)) {
    echo "\$fruechte[$key]: " . $value["frucht"] . "\n";
}
?>
]]>
    </programlisting>
    <para>
     Wenn ein mehrdimensionales Array sortiert wird, enthalten
     <varname>$a</varname> und <varname>$b</varname> Verweise auf den
     ersten Index des Arrays.
    </para>
    &example.outputs;
    <screen>
<![CDATA[
$fruechte[0]: Aepfel
$fruechte[1]: Orangen
$fruechte[2]: Zitronen
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="function.usort.examples.object">
    <title>
     <function>usort</function>-Beispiel, das die Methode eines Objekts benutzt
    </title>
    <programlisting role="php">
<![CDATA[
<?php
class TestObj {
    var $name;

    function TestObj($name)
    {
        $this->name = $name;
    }

    /* Dies ist die statische Vergleichsfunktion */
    static function cmp_obj($a, $b)
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) {
            return 0;
        }
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

usort($a, array("TestObj", "cmp_obj"));

foreach ($a as $item) {
    echo $item->name . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
b
c
d
]]>
    </screen>
   </example>
   <example xml:id="function.usort.examples.closure">
    <title>
     <function>usort</function> Beispiel zum Einsatz einer <link linkend="functions.anonymous">Closure</link>
     zum Sortieren eines mehrdimensionalen Arrays
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$array[0] = array('key_a' => 'z', 'key_b' => 'c');
$array[1] = array('key_a' => 'x', 'key_b' => 'b');
$array[2] = array('key_a' => 'y', 'key_b' => 'a');

function build_sorter($key) {
    return function ($a, $b) use ($key) {
        return strnatcmp($a[$key], $b[$key]);
    };
}

usort($array, build_sorter('key_b'));

foreach ($array as $item) {
    echo $item['key_a'] . ', ' . $item['key_b'] . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
y, a
x, b
z, c
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>uasort</function></member>
    <member>&seealso.array.sorting;</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
