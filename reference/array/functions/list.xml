<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 75a5125c8b8bbe3006415bdcff531735c5701bd5 Maintainer: cmb Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 43ac336818cb3a18011d9b6ba91514f3332eb46d Reviewer: samesch -->
<!-- CREDITS: tom -->
<refentry xml:id="function.list" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>list</refname>
  <refpurpose>Weist Variablen zu, als wären sie ein Array</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>list</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam rep="repeat" choice="opt"><type>mixed</type><parameter>vars</parameter></methodparam>
  </methodsynopsis>
  <para>
   Wie <function>array</function> ist auch dies keine Funktion, sondern ein
   Sprachkonstrukt. <function>list</function> wird verwendet, um eine Liste
   von Variablen in einer Operation zuzuweisen. Zeichenketten können nicht
   verarbeitet werden und der <function>list</function>-Ausdruck darf nicht
   vollständig leer sein.
  </para>
  <note>
   <para>
    Vor PHP 7.1.0 funktionierte <function>list</function> nur bei numerischen
    Arrays und basierte auf der Annahme, dass die numerischen Indizes bei 0
    beginnen.
   </para>
  </note>
  <para>
   Seit PHP 7.1.0 kann <function>list</function> auch explizite Schlüssel
   enthalten, sodass Arrays mit nicht-ganzzahligen oder nicht-sequentiellen
   Schlüsseln destrukturiert werden können. Weitere Details zur
   Destrukturierung von Arrays sind im Abschnitt
   <link linkend="language.types.array.syntax.destructuring">Destrukturierung von Arrays</link> zu
   finden.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Eine Variable.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <varlistentry>
     <term><parameter>vars</parameter></term>
     <listitem>
      <para>
       Weitere Variablen.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt das zugewiesene Array zurück.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Die Unterstützung von Referenzzuweisungen bei der
        Arraydestrukturierung wurde hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        Es ist nun möglich, Schlüssel in <function>list</function> anzugeben.
        Dies ermöglicht die Destrukturierung von Arrays mit nicht-numerischen
        oder nicht-fortlaufenden Schlüsseln.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>list</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php

$info = array('Kaffee', 'braun', 'Koffein');

// Auflisten aller Variablen
list($drink, $color, $power) = $info;
echo "$drink ist $color und $power macht es zu etwas Besonderem.\n";

// Ein paar davon auflisten
list($drink, , $power) = $info;
echo "$drink hat $power.\n";

// Oder nur die dritte ausgeben
list( , , $power) = $info;
echo "Ich brauche $power!\n";

// list() funktioniert nicht mit Zeichenketten
list($bar) = "abcde";
var_dump($bar); // NULL
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ein Beispiel für die Verwendung von <function>list</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$result = $pdo->query("SELECT id, name FROM employees");
while (list($id, $name) = $result->fetch(PDO::FETCH_NUM)) {
    echo "id: $id, name: $name\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Verschachtelte <function>list</function>-Ausdrücke verwenden</title>
    <programlisting role="php">
<![CDATA[
<?php

list($a, list($b, $c)) = array(1, array(2, 3));

var_dump($a, $b, $c);

?>
]]>
    </programlisting>
    <screen>
<![CDATA[
int(1)
int(2)
int(3)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>list</function> und die Reihenfolge der Index-Definitionen</title>
    <simpara>
     Die Reihenfolge, in der die Indizes des von <function>list</function> zu
     verarbeitenden Arrays definiert werden, ist irrelevant.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
$foo = array(2 => 'a', 'foo' => 'b', 0 => 'c');
$foo[1] = 'd';
list($x, $y, $z) = $foo;
var_dump($foo, $x, $y, $z);
]]>
    </programlisting>
    <para>
     Erzeugt folgende Ausgabe (beachten Sie die Reihenfolge der Elemente
     verglichen mit der in <function>list</function> eingetragenen
     Reihenfolge):
    </para>
    <screen>
<![CDATA[
array(4) {
  [2]=>
  string(1) "a"
  ["foo"]=>
  string(1) "b"
  [0]=>
  string(1) "c"
  [1]=>
  string(1) "d"
}
string(1) "c"
string(1) "d"
string(1) "a"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>list</function> mit Schlüsseln</title>
    <simpara>
     Von PHP 7.1.0 an kann <function>list</function> nun ebenfalls explizite
     Schlüssel enthalten, die als beliebige Ausdrücke angegeben werden können.
     Die Kombination von Integer- und Zeichenkettenschlüsseln ist erlaubt;
     allerdings dürfen Elemente mit und ohne Schlüssel nicht kombiniert werden.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];
foreach ($data as ["id" => $id, "name" => $name]) {
    echo "id: $id, name: $name\n";
}
echo PHP_EOL;
list(1 => $zweites, 3 => $viertes) = [1, 2, 3, 4];
echo "$zweites, $viertes\n";
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
id: 1, name: Tom
id: 2, name: Fred

2, 4
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>each</function></member>
    <member><function>array</function></member>
    <member><function>extract</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
