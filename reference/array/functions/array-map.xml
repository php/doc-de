<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 348465 Maintainer: wiesemann Status: ready -->
<!-- CREDITS: tom -->
<refentry xml:id="function.array-map" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_map</refname>
  <refpurpose>Wendet eine Callback-Funktion auf die Elemente von Arrays an</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_map</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam><type>array</type><parameter>array1</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_map</function> gibt ein &array; zurück, das die Ergebnisse der
   Anwendung der <parameter>callback</parameter> Funktion auf den entsprechenden Index von
   <parameter>array1</parameter> (und <parameter>...</parameter>, wenn weitere Arrays angegeben wurden)
   als Callback-Argumente enthält.
   Die Anzahl Parameter, welche die Callback-Funktion
   <parameter>callback</parameter> akzeptiert, sollte der Anzahl der an
   <function>array_map</function> übergebenen Arrays entsprechen.
  </para>
  <para>
   Das zurückgelieferte Array erhält die Schlüssel des Array-Arguments nur,
   wenn genau ein Array übergeben wurde. Wird mehr als ein Array übergeben,
   hat das zurückgelieferte Array sequentielle Integer-Schlüssel.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Callback-Funktion, die für jedes Element in jedem Array
       aufgerufen werden soll.
      </para>
      <para>
       &null; kann als Wert an <parameter>callback</parameter> übergeben werden,
       um eine zip-Operation auf mehrere Arrays durchzuführen.
       Wird nur <parameter>array1</parameter> übergeben,
       gibt <methodname>array_map</methodname> das Eingabe-Array zurück.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array1</parameter></term>
     <listitem>
      <para>
       Ein Array, auf das die <parameter>callback</parameter>-Funktion
       angewendet werden soll.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       Zusätzliche variable Liste von Array-Argumenten, auf die die
       <parameter>callback</parameter>-Funktion angewendet werden soll.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>array_map</function> gibt ein Array zurück, das die Ergebnisse der
   Anwendung der <parameter>callback</parameter> Funktion auf den entsprechenden Index von
   <parameter>array1</parameter> (und <parameter>...</parameter>, wenn weitere Arrays angegeben wurden)
   als Callback-Argumente enthält.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_map</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
function cube($n)
{
    return ($n * $n * $n);
}

$a = [1, 2, 3, 4, 5];
$b = array_map('cube', $a);
print_r($b);
?>
]]>
    </programlisting>
    <para>
     Dies speichert in <varname>$b</varname>:
    </para>
    <screen>
<![CDATA[
Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_map</function> mit einer Lambda-Funktion
    (seit PHP 5.3.0)</title>
    <programlisting role="php">
<![CDATA[
<?php

/* Seit PHP 5.3.0 */

$func = function($value) { return $value * 2; };

print_r(array_map($func, range(1, 5)));

?>
]]>
    </programlisting>
    <screen>
<![CDATA[
Array
(
    [0] => 2
    [1] => 4
    [2] => 6
    [3] => 8
    [4] => 10
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     <function>array_map</function> - Verwendung mehrerer Arrays
    </title>
    <programlisting role="php">
<![CDATA[
<?php
function show_Spanish($n, $m)
{
    return "Die Zahl {$n} heißt auf Spanisch {$m}";
}

function map_Spanish($n, $m)
{
    return [$n => $m];
}

$a = [1, 2, 3, 4, 5];
$b = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];

$c = array_map('show_Spanish', $a, $b);
print_r($c);

$d = array_map('map_Spanish', $a , $b);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
// Ausgabe von $c
Array
(
    [0] => Die Zahl 1 heißt auf Spanisch uno
    [1] => Die Zahl 2 heißt auf Spanisch dos
    [2] => Die Zahl 3 heißt auf Spanisch tres
    [3] => Die Zahl 4 heißt auf Spanisch cuatro
    [4] => Die Zahl 5 heißt auf Spanisch cinco
)

// Ausgabe von $d
Array
(
    [0] => Array
        (
            [1] => uno
        )

    [1] => Array
        (
            [2] => dos
        )

    [2] => Array
        (
            [3] => tres
        )

    [3] => Array
        (
            [4] => cuatro
        )

    [4] => Array
        (
            [5] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   Bei Verwendung von zwei oder mehr Arrays sollten diese gewöhnlich
   die gleiche Länge besitzen, da die Callback-Funktion parallel auf
   die entsprechenden Elemente angewandt wird.  Haben die Arrays
   unterschiedliche Längen, werden kürzere um leere Elemente
   erweitert, um mit der Länge des längsten übereinzustimmen.
  </para>
  <para>
   Eine interessante Anwendung dieser Funktion ist die Konstruktion
   eines Arrays bestehend aus Arrays, was mit &null; als Name der
   Callback-Funktion leicht realisiert werden kann.
  </para>
  <para>
   <example>
    <title>Durchführen einer zip-Operation von Arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = [1, 2, 3, 4, 5];
$b = ['eins', 'zwei', 'drei', 'vier', 'fünf'];
$c = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];

$d = array_map(null, $a, $b, $c);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => 1
            [1] => eins
            [2] => uno
        )

    [1] => Array
        (
            [0] => 2
            [1] => zwei
            [2] => dos
        )

    [2] => Array
        (
            [0] => 3
            [1] => drei
            [2] => tres
        )

    [3] => Array
        (
            [0] => 4
            [1] => vier
            [2] => cuatro
        )

    [4] => Array
        (
            [0] => 5
            [1] => fünf
            [2] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     &null; <parameter>callback</parameter> nur mit <parameter>array1</parameter>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$array = [1, 2, 3];
var_dump(array_map(null, $array));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_map</function> - mit String-Schlüsseln</title>
    <programlisting role="php">
<![CDATA[
<?php
$arr = ['stringkey' => 'value'];
function cb1($a) {
    return [$a];
}
function cb2($a, $b) {
    return [$a, $b];
}
var_dump(array_map('cb1', $arr));
var_dump(array_map('cb2', $arr, $arr));
var_dump(array_map(null,  $arr));
var_dump(array_map(null, $arr, $arr));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  ["stringkey"]=>
  array(1) {
    [0]=>
    string(5) "value"
  }
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "value"
    [1]=>
    string(5) "value"
  }
}
array(1) {
  ["stringkey"]=>
  string(5) "value"
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "value"
    [1]=>
    string(5) "value"
  }
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_filter</function></member>
    <member><function>array_reduce</function></member>
    <member><function>array_walk</function></member>
    <member>&seealso.callback;</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
