<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 310276 Maintainer: wiesemann Status: ready -->
<!-- CREDITS: tom -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>
  <refpurpose>Importiert Variablen eines Arrays in die aktuelle Symboltabelle</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter role="reference">var_array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>extract_type</parameter><initializer>EXTR_OVERWRITE</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter></methodparam>
  </methodsynopsis>
  <para>
   Diese Funktion wird verwendet, um Variablen eines Arrays in die
   aktuelle Symboltabelle zu importieren.
  </para>
  <para>
   Prüft jeden Schlüssel, ob dieser einen gültigen Variablennamen
   ergibt, und auch auf eventuelle Kollisionen mit existierenden
   Variablen in der Symboltabelle.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var_array</parameter></term>
     <listitem>
      <para>
       Ein assoziatives Array. Die Funktion behandelt Schlüssel als
       Variablennamen und Werte als Variablenwerte. Für jedes Paar
       Schlüssel/Wert wird - abhängig von den Parametern
       <parameter>extract_type</parameter> und
       <parameter>prefix</parameter> - eine Variable in der aktuellen
       Symboltabelle eingetragen.
      </para>
      <para>
       Sie müssen ein assoziatives Array verwenden, da ein numerisch
       indiziertes Array zu keinem Ergebnis führen wird, außer Sie
       benutzen <constant>EXTR_PREFIX_ALL</constant> oder
       <constant>EXTR_PREFIX_INVALID</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extract_type</parameter></term>
     <listitem>
      <para>
       Die Art, wie ungültige/numerische Schlüssel und Kollisionen behandelt
       werden, wird durch <parameter>extract_type</parameter> bestimmt. Die
       folgenden Werte sind erlaubt:
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           Im Falle einer Kollision wird die existierende Variable
           überschrieben.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           Im Falle einer Kollision wird die existierende Variable
           nicht überschrieben.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>Im Falle einer Kollision wird dem Variablennamen
          <parameter>prefix</parameter> vorangestellt.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           Allen Variablennamen wird <parameter>prefix</parameter>
           vorangestellt.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           Nur ungültigen/numerischen Variablennamen wird
           <parameter>prefix</parameter> vorangestellt.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Überschreibt die Variable nur, wenn sie bereits in der aktuellen
           Symboltabelle existiert, sonst geschieht nichts. Dies ist dann
           hilfreich, wenn Sie eine Liste mit gültigen Variablen definieren,
           und dann z.B. nur jene Variablen extrahieren, welche Sie aus
           $_REQUEST definiert haben.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Erstellt nur Variablennamen mit Präfix, wenn die Version ohne
           Präfix der selben Variable in der aktuellen Symboltabelle
           existiert.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>
           Extrahiert Variablen als Referenzen. Das heißt, dass die Werte der
           importierten Variablen noch immer auf die Werte des Parameters
           <parameter>var_array</parameter> referenzieren. Sie können diesen
           Flag alleine oder auch in Kombination mit einem anderen Flag verwenden,
           indem Sie Oder-Verknüpfungen im <parameter>extract_type</parameter>
           erstellen.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Ist <parameter>extract_type</parameter> nicht spezifiziert, so wird
       <constant>EXTR_OVERWRITE</constant> angenommen.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       Beachten Sie, dass <parameter>prefix</parameter> nur dann nötig ist,
       wenn <parameter>extract_type</parameter> <constant>EXTR_PREFIX_SAME</constant>,
       <constant>EXTR_PREFIX_ALL</constant>, <constant>EXTR_PREFIX_INVALID</constant>
       or <constant>EXTR_PREFIX_IF_EXISTS</constant> ist. Ist das Resultat trotz
       Präfix kein gültiger Variablenname, wird es nicht in die Symboltabelle
       importiert. Präfixe werden automatisch mit einem Unterstrich vom Schlüssel
       des Arrays getrennt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>extract</function> gibt die Anzahl erfolgreich in die
   Symboltabelle importierter Variablen zurück.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.3.0</entry>
       <entry>
        <constant>EXTR_REFS</constant> wurde hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>4.2.0</entry>
       <entry>
        <constant>EXTR_IF_EXISTS</constant> und
        <constant>EXTR_PREFIX_IF_EXISTS</constant> wurden hinzugefügt.
       </entry>
      </row>
      <row>
       <entry>4.0.5</entry>
       <entry>
        Diese Funktion gibt jetzt die Anzahl der extrahierten Variablen
        zurück. <constant>EXTR_PREFIX_INVALID</constant> wurde
        hinzugefügt. <constant>EXTR_PREFIX_ALL</constant> schließt
        numerische Variablen ebenfalls ein.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>extract</function>-Beispiel</title>
    <para>
     Eine mögliche Verwendung für <function>extract</function> ist der Import
     der Variablen in einem von <function>wddx_deserialize</function> gelieferten
     assoziativen Array in die Symboltabelle.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Annahme: $var_array ist ein von wddx_deserialize
   zurückgegebenes Array */

$groesse = "groß";
$var_array = array("farbe"   => "blau",
                   "groesse" => "mittel",
                   "form"    => "Kugel");
extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$farbe, $groesse, $form, $wddx_groesse\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
blau, groß, Kugel, mittel
]]>
    </screen>
    <para>
     <varname>$groesse</varname> wurde nicht überschrieben, da wir
     <constant>EXTR_PREFIX_SAME</constant> spezifiziert haben, was im Anlegen
     von <varname>$wddx_groesse</varname> endete. Wäre <constant>EXTR_SKIP</constant>
     spezifiziert worden, dann wäre <varname>$wddx_groesse</varname> nicht angelegt worden.
     <constant>EXTR_OVERWRITE</constant> hätte <varname>$groesse</varname> mit dem
     Wert "mittel" überschrieben, und <constant>EXTR_PREFIX_ALL</constant> hätte
     die neuen Variablen <varname>$wddx_farbe</varname>,
     <varname>$wddx_groesse</varname>, und <varname>$wddx_form</varname> angelegt.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Verwenden Sie <function>extract</function> nicht für nicht
    vertrauenswürdige Daten wie Benutzereingaben (d.h.
    <varname>$_GET</varname>, <varname>$_FILES</varname>, ...). Wenn
    Sie dies tun, z.B. weil Sie alten Code, der sich auf
    <link linkend="security.globals">register_globals</link> verlässt,
    vorübergehend ausführen wollen, so stellen Sie sicher, dass Sie
    einen nicht-überschreibenden <parameter>extract_type</parameter>-Wert
    wie <constant>EXTR_SKIP</constant> verwenden und seien Sie sich
    bewusst, dass Sie die Daten in der selben Reihenfolge importieren
    sollen, die in <link linkend="ini.variables-order">variables_order</link>
    in der <link linkend="ini">&php.ini;</link> angegeben wurde.
   </para>
  </warning>
  <note>
   <para>
    Wenn Sie <link linkend="security.globals">register_globals</link>
    aktiviert haben, Sie <function>extract</function> auf
    <varname>$_FILES</varname> anwenden und Sie 
    <constant>EXTR_SKIP</constant> angeben, könnten Sie über das
    Ergebnis überrascht sein.
   </para>
   <warning>
    <para>
     Dies ist keine empfohlene Vorgehensweise; es ist nur der Vollständigkeit
     halber hier dokumentiert. Die Nutzung von
     <link linkend="security.globals">register_globals</link> wird nicht
     mehr empfohlen und das Aufrufen von <function>extract</function>
     auf nicht vertrauenswürdigen Daten wie <varname>$_FILES</varname> ist,
     wie oben beschrieben, ein potenzielles Sicherheitsrisiko. Wenn Sie
     auf dieses Ergebnis stoßen, bedeutet das, dass Sie mindestens zwei
     schlechte Codierungs-Praktiken benutzen.
    </para>
   </warning>
   <programlisting role="php">
<![CDATA[
<?php

/* Annahmen: $testfile ist der Name einer hochgeladenen Datei,
   register_globals ist aktiviert */

var_dump($testfile);
extract($_FILES, EXTR_SKIP);
var_dump($testfile);
var_dump($testfile['tmp_name']);

?>
]]>
   </programlisting>
   <simpara>
    Sie werden wahrscheinlich folgende Ausgabe erwarten:
   </simpara>
   <screen>
<![CDATA[
string(14) "/tmp/phpgCCPX8"
array(5) {
  ["name"]=>
  string(10) "somefile.txt"
  ["type"]=>
  string(24) "application/octet-stream"
  ["tmp_name"]=>
  string(14) "/tmp/phpgCCPX8"
  ["error"]=>
  int(0)
  ["size"]=>
  int(4208)
}
string(14) "/tmp/phpgCCPX8"
]]>
   </screen>
   <simpara>
    Stattdessen erhalten Sie aber eine Ausgabe wie diese:
   </simpara>
   <screen>
<![CDATA[
string(14) "/tmp/phpgCCPX8"
string(14) "/tmp/phpgCCPX8"
string(1) "/"
]]>
   </screen>
   <para>
    Dies liegt daran, dass aufgrund der Aktivierung von
    <link linkend="security.globals">register_globals</link>
    <varname>$testfile</varname> bereits im globalen Scope existiert,
    wenn <function>extract</function> aufgerufen wird. Da
    <constant>EXTR_SKIP</constant> angegeben wurde, wird
    <varname>$testfile</varname> nicht mit den Inhalten des
    <constant>$_FILES</constant>-Arrays überschrieben und somit bleibt
    <varname>$testfile</varname> ein String.
    Da auf <link linkend="language.types.string.substr">Strings über die
    Array-Syntax zugegriffen werden kann</link> und der nicht-numerische
    String <literal>tmp_name</literal> als <literal>0</literal> interpretiert
    wird, versteht PHP <varname>$testfile['tmp_name']</varname>
    als <varname>$testfile[0]</varname>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
