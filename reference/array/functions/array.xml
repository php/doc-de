<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: simp Status: ready -->
<!-- CREDITS: tom -->
<refentry xml:id="function.array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array</refname>
  <refpurpose>Erstellt ein Array</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array</methodname>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Erstellt ein Array. Um mehr darüber zu erfahren, was ein Array
   ist, lesen Sie den Abschnitt zum
   <link linkend="language.types.array">Array-Typ</link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       Die Syntax "Index =&gt; Werte", durch Kommas getrennt, definiert
       Index und Werte. Index kann vom Typ String oder numerisch sein.
       Wird der Index weggelassen, erstellt die Funktion automatisch
       einen numerischen Index, der bei 0 beginnt. Ist der Index als
       Integer-Wert angegeben, wird der nächste generierte Index der
       größte Integer Index + 1. Beachten Sie, dass wenn zwei identische
       Indexe definiert sind, der letzte den ersten überschreibt. 
      </para>
      <para>
       Ein hinter dem letzten definierten Arrayeintrag angehängtes Komma
       ist zwar unüblich, aber dennoch gültige Syntax.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt ein den Parametern entsprechendes Array zurück. Mit dem
   <literal>=&gt;</literal> Operator können die Parameter indiziert werden.
   Um mehr darüber zu erfahren, was ein Array ist, lesen Sie den 
   Abschnitt zum <link linkend="language.types.array">Array-Typ</link>.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Das folgende Beispiel zeigt wie man ein zweidimensionales Array
   erstellt, wie man Schlüssel für assoziative Arrays festlegt, und
   wie man numerische Indizes in normalen Arrays überspringt und
   fortsetzt.
   <example>
    <title><function>array</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$fruits = array (
    "fruits"  => array("a" => "Orange", "b" => "Banane", "c" => "Apfel"),
    "numbers" => array(1, 2, 3, 4, 5, 6),
    "holes"   => array("erstes", 5 => "zweites", "drittes")
);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Automatischer Index mit <function>array</function><</title>
    <programlisting role="php">
<![CDATA[
<?php
$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);
print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
]]>
    </screen>
   </example>
  </para>
  <para>
   Beachten Sie, dass Index '3' doppelt definiert ist, und den letzten
   definierten Wert 13 behält. Index 4 wurde nach dem Index 8 definiert,
   und der nächste generierte Index (Wert 19) ist 9, da der größte Index
   8 war.
  </para>
  <para>
   Dieses Beispiel erstellt ein auf dem Index 1 basierendes Array.
   <example>
    <title>1-basierter Index mit <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$erstesquartal = array(1 => 'Januar', 'Februar', 'März');
print_r($erstesquartal);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [1] => Januar
    [2] => Februar
    [3] => März
)
]]>
    </screen>
   </example>
  </para>
  <para>
   Man kann, ebenso wie in Perl, einen Wert des Arrays innerhalb doppelter
   Anführungszeichen ansprechen. Jedoch muss man in PHP das Array in geschweifte
   Klammern einschließen.
   <example>
    <title>Auf ein Array innerhalb von doppelten Anführungszeichen zugreifen</title>
    <programlisting role="php">
<![CDATA[
<?php

$foo = array('bar' => 'baz');
echo "Hallo {$foo['bar']}!"; // Hallo baz!

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   <note>
    <para>
     <function>array</function> ist ein Sprahkonstrukt, mit
     dem man Arrays vorgeben kann und keine reguläre Funktion.
    </para>
   </note>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_pad</function></member>
    <member><function>list</function></member>
    <member><function>count</function></member>
    <member><function>range</function></member>
    <member>&foreach;</member>
    <member>The <link linkend="language.types.array">array</link> type</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
