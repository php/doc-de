<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334621 Maintainer: nobody Status: ready -->
<!-- CREDITS: tom -->
<refentry xml:id="function.array-merge" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_merge</refname>
  <refpurpose>Führt zwei oder mehr Arrays zusammen</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_merge</methodname>
   <methodparam><type>array</type><parameter>array1</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Fügt die Elemente von zwei oder mehr Arrays zusammen, indem die Werte
   des einen an das Ende des vorherigen angehängt werden. Das daraus
   resultierende Array wird zurückgegeben.
  </para>
  <para>
   Haben die angegebenen Arrays die selben alphanumerischen Schlüssel, dann
   überschreibt der spätere Wert den vorhergehenden. Falls die Arrays aber
   gleiche numerische Schlüssel enthalten, überschreibt der spätere Wert
   den ursprünglichen Wert <emphasis role="strong">nicht</emphasis> und wird
   stattdessen angehängt.
  </para>
  <para>
   Werte im Eingangsarray mit numerischen Schlüsseln werden im resultierenden
   Array mit aufsteigenden Schlüsseln, die bei Null beginnen, neu nummeriert.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array1</parameter></term>
     <listitem>
      <para>
       Erstes Array zum Zusammenfügen.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       Variable Liste von zusammenzufügenden Arrays.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt das resultierende Array zurück.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_merge</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$array1 = array("farbe" => "rot", 2, 4);
$array2 = array("a", "b", "farbe" => "grün", "form" => "trapezoid", 4);
$ergebnis = array_merge($array1, $array2);
print_r($ergebnis);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [farbe] => grün
    [0] => 2
    [1] => 4
    [2] => a
    [3] => b
    [form] => trapezoid
    [4] => 4
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ein einfaches <function>array_merge</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$array1 = array();
$array2 = array(1 => "daten");
$ergebnis = array_merge($array1, $array2);
?>
]]>
    </programlisting>
    <para>
     Vergessen Sie nicht, dass numerische Schlüssel neu nummeriert werden!
    </para>
    <screen role="php">
<![CDATA[
Array
(
    [0] => daten
)
]]>
    </screen>
    <para>
     Falls Array-Elemente des zweiten Arrays an das erste Array angehängt
     werden sollen, ohne dass Elemente des ersten Arrays überschrieben werden
     und neu indexiert wird, kann der Vereinigungs-Operator
     <literal>+</literal> verwendet werden:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$array1 = array(0 => 'null_a', 2 => 'zwei_a', 3 => 'drei_a');
$array2 = array(1 => 'eins_b', 3 => 'drei_b', 4 => 'vier_b');
$ergebnis = $array1 + $array2;
var_dump($ergebnis);
?>
]]>
    </programlisting>
    <para>
     Die Schlüssel des ersten Arrays werden beibehalten.
     Falls ein Schlüssel in beiden Arrays vorkommt, wird das Element des
     ersten Arrays verwendet und das entsprechende Element des zweiten Arrays
     ignoriert.
    </para>
    <screen role="php">
<![CDATA[
array(5) {
  [0]=>
  string(6) "null_a"
  [2]=>
  string(5) "zwei_a"
  [3]=>
  string(7) "drei_a"
  [1]=>
  string(5) "eins_b"
  [4]=>
  string(6) "vier_b"
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_merge</function> mit nicht-Array-Typen</title>
    <programlisting role="php">
<![CDATA[
<?php
$anfang = 'foo';
$ende = array(1 => 'bar');
$ergebnis = array_merge((array)$anfang, (array)$ende);
print_r($ergebnis);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
    <![CDATA[
    Array
    (
        [0] => foo
        [1] => bar
    )
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_merge_recursive</function></member>
    <member><function>array_replace</function></member>
    <member><function>array_combine</function></member>
    <member><link linkend="language.operators.array">array operators</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
