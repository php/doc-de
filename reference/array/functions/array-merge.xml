<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: nobody Status: ready -->
<!-- CREDITS: tom -->
  <refentry xml:id="function.array-merge" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>array_merge</refname>
    <refpurpose>Führt ein oder mehrere Arrays zusammen</refpurpose>
   </refnamediv>
   <refsect1 role="description">
    &reftitle.description;
     <methodsynopsis>
      <type>array</type><methodname>array_merge</methodname>
      <methodparam><type>array</type><parameter>array1</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>array2</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_merge</function> fügt die Elemente von einem oder
     mehreren Arrays zusammen, indem die Werte des einen an das Ende des
     anderen angehängt werden. Das daraus resultierende Array wird
     zurückgegeben.
    </para>
    <para>
     Haben die angegebenen Arrays die selben String-Schlüssel, dann
     wird der hintere Wert dieses Schlüssels den vorhergehenden
     überschreiben. Haben die Arrays den gleichen numerischen
     Schlüssel, dann wird der hintere Wert den vorhergehenden <emphasis
     role="strong">nicht</emphasis> überschreiben, sondern angehängt.
    </para>
    <para>
     Falls nur ein Array angegeben und dieses numerisch indiziert ist, wird das
     Array fortlaufend neu nummeriert.
    </para>
    <para>    
     <example>
      <title><function>array_merge</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$array1 = array("farbe" => "rot", 2, 4);
$array2 = array("a", "b", "farbe" => "grün", "form" => "trapezoid", 4);
$result = array_merge($array1, $array2);
print_r($result);
?>
]]>
      </programlisting>
      <para>
       Nun ist <literal>$result</literal>:
      </para>
      <screen role="php">
<![CDATA[
Array
(
    [farbe] => grün
    [0] => 2
    [1] => 4
    [2] => a
    [3] => b
    [form] => trapezoid
    [4] => 4
)
]]>
      </screen>
     </example>
    </para>
    <para>
     <example>
      <title>Einfaches <function>array_merge</function> Beispiel</title>
      <programlisting role="php">
<![CDATA[
<?php
$array1 = array();
$array2 = array(1 => "data");
$result = array_merge($array1, $array2);
?>
]]>
      </programlisting>
      <para>
       Vergessen Sie nicht, dass numerische Schlüssel neu numeriert werden!
      </para>
      <screen role="php">
<![CDATA[
Array
(
    [0] => data
)
]]>
      </screen>
      <para>
       Wenn Sie die Arrays komplett erhalten und nur eines an das andere
       anhängen wollen, verwenden Sie den Operator <literal>+</literal>:
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$array1 = array();
$array2 = array(1 => "data");
$result = $array1 + $array2;
?>
]]>
      </programlisting>
      <para>
       Der numerische Schlüssel sowie die Assoziation bleiben erhalten.
      </para>
      <screen role="php">
<![CDATA[
Array
(
    [1] => data
)
]]>
      </screen>
     </example>
    </para>
    <warning>
     <para>
      Das Verhalten von <function>array_merge</function> wurde in PHP 5 geändert.
      Anders als in PHP 4 akzeptiert <function>array_merge</function> jetzt nur
      noch Parameter vom Typ <type>array</type>. Man kann jedoch Typumwandlung
      verwenden, um andere Typen zusammenzuführen. Schauen Sie für Details in das
      Beispiel unten.
     </para>
     <para>
      <example>
       <title><function>array_merge</function> PHP 5 Beispiel</title>
       <programlisting role="php">
<![CDATA[
<?php
$beginning = 'foo';
$end = array(1 => 'bar');
$result = array_merge((array)$beginning, (array)$end);
print_r($result);
?>
]]>
       </programlisting>
       &example.outputs;
       <screen role="php">
<![CDATA[
Array
(
    [0] => foo
    [1] => bar
)
]]>
       </screen>
      </example>
     </para>
    </warning>
    <para>
     Siehe auch <function>array_merge_recursive</function>,
     <function>array_combine</function> und
     <link linkend="language.operators.array">array operators</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
