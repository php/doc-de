<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331477 Maintainer: cmb Status: ready -->

<refentry xml:id="function.array-walk-recursive" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_walk_recursive</refname>
  <refpurpose>Wendet eine Benutzerfunktion rekursiv auf jedes Element eines 
   Arrays an</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_walk_recursive</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>userdata</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Wendet die mittels <parameter>callback</parameter> angegebene
   Benutzerfunktion auf jedes Element von <parameter>array</parameter>
   an. Diese Funktion steigt tiefer in Arrays hinab.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Das Eingabe-Array.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Üblicherweise benötigt <parameter>callback</parameter> zwei Parameter.
       Der Wert von <parameter>array</parameter> wird als erster übergeben, und
       der Schlüssel/Index als zweites.
      </para>
      <note>
       <para>
        Falls <parameter>callback</parameter> mit den tatsächlichen Werten des
        Arrays arbeiten muss, muss man den ersten Parameter von
        <parameter>callback</parameter> als
        <link linkend="language.references">Referenz</link> übergeben. Dann werden
        alle Änderungen an den Elementen im ursprünglichen Array selbst vorgenommen.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>userdata</parameter></term>
     <listitem>
      <para>
       Ist der optionale Parameter <parameter>userdata</parameter> angegeben, so
       wird er als dritter Parameter an die Funktion
       <parameter>callback</parameter> übergeben.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_walk_recursive</function> Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$sweet = array('a' => 'Apfel', 'b' => 'Banane');
$fruits = array('süß' => $sweet, 'sauer' => 'Zitrone');

function test_print($item, $key) 
{
    echo "$key beinhaltet $item\n";
}

array_walk_recursive($fruits, 'test_print');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
a beinhaltet Apfel
b beinhaltet Banane
sauer beinhaltet Zitrone
]]>
    </screen>
    <para>
     Sie werden bemerken, dass der Schlüssel '<literal>süß</literal>' nicht angezeigt wird. Jeder
     Schlüssel, der ein <type>array</type> beinhaltet, wird nicht an die 
     Funktion übergeben.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_walk</function></member>
    <member>&seealso.callback;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->