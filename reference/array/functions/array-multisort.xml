<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./de/functions/array.xml, last change in rev 1.8 -->
<!-- last change to 'array-multisort' in en/ tree in rev 1.11 -->
<!-- EN-Revision: 1.1 Maintainer: tom Status: ready -->
<!-- OLD-Revision: 1.173/EN.1.11 -->
  <refentry id="function.array-multisort">
   <refnamediv>
    <refname>array_multisort</refname>
    <refpurpose>Sortiert mehrere oder multidimensionale Arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>bool</type><methodname>array_multisort</methodname>
      <methodparam><type>array</type><parameter>ar1</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_multisort</function> wird zum Sortieren von
     entweder mehreren Arrays auf einmal, oder eines
     multidimensionalen Arrays (entsprechend einer von mehreren
     Dimensionen) benutzt. Bei der Sortierung werden die
     Schlüsselassoziationen beibehalten.
    </para>
    <para>
     Die angegebenen Arrays werden als Spalten einer Tabelle
     behandelt, welche nach Reihen sortiert werden - ähnlich der SQL
     Klausel ORDER BY.  Das erste Array ist auch das erste in der
     Sortierreihenfolge. Die in diesem Array gleichen Zeilen (Werte)
     werden anhand des nächsten angegebenen Arrays sortiert, usw.
    </para>
    <para>
     Die Struktur der Argumente ist etwas ungewöhnlich, aber
     flexibel. Das aller erste Argument muss ein Array sein. Die
     nachfolgenden Argumente können entweder ein Array oder eines der
     folgenden Sortierflags sein.
    </para>
    <para>
     Flags für Sortierreihenfolge:
     <itemizedlist>
      <listitem>
       <simpara>
	SORT_ASC - sortiere in aufsteigender Reihenfolge
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	SORT_DESC - sortiere in absteigender Reihenfolge
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Flags für Sortiertypen:
     <itemizedlist>
      <listitem>
       <simpara>SORT_REGULAR - vergleiche Felder normal</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_NUMERIC - vergleiche Felder numerisch</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_STRING - vergleiche Felder als Strings</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Es kann nur ein Sortierflag des selben Typs nach jedem Array
     spezifiziert werden. Sortierflags nach einem Array Argument
     gelten nur für dieses Array, und werden vor jedem neuen Array
     Argument zu den Defaultflags SORT_ASC und SORT_REGULAR
     zurückgesetzt.
    </para>
    <para>
     &return.success;
    </para>
    <para>
     <example>
      <title>Sortieren mehrerer Arrays</title>
      <programlisting role="php">
<![CDATA[
$ar1 = array ("10", 100, 100, "a");
$ar2 = array (1, 3, "2", 1);
array_multisort ($ar1, $ar2);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     In diesem Beispiel enthält das erste Array nach dem Sortieren 10,
     "a", 100, 100. Das zweite Array wird 1, 1, "2", 3 enthalten. Die
     Einträge des zweiten Arrays, welche den identischen Einträgen des
     ersten Arrays entsprechen (100 und 100) wurden ebenfalls
     sortiert.
    </para>
    <para>
     <example>
      <title>Sortieren eines mehrdimensionalen Arrays</title>
      <programlisting role="php">
<![CDATA[
$ar = array (array ("10", 100, 100, "a"), array (1, 3, "2", 1));
array_multisort ($ar[0], SORT_ASC, SORT_STRING,
                 $ar[1], SORT_NUMERIC, SORT_DESC);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     In diesem Beispiel enthält das erste Array nach dem Sortieren 10,
     100, 100, "a" (wurde als Strings in aufsteigender Reihenfolge
     sortiert), und das zweite enthält 1, 3, "2", 1 (numerisch und
     absteigender Reihenfolge sortiert).
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
