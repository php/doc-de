<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 647d5c50e3b6c103a3efdb578fd227f8b923399d Maintainer: cmb Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 755faca201b5ba15e23735f21ed056b47d954398 Reviewer: samesch -->
<!-- CREDITS: tom -->
<refentry xml:id="function.range" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>range</refname>
  <refpurpose>Erstellt ein Array mit einem Bereich von Elementen</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>range</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type><type>float</type></type><parameter>start</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>int</type><type>float</type></type><parameter>end</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>float</type></type><parameter>step</parameter><initializer>1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Erstellt ein Array mit einem Bereich von Elementen.
  </para>
  <para>
   Wenn sowohl <parameter>start</parameter> als auch
   <parameter>end</parameter> vom Typ <type>string</type> sind und
   <parameter>step</parameter> vom Typ <type>int</type> ist, ist das erzeugte
   Array eine Folge von Bytes. Andernfalls ist das erzeugte Array eine Folge
   von Zahlen.
  </para>
  <para>
   Wenn der <parameter>start</parameter> kleiner ist als
   <parameter>end</parameter>, ist die Folge aufsteigend, andernfalls ist sie
   absteigend.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>start</parameter></term>
     <listitem>
      <para>
       Der erste Wert der Folge.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>end</parameter></term>
     <listitem>
      <para>
       Der letzte mögliche Wert der Folge.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>step</parameter></term>
     <listitem>
      <para>
       <parameter>step</parameter> gibt an, wie weit die einzelnen Werte
       der erzeugten Folge auseinander liegen.
      </para>
      <para>
       <parameter>step</parameter> kann für absteigende Folgen negativ sein.
      </para>
      <para>
       Wenn <parameter>step</parameter> ein <type>float</type> ohne
       Nachkommastelle ist, wird er als <type>int</type> interpretiert.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt eine Folge von Elementen als <type>Array</type> zurück, beginnend mit
   <parameter>start</parameter> und endend mit <parameter>end</parameter>,
   wobei die einzelnen Werte der Folge einen Abstand von
   <parameter>step</parameter> voneinander haben.
  </para>
  <para>
   Das letzte Element des zurückgegebenen Arrays ist in Abhängigkeit vom Wert
   von <parameter>step</parameter> entweder <parameter>end</parameter> oder
   das vorherige Element der Folge.
  </para>
  <para>
   Wenn sowohl <parameter>start</parameter> als auch <parameter>end</parameter>
   vom Typ <type>string</type> sind und <parameter>step</parameter> vom Typ
   <type>int</type> ist, besteht das erzeugte Array aus einer Folge von Bytes,
   in der Regel lateinische <abbrev>ASCII</abbrev>-Zeichen.
  </para>
  <para>
   Wenn mindestens einer der Parameter <parameter>start</parameter>,
   <parameter>end</parameter> oder <parameter>step</parameter> vom Typ
   <type>float</type> ist, ist das erzeugte Array eine Folge vom Typ
   <type>float</type>.
  </para>
  <para>
   Andernfalls ist das erzeugte Array eine Folge vom Typ <type>int</type>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     Wenn <parameter>step</parameter> <literal>0</literal> ist, wird ein
     <classname>ValueError</classname> geworfen.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Wenn <parameter>start</parameter>, <parameter>end</parameter> oder
     <parameter>step</parameter> nicht <function>is_finite</function> ist,
     wird ein <classname>ValueError</classname> geworfen.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Wenn <parameter>step</parameter> negativ ist, aber der erzeugte Bereich
     größer wird (&dh; <code>$start &lt;= $end</code>), wird ein
     <classname>ValueError</classname> geworfen.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Wenn <parameter>start</parameter> oder <parameter>end</parameter> die
     leere Zeichenkette <literal>''</literal> ist, wird ein
     <constant>E_WARNING</constant> ausgegeben und die leere Zeichenkette wird
     als <literal>0</literal> interpretiert.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Wenn <parameter>start</parameter> oder <parameter>end</parameter> eine
     nicht-<link linkend="language.types.numeric-strings">numerische Zeichenkette</link>
     mit mehr als einem Byte ist, wird ein <constant>E_WARNING</constant>
     ausgegeben.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Wenn <parameter>start</parameter> oder <parameter>end</parameter> eine
     Zeichenkette ist, die implizit in den Typ <type>int</type> umgewandelt
     wird, weil der andere Begrenzungswert eine Zahl ist, wird ein
     <constant>E_WARNING</constant> ausgegeben.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Wenn <parameter>step</parameter> vom Typ <type>float</type> ist, und
     <parameter>start</parameter> und <parameter>end</parameter>
     nicht-<link linkend="language.types.numeric-strings">numerische Zeichenketten</link>
     sind, wird ein <constant>E_WARNING</constant> ausgegeben.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Wenn sowohl <parameter>start</parameter> als auch
       <parameter>end</parameter> Zeichenketten sind, erzeugt
       <function>range</function> nun immer ein <type>Array</type> aus Bytes.
       Zuvor wurde, wenn einer der Begrenzungswerte eine numerische
       Zeichenkette war, der andere Begrenzungswert implizit in
       <type>int</type> umgewandelt.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Wenn <parameter>start</parameter> oder <parameter>end</parameter> eine
       Zeichenkette ist, die implizit in <type>int</type> umgewandelt wird,
       weil der andere Begrenzungswert eine Zahl ist, wird nun ein
       <constant>E_WARNING</constant> ausgegeben.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Wenn <parameter>start</parameter> oder <parameter>end</parameter> eine
       nicht-numerische Zeichenkette mit mehr als einem Byte ist, wird nun ein
       <constant>E_WARNING</constant> ausgegeben.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Wenn <parameter>start</parameter> oder <parameter>end</parameter> die
       leere Zeichenkette ist, wird nun ein <constant>E_WARNING</constant>
       ausgegeben.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Wenn <parameter>step</parameter> ein <type>float</type> ohne
       Nachkommastelle ist, wird er als <type>int</type> interpretiert.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Wenn <parameter>step</parameter> negativ ist, wird nun ein
       <classname>ValueError</classname> ausgelöst, wenn ein aufsteigender
       Bereich erzeugt wird.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Wenn <parameter>step</parameter> nicht endlich ist, wird nun ein
       <classname>ValueError</classname> geworfen.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Wenn <parameter>start</parameter> oder <parameter>end</parameter> ein
       <type>Array</type>, <type>Objekt</type> oder eine <type>Ressource</type>
       ist, wird nun ein <classname>TypeError</classname> geworfen; zuvor
       wurden diese Werte implizit in <type>int</type> umgewandelt.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>range</function>-Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
echo implode(', ', range(0, 12)), PHP_EOL;

echo implode(', ', range(0, 100, 10)), PHP_EOL;

echo implode(', ', range('a', 'i')), PHP_EOL;

echo implode(', ', range('c', 'a')), PHP_EOL;

echo implode(', ', range('A', 'z')), PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100
a, b, c, d, e, f, g, h, i
c, b, a
A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, [, \, ], ^, _, `, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>shuffle</function></member>
    <member><function>array_fill</function></member>
    <member>&foreach;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
