<?xml version="1.0" encoding="utf-8"?> 
<!-- $Revision$ -->
<!-- EN-Revision: 343711 Maintainer: cmb Status: ready -->
<!-- CREDITS: tom, jumpa -->

<refentry xml:id="function.count" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>count</refname>
  <refpurpose>Zählt alle Elemente eines Arrays oder etwas in einem Objekt</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>count</methodname>
   <methodparam><type>mixed</type><parameter>array_or_countable</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>COUNT_NORMAL</initializer></methodparam>
  </methodsynopsis>
  <para>
   Zählt alle Elemente eines Arrays oder etwas in einem Objekt.
  </para>
  <para>
   Wenn Sie die <link linkend="ref.spl">SPL</link> installiert haben,
   können Sie in Objekten eine <function>count</function>-Funktion
   nutzen, indem Sie das Interface <classname>Countable</classname>
   implementieren. Das Interface hat exakt eine Methode, nämlich
   <methodname>Countable::count</methodname>, die den Rückgabewert der Funktion
   <function>count</function> zurückliefert.
  </para>
  <para>
   In der Sektion <link linkend="language.types.array">Arrays</link>
   finden Sie eine detaillierte Erklärung, wie Arrays in PHP
   implementiert sind und wie sie benutzt werden.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array_or_countable</parameter></term>
     <listitem>
      <para>
       Ein Array oder <classname>Countable</classname> Objekt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Wenn der optionale Parameter <parameter>mode</parameter> auf 
       <constant>COUNT_RECURSIVE</constant> (oder 1) gesetzt ist, wird 
       <function>count</function> rekursiv durch das Array zählen.
       Dies kann besonders nützlich sein, um alle Elemente eines 
       mehrdimensionalen Arrays zu zählen.
      </para>
      <caution>
       <para>
        <function>count</function> kann Rekursion erkennen, um eine
        Endlosschleife zu vermeiden, wird aber jedes Mal, wenn es das tut, ein
        <constant>E_WARNING</constant> erzeugen (im Fall, dass das Array sich
        selbst mehr als einmal enthält), und gibt dann eine höhere Anzahl zurück
        als möglicherweise erwartet.
       </para>
      </caution>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Liefert die Anzahl von Elementen in <parameter>array_or_countable</parameter>.
  </para>
  <para>
   Ist der Parameter kein Array oder Objekt mit implementiertem
   <literal>Countable</literal> Interface, wird <literal>1</literal>
   zurückgegeben. Es besteht eine Ausnahme, wenn <parameter>array_or_countable</parameter>
   &null; ist, wird <literal>0</literal> zurückgegeben.
  </para>
  <caution>
   <para>
    <function>count</function> gibt 0 zurück, wenn die Variable nicht
    gesetzt ist, aber sie gibt ebenfalls 0 zurück, wenn die Variable als 
    leeres Array initialisiert wurde. Verwenden Sie <function>isset</function>
    um zu testen, ob eine Variable gesetzt ist.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples; 
  <para>
   <example>
    <title><function>count</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$a[0] = 1;
$a[1] = 3;
$a[2] = 5;
var_dump(count($a));

$b[0] = 7;
$b[5] = 9;
$b[10] = 11;
var_dump(count($b));

var_dump(count(null));

var_dump(count(false));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(3)
int(3)

Warning: count(): Parameter must be an array or an object that implements Countable in … on line 12 // as of PHP 7.2
int(0)

Warning: count(): Parameter must be an array or an object that implements Countable in … on line 14 // as of PHP 7.2
int(1)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Rekursives <function>count</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$food = array('Obst' => array('Orange', 'Banane', 'Apfel'),
              'Gemüse' => array('Karotte', 'Kohl', 'Erbse'));

// rekursiv zählen
echo count($food, COUNT_RECURSIVE); // gibt 8 aus

// normales zählen
echo count($food); // gibt 2 aus

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.2.0</entry>
      <entry>
       <function>count</function> erzeugt nun eine Warnung für ungültige
       zählbare Typen, die an den
       <parameter>array_or_countable</parameter>-Parameter übergeben wurden.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>is_array</function></member>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><function>strlen</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
