<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
 <reference id="ref.sockets">
  <title>Socket Funktionen</title>
  <titleabbrev>Sockets</titleabbrev>

  <partintro>
   &warn.experimental;
   <simpara>
    Die Socket-Erweiterung stellt eine hardwarenahe Schnittstelle
    zu den Datenaustauschfunktionen einer Socket-Verbindung zur
    Verfügung und bietet die Möglichkeit, entweder als Socket-Server
    oder als Client zu agieren.
   </simpara>
   <para>
    Die hier beschriebenen Socket Funktionen sind Teil einer PHP
    Erweiterung, die beim Kompilieren mit der Option<option
    role="configure">--enable-sockets</option> beim Befehl
    <command>configure</command> eingebunden werden müssen.
   </para>
   <para>
    Für eine allgemeinere clientseitige Socket Schnittstelle siehe
    <function>fsockopen</function> und
    <function>pfsockopen</function>.
   </para>
   <para>
    Wenn man diese Funktionen benutzt, darf man nicht vergessen,
    dass, obwohl viele der Funktionen gleichlautende Namen wie ihre
    Entsprechungen in C haben, sie dennoch oft unterschiedliche
    Deklarationen haben. Bitte lesen Sie die Deklarationen, um
    Verwirrung zu vermeiden.
   </para>
   <para>
    Das heisst, wem Socketprogrammierung fremd ist, der findet eine
    grosse Menge nützlicher Materialien in den entsprechenden Unix
    manpages und es gibt jede Menge von Tutorials und Informationen über
    Socketprogrammierung in C im Internet. Vieles davon kann mit leichten
    Änderungen für die Socketprogrammierung mit PHP benutzt werden.
   </para>
   <para>
    <example>
     <title>Socket Beispiel: Einfacher TCP/IP Server</title>
     <para>
      Dieses Beispiel zeigt einen einfachen Echo-Server. Passen Sie
      die Variablen <varname>address</varname> und
      <varname>port</varname> an Ihre Systemumgebung an und führen
      Sie das Skript aus. Dann können Sie sich mit einem Befehl wie:
      <command>telnet 192.168.1.53 10000</command> (bei dem adress
      und port an Ihre Umgebung angepasst ist) mit dem Server
      verbinden. Alles, was Sie eingeben, wird an den Server geschickt
      und von diesem wieder an Sie zurückgegeben. Um die Verbindung
      zu trennen, geben sie 'quit' ein.
     </para>
     <programlisting role="php">
&lt;?php
error_reporting (E_ALL);

/* Warten auf Verbindungen */
set_time_limit (0);

$address = '192.168.1.53';
$port = 10000;

if (($sock = socket (AF_INET, SOCK_STREAM, 0)) &lt; 0) {
    echo "socket() fehlgeschlagen: Grund: " . strerror ($sock) . "\n";
}

if (($ret = bind ($sock, $address, $port)) &lt; 0) {
    echo "bind() fehlgeschlagen: Grund: " . strerror ($ret) . "\n";
}

if (($ret = listen ($sock, 5)) &lt; 0) {
    echo "listen() fehlgeschlagen: Grund: " . strerror ($ret) . "\n";
}

do {
    if (($msgsock = accept_connect($sock)) &lt; 0) {
        echo "accept_connect() fehlgeschlagen: Grund: " . strerror ($msgsock) . "\n";
        break;
    }
    do {
        $buf = '';
        $ret = read ($msgsock, $buf, 2048);
        if ($ret &lt; 0) {
            echo "read() fehlgeschlagen: Grund: " . strerror ($ret) . "\n";
            break 2;
        }
        if ($ret == 0) {
            break 2;
        }
        $buf = trim ($buf);
        if ($buf == 'quit') {
            close ($msgsock);
            break 2;
        }
        $talkback = "PHP: Du sagtest '$buf'.\n";
        write ($msgsock, $talkback, strlen ($talkback));
        echo "$buf\n";
    } while (true);
    close ($msgsock);
} while (true);

close ($sock);
?>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Socket Beispiel: Einfacher TCP/IP Client</title>
     <para>
      Dieses Beispiel zeigt einen einfachen HTTP-Client. Er verbindet sich
      mit einer Seite, schickt einen HEAD-Request, gibt die Antwort zurueck
      und beendet das Skript.
     </para>
     <programlisting>
&lt;?php
error_reporting (E_ALL);

echo "&lt;h2>TCP/IP Verbindung&lt;/h2>\n";

/* Die Portnummer des WWW Service holen. */
$service_port = getservbyname ('www', 'tcp');

/* Die IP-Adresse des Zielhosts holen. */
$address = gethostbyname ('www.example.com');

/* Eine TCP/IP Socketverbindung aufbauen. */
$socket = socket (AF_INET, SOCK_STREAM, 0);
if ($socket &lt; 0) {
    echo "socket() fehlgeschlagen: Grund: " . strerror ($socket) . "\n";
} else {
    "socket() ausgefuehrt: " . strerror ($socket) . "\n";
}

echo "Verbindungsversuch mit '$address' on port '$service_port'...";
$result = connect ($socket, $address, $service_port);
if ($result &lt; 0) {
    echo "connect() fehlgeschlagen.\nGrund: ($result) " . strerror($result) . "\n";
} else {
    echo "OK.\n";
}

$in = "HEAD / HTTP/1.0\r\n\r\n";
$out = '';

echo "HTTP HEAD request senden...";
write ($socket, $in, strlen ($in));
echo "OK.\n";

echo "Antwort lesen:\n\n";
while (read ($socket, $out, 2048)) {
    echo $out;
}

echo "Socketverbindung schliessen...";
close ($socket);
echo "OK.\n\n";
?>
      </programlisting>
     </example>
    </para>
  </partintro>

&reference.sockets.functions;

 </reference>
 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
 
