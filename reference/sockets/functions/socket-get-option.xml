<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338330 Maintainer: nobody Status: ready -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.socket-get-option">
 <refnamediv>
  <refname>socket_get_option</refname>
  <refpurpose>Holt die Socket-Optionen für einen Socket </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>socket_get_option</methodname>
   <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
   <methodparam><type>int</type><parameter>level</parameter></methodparam>
   <methodparam><type>int</type><parameter>optname</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>socket_get_option</function> gibt den Wert der Option zurück,
   die im Parameter <parameter>optname</parameter> für den Socket
   <parameter>socket</parameter> angegeben wurde.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>socket</parameter></term>
     <listitem>
      <para>
       Ein gültiger Socket-Deskriptor, der von der Funktion <function>socket_create</function>
       oder <function>socket_accept</function> erzeugt wurde.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>level</parameter></term>
     <listitem>
      <para>
       Der Parameter <parameter>level</parameter> enthält die Protokollebene,
       für die die Option gilt. Beispiel: Um Optionen auf der Socketebene
       abzufragen würde <parameter>level</parameter> den Wert <constant>SOL_SOCKET</constant>
       enthalten. Andere Ebenen, etwa <constant>TCP</constant>, können abgefragt werden, indem man
       die Protokollnummer dieser Ebene angibt. Protokollnummern können mit
       einem Aufruf von <function>getprotobyname</function> ermittelt werden.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>optname</parameter></term>
     <listitem>
      <table>
       <title>Mögliche Socket-Optionen</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Option</entry>
          <entry>Beschreibung</entry>
          <entry>Typ</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>SO_DEBUG</entry>
          <entry>
           Gibt an, ob Debug-Informationen mitgeschrieben wurden.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_BROADCAST</entry>
          <entry>
           Gibt an, ob die Übermittlung von Rundsende-Nachrichten unterstützt wird.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_REUSEADDR</entry>
          <entry>
           Gibt an, ob lokale Adressen wiederverwendet werden können.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_KEEPALIVE</entry>
          <entry>
           Gibt an, ob Verbindungen durch periodische Aussendungen von
           Nachrichten aufrecht erhalten werden. Falls der verbundene Socket
           nicht auf diese Nachrichten antworten kann, wird die Verbindung
           u diesen Socket schreiben, nterbrochen und Prozesse, die auferhalten
           ein SIGPIPE-Signal.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_LINGER</entry>
          <entry>
           <para>
            Gibt an, ob der <parameter>socket</parameter> einen Aufruf von
            <function>socket_close</function> verzögert, falls noch Daten
            vorhanden sind. In der Standardeinstellung versucht ein Socket vor
            dem Schließen, alle noch nicht gesendeten Daten zu übermitteln. Im
            Falle eines verbindungsorientierten Sockets, wartet
            <function>socket_close</function> auf die Empfangsbestätigung seiner
            Gegenstelle.
           </para>
           <para>
            Falls <varname>l_onoff</varname> von 0 verschieden und
            <varname>l_linger</varname> gleich 0 ist, werden  alle noch nicht
            gesendeten Daten verworfen, und bei einem verbindungsorientierten
            Socket das Signal RST (Reset) an die Gegenstelle gesendet.
           </para>
           <para>
            Andererseits, falls sowohl <varname>l_onoff</varname> als auch
            <varname>l_linger</varname> von 0 verschieden sind, blockiert der
            Aufruf von <function>socket_close</function> den Socket so lange,
            bis entweder alle Daten gesendet sind oder das Zeitlimit erreicht
            ist, das in <varname>l_linger</varname> gesetzt wurde. Wenn der
            Socket auf nicht-blockieren gesetzt ist, schlägt
            <function>socket_close</function> fehl und gibt einen Fehler zurück.
           </para>
          </entry>
          <entry>
           <type>array</type>. Das Array enthält zwei Schlüssel:
           <varname>l_onoff</varname> und
           <varname>l_linger</varname>.
          </entry>
         </row>
         <row>
          <entry>SO_OOBINLINE</entry>
          <entry>
           Gibt an, ob <parameter>socket</parameter> die Übertragung von
           bandexternen Daten in der Reihenfolge überträgt, wie sie auftreten.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_SNDBUF</entry>
          <entry>
           Gibt die Größe des Sendepuffers zurück.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_RCVBUF</entry>
          <entry>
           Gibt die Größe des Empfangspuffers zurück.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_ERROR</entry>
          <entry>
           Gibt den Fehlerstatus zurück und löscht ihn.
          </entry>
          <entry>
           <type>int</type> (dieser Wert kann nicht von
           <function>socket_set_option</function> gesetzt werden.)
          </entry>
         </row>
         <row>
          <entry>SO_TYPE</entry>
          <entry>
           Gibt den Typ von <parameter>socket</parameter> zurück (z. B.
           <constant>SOCK_STREAM</constant>).
          </entry>
          <entry>
           <type>int</type> (dieser Wert kann nicht von
           <function>socket_set_option</function> gesetzt werden.)
          </entry>
         </row>
         <row>
          <entry>SO_DONTROUTE</entry>
          <entry>
           Gibt an, ob ausgehende Nachrichten das standardmässige Routing
           umgehen.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_RCVLOWAT</entry>
          <entry>
           Gibt die Mindestanzahl Bytes an, die <parameter>socket</parameter>
           bei einer Empfangsoperation verarbeiten soll.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_RCVTIMEO</entry>
          <entry>
           Gibt den Wert der Zeitspanne bis zu einer Zeitüberschreitung
           bei Empfangsoperationen an.
          </entry>
          <entry>
           <type>array</type>. Das Array enthält zwei Schlüssel:
           <varname>sec</varname>, den Sekunden-Anteil der Zeitspanne und
           <varname>usec</varname>, den Mikrosekunden-Anteil der Zeitspanne bis
           zu einer Zeitüberschreitung.
          </entry>
         </row>
         <row>
          <entry>SO_SNDTIMEO</entry>
          <entry>
           Gibt die Zeitspanne an, nach der eine Zeitüberschreitung bei
           Sendeoperationen ausgelöst wird. Eine Ausgabefunktion darf während
           der angegebenen Zeitspanne blockieren, falls die Ablaufsteuerung den
           Versand der Daten verhindert.
          </entry>
          <entry>
           <type>array</type>.  Das Array enthält zwei Schlüssel:
           <varname>sec</varname> den Sekunden-Anteil der Zeitspanne und
           <varname>usec</varname> den Mikrosekunden-Anteil der Zeitspanne bis
           zu einer Zeitüberschreitung.
          </entry>
         </row>
         <row>
          <entry>SO_SNDLOWAT</entry>
          <entry>
           Gibt die Mindestanzahl Bytes an, die <parameter>socket</parameter>
           bei einer Ausgabeoperation verarbeiten soll.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>TCP_NODELAY</constant></entry>
          <entry>
           Gibt an, ob der TCP Nagle Algorithmus deaktiviert ist.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry><constant>MCAST_JOIN_GROUP</constant></entry>
          <entry>
           Tritt einer Multicast-Gruppe bei. (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>array</type> mit den Schlüsseln <literal>"group"</literal> (
           das eine IPv4 oder IPv6 Multicast-Adresse als <type>string</type>
           angibt), und <literal>"interface"</literal> (das entweder eine
           Schnittstellennummer als <type>int</type> oder einen
           Schnittstellennamen als <literal>string</literal>, wie etwa
           <literal>"eth0"</literal>, angibt. <literal>0</literal> kann
           angegeben werden, um festzulegen, dass die Schnittstelle unter
           Verwendung von Routing-Regeln gewählt werden soll. (Dies kann nur für
           <function>socket_set_option</function> verwendet werden.)
          </entry>
         </row>
         <row>
          <entry><constant>MCAST_LEAVE_GROUP</constant></entry>
          <entry>
           Verläßt eine Multicast-Gruppe. (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>array</type>. Siehe <constant>MCAST_JOIN_GROUP</constant> für
           weitere Information. (Dies kann nur für
           <function>socket_set_option</function> verwendet werden.)
          </entry>
         </row>
         <row>
          <entry><constant>MCAST_BLOCK_SOURCE</constant></entry>
          <entry>
           Blockiert Pakete, die von einer bestimmten Quelle an eine bestimmte
           Multicast-Gruppe, der man zuvor beigetreten ist, gesendet wurden.
           (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>array</type> mit denselben Schlüsseln wie
           <constant>MCAST_JOIN_GROUP</constant>, plus einem zusätzlichen
           Schlüssel, <literal>source</literal>, der die IPv4 oder IPv6 Adresse
           der zu blockierenden Quelle als <type>string</type> angibt. (Dies
           kann nur für <function>socket_set_option</function> verwendet
           werden.)
          </entry>
         </row>
         <row>
          <entry><constant>MCAST_UNBLOCK_SOURCE</constant></entry>
          <entry>
           Unblockiert Pakete, die von einer bestimmten Quelle an eine bestimmte
           Multicast-Gruppe, der man zuvor beigetreten ist, gesendet wurden; d.h.
           entsprechende Pakete werden wieder empfangen. (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>array</type> mit demselben Format wie
           <constant>MCAST_BLOCK_SOURCE</constant>. (Dies kann nur für
           <function>socket_set_option</function> verwendet werden.)
          </entry>
         </row>
         <row>
          <entry><constant>MCAST_JOIN_SOURCE_GROUP</constant></entry>
          <entry>
           Empfange Pakete, die an eine bestimmte Multicast-Gruppe gesendet
           wurden, deren Quelladresse mit einem bestimmten Wert übereinstimmt.
           (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>array</type> mit demselben Format wie
           <constant>MCAST_BLOCK_SOURCE</constant>. (Dies kann nur für
           <function>socket_set_option</function> verwendet werden.)
          </entry>
         </row>
         <row>
          <entry><constant>MCAST_LEAVE_SOURCE_GROUP</constant></entry>
          <entry>
           Beende den Empfang von Paketen, die an eine bestimmte
           Multicast-Gruppe gesendet wurden, deren Quelladresse mit einem
           bestimmten Wert übereinstimmt. (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>array</type> mit demselben Format wie
           <constant>MCAST_BLOCK_SOURCE</constant>. (Dies kann nur für
           <function>socket_set_option</function> verwendet werden.)
          </entry>
         </row>
         <row>
          <entry><constant>IP_MULTICAST_IF</constant></entry>
          <entry>
           Die ausgehende Schnittstelle für IPv4 Multicast-Pakete. (hinzugefügt
           in PHP 5.4)
          </entry>
          <entry>
           Entweder <type>int</type>, um die Schnittstellennummer, oder ein
           <type>string</type> mit dem Schnittstellennamen, wie
           <literal>eth0</literal>. Der Wert <type>0</type> kann verwendet
           werden, um festzulegen, dass die Routingtabelle für die
           Schnittstellenauswahl genutzt werden soll. Die Funktion
           <function>socket_get_option</function> gibt einen Schnittstellenindex
           zurück. Es ist zu beachten, dass im Gegensatz zur C-API, diese Option
           KEINE IP-Adresse akzeptiert. Das beseitigt den
           Schnittstellenunterschied zwischen
           <constant>IP_MULTICAST_IF</constant> und
           <constant>IPV6_MULTICAST_IF</constant>.
          </entry>
         </row>
         <row>
          <entry><constant>IPV6_MULTICAST_IF</constant></entry>
          <entry>
           Die ausgehende Schnittstelle für IPv6 Multicast-Pakete. (hinzugefügt
           in PHP 5.4)
          </entry>
          <entry>
           Identisch zu <constant>IP_MULTICAST_IF</constant>.
          </entry>
         </row>
         <row>
          <entry><constant>IP_MULTICAST_LOOP</constant></entry>
          <entry>
           Die Multicast-Loopback-Richtlinie für IPv4 Pakete, die festlegt, ob
           Multicast-Pakete, die von diesem Socket versendet wurden, ebenfalls
           Empfänger auf demselben Host erreichen, die auf der ausgehenden
           Schnittstelle, die von diesem Socket verwendet wird, derselben
           Multicast-Gruppe beigetreten sind. Dies ist die Voreinstellung.
           (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>int</type> (entweder <literal>0</literal> oder
           <literal>1</literal>). Für <function>socket_set_option</function>
           wird jeder Wert akzeptiert, und gemäß den übelichen PHP-Regeln in
           Booleschen Wert konvertiert.
          </entry>
         </row>
         <row>
          <entry><constant>IPV6_MULTICAST_LOOP</constant></entry>
          <entry>
           Analog zu <constant>IP_MULTICAST_LOOP</constant>, aber für IPv6.
           (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>int</type>. Siehe <constant>IP_MULTICAST_LOOP</constant>.
          </entry>
         </row>
         <row>
          <entry><constant>IP_MULTICAST_TTL</constant></entry>
          <entry>
           Die Lebensdauer ausgehender IPv4 Multicast-Pakete. Dies sollte ein
           Wert zwischen 0 (verlasse nicht die Schnittstelle) und 255 sein.
           Der Vorgabewert ist 1 (nur das lokale Netzwerk wird erreicht).
           (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>int</type> zwischen 0 und 255.
          </entry>
         </row>
         <row>
          <entry><constant>IPV6_MULTICAST_HOPS</constant></entry>
          <entry>
           Analog zu <constant>IP_MULTICAST_TTL</constant>, aber für IPv6
           Pakete. Der Wert -1 wird ebenfalls akzeptiert, und bedeutet, dass die
           Vorgabewert der Route verwendet werden soll. (hinzugefügt in PHP 5.4)
          </entry>
          <entry>
           <type>int</type> zwischen -1 und 255.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt den Wert der angegebenen Option zurück oder &false;, falls ein Fehler auftrat.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>socket_set_option</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$socket = socket_create_listen(1223);

$linger = array('l_linger' => 1, 'l_onoff' => 1);
socket_set_option($socket, SOL_SOCKET, SO_LINGER, $linger);

var_dump(socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR));
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>socket_create_listen</function></member>
    <member><function>socket_set_option</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>




<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
