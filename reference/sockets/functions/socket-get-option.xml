<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: conni Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.socket-get-option">
 <refnamediv>
  <refname>socket_get_option</refname>
  <refpurpose>Holt die Socket-Optionen für einen Socket </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>socket_get_option</methodname>
   <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
   <methodparam><type>int</type><parameter>level</parameter></methodparam>
   <methodparam><type>int</type><parameter>optname</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>socket_get_option</function> gibt den Wert der Option zurück,
   der im Parameter <parameter>optname</parameter> für den Socket
   <parameter>socket</parameter> gesetzt wurde.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>socket</parameter></term>
     <listitem>
      <para>
       Ein gültiger Socket-Deskriptor, der von der Funktion <function>socket_create</function>
       oder <function>socket_accept</function> erzeugt wurde.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>level</parameter></term>
     <listitem>
      <para>
       Der Parameter <parameter>level</parameter> enthält die Protokollebene,
       für die die Option gilt. Beispiel: Um Optionen auf der Socketebene
       abzufragen würde <parameter>level</parameter> den Wert SQL_SOCKET
       enthalten. Andere Ebenen, etwa TCP, können abgefragt werden, indem man
       die Protokollnummer dieser Ebene angibt. Protokollnummern können mit
       einem Aufruf von <function>getprotobyname</function> ermittelt werden.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>optname</parameter></term>
     <listitem>
      <table>
       <title>Mögliche Socket-Optionen</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Option</entry>
          <entry>Beschreibung</entry>
          <entry>Typ</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>SO_DEBUG</entry>
          <entry>
           Gibt an, ob Debug-Informationen mitgeschrieben wurden.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_BROADCAST</entry>
          <entry>
           Gibt an, ob die Übermittlung von Rundsende-Nachrichten unterstützt wird.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_REUSEADDR</entry>
          <entry>
           Gibt an, ob die lokale Adresse wiederverwendet werden kann.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_KEEPALIVE</entry>
          <entry>
           Gibt an, ob Verbindungen durch periodische Aussendungen von
           Nachrichten aufrecht erhalten werden. Falls der verbundene Socket
           nicht auf diese Nachrichten antworten kann, wird die Verbindung
           unterbrochen und Prozesse, die auf diesen Socket schreiben, erhalten
           ein SIGPIPE-Signal.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_LINGER</entry>
          <entry>
           <para>
            Gibt an, ob der <parameter>socket</parameter> einen Aufruf von
            <function>socket_close</function> verzögert, falls noch Daten
            vorhanden sind. In der Standardeinstellung versucht ein Socket vor
            dem Schließen, alle noch nicht gesendeten Daten zu übermitteln. Im
            Falle eines verbindungsorientierten Sockets, wartet
            <function>socket_close</function> auf die Empfangsbestätigung seiner
            Gegenstelle.
           </para>
           <para>
            Falls <varname>l_onoff</varname> von 0 verschieden und
            <varname>l_linger</varname> ist 0, werden bei einem
            verbindungsorientierten Socket alle noch nicht gesendeten Daten
            verworfen und das Signal RST (Reset) an die Gegenstelle gesendet.
           </para>
           <para>
            Andererseits, falls sowohl <varname>l_onoff</varname> als auch
            <varname>l_linger</varname> von 0 verschieden sind, blockiert der
            Aufruf von <function>socket_close</function> den Socket so lange,
            bis entweder alle Daten gesendet sind oder das Zeitlimit erreicht
            ist, das in <varname>l_linger</varname> gesetzt wurde. Wenn der
            Socket auf nicht-blockieren gesetzt ist, schlägt
            <function>socket_close</function> fehl und gibt einen Fehler zurück.
           </para>
          </entry>
          <entry>
           <type>array</type>. Das Array enthält zwei Schlüssel:
           <varname>l_onoff</varname> and
           <varname>l_linger</varname>.
          </entry>
         </row>
         <row>
          <entry>SO_OOBINLINE</entry>
          <entry>
           Gibt an, ob <parameter>socket</parameter> die Übertragung von
           bandexternen Daten in der Reihenfolge überträgt, wie sie auftreten.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_SNDBUF</entry>
          <entry>
           Gibt die Größe des Sendepuffers zurück.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_RCVBUF</entry>
          <entry>
           Gibt die Größe des Empfangspuffers zurück.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_ERROR</entry>
          <entry>
           Gibt den Fehlerstatus zurück und löscht ihn.
          </entry>
          <entry>
           <type>int</type> (dieser Wert kann nicht von
           <function>socket_set_option</function> gesetzt werden.)
          </entry>
         </row>
         <row>
          <entry>SO_TYPE</entry>
          <entry>
           Gibt den Typ von <parameter>socket</parameter> zurück (z. B.
           <constant>SOCK_STREAM</constant>).
          </entry>
          <entry>
           <type>int</type> (dieser Wert kann nicht von
           <function>socket_set_option</function> gesetzt werden.)
          </entry>
         </row>
         <row>
          <entry>SO_DONTROUTE</entry>
          <entry>
           Gibt an, ob ausgehende Nachrichten das standardmässige Routing
           umgehen.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_RCVLOWAT</entry>
          <entry>
           Gibt die Mindestanzahl Bytes an, die <parameter>socket</parameter>
           bei einer Empfangsoperation verarbeiten soll. (Der Vorgabewert ist 1.)
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
         <row>
          <entry>SO_RCVTIMEO</entry>
          <entry>
           Gibt den Wert der Zeitspanne bis zu einer Zeitüberschreitung
           bei Empfangsoperationen an.
          </entry>
          <entry>
           <type>array</type>. Das Array enthält zwei Schlüssel:
           <varname>sec</varname>, den Sekunden-Anteil der Zeitspanne und
           <varname>usec</varname>, den Mikrosekunden-Anteil der Zeitspanne bis
           zu einer Zeitüberschreitung.
          </entry>
         </row>
         <row>
          <entry>SO_SNDTIMEO</entry>
          <entry>
           Gibt die Zeitspanne an, nach der eine Zeitüberschreitung bei
           Sendeoperationen ausgelöst wird. Eine Ausgabefunktion darf während
           der angegebenen Zeitspanne blockieren, falls die Ablaufsteuerung den
           Versand der Daten verhindert.
          </entry>
          <entry>
           <type>array</type>.  Das Array enthält zwei Schlüssel:
           <varname>sec</varname> den Sekunden-Anteil der Zeitspanne und
           <varname>usec</varname> den Mikrosekunden-Anteil der Zeitspanne bis
           zu einer Zeitüberschreitung.
          </entry>
         </row>
         <row>
          <entry>SO_SNDLOWAT</entry>
          <entry>
           Gibt die Mindestanzahl Bytes an, die <parameter>socket</parameter>
           bei einer Ausgabeoperation verarbeiten soll.
          </entry>
          <entry>
           <type>int</type>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt den Wert der angegebenen Option zurück oder &false;, falls ein Fehler auftrat..
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>socket_set_option</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$socket = socket_create_listen(1223);

$linger = array('l_linger' => 1, 'l_onoff' => 1);
socket_set_option($socket, SOL_SOCKET, SO_LINGER, $linger);

var_dump(socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR));
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.3.0</entry>
       <entry>
        Der Name der Funktion wurde geändert. Sie ersetzt die bisherige
        Funktion <literal>socket_getopt()</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

</refentry>




<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
