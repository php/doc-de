<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.4 Maintainer: conni Status: ready -->
  <refentry id="function.socket-create">
   <refnamediv>
    <refname>socket_create</refname>
    <refpurpose>Erzeugt einen Socket (Endpunkt für die Kommunikation)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
     <methodsynopsis>
      <type>resource</type><methodname>socket_create</methodname>
      <methodparam><type>int</type><parameter>domain</parameter></methodparam>
      <methodparam><type>int</type><parameter>type</parameter></methodparam>
      <methodparam><type>int</type><parameter>protocol</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
	 Erzeugt einen Kommunikationsendpunkt (einen Socket) und gibt einen
	 Socket-Deskriptor zurück.
    </para>
    <para>
     Der <parameter>domain</parameter> Parameter legt die Domain fest
	 (Protokoll-Familie), die für die Kommunikation benutzt wird.
	 Gegenwärtig  verstehen Sockets <constant>AF_INET</constant> und
	 <constant>AF_UNIX</constant>. <constant>AF_INET</constant> wird
	 normalererweise für die Internet-Kommunikation benutzt.
	 <constant>AF_UNIX</constant> verwendet Pfadnamen zur Identifikation
	 von Sockets und kann daher nur für die lokale Kommunikation benutzt
	 werden (welche andererseits schneller ist). 
    </para>
    <para>
     Der <parameter>type</parameter> Parameter bestimmt den Socket-Typ.
	 Dies ist entweder <constant>SOCK_STREAM</constant>,
     <constant>SOCK_DGRAM</constant>, <constant>SOCK_SEQPACKET</constant>,
	 <constant>SOCK_RAW</constant>, <constant>SOCK_RDM</constant> oder
     <constant>SOCK_PACKET</constant>. Die beiden meistbenutzten Typen sind
	 <constant>SOCK_DGRAM</constant> für die (verbindungslose)
	 <literal>UDP</literal> Kommunikation, und
	 <constant>SOCK_STREAM</constant> für die <literal>TCP</literal>
     Kommunikation.
    </para>
    <para>
     <parameter>protocol</parameter> gibt das Protokoll an, welches
	 entweder <constant>SOL_UDP</constant> oder
	 <constant>SOL_TCP</constant> ist.
    </para>
    <para>
     Bei Erfolg gibt die Funktion einen Socket-Deskriptor zurück, bei einem
	 Fehler wird &false; zurückgegeben. Der aktuelle Fehlercode kann mit
	 <function>socket_last_error</function> ermittelt werden. Dieser
	 Fehlercode kann an die Funktion 
     <function>socket_strerror</function> übergeben werden, um eine
	 textuelle Beschreibing des Fehlers zu erhalten. 
    </para>
    <para>
     Weitere Informationen über die Benutzung der Funktion
	 <function>socket_create</function>, als auch über die Bedeutung der
	 verschiedenen Parameter finden Sie auf der Unix man page socket (2).
    </para>
    <note>
     <para>
      Falls ein fehlerhafter <parameter>domain</parameter>- oder 
      <parameter>type</parameter>-Parameter angegeben wird, benutzt
	  <function>socket_create</function> standardmässig 
      <constant>AF_INET</constant> sowie 
      <constant>SOCK_STREAM</constant> und gibt eine 
      <constant>E_WARNING</constant>-Meldung aus.
     </para>
    </note>
    <para>
     Siehe auch 
     <function>socket_accept</function>,
     <function>socket_bind</function>,
     <function>socket_connect</function>,
     <function>socket_listen</function>,
     <function>socket_last_error</function> und
     <function>socket_strerror</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
