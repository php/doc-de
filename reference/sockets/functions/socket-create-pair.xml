<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.19 Maintainer: conni Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.socket-create-pair">
 <refnamediv>
  <refname>socket_create_pair</refname>
  <refpurpose>Erzeugt ein Paar nicht zu unterscheidender Sockets und speichert sie in einem Array.</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>socket_create_pair</methodname>
   <methodparam><type>int</type><parameter>domain</parameter></methodparam>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam><type>int</type><parameter>protocol</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">fd</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>socket_create_pair</function> erzeugt zwei nicht 
   unterscheidbare, verbundene Sockets und speichert sie im Array
   <parameter>fd</parameter>. Diese Funktion wird allgemein bei der
   Inter-Prozess-Kommunikation (IPC) verwendet.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>domain</parameter></term>
     <listitem>
      <para>
       Der Parameter <parameter>domain</parameter> bestimmt die
       Protokollfamilie, die von den Sockets benutzt werden. Eine komplette
       Liste finden Sie bei der Funktion <function>socket_create</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Der Parameter <parameter>type</parameter> bestimmt den
       Kommuunikationstyp, den die Sockets verwenden sollen. Eine komplette
       Liste finden Sie bei der Funktion <function>socket_create</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>protocol</parameter></term>
     <listitem>
      <para>
       Der Parameter <parameter>protocol</parameter> setzt das spezifische
       Protokoll innerhalb der angegebenen <parameter>domain</parameter>,
       das vom zurückgegebenen Socket für die Kommunikation benutzt wird.
       Der passende Wert kann ermittelt werden, indem der Name an die
       Funktion <function>getprotobyname</function>übergeben wird. Wenn TCP
       oder UDP gewünscht werden, können auch die entsprechenden Konstanten
       <constant>SOL_TCP</constant> oder <constant>SOL_UDP</constant>
       benutzt werden.
      </para>
      <para>
       Eine vollständige Liste aller unterstützter Protokolle finden Sie bei 
       der Funktion <function>socket_create</function>.  
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>fd</parameter></term>
     <listitem>
      <para>
       Referenz auf das Array, in das die beiden Socket-Deskriptoren 
       eingefügt werden. 
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>socket_create_pair</function> Beispiel</title>
    <programlisting role="php">     
<![CDATA[
<?php
$sockets = array();
/* Setup socket pair */
if (socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $sockets) === false) {
    echo "socket_create_pair fehlgeschlagen. Grund: ".socket_strerror(socket_last_error());
}
/* Send and Recieve Data */
if (socket_write($sockets[0], "ABCdef123\n", strlen("ABCdef123\n")) === false) {
    echo "socket_write() fehlgeschlagen. Grund: ".socket_strerror(socket_last_error($sockets[0]));
}
if (($data = socket_read($sockets[1], strlen("ABCdef123\n"), PHP_BINARY_READ) === false) {
    echo "socket_read() fehlgeschlagen. Grund: ".socket_strerror(socket_last_error($sockets[1]));
}
var_dump($data);

/* Sockets schliessen */
socket_close($sockets[0]);
socket_close($sockets[1]);
?>
]]>
    </programlisting>
    </example>
    </para>
    <para>
    <example>
    <title><function>socket_create_pair</function> IPC Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
$ary = array();
$strone = 'Nachricht vom Elternprozess.';
$strtwo = 'Nachricht vom Kindprozess.';
if (socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $ary) === false) {
    echo "socket_create_pair() fehlgeschlagen. Grund: ".socket_strerror(socket_last_error());
}
$pid = pcntl_fork();
if ($pid == -1) {
    echo 'Konnte keinen Kindprozess erzeugen.';
} elseif ($pid) {
    /* Elternprozess */
    socket_close($ary[0]);
    if (socket_write($ary[1], $strone, strlen($strone)) === false) {
        echo "socket_write() fehlgeschlagen. Grund: ".socket_strerror(socket_last_error($ary[1]));
    }
    if (socket_read($ary[1], strlen($strtwo), PHP_BINARY_READ) == $strtwo) {
        echo "Empfangen: $strtwo\n";
    }
    socket_close($ary[1]);
} else {
    /*child*/
    socket_close($ary[1]);
    if (socket_write($ary[0], $strtwo, strlen($strtwo)) === false) {
        echo "socket_write() fehlgeschlagen. Grund: ".socket_strerror(socket_last_error($ary[0]));
    }
    if (socket_read($ary[0], strlen($strone), PHP_BINARY_READ) == $strone) {
        echo "Empfangen: $strone\n";
    }
    socket_close($ary[0]);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>    

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>socket_create</function></member>
    <member><function>socket_create_listen</function></member>
    <member><function>socket_bind</function></member>
    <member><function>socket_listen</function></member>
    <member><function>socket_last_error</function></member>
    <member><function>socket_strerror</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
