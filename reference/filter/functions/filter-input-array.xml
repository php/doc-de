<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.4 Maintainer: timo Status: ready -->
<!-- $Revision: 1.1 $ -->
<refentry id="function.filter-input-array">
 <refnamediv>
  <refname>filter_input_array</refname>
  <refpurpose>Nimmt mehrere Variablen von Außen entgegen und filtert sie optional</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>filter_input_array</methodname>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>definition</parameter></methodparam>
  </methodsynopsis>
  <para>
   Diese Funktion ist sinnvoll um mehrere Wert abzufragen oder wiederholend
   <function>filter_input</function> aufrufen zu müssen.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Einer von <constant>INPUT_GET</constant>, <constant>INPUT_POST</constant>,
       <constant>INPUT_COOKIE</constant>, <constant>INPUT_SERVER</constant>,
       <constant>INPUT_ENV</constant>, <constant>INPUT_SESSION</constant> oder
       <constant>INPUT_REQUEST</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>definition</parameter></term>
     <listitem>
      <para>
       Array dass die Argumente enthält. Ein gültiger Key ist ein 
       <type>string</type> der einen Variablennamen enthält und ein gültiger
       Wert ist entwedet ein Filter oder ein <type>array</type> welches den
       Filter, seine Flags und Optionen spezifiziert. Wenn der Wert
       ein Array ist, sind gültige Keys <literal>filter</literal> der den
       Filtertyp definiert, <literal>flags</literal> welches jegliche Flags
       die den Filter spezifizieren enthält und <literal>options</literal> 
       welches die Optionen enthält to den Filter beschreiben. Für ein
       besseres Verständnis sehen Sie sich das Beispiel an.
      </para>
      <para>
       Der Parameter kann auch ein Integer sein der eine <link
       linkend="filter.intro">Filterkonstante</link> beschreibt. Dann werden
       alle Werte des Arrays durch diesen Filter gefiltert.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Bei Erfolg wird ein Array zurückgegeben, welches alle Werte der angefragten 
   Variablen enthält oder &false; im Fehlerfall. Ein einzelner Array-Wert ist 
   &false;, wenn das Filtern fehlgeschlagen ist oder &null;, wenn die Variable 
   nicht gesetzt ist. Wenn das Flag <constant>FILTER_NULL_ON_FAILURE</constant> 
   benutzt wurde, wird &false; zurückgegeben, wenn die Variable nicht gesetzt ist 
   und &null;, wenn das Filtern fehlgeschlagen ist.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>filter_input_array</function> Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
error_reporting(E_ALL | E_STRICT);
/* data actually came from POST
$_POST = array(
    'product_id'    => 'libgd<script>',
    'component'     => '10',
    'versions'      => '2.0.33',
    'testscalar'    => array('2', '23', '10', '12'),
    'testarray'     => '2',
);
*/

$args = array(
    'product_id'   => FILTER_SANITIZE_ENCODED,
    'component'    => array('filter'    => FILTER_VALIDATE_INT,
                            'flags'     => FILTER_FLAG_ARRAY, 
                            'options'   => array('min_range' => 1, 'max_range' => 10)
                           ),
    'versions'     => FILTER_SANITIZE_ENCODED,
    'doesnotexist' => FILTER_VALIDATE_INT,
    'testscalar'   => array(
                            'filter' => FILTER_VALIDATE_INT,
                            'flags'  => FILTER_FLAG_SCALAR,
                           ),
    'testarray'    => array(
                            'filter' => FILTER_VALIDATE_INT,
                            'flags'  => FILTER_FLAG_ARRAY,
                           )

);

$myinputs = filter_input_array(INPUT_POST, $args);

var_dump($myinputs);
echo "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(6) {
  ["product_id"]=>
  array(1) {
    [0]=>
    string(17) "libgd%3Cscript%3E"
  }
  ["component"]=>
  array(1) {
    [0]=>
    int(10)
  }
  ["versions"]=>
  array(1) {
    [0]=>
    string(6) "2.0.33"
  }
  ["doesnotexist"]=>
  NULL
  ["testscalar"]=>
  bool(false)
  ["testarray"]=>
  array(1) {
    [0]=>
    int(2)
  }
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>filter_input</function></member>
    <member><function>filter_var_array</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
