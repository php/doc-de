<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335020 Maintainer: sammywg Status: ready -->

<sect1 xml:id="install.unix.apache2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Apache 2.x auf Unixsystemen</title>
 <para>
  Dieser Abschnitt enthält Hinweise und Tipps, die sich auf die Installation
  von PHP speziell für Apache 2.x auf Unixsystemen beziehen.
 </para>

 &warn.apache2.compat;

 <para>
  Die <link xlink:href="&url.apache2.docs;">Apache Dokumentation</link> ist
  die maßgebliche Informationsquelle für den Apache 2.x Server. Dort können
  weitere Informationen über Installationsoptionen für Apache gefunden
  werden.
 </para>

 <para>
  Die aktuellste Version des Apache HTTP Servers kann von der
  <link xlink:href="&url.apache;">Apache Download Site</link> bezogen werden,
  und eine passende PHP-Version von
  den oben angegebenen Quellen. Dieser Schnelleinstieg behandelt
  nur die Grundlagen, um mit Apache 2.x und PHP einzusteigen. Für mehr
  Informationen lesen Sie bitte die <link
  xlink:href="&url.apache2.docs;">Apache Dokumentation</link>.
  Versionsnummern wurden hier ausgelassen, um sicherzustellen, dass die
  Anweisungen nicht inkorrekt sind. In den folgenden Beispielen sollte 'NN'
  durch die spezifische Version des verwendeten Apache ersetzt werden.
 </para>

 <para>
  Es gibt aktuell zwei Versionen von Apache 2.x: 2.0 und 2.2. Obwohl es
  verschiedene Gründe gibt, sich für eine zu entscheiden, ist 2.2 die
  aktuellste Version, und diejenige, die empfohlen wird, wenn sie diese
  Möglichkeit haben. Allerdings funktionieren die folgenden Anweisungen
  sowohl für 2.0 als auch 2.2.
 </para>

 <orderedlist>
  <listitem>
   <para>
    Beziehen Sie den Apache HTTP Server vom oben genannten Ort,
    und entpacken Sie ihn:
   </para>
   <example>
    <screen>
<![CDATA[
gzip -d httpd-2_x_NN.tar.gz
tar -xf httpd-2_x_NN.tar
]]>
    </screen>
   </example>
  </listitem>
  <listitem>
   <para>Beziehen und entpacken Sie die PHP-Quellen gleichermaßen:</para>
   <example>
    <screen>
<![CDATA[
gunzip php-NN.tar.gz
tar -xf php-NN.tar
]]>
    </screen>
   </example>
  </listitem>

  <listitem>
   <para>
    Kompilieren und installieren Sie Apache. Entnehmen Sie der Apache
    Installationsdokumentation weitere Details zur Kompilierung.
   </para>
   <example>
    <screen>
<![CDATA[
cd httpd-2_x_NN
./configure --enable-so
make
make install
]]>
    </screen>
   </example>
  </listitem>

  <listitem>
   <para>
    Nun steht Ihnen Apache 2.x.NN unter /usr/local/apache2 zur Verfügung,
    konfiguriert mit Unterstützung für nachladbare Module und dem
    Standard MPM Prefork. Um diese Installation zu testen, verwenden Sie die
    übliche Prozedur, den Apacheserver zu starten, also z.B.:
    <example>
     <screen>
<![CDATA[
       /usr/local/apache2/bin/apachectl start
]]>
     </screen>
    </example>
    Stoppen Sie nun den Server, um mit der Konfiguration von PHP fortzufahren:
    <example>
     <screen>
<![CDATA[
       /usr/local/apache2/bin/apachectl stop.
]]>
     </screen>
    </example>
   </para>
  </listitem>

  <listitem>
   <para>
    Konfigurieren und kompilieren Sie nun Ihr PHP. Dies ist die Stelle, an der Sie Ihr
    PHP mit verschiedenen Optionen, wie etwa installierten Erweiterungen,
    anpassen können. Rufen Sie ./configure --help auf, um eine Liste
    der verfügbaren Optionen zu erhalten. In unserem Beispiel werden
    wir eine einfache Konfiguration mit Unterstützung für Apache 2
    und MySQL erzeugen.
   </para>
   <para>
    Wenn Sie Apache aus den Quelltexten kompiliert haben, wie oben beschrieben
    wurde, dann stimmt im folgenden Beispiel der Pfad von apxs, aber wenn Sie
    Apache auf andere Weise installiert haben, müssen Sie den Pfad von apxs
    entsprechend anpassen. Es ist zu beachten, dass einige Distros
    möglicherweise apxs zu apxs2 umbenennen.
   </para>
   <example>
    <screen>
<![CDATA[
cd ../php-NN
./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql
make
make install
]]>
    </screen>
   </example>
   <para>
    Wenn Sie sich entscheiden, Ihre Konfigurationsoptionen nach der
    Installation zu ändern, müssen Sie nur die configure, make und make install Schritte
    wiederholen. Sie müssen nur Apache neustarten, damit das neue
    Modul verwendet wird. Eine erneute Kompilierung von Apache ist
    nicht notwendig.
   </para>
   <para>
    Beachten Sie, dass, wenn nicht anders erwähnt, 'make install' ebenso
    PEAR und verschiedene PHP Werkzeuge wie phpize, PHP CLI und anderes
    installieren wird.
   </para>
  </listitem>

  <listitem>
   <para>
    Ihre php.ini einrichten
   </para>
   <example>
    <screen>
<![CDATA[
cp php.ini-development /usr/local/lib/php.ini
]]>
    </screen>
   </example>
   <para>
    Sie können Ihre .ini-Datei ändern, um verschiedene PHP-Optionen zu setzen.
    Wenn Sie die php.ini-Datei an einer anderen Stelle bevorzugen, verwenden
    Sie --with-config-file-path=/some/path in Schritt 5.
   </para>
   <para>
    Wenn Sie sich stattdessen für php.ini-production entscheiden, stellen Sie
    sicher, dass Sie die darin enthaltene Liste von Änderungen lesen, da diese
    das Verhalten von PHP beeinflussen.
   </para>
  </listitem>

  <listitem>
   <para>
    Bearbeiten Sie Ihre httpd.conf, um das PHP Modul zu laden. Der Pfad
    auf der rechten Seite der LoadModule-Anweisung muss auf den Ort des
    PHP-Moduls auf Ihrem System zeigen. Das obige make install könnte dies
    bereits für Sie hinzugefügt haben, aber prüfen Sie dies.
   </para>
   <example>
    <programlisting role="apache-conf">
<![CDATA[
LoadModule php5_module modules/libphp5.so
]]>
    </programlisting>
   </example>
  </listitem>

  <listitem>
   <para>
    Weisen Sie Apache an, bestimmte Dateiendungen als PHP Skripte zu behandeln.
    Zum Beispiel werden wir den Apache Dateien mit der Endung .php als PHP
    ausführen lassen. Anstatt nur die Apachedirektive AddType zu verwenden,
    wollen wir zusätzlich verhindern, dass potentiell gefährliche hochgeladene
    und erzeugte Dateien wie exploit.php.jpg als PHP-Dateien ausgeführt werden.
    Wenn Sie dieses Beispiel verwenden, können Sie jede Dateiendung als PHP
    interpretieren lassen, wenn Sie sie einfach hinzufügen. Wir demonstrieren
    dies, indem wir .php einfügen.
   </para>
   <example>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch \.php$>
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </example>
   <para>
    Oder wenn wir erlauben wollen, dass .php, .php2, .php3, .php4, .php5, .php6
    und .phtml und sonst nichts als PHP interpretiert werden, könnten wird
    ein Statement wie dieses verwenden:
   </para>
   <example>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.ph(p[2-6]?|tml)$">
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </example>
   <para>
    Und um zu erlauben, dass .phps Dateien vom PHP Source-Filter verarbeitet und
    als Quellcode mit Syntax-Highlighting angezeigt werden, verwenden Sie:
   </para>
   <example>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.phps$">
    SetHandler application/x-httpd-php-source
</FilesMatch>
]]>
    </programlisting>
   </example>
   <para>
    mod_rewrite kann verwendet werden, um zu erlauben, dass jede beliebige .php
    Datei als Quellcode mit Syntax-Highlighting angezeigt wird, ohne dass sie
    die Datei zu .phps umbenennen oder kopieren müssen:
   </para>
   <example>
    <programlisting role="apache-conf">
<![CDATA[
RewriteEngine On
RewriteRule (.*\.php)s$ $1 [H=application/x-httpd-php-source]
]]>
    </programlisting>
   </example>
   <para>
    Der PHP-Source-Filter sollte auf Produktionssystemen nicht aktiviert werden,
    da er vertrauliche oder anderweise sensible Informationen, die im Quellcode
    enthalten sind, preisgeben könnte.
   </para>
  </listitem>

  <listitem>
   <para>
    Verwenden Sie die übliche Prozedur, um den Apache Server zu starten, z.B.:
   </para>
   <example>
    <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl start
]]>
    </screen>
   </example>

   <para>ODER</para>
   <example>
    <screen>
<![CDATA[
service httpd restart
]]>
    </screen>
   </example>
  </listitem>
 </orderedlist>

 <para>
  Wenn Sie den obigen Anweisungen folgen, werden Sie einen laufenden
  Apache2 mit Unterstützung für PHP als <literal>SAPI</literal>-Modul
  erhalten. Natürlich existieren für Apache und PHP viele weitere
  Konfigurationseinstellungen. Verwenden Sie
  <command>./configure --help</command> im jeweiligen Quellcodeverzeichnis,
  um weitere Informationen zu erhalten.
 </para>
 <para>
  Apache2 kann multithreaded kompiliert werden, indem das
  <filename>worker</filename> MPM anstatt des normalen
  <filename>prefork</filename> MPM für den Build gewählt wird. Dies erfolgt,
  indem die folgende Option zu dem Argument, das weiter oben in Schritt 3 an
  ./configure übergeben wird, hinzugefügt wird:
 </para>
 <example>
  <screen>
<![CDATA[
--with-mpm=worker
]]>
  </screen>
 </example>
 <para>
  Dies sollte nicht durchgeführt werden, ohne sich der Konsequenzen dieser
  Entscheidung bewusst zu sein, und zumindest eine angemesse Kenntnis der
  Implikationen zu haben. Die Apache Dokumentation bezüglich der <link
  xlink:href="&url.apache2.mpm;">MPM-Module</link> erörtert MPMs sehr
  ausführlich.
 </para>
 <note>
  <para>
   Das <link linkend="faq.installation.apache.multiviews">Apache MultiViews
   FAQ</link> erörtert die Verwendung von Multiviews mit PHP.
  </para>
 </note>
 <note>
  <para>
   Um eine Multithreaded Version von Apache zu erzeugen, muss das Zielsystem
   Threads unterstützen. In diesem Fall sollte auch PHP mit der
   experimentellen Zend Thread Safety (ZTS) kompiliert werden. Unter dieser Konfiguration sind nicht
   alle Erweiterungen verfügbar. Die empfohlene Einstellung ist es,
   Apache mit dem normalen <filename>prefork</filename> -MPM-Modul zu bauen.
  </para>
 </note>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
