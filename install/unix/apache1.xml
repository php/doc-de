<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: unknown -->
   <sect1 id="install.unix.apache">
    <title>Apache 1.3.x auf Unix-Systemen</title>
    <para>
     Dieser Abschnitt beinhaltet Hinweise und Tipps die sich auf die
     Installation von PHP speziell für Apache auf Unix-Plattformen beziehen.
     Wir haben <link linkend="install.unix.apache2">Anweisungen und
     Hinweise für Apache 2 auf einer eigenen Seite</link>.
    </para>   
    <para>
     Sie können Anweisungen, die Sie zum unten in Zeile 10 abgebildeten
     <command>configure</command> Aufruf hinzufügen können, auswählen aus der 
     <link linkend="configure">Liste von grundlegenden Configure-Optionen
     </link> und aus den für Erweiterungen spezifischen Optionen, die auf den
     jeweiligen Handbuchseiten beschrieben sind. Versionsnummern wurden hier
     ausgelassen, um sicherzustellen, dass die Anweisungen nicht inkorrekt
     sind. Sie müssen die Zeichenkette 'xxx' hier mit den zu Ihren Dateien
     passenden Werten ersetzen.
    </para>

    <example id="install.unix.apache.example">
     <title>
      Installationsanweisungen (Apache Shared Module Version) für PHP
     </title>
     <screen>
<![CDATA[
1.  gunzip apache_xxx.tar.gz
2.  tar -xvf apache_xxx.tar
3.  gunzip php-xxx.tar.gz
4.  tar -xvf php-xxx.tar
5.  cd apache_xxx
6.  ./configure --prefix=/www --enable-module=so
7.  make
8.  make install
9.  cd ../php-xxx

10. Konfigurieren Sie jetzt Ihr PHP. Dies ist die Stelle, an der Sie
    Ihr PHP mit verschiedenen Optionen, z.B. welche Erweiterungen aktiviert
    sein werden, anpassen können. Rufen Sie ./configure --help für eine Liste
    von verfügbaren Optionen auf. In unseren beispiel werden wir eine einfache
    Konfiguration mit Unterstützung für Apache 1 und MySQL vornehmen. Ihr
    Pfad zu Apxs könnte von unserem Beispiel abweichen.

      ./configure --with-mysql --with-apxs=/www/bin/apxs

11. make
12. make install

    Falls Sie sich entscheiden, die Werte Ihrer Konfiguration nach der
    Installation zu ändern, müssen Sie nur die letzten drei Schritte
    wiederholen. Sie müssen nur Apache neu starten, damit das neue Modul
    aktiv wird. Eine erneute Kompilation von Apache ist nicht erforderlich.

    Beachten Sie, dass - wenn nicht anders erwähnt - 'make install' ebenfalls
    PEAR, verschiedene PHP Tools wie phpize, den PHP CLI und mehr installieren
    wird.

13. Ihre php.ini Datei einrichten:

      cp php.ini-dist /usr/local/lib/php.ini

    Sie können Ihre .ini-Datei bearbeiten, um verschiedene Einstellungen
    vorzunehmen. Wenn Sie es bevorzugen, Ihre php.ini-Datei an anderer
    Stelle zu haben, verwenden Sie --with-config-file-path=/irgendein/pfad
    in Schritt 10.
    
    Wenn Sie stattdessen php.ini-recommended auswählen stellen Sie sicher,
    dass Sie die enthaltenen Änderungen lesen, da dieses sich auf das Verhalten
    von PHP auswirken.

14. Ändern Sie Ihre httpd.conf-Datei, um das PHP Modul zu laden. Der Pfad auf
    der rechten Seite des LoadModule Befehls muss zum Pfad des PHP Moduls auf
    Ihrem System zeigen. Das 'make install' von oben könnte dies für Sie
    bereits hinzugefügt haben, aber prüfen Sie dies nach.

    Für PHP 4:
            
      LoadModule php4_module libexec/libphp4.so

    Für PHP 5:
                      
      LoadModule php5_module libexec/libphp5.so
      
15. Fügen Sie dies im AddModule-Abschnitt Ihrer httpd.conf, irgendwo unterhalb
    von ClearModule List, hinzu:
    
    Für PHP 4:
    
      AddModule mod_php4.c
      
    Für PHP 5:
    
      AddModule mod_php5.c

16. Sagen Sie Ihrem Apache, bestimmte Dateiendungen als PHP zu parsen. Zum 
    Beispiel lassen wir die .php-Dateiendung als PHP behandeln. Sie können
    jede Erweiterung als PHP parsen lassen, indem Sie einfach weitere
    Endungen hinzufügen, jede durch ein Leerzeichen getrennt. Wir fügen
    .phtml hinzu, um dies vorzuführen. 

      AddType application/x-httpd-php .php .phtml

    Es ist weiterhin üblich, die .phps-Dateiendung zu konfigurieren, damit
    diese farblich hervorgehobenen Quellcode anzeigt. Dies kann wie folgt
    eingerichtet werden:
    
      AddType application/x-httpd-php-source .phps

17. Verwenden Sie Ihre normale Prozedur, um den Apache zu starten. (Sie müssen
    den Server anhalten und neu starten, nicht nur ein erneutes laden des
    Servers mittels eines HUP- oder USR1-Signals veranlassen.)
]]>
     </screen>
    </example>

    <para>
     Alternativ, um PHP als statisches Objekt zu installieren:
    </para>

    <example id="install.unix.apache.example-static">
     <title>
      Installationsanweisungen (Statische Modulinstallation für Apache) für PHP
     </title>
     <screen>
<![CDATA[
1.  gunzip -c apache_1.3.x.tar.gz | tar xf -
2.  cd apache_1.3.x
3.  ./configure
4.  cd ..

5.  gunzip -c php-5.x.y.tar.gz | tar xf -
6.  cd php-5.x.y
7.  ./configure --with-mysql --with-apache=../apache_1.3.x
8.  make
9.  make install

10. cd ../apache_1.3.x

11. ./configure --prefix=/www --activate-module=src/modules/php5/libphp5.a
    (Die obige Zeile ist korrekt! Ja, wir wissen, dass libphp5.a zu diesem
    Zeitpunkt nicht existiert. Das soll sie auch noch nicht. Sie wird
    angelegt werden.)

12. make
    (Sie sollten jetzt eine ausführbare Datei httpd haben, welche Sie in Ihr
    Apache-Binärverezichnis kopieren können. Wenn dies Ihre Erstinstallation
    ist, müssen Sie ebenfalls "make install" aufrufen)

13. cd ../php-5.x.y
14. cp php.ini-dist /usr/local/lib/php.ini

15. Sie können /usr/local/lib/php.ini bearbeiten, um PHP Einstellungen zu
    ändern. Bearbeiten Sie Ihre httpd.conf oder srm.conf-Datei und fügen Sie
    folgendes hinzu:

    AddType application/x-httpd-php .php
]]>
      </screen>
     </example>
     <note>
      <para>
       Ersetzen Sie <literal>php-5</literal> durch <literal>php-4</literal> und
       <literal>php5</literal> durch <literal>php4</literal> in PHP4.
      </para>
     </note>

     <para>
      Abhängig von Ihrer Apacheinstallation und Unixvariante könnte es viele
      verschiedene Methoden geben, um den Server anzuhalten und erneut zu
      starten. Unten sind einige typische Zeilen zum Neustart des Servers,
      für verschiedene Apache/Unix-Installationen. Sie sollten <literal>
      /path/to</literal> mit dem Pfad dieser Anwendungen auf Ihrem System
      ersetzen.
     </para>
     <para>
      <example>
       <title>Beispielbefehle, um Apache neu zu starten</title>
       <programlisting role="shell">
<![CDATA[
1. Verschiedene Linux- und SysV-Varianten:
/etc/rc.d/init.d/httpd restart

2. Verwendung der apachectl Skripte:
/path/to/apachectl stop
/path/to/apachectl start

3. httpdctl und httpsdctl (mit OpenSSL), ähnlich wie apachectl:
/path/to/httpsdctl stop
/path/to/httpsdctl start

4. Mit mod_ssl oder einem anderen SSL Server, könnten Sie manuell stoppen
   und starten wollen:
/path/to/apachectl stop
/path/to/apachectl startssl
]]>
       </programlisting>
      </example>
     </para>
     <para>
      Die Orte der apachectl- und http(s)dctl-Binärdateien sind häufig
      verschieden. Wenn Ihr System einen <literal>locate</literal>,
      <literal>whereis</literal> oder <literal>which</literal> Befehl
      besitzt, können diese Ihnen beim Auffinden des Serverkontrollprogrammes
      helfen.
     </para>

     <para>
      Verschiedene Beispiele zur Kompilierung von PHP für Apache wie folgt:
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Dies wird eine Bibliothek <filename>libphp5.so</filename> 
      (oder <filename> libphp4.so</filename> in PHP4) erzeugen, die mittels
      einer LoadModule-Zeile in der &httpd.conf; des Apache geladen wird.
      PostgreSQL-Unterstützung ist in diese Bibliothek eingebaut.
     </para>
     <para>
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql=shared
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Dies wird eine Bibliothek <filename>libphp4.so</filename> für Apache
      erzeugen, aber ebenso eine <filename>pgsql.so</filename>, die von PHP
      mit der Extension-Direktive in der &php.ini;-Datei oder durch explizites
      Laden in einem Skript mittels der Funktion <function>dl</function>
      geladen wird.
     </para>
     <para>
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Dies wird eine Bibliothek <filename>libmodphp5.a</filename>, eine
      <filename>mod_php5.c</filename> und einige zugehörige Dateien erzeugen
      und diese in das Verzeichnis <literal>src/modules/php5</literal>
      des Apache Quellcodes kopieren. Kompilieren Sie danach Apache mit
      <literal>--activate-module=src/modules/php5/libphp5.a</literal> und 
      das Apache Build System wird eine <filename>libphp5.a</filename> erzeugen
      und statisch in die Binärdatei <filename>httpd</filename> einbinden (ersetzen
      Sie <literal>php5</literal> durch <literal>php4</literal> für PHP 4).
      Unterstützung für PostgreSQL wird in diese <filename>httpd</filename>
      Binärdatei mit eingebaut, weshalb das Endergebnis eine einzige Datei namens
      <filename>httpd</filename> ist, welche den gesamten Apache und PHP
      beinhaltet.
     </para>
     <para>
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql=shared
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Genau wie oben, aber anstatt die Unterstützung für PostgreSQL direkt
      in <filename>httpd</filename> mit einzubinden wird eine gemeinsam verwendete
      Bibliothek namens <filename>pgsql.so</filename> erzeugt, die man mittels der
      &php.ini; Datei oder direkt über <function>dl</function> in PHP einbinden
      kann.
     </para>
     <para>
      Wenn Sie aus den verschiedenen Möglichkeiten auswählen, PHP zu kompilieren,
      sollten Sie die Vor- und Nachteile der jeweiligen Methoden bedenken. Das 
      Erzeugen einer gemeinsam verwendeten Bibliothek resultiert darin, dass man
      Apache getrennt kompilieren kann und nicht alles erneut kompilieren muss, wenn
      man etwas zu PHP hinzufügt oder ändert. Das direkte einbauen in Apache 
      (statisch) bedeutet, dass PHP schneller lädt und schneller läuft. Für
      weitere Informationen konsultieren Sie die Apache <ulink url="&url.apachedso;">
      Webseite zu DSO Unterstützung</ulink>.
     </para>
    <note>
     <para>
      Apaches mitgelieferte &httpd.conf; enthält derzeit einen Abschnitt, der
      wie folgt aussieht:
      <informalexample>
       <programlisting role="apache-conf">
<![CDATA[
User nobody
Group "#-1"
]]>
       </programlisting>
      </informalexample>
      Wenn man dies nicht auf "Group nogroup" oder etwas ähnliches ("Group daemon"
      ist auch üblich) ändert, wird PHP nicht imstande sein, Dateien zu öffnen.
     </para>
    </note>  
    <note>
     <para>
      Stellen Sie sicher, dass Sie die installierte Version von apxs
      angeben, wenn Sie <option role="configure">--with-apxs=/path/to/apxs</option>
      verwenden. Sie dürfen NICHT die apxs-Version angeben, die dem Apache
      Quellcode beiliegt, sondern jene, die tatsächlich auf Ihrem System
      installiert ist.
     </para>
    </note>   
   </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
