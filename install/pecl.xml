<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d1fa3096926b6cbaf9da1f831b6fe3302ae2e490 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="install.pecl" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Installation der PECL-Erweiterungen</title>

 <sect1 xml:id="install.pecl.intro">
  <title>Einführung in die PECL-Installationen</title>
  &pecl.moving.to.pie;
  <simpara>
   &link.pecl; ist eine Sammlung von PHP-Erweiterungen, die über das
   Paketierungssystem <link xlink:href="&url.php.pear;">PEAR</link> zur
   Verfügung gestellt werden. Dieser Abschnitt des Handbuchs soll zeigen, wie
   man PECL-Erweiterungen bekommt und installiert.
  </simpara>
  <simpara>
   Diese Anweisungen gehen davon aus, dass <literal>/pfad/zu/php/src/</literal>
   der Pfad zum Quellcode der PHP-Distribution ist und dass
   <literal>extname</literal> der Name der PECL-Erweiterung ist. Die Angaben
   müssen entsprechend angepasst werden. Diese Anweisungen setzen außerdem
   voraus, dass man mit dem
   <link xlink:href="&url.php.pear.cli;">pear-Befehl</link> vertraut ist. Die
   Informationen des PEAR-Handbuchs zum Befehl <command>pear</command> gelten
   auch für den Befehl <command>pecl</command>.
  </simpara>
  <simpara>
   Eine dynamische Erweiterung muss kompiliert, installiert und geladen
   werden, um brauchbar zu sein. Die im Folgenden beschriebenen Methoden
   bieten verschiedene Anweisungen, wie Erweiterungen erstellt und installiert
   werden können, laden diese aber nicht automatisch. Erweiterungen können
   über eine <link linkend="ini.extension">extension</link>-Direktive in der
   Datei &php.ini; oder mit der Funktion <function>dl</function> geladen werden.
  </simpara>
  <simpara>
   Wenn PHP-Module gebaut werden, ist es wichtig, die richtigen Versionen der
   benötigten Werkzeuge (autoconf, automake, libtool etc.) zu haben. Für
   Details zu den benötigten Werkzeugen und den benötigten Versionen siehe die
   <link xlink:href="&url.php.anongit;">Anweisungen für Git</link>.
  </simpara>
 </sect1>

 <sect1 xml:id="install.pecl.downloads">
  <title>Herunterladen der PECL-Erweiterungen</title>
  &pecl.moving.to.pie;
  <simpara>
   Es gibt mehrere Möglichkeiten, PECL-Erweiterungen herunterzuladen, &zb;:
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     Mit dem Befehl <command>pecl install extname</command> wird der Code der
     Erweiterung automatisch heruntergeladen, sodass in diesem Fall kein
     gesonderter Download erforderlich ist.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link xlink:href="&url.pecl;">&url.pecl;</link>
    </simpara>
    <simpara>
     Die PECL-Website enthält Informationen über die verschiedenen
     Erweiterungen, die vom PHP Development Team angeboten werden. Die dort
     bereitgestellten Informationen umfassen Changelog, Versionshinweise,
     Anforderungen und andere ähnliche Details.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <command>pecl download extname</command>
    </simpara>
    <simpara>
     PECL-Erweiterungen, deren Versionen auf der PECL-Website aufgeführt sind,
     können mit dem Befehl <link xlink:href="&url.php.pear.cli;">pecl</link>
     heruntergeladen und installiert werden. Es können auch bestimmte
     Versionen angegeben werden.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <acronym>git</acronym>
    </simpara>
    <simpara>
     Viele PECL-Erweiterungen sind auf GitHub zu finden.
     <!-- TODO Expand -->
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <acronym>SVN</acronym>
    </simpara>
    <simpara>
     Einige PECL-Erweiterungen sind auch in <acronym>SVN</acronym> verfügbar.
     Eine webbasierte Ansicht ist unter
     <link xlink:href="&url.php.svn;pecl/">&url.php.svn;pecl/</link> zu
     finden. Um direkt von <acronym>SVN</acronym> herunterzuladen, kann die
     folgende Befehlsfolge verwendet werden:
    </simpara>
    <screen>
<![CDATA[
$ svn checkout https://svn.php.net/repository/pecl/extname/trunk extname
]]>
    </screen>
   </listitem>
   <listitem>
    <simpara>
     Downloads für Windows
    </simpara>
    <simpara>
     Das PHP-Projekt bietet für die meisten PECL-Erweiterungen auf der
     Paket-Seite kompilierte Windows-DLLs an.
    </simpara>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="install.pecl.windows">
  <title>Installation einer PHP-Erweiterung unter Windows</title>
  <para>
   Unter Windows gibt es zwei Möglichkeiten, eine PHP-Erweiterung zu laden:
   Entweder sie wird in PHP einkompiliert oder sie wird als DLL geladen. Eine
   vorkompilierte Erweiterung zu laden ist die einfachste und auch die
   bevorzugte Methode.
  </para>
  <para>
   Um eine Erweiterung zu laden, muss sie als <filename>.dll</filename>-Datei
   auf dem System vorhanden sein. Alle Erweiterungen werden automatisch und
   regelmäßig von der PHP-Gruppe kompiliert (bezüglich des Downloads siehe
   nächster Abschnitt).
  </para>
  <para>
   Informationen darüber, wie Erweiterungen beim Kompilieren in PHP
   eingebunden werden, sind in der Dokumentation zum
   <link linkend="install.windows.building">Erstellen aus dem Quellcode</link>
   zu finden.
  </para>
  <para>
   Um eine eigenständige Erweiterung (auch DLL-Datei genannt) zu kompilieren,
   siehe die Dokumentation
   <link linkend="install.windows.building">Erstellen aus dem Quellcode</link>.
   Wenn die DLL-Datei weder in der PHP-Distribution noch in PECL enthalten
   ist, muss sie möglicherweise kompiliert werden, bevor die Erweiterung
   verwendet werden kann.
  </para>
  <sect2 xml:id="install.pecl.windows.find">
   <title>Wo finde ich eine Erweiterung?</title>
   <para>
    PHP-Erweiterungen heißen normalerweise <filename>php_*.dll</filename>
    (wobei der Stern für den Namen der Erweiterung steht) und befinden sich im
    Ordner <filename>PHP\ext</filename>.
   </para>
   <para>
    PHP wird mit den Erweiterungen ausgeliefert, die für die meisten
    Entwickler am nützlichsten sind. Sie werden als
    <emphasis>bundled</emphasis> Erweiterungen bezeichnet.
   </para>
   <para>
    Wenn allerdings die benötigte Funktionalität von keiner der mitgelieferten
    Erweiterungen zur Verfügung gestellt wird, kann eine solche Erweiterung
    vielleicht in &link.pecl; gefunden werden. Die PHP Extension Community
    Library (PECL) ist eine Sammlung von PHP-Erweiterungen, die eine Liste
    aller bekannten Erweiterungen sowie einen Hosting-Service für das
    Herunterladen und Entwickeln von PHP-Erweiterungen bereitstellt.
   </para>
   <para>
    Wenn eine Erweiterung für bestimmte Zwecke entwickelt wurde, kann diese
    auf PECL zur Verfügung gestellt werden, damit auch andere davon
    profitieren können, die die gleichen Anforderungen haben. Ein netter
    Nebeneffekt ist, dass dies eine gute Möglichkeit ist, Feedback,
    (hoffentlich) Dank, Fehlerberichte und sogar Korrekturen/Patches zu
    erhalten. Bevor eine Erweiterung zum Hosting in PECL eingereicht wird,
    sollte <link xlink:href="&url.pecl.submit;">PECL submit</link> gelesen
    werden.
   </para>
  </sect2>

  <sect2 xml:id="install.pecl.windows.which">
   <title>Welche Erweiterung soll ich herunterladen?</title>
   <para>
    <emphasis>Häufig gibt es mehrere Versionen von einer DLL:</emphasis>
    <itemizedlist>
     <listitem>
      <simpara>
       Verschiedene Versionsnummern (zumindest die ersten beiden Nummern
       sollten übereinstimmen)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Verschiedene Einstellungen für die Thread-Sicherheit
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Verschiedene Prozessorarchitekturen (x86, x64, ...)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Verschiedene Einstellungen für das Debugging
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>etc.</literal>
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Es ist zu beachten, dass die Einstellungen der Erweiterung mit den
    Einstellungen des verwendeten PHP-Programms übereinstimmen sollten. Das
    folgende PHP-Skript zeigt <emphasis>alle</emphasis> PHP-Einstellungen an:
   </para>
   <para>
    <example>
     <title>
      Aufruf der Funktion <function>phpinfo</function>
     </title>
     <programlisting role="php">
<![CDATA[
<?php
phpinfo();
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Alternativ können Sie Folgendes über die Befehlszeile ausführen:
    <screen>
<![CDATA[
drive:\path\to\php\executable\php.exe -i
]]>
    </screen>
   </para>
  </sect2>

  <sect2 xml:id="install.pecl.windows.loading">
   <title>Laden einer Erweiterung</title>
   <para>
    Die übliche Methode, eine PHP-Erweiterung zu laden, besteht darin, sie in
    die Konfigurationsdatei &php.ini; einzutragen. Es ist zu beachten, dass
    bereits viele Erweiterungen in der &php.ini; enthalten sind, und dass nur
    das Semikolon entfernt werden muss, um sie zu aktivieren.
   </para>
   <para>
    Es ist auch zu beachten, dass seit PHP 7.2.0 anstelle des Dateinamens der
    Erweiterung auch deren Name verwendet werden kann. Da dies unabhängig vom
    Betriebssystem gilt und insbesondere für Neueinsteiger einfacher ist, ist
    dies die empfohlene Methode, um die zu ladenden Erweiterungen anzugeben.
    Dateinamen werden aus Gründen der Kompatibilität mit früheren Versionen
    weiterhin unterstützt.
   </para>
   <screen>
<![CDATA[
;extension=php_extname.dll
]]>
   </screen>
   <screen>
<![CDATA[
extension=php_extname.dll
]]>
   </screen>
   <screen>
<![CDATA[
; Seit PHP 7.2.0 vorzuziehen:
extension=extname
zend_extension=another_extension
]]>
   </screen>
   <para>
    Manche Webserver können allerdings etwas verwirrend sein, da sie nicht die
    &php.ini; aus der PHP-Distribution verwenden. Um herauszufinden, wo sich
    die tatsächlich verwendete &php.ini; befindet, kann der Pfad in
    <function>phpinfo</function> gesucht werden:
   </para>
   <screen>
<![CDATA[
Configuration File (php.ini) Path  C:\WINDOWS
]]>
   </screen>
   <screen>
<![CDATA[
Loaded Configuration File   C:\Program Files\PHP\8.2\php.ini
]]>
   </screen>
   <para>
    Nachdem Sie eine Erweiterung aktiviert haben, speichern Sie die &php.ini;,
    starten den Webserver neu und überprüfen die <function>phpinfo</function>
    erneut. Die neue Erweiterung sollte nun ihren eigenen Abschnitt haben.
   </para>
  </sect2>

  <sect2 xml:id="install.pecl.windows.problemsolving">
   <title>Probleme beheben</title>
   <para>
    Wenn die Erweiterung nicht in <function>phpinfo</function> erscheint,
    sollten die Logs überprüft werden, um herauszufinden, wo das Problem liegt.
   </para>
   <para>
    Wenn PHP auf der Befehlszeile (CLI) verwendet wird, ist der Fehler beim
    Laden der Erweiterung direkt auf dem Bildschirm sehen.
   </para>
   <para>
    Wenn PHP über einen Webserver verwendet wird, hängen Ort und Format der
    Logs von der Software ab. Da dies nichts mit PHP selbst zu tun hat,
    sollte die Dokumentation des Webservers zu Rate gezogen werden, um die
    Logs zu finden.
   </para>
   <para>
    Die häufigsten Ursachen für Probleme sind die Speicherorte der DLL selbst
    und der DLLs, von denen sie abhängt, der Wert der Einstellung
    "<link linkend="ini.extension-dir">extension_dir</link>" in der &php.ini;
    und falsche Einstellungen beim Kompilieren.
   </para>
   <para>
    Wenn das Problem auf falsche Einstellungen beim Kompilieren zurückzuführen
    ist, wurde wahrscheinlich nicht die richtige DLL heruntergeladen.
    Versuchen Sie, die Erweiterung nochmal mit den richtigen Einstellungen
    herunterzuladen. Auch hier kann <function>phpinfo</function> eine große
    Hilfe sein.
   </para>
  </sect2>

 </sect1>

 <sect1 xml:id="install.pecl.pear">
  <title>Kompilieren dynamischer PECL-Erweiterungen mit dem Befehl pecl</title>
  <simpara>
   PECL bietet eine einfache Möglichkeit, dynamische PHP-Erweiterungen zu
   erstellen. Verwenden Sie dafür den folgenden
   <link xlink:href="&url.php.pear.cli;">PECL-Befehl</link>:
  </simpara>
  <screen>
<![CDATA[
$ pecl install extname
]]>
  </screen>
  <simpara>
   Mit diesem Befehl wird der Quellcode für <emphasis>extname</emphasis>
   heruntergeladen, kompiliert und <filename>extname.so</filename> ins
   Verzeichnis <link linkend="ini.extension-dir">extension_dir</link>
   installiert. <filename>extname.so</filename> kann dann über die &php.ini;
   geladen werden
  </simpara>
  <simpara>
   Standardmäßig werden durch den Befehl <command>pecl</command> keine Pakete
   installiert, die mit dem Status <literal>alpha</literal> oder
   <literal>beta</literal> gekennzeichnet sind. Wenn keine
   <literal>stable</literal>-Pakete verfügbar sind, kann mit dem folgenden
   Befehl ein <literal>beta</literal>-Paket installiert werden:
  </simpara>
  <screen>
<![CDATA[
$ pecl install extname-beta
]]>
  </screen>
  <para>
   Mit dieser Variante kann auch eine bestimmte Version installiert werden:
  </para>
  <screen>
<![CDATA[
$ pecl install extname-0.1
]]>
  </screen>
  <note>
   <para>
    Nachdem die Erweiterung in der &php.ini; aktiviert wurde, muss der
    Webserver neu gestartet werden, damit die Änderungen übernommen werden.
   </para>
  </note>
 </sect1>

 <sect1 xml:id="install.pecl.phpize">
  <title>Kompilieren dynamischer PECL-Erweiterungen mit phpize</title>
  <simpara>
   Manchmal ist es nicht möglich, das Installationsprogramm von
   <command>pecl</command> zu verwenden. Dies könnte an einer Firewall liegen,
   oder daran, dass die zu installierende Erweiterung nicht als
   PECL-kompatibles Paket verfügbar ist, &zb; weil sie noch nicht auf Git
   veröffentlicht wurde. Wenn eine solche Erweiterung erstellt werden muss,
   kannen dies mit einfacheren Build-Tools manuell erledigt werden.
  </simpara>
  <simpara>
   Mit dem Befehl <command>phpize</command> wird die Build-Umgebung für eine
   PHP-Erweiterung vorbereitet. Im folgenden Beispiel befinden sich die
   Quellen für eine Erweiterung in einem Verzeichnis namens
   <filename>extname</filename>:
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd extname
$ phpize
$ ./configure
$ make
# make install
]]>
   </screen>
  </para>
  <simpara>
   Wenn alles gutgeht, wird <filename>extname.so</filename> erstellt und im
   <link linkend="ini.extension-dir">Verzeichnis für PHP-Erweiterungen</link>
   abgelegt. Bevor die Erweiterung verwendet werden kann, muss die Zeile
   <literal>extension=extname.so</literal> in die php.ini eingefügt werden.
  </simpara>
  <simpara>
   Wenn es den Befehl <literal>phpize</literal> auf dem System nicht gibt und
   vorkompilierte Pakete (&zb; RPMs) verwendet werden, sollten unbedingt auch
   die entsprechende Entwicklerversion des PHP-Pakets installiert werden, da
   dieses oft den Befehl <literal>phpize</literal> sowie die entsprechenden
   Header zum Erstellen von PHP und seinen Erweiterungen enthält.
  </simpara>
  <simpara>
   Mit dem Befehl <command>phpize --help</command> können zusätzliche
   Informationen zur Verwendung angezeigt werden.
  </simpara>
 </sect1>

 <sect1 xml:id="install.pecl.php-config">
  <title>
   <command>php-config</command>
  </title>

  <para>
   <command>php-config</command> ist ein einfaches Shell-Skript, das
   Informationen über die Konfiguration des installierten PHP-Systems liefert.
  </para>

  <para>
   Wenn mehrere PHP-Versionen installiert sind, kann beim Kompilieren der
   Erweiterungen angeben, für welche Version diese erstellt werden soll, indem
   während der Konfiguration die Option
   <literal>--with-php-config</literal> verwendet wird und der Pfad des
   jeweiligen <command>php-config</command>-Skripts angegeben wird.
  </para>

  <para>
   Die Liste der Kommandozeilenoptionen, die das Skript
   <command>php-config</command> zur Verfügung stellt, lässt sich jederzeit
   abfragen, indem <command>php-config</command> mit der Option
   <option>-h</option> ausgeführt wird:
   <screen>
<![CDATA[
Usage: /usr/local/bin/php-config [OPTION]
Options:
  --prefix            [...]
  --includes          [...]
  --ldflags           [...]
  --libs              [...]
  --extension-dir     [...]
  --include-dir       [...]
  --php-binary        [...]
  --php-sapis         [...]
  --configure-options [...]
  --version           [...]
  --vernum            [...]
]]>
   </screen>
  </para>

  <para>
   <table>
    <title>Befehlszeilenoptionen</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Option</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>--prefix</entry>
       <entry>
        Präfix des Verzeichnisses, in dem PHP installiert ist, &zb; /usr/local
       </entry>
      </row>
      <row>
       <entry>--includes</entry>
       <entry>
        Liste der <literal>-I</literal>-Optionen mit allen Include-Dateien
       </entry>
      </row>
      <row>
       <entry>--ldflags</entry>
       <entry>
        <literal>LD</literal>, mit denen PHP kompiliert wurde
       </entry>
      </row>
      <row>
       <entry>--libs</entry>
       <entry>Zusätzliche Bibliotheken, mit denen PHP kompiliert wurde</entry>
      </row>
      <row>
       <entry>--extension-dir</entry>
       <entry>
        Verzeichnis, in dem standardmäßig nach Erweiterungen gesucht wird
       </entry>
      </row>
      <row>
       <entry>--include-dir</entry>
       <entry>
        Präfix des Verzeichnisses, in das Header-Dateien standardmäßig
        installiert werden
       </entry>
      </row>
      <row>
       <entry>--php-binary</entry>
       <entry>Vollständiger Pfad zum PHP-CLI- oder -CGI-Binary</entry>
      </row>
      <row>
       <entry>--php-sapis</entry>
       <entry>Alle verfügbaren SAPI-Module</entry>
      </row>
      <row>
       <entry>--configure-options</entry>
       <entry>
        Konfigurationsoptionen zur Wiederherstellung der aktuellen
        PHP-Installationseinstellungen
       </entry>
      </row>
      <row>
       <entry>--version</entry>
       <entry>PHP-Version</entry>
      </row>
      <row>
       <entry>--vernum</entry>
       <entry>PHP-Version als Ganzzahl</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </sect1>

 <sect1 xml:id="install.pecl.static">
  <title>PECL-Erweiterungen statisch in PHP kompilieren</title>
  <simpara>
   In manchen Fällen kann es nötig sein, eine PECL-Erweiterung statisch in das
   PHP-Binary zu kompilieren. Dazu muss der Quellcode der Erweiterung in das
   Verzeichnis <literal>/pfad/zu/php/src/</literal> einfügt werden und das
   PHP-Build-System angewiesen werden, sein configure-Skript neu zu erstellen.
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd /pfad/zu/php/src/ext
$ pecl download extname
$ gzip -d < extname.tgz | tar -xvf -
$ mv extname-x.x.x extname
]]>
   </screen>
  </para>
  <simpara>
   Dadurch wird das folgende Verzeichnis erstellt:
  </simpara>
  <screen>
<![CDATA[
/pfad/zu/php/src/ext/extname
]]>
  </screen>
  <simpara>
   An dieser Stelle muss PHP veranlasst werden, das configure-Skript neu zu
   erstellen, und anschließend kann PHP gebaut werden wie gewohnt:
  </simpara>
  <screen>
<![CDATA[
$ cd /pfad/zu/php/src/
$ rm configure
$ ./buildconf --force
$ ./configure --help
$ ./configure --with-extname --enable-someotherext --with-foobar
$ make
$ make install
]]>
  </screen>
  <note>
   <simpara>
    Um das Skript <command>buildconf</command> auszuführen, werden
    <command>autoconf</command> <literal>2.68</literal> und
    <command>automake</command> benötigt. Neuere Versionen von autoconf
    könnten funktionieren, werden aber nicht unterstützt.
   </simpara>
  </note>
  <simpara>
   Ob <option role="configure">--enable-extname</option> oder
   <option role="configure">--with-extname</option> verwendet wird, hängt von
   der Erweiterung ab. Bei einer Erweiterung, die keine externen Bibliotheken
   benötigt, wird in der Regel <option role="configure">--enable</option>
   verwendet. Um sicher zu sein, kann nach <command>buildconf</command>
   folgender Befehl ausgeführt werden:
  </simpara>
  <screen>
<![CDATA[
$ ./configure --help | grep extname
]]>
  </screen>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
