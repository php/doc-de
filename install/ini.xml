<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338206 Maintainer: nikic Status: wip -->
<!-- CREDITS: wiesemann -->

<chapter xml:id="configuration" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Laufzeiteinstellungen</title>
 
 <sect1 xml:id="configuration.file">
  <title>Die Konfigurationsdatei</title>
  
  <simpara>
   Die Konfigurationsdatei wird beim Start von PHP eingelesen. Für die
   Servermodul-Versionen von PHP geschieht dies nur einmal beim Start des
   Webservers. Für die <acronym>CGI</acronym>- und
   <acronym>CLI</acronym>-Versionen geschieht dies bei jedem Aufruf.
  </simpara>
  <para>
   Nach der &php.ini; wird an folgenden Orten in der angegebenen Reihenfolge
   gesucht:
   <itemizedlist>
    <listitem>
     <simpara>
      Spezielle Orte für SAPI-Module (<literal>PHPIniDir</literal>-Direktive
      im Apache2, <literal>-c</literal> Kommandozeilenparameter in CGI und
      CLI, <literal>php_ini</literal>-Parameter in NSAPI,
      <literal>PHP_INI_PATH</literal>-Umgebungsvariable im THTTPD)
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Die <varname>PHPRC</varname>-Umgebungsvariable. Vor PHP 5.2.0 wurde
      diese nach dem unten angegebenen Registrierungsschlüssel geprüft.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Seit PHP 5.2.0 kann die Position der <literal>php.ini</literal>-Datei
      für verschiedene Versionen von PHP gesetzt werden. Die folgenden
      Registrierungsschlüssel werden in der angegebenen Reihenfolge
      durchsucht:
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y.z]</literal>,
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y]</literal> und
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x]</literal>, wobei x, y und z
      die Major-, Minor- und Release-Versionen von PHP darstellen. Falls ein
      Wert für <literal>IniFilePath</literal> in einem dieser Schlüssel
      existiert, so wird der zuerst gefundene als Position der
      <literal>php.ini</literal> verwendet (nur unter Windows).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP]</literal>, Wert von
      <literal>IniFilePath</literal> (nur unter Windows).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Aktuelles Arbeitsverzeichnis (außer CLI).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Das Webserververzeichnis (für SAPI-Module) oder das PHP-Verzeichnis
      (andernfalls in Windows).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Windows-Verzeichnis (<filename class="directory">C:\windows</filename>
      oder <filename class="directory">C:\winnt</filename>) (unter Windows)
      oder die <literal>--with-config-file-path</literal>-Kompilierungsoption.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Falls die Datei <filename>php-SAPI.ini</filename> existiert (wobei SAPI die
   verwendete SAPI ist, was als Dateinamen z.B.
   <filename>php-cli.ini</filename> oder <filename>php-apache.ini</filename> 
   ergibt), wird diese anstelle der &php.ini; verwendet. Der Name der SAPI
   kann durch <function>php_sapi_name</function> ermittelt werden.
  </para>
  <note>
   <para>
    Der Apache-Webserver wechselt beim Start das Arbeitsverzeichnis in das
    Wurzelverzeichnis, weshalb PHP versucht, die &php.ini; aus dem
    Wurzelverzeichnis zu lesen, wenn diese existiert.
   </para>
  </note>
  <para>
   Wie untenstehend gezeigt können Umgebungsvariablen in &php.ini; verwendet
   werden.
  </para>
  <para>
   <example>
    <title>&php.ini; Umgebungsvariablen</title>
    <programlisting role="ini">
<![CDATA[
; PHP_MEMORY_LIMIT ist der Wert einer Umgebungsvariablen
memory_limit = ${PHP_MEMORY_LIMIT}
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Die Optionen der &php.ini; für Extensions werden auf den Handbuchseiten
   der jeweiligen Extensions behandelt. Die <link linkend="ini">Beschreibung
   der Core-&php.ini;-Einstellungen</link> ist im Anhang verfügbar. Es werden
   jedoch wahrscheinlich nicht alle PHP-Direktiven im Handbuch erläutert. Für
   eine komplette Liste der in Ihrer PHP-Version verfügbaren Einstellungen
   lesen Sie bitte die gut kommentierte &php.ini;. Möglicherweise kann die
   <link xlink:href="&url.php.git.phpini;">aktuellste &php.ini;</link> aus dem
   Git-Repository ebenfalls hilfreich sein.
  </para>
  <para>
   <example>
    <title>&php.ini;-Beispiel</title>
    <programlisting role="ini">
<![CDATA[
; Jeder Text in einer Zeile nach einem Semikolon, welches nicht
; in Anführungszeichen steht, wird ignoriert
[php] ; Abschnittsmarkierungen (Text in eckigen Klammern) werden ebenfalls ignoriert
; Boolesche Werte können auf einen der folgenden Werte eingestellt werden:
;      true, on, yes
; oder false, off, no, none
register_globals = off
track_errors = yes

; Sie können Zeichenketten in Anführungszeichen einschließen
include_path = ".:/usr/local/lib/php"

; Backslashes werden wie alle anderen Zeichen behandelt
include_path = ".;c:\php\lib"
]]>
    </programlisting>
    <!-- TODO: add more details about values and expressions -->
   </example>
  </para>
  <para>
   Seit PHP 5.1.0 ist es möglich, sich auf bereits definierte .ini-Variablen
   innerhalb der .ini-Dateien zu beziehen. Zum Beispiel:
   <literal>open_basedir = ${open_basedir}":/new/dir"</literal>.
  </para>
  <sect2 xml:id="configuration.file.scan">
   <title>Scan directories</title>

   <para>
    It is possible to configure PHP to scan for .ini files in a directory
    after reading &php.ini;. This can be done at compile time by setting the
    <option role="configure">--with-config-file-scan-dir</option> option. In
    PHP 5.2.0 and later, the scan directory can then be overridden at run time
    by setting the <varname>PHP_INI_SCAN_DIR</varname> environment variable.
   </para>

   <para>
    It is possible to scan multiple directories by separating them with the
    platform-specific path separator (<literal>;</literal> on Windows, NetWare
    and RISC OS; <literal>:</literal> on all other platforms; the value PHP is
    using is available as the <constant>PATH_SEPARATOR</constant> constant).
    If a blank directory is given in <varname>PHP_INI_SCAN_DIR</varname>, PHP
    will also scan the directory given at compile time via
    <option role="configure">--with-config-file-scan-dir</option>.
   </para>

   <para>
    Within each directory, PHP will scan all files ending in
    <literal>.ini</literal> in alphabetical order. A list of the files that
    were loaded, and in what order, is available by calling
    <function>php_ini_scanned_files</function>, or by running PHP with the
    <option>--ini</option> option.
   </para>

   <informalexample>
    <screen>
<![CDATA[
Assuming PHP is configured with --with-config-file-scan-dir=/etc/php.d,
and that the path separator is :...

$ php
  PHP will load all files in /etc/php.d/*.ini as configuration files.

$ PHP_INI_SCAN_DIR=/usr/local/etc/php.d php
  PHP will load all files in /usr/local/etc/php.d/*.ini as
  configuration files.

$ PHP_INI_SCAN_DIR=:/usr/local/etc/php.d php
  PHP will load all files in /etc/php.d/*.ini, then
  /usr/local/etc/php.d/*.ini as configuration files.

$ PHP_INI_SCAN_DIR=/usr/local/etc/php.d: php
  PHP will load all files in /usr/local/etc/php.d/*.ini, then
  /etc/php.d/*.ini as configuration files.
]]>
    </screen>
   </informalexample>
  </sect2>
  <sect2 xml:id="configuration.file.changelog">
   &reftitle.changelog;

   <para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>7.0.0</entry>
        <entry>
         Hash marks (<literal>#</literal>) are no longer recognized as comments.
        </entry>
       </row>
       <row>
        <entry>5.3.0</entry>
        <entry>
         Hash marks (<literal>#</literal>) should no longer be used as comments
         and will throw a deprecation warning if used.
        </entry>
       </row>
       <row>
        <entry>5.2.0</entry>
        <entry>
         The <varname>PHP_INI_SCAN_DIR</varname> environment variable can be
         set to override the scan directory set via the configure script.
        </entry>
       </row>
       <row>
        <entry>5.1.0</entry>
        <entry>
         It is possible to refer to existing .ini variables from within .ini files.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </sect2>
  </sect1>
  
  <sect1 xml:id="configuration.file.per-user">
   <title>.user.ini-Dateien</title>
   
   <simpara>
    Seit PHP 5.3.0 bietet PHP Unterstützung für Konfigurations-INI-Dateien
    auf Verzeichnisebene an. Diese Dateien werden
    <emphasis>nur</emphasis> nur durch die CGI/FastCGI-SAPI
    verarbeitet. Durch diese Funktionalität wird die
    htscanner-PECL-Erweiterung obsolet. Falls Sie Apache benutzen,
    können Sie für den selben Effekt &htaccess;-Dateien benutzen.
   </simpara>
   
   <simpara>
    Zusätzlich zur Haupt-&php.ini;-Datei sucht PHP auch nach INI-Dateien
    in jedem Verzeichnis, beginnend mit dem Verzeichnis in der die
    angeforderte PHP-Datei liegt, aufwärts bis hin zum aktuellen "document root"
    (wie in <varname>$_SERVER['DOCUMENT_ROOT']</varname> konfiguriert).
    Falls sich die PHP-Datei außerhalb des "document root" befindet, wird
    nur das Verzeichnis, in dem sich die Datei befindet, durchsucht.
   </simpara>
   <simpara>
    Nur INI-Einstellungen mit den Modi <constant>PHP_INI_PERDIR</constant>
    und <constant>PHP_INI_USER</constant> werden als .user.ini-INI-Dateien
    erkannt.
   </simpara>
   
   <simpara>
    Zwei neue INI-Direktiven, <literal>user_ini.filename</literal> und
    <literal>user_ini.cache_ttl</literal>,
    <!--
        <link linkend="ini.user-ini.filename">user_ini.filename</link> and
        <link linkend="ini.user-ini.cache-ttl">user_ini.cache_ttl</link>
    -->
    steuern die Nutzung der Benutzer-INI-Dateien.
   </simpara>
   
   <simpara>
    <literal>user_ini.filename</literal> setzt den Namen der Datei, die
    von PHP in jedem Verzeichnis gesucht wird; falls dies auf eine leere
    Zeichenkette gesetzt wird, sucht PHP nach keiner Datei. Der Standardwert
    ist <literal>.user.ini</literal>.
   </simpara>
   
   <simpara>
    <literal>user_ini.cache_ttl</literal> steuert, wie oft die
    Benutzer-INI-Dateien neu eingelesen werden. Der Standardwert beträgt
    300 Sekunden (5 Minuten).
   </simpara>
  </sect1>
  
  <sect1 xml:id="configuration.changes.modes">
   <title>Wo Konfigurationseinstellungen gesetzt werden können</title>
   
   <para>
    Diese Modi bestimmen wann und wo eine PHP-Direktive gesetzt oder
    nicht gesetzt werden kann. Jede Direktive im Handbuch verweist auf
    einen dieser Modi. Zum Beispiel können einige Einstellungen in
    einem PHP-Skript mittels <function>ini_set</function> gesetzt
    werden, während andere nur über die &php.ini; oder &httpd.conf;
    gesetzt werden können.
   </para>
   
   <para>
    Ein Beispiel ist die <link
    linkend="ini.output-buffering">output_buffering</link>-Einstellung.
    Wegen <literal>PHP_INI_PERDIR</literal> kann sie nicht mittels
    <function>ini_set</function> gesetzt werden. Die <link
    linkend="ini.display-errors">display_errors</link>-Einstellung
    hingegegen kann wegen <literal>PHP_INI_ALL</literal> überall
    gesetzt werden, also auch mittels <function>ini_set</function>.
   </para>
   
   <para>
    <table>
     <title>Definition der PHP_INI_*-Modi</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Modus</entry>
        <entry>Bedeutung</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>PHP_INI_USER</literal></entry>
        <entry>
         Eintrag kann in Benutzerskripten (z.B. mittels
         <function>ini_set</function>) oder in der <link
         linkend="configuration.changes.windows">Windows-Registry</link>
         gesetzt werden. Seit PHP 5.3 kann die Option auch in der
         &user-ini; gesetzt werden.
        </entry>
       </row>
       <row>
        <entry><literal>PHP_INI_PERDIR</literal></entry>
        <entry>
         Eintrag kann in der &php.ini;, &htaccess;, &httpd.conf;
         oder &user-ini; (seit PHP 5.3) gesetzt werden
        </entry>
       </row>
       <row>
        <entry><literal>PHP_INI_SYSTEM</literal></entry>
        <entry>
         Eintrag kann in der &php.ini; oder &httpd.conf;
         gesetzt werden
        </entry>
       </row>
       <row>
        <entry><literal>PHP_INI_ALL</literal></entry>
        <entry>Eintrag kann überall gesetzt werden</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
  </sect1>
  
  <sect1 xml:id="configuration.changes">
   <title>Wie man Konfigurationseinstellungen ändert</title>
   
   <sect2 xml:id="configuration.changes.apache">
    <title>PHP läuft als Apachemodul</title>
    <simpara>
     Wenn man PHP als Apachemodul verwendet, kann man die
     Konfigurationseinstellungen mittels Direktiven in den Apache-Konfigurationsdateien
     (z.B. &httpd.conf;) und &htaccess;-Dateien
     ändern. Dafür benötigt man "AllowOverride Options"- oder
     "AllowOverride All"-Privilegien.
    </simpara>
    
    <para>
     Es gibt verschiedene Apachedirektiven, die es erlauben,
     die PHP-Konfiguration aus den Apache-Konfigurationsdateien heraus zu
     ändern. Für eine Liste von Direktiven, die als
     <constant>PHP_INI_ALL</constant>, <constant>PHP_INI_PERDIR</constant>,
     oder <constant>PHP_INI_SYSTEM</constant> definiert sind, werfen Sie einen
     Blick auf den Anhang
     <link linkend="ini.list">Liste von php.ini Einstellungen</link>.
    </para>
    
    <para>
     <variablelist>
      <varlistentry>
       <term>
        <systemitem role="directive">php_value</systemitem>
        <parameter>Name</parameter>
        <parameter>Wert</parameter>
       </term>
       <listitem>
        <para>
         Setzt den Wert der angegebenen Direktive.
         Kann nur für Direktiven mit den Typen <constant>PHP_INI_ALL</constant>
         und <constant>PHP_INI_PERDIR</constant> verwendet werden. Um einen
         vorher gesetzten Wert zu löschen, verwenden Sie
         <literal>none</literal> als Wert.
        </para>
        <note>
         <simpara>
          Verwenden Sie <systemitem role="directive">php_value</systemitem>
          nicht, um boolesche Werte zu setzen.
          <systemitem role="directive">php_flag</systemitem> (siehe unten)
          sollte stattdessen verwendet werden.
         </simpara>
        </note>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_flag</systemitem>
        <parameter>Name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         Setzt eine boolesche Konfigurationsdirektive.
         Kann nur für Direktiven mit den Typen <constant>PHP_INI_ALL</constant>
         und <constant>PHP_INI_PERDIR</constant> verwendet werden.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_value</systemitem>
        <parameter>Name</parameter>
        <parameter>Wert</parameter>
       </term>
       <listitem>
        <para>
         Setzt den Wert der angegebenen Direktive.
         Dies kann <emphasis>nicht</emphasis> in &htaccess;-Dateien verwendet
         werden.
         Jeder Direktiventyp, der mit <systemitem role="directive">
         php_admin_value</systemitem> gesetzt wird, kann nicht durch
         &htaccess;-Direktiven oder mit <function>ini_set</function>
         überschrieben werden.
         Um einen vorher gesetzten Wert zu löschen, verwenden Sie
         <literal>none</literal> als Wert.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_flag</systemitem>
        <parameter>Name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         Setzt eine boolesche Konfigurationsdirektive.
         Dies kann <emphasis>nicht</emphasis> in &htaccess;-Dateien verwendet
         werden.
         Jeder Direktiventyp, der mit <systemitem role="directive">php_admin_value</systemitem>
         gesetzt wird, kann nicht durch &htaccess;-Direktiven oder
         <function>ini_set</function> überschrieben werden.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <example>
      <title>Apache-Konfigurationsbeispiel</title>
      <programlisting role="ini">
<![CDATA[
<IfModule mod_php5.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag engine on
</IfModule>
<IfModule mod_php4.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag engine on
</IfModule>
]]>
      </programlisting>
     </example>
    </para>
    <caution>
     <para>
      PHP-Konstanten existieren nicht außerhalb von PHP. So kann man z.B. in
      der &httpd.conf; nicht PHP-Konstanten wie <constant>E_ALL</constant>
      oder <constant>E_NOTICE</constant> verwenden, um den Wert der
      <link linkend="ini.error-reporting">error_reporting</link>-Direktive
      zu ändern, da diese keine Bedeutung haben und als <emphasis>0</emphasis>
      ausgewertet werden. Verwenden Sie stattdessen die zugehörigen
      Bitmasken-Werte direkt. Diese Konstanten können in der &php.ini;
      verwendet werden.
     </para>
    </caution>
   </sect2>
   
   <sect2 xml:id="configuration.changes.windows">
    <title>Die PHP-Konfiguration mit der Windows Registry ändern</title>
    <simpara>
     Wenn Sie PHP unter Windows einsetzen, können Sie die
     Konfigurationseinstellungen für jedes einzelne Verzeichnis mit der
     Windows-Registry anpassen. Die Werte der Konfiguration werden unterhalb
     des Registrierungsschlüssels
     <literal>HKLM\SOFTWARE\PHP\Per Directory Values</literal> in den zum
     Verzeichnisnamen passenden Unterschlüssel gespeichert.Zum Beispiel
     würden Werte für das Verzeichnis <literal>c:\inetpub\wwwroot</literal>
     im Registrierungsschlüssel <literal>HKLM\SOFTWARE\PHP\Per Directory
     Values\c\inetpub\wwwroot</literal> gespeichert werden. Die
     Einstellungen für dieses Verzeichnis wären für alle Skripte aktiv,
     die in diesem Verzeichnis oder einem seiner Unterverzeichnisse laufen.
     Die Werte in diesem Schlüssel sollten den Namen eine PHP-
     Konfigurationsdirektive und einen Zeichenkettenwert haben.
     Konstenten in den Werten werden nicht ausgewertet. Es können jedoch
     nur Werte, die in <constant>PHP_INI_USER</constant> änderbar sind,
     auf diese Weise gesetzt werden, nicht als
     <constant>PHP_INI_PERDIR</constant> deklarierte Werte.
    </simpara>
   </sect2>
   
   <sect2 xml:id="configuration.changes.other">
    <title>Andere Zugänge zu PHP</title>
    <para>
     Egal wie Sie PHP betreiben, Sie können bestimmte Werte zur Laufzeit
     Ihrer Skripte mittels <function>ini_set</function> setzen. Werfen Sie
     dazu einen Blick auf die Dokumentation von <function>ini_set</function>.
    </para>
    <para>
     Wenn Sie an einer kompletten Liste von Konfigurationseinstellungen Ihres
     Systems inklusive deren aktuellen Werten interessiert sind, können Sie
     die Funktion <function>phpinfo</function> ausführen und die daraus
     resultierende Seite betrachten. Sie können auf die Werte einzelner
     Konfigurationsdirektiven zur Laufzeit mittels
     <function>ini_get</function> oder <function>get_cfg_var</function>
     zugreifen.
    </para>
   </sect2>
  </sect1>
  
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
