<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.14 Maintainer: simp Status: ready -->
 <chapter id="configuration">
  <title>Laufzeiteinstellungen</title>

  <sect1 id="configuration.file">
   <title>Die Konfigurationsdatei</title>

   <simpara>
    Die Konfigurationsdatei (in PHP 3 <filename>php3.ini</filename>
    genannt, seit PHP 4 nur noch &php.ini;) wird beim Start von PHP
    eingelesen. Für die Servermodul-Versionen von PHP geschieht dies
    nur einmal beim Start des Webservers. Für die <acronym>CGI</acronym>-
    und <acronym>CLI</acronym>-Versionen geschieht dies bei jedem Aufruf.
   </simpara>
   <para>
    Nach der &php.ini; wird an folgenden Orten in der angegebenen 
    Reihenfolge gesucht:
    <itemizedlist>
     <listitem>
      <para>
       Spezielle Orte für SAPI Module (<literal>PHPIniDir</literal>-Direktive
       im Apache2, <literal>-c</literal> Kommandozeilenparameter in CGI
       in CLI, <literal>php_ini</literal>-Parameter in NSAPI, 
       <literal>PHP_INI_PATH</literal>-Umgebungsvariable im THTTPD)
      </para>
     </listitem>
     <listitem>
      <para>
        Die <varname>PHPRC</varname>-Umgebungsvariable. Vor PHP 5.2.0 wurde
        dies nach dem unten angegebenen Registrierungsschlüssel geprüft.
      </para>
     </listitem>
     <listitem>
      <para>
        <literal>HKEY_LOCAL_MACHINE\SOFTWARE\PHP\IniFilePath</literal>
        (Windows Registry)
      </para>
     </listitem>
     <listitem>
      <para>
       Aktuelles Arbeitsverzeichnis (für CLI)
      </para>
     </listitem>
     <listitem>
      <para>
       Das Webserververzeichnis (für SAPI-Module) oder das PHP-Verzeichnis
       (andernfalls in Windows)
      </para>
     </listitem>
     <listitem>
      <para>
       Windows-Verzeichnis (<filename class="directory">C:\windows</filename>
       oder <filename class="directory">C:\winnt</filename>) (unter Windows)
       oder die <literal>--with-config-file-path</literal> 
       Kompilierungsoption
      </para>
     </listitem>
    </itemizedlist> 
   </para>
   <para>
    Falls die Datei <filename>php-SAPI.ini</filename> existiert (wobei SAPI
    die verwendete SAPI ist, was als Dateinamen z.B. 
    <filename>php-cli.ini</filename> ergibt), wird diese anstelle der &php.ini;
    verwendet. Der Name der SAPI kann durch <function>php_sapi_name</function>
    ermittelt werden.
   </para>
   <note>
    <para>
     Der Apache-Webserver wechselt beim Start das Arbeitsverzeichnis
     in das Wurzelverzeichnis, weshalb PHP versucht die &php.ini; aus
     dem Wurzelverzeichnis zu lesen, wenn diese existiert. 
    </para>
   </note>
   <para>
    Die Optionen der &php.ini; für Extensions werden auf den Handbuchseiten
    der jeweiligen Extensions behandelt. Die <link linkend="ini">Beschreibung 
    der core &php.ini; Einstellungen</link> ist im Anhang verfügbar. Es werden
    jedoch wahrscheinlich nicht alle PHP-Direktiven im Handbuch erläutert.
    Für eine komplette Liste von in Ihrer PHP Version verfügbaren Einstellungen
    lesen Sie bitte die gut kommentierte &php.ini;. Möglicherweise kann die
    <ulink url="&url.php.cvs.phpini;">aktuellste &php.ini;</ulink> aus unserem
    CVS ebenfalls hilfreich sein.
   </para>
   <para>
    <example>
     <title>&php.ini; Beispiel</title>
     <programlisting role="ini">
<![CDATA[
; Jeder Text in einer Zeile nach einem Semikolon, welches nicht
; in Anführungszeichen steht, wird ignoriert
[php] ; Abschnittsmarkierungen (Text in eckigen Klammern) werden ebenfalls ignoriert
; Boolesche Werte können auf einen der folgenden Werte eingestellt werden:
;      true, on, yes
; oder false, off, no, none
register_globals = off
track_errors = yes

; Sie können Zeichenketten in Anführungszeichen einschließen
include_path = ".:/usr/local/lib/php"

; Backslashes werden wie alle anderen Zeichen behandelt
include_path = ".;c:\php\lib"
]]>
</programlisting>
<!-- TODO: add more details about values and expressions -->
    </example>
   </para>
   <para>
    Seit PHP 5.1.0 ist es möglich, sich auf bereits definierte .ini Variablen
    innerhalb der .ini Dateien zu beziehen. Zum Beispiel: 
    <literal>open_basedir = ${open_basedir}":/new/dir"</literal>.
   </para>
  </sect1>

  <sect1 id="configuration.changes">
   <title>Wie man Konfigurationseinstellungen ändert</title>

   <sect2 id="configuration.changes.apache">
    <title>PHP läuft als Apachemodul</title>
    <simpara>
     Wenn man PHP als Apachemodul verwendet, kann man die 
     Konfigurationseinstellungen mittels Direktiven in den Apache-
     Konfigurationsdateien (z.B. &httpd.conf;) und &htaccess;-Dateien
     ändern. Dafür benötigt man "AllowOverride Options"- oder 
     "AllowOverride All"-Privilegien.
    </simpara>

    <para>
     In PHP 4 und PHP 5 gibt es verschiedene Apachedirektiven, die es erlauben,
     die PHP-Konfiguration aus den Apache-Konfigurationsdateien heraus zu
     ändern. Für eine Liste von Direktiven, die als
     <constant>PHP_INI_ALL</constant>, <constant>PHP_INI_PERDIR</constant>, 
     oder <constant>PHP_INI_SYSTEM</constant> definiert sind, werfen Sie einen
     Blick auf den Anhang 
     <link linkend="ini.list">Liste von php.ini Einstellungen</link>.
    </para>
    
    <note>
     <simpara>
      In PHP 3 gibt es Apachedirektiven die zu jeder Konfigurationseinstellung
      der <filename>php3.ini</filename> gehören. Deren Namen wird jedoch
      ein "php3_" vorangestellt.
     </simpara>
    </note>

    <para>
     <variablelist>
      <varlistentry>
       <term>
        <systemitem role="directive">php_value</systemitem>
        <parameter>Name</parameter>
        <parameter>Wert</parameter>
       </term>
       <listitem>
        <para>
         Setzt den Wert der angegebenen Direktive.
         Kann nur für Direktiven mit den Typen <constant>PHP_INI_ALL</constant>
         und <constant>PHP_INI_PERDIR</constant> verwendet werden. Um einen
         vorher gesetzten Wert zu löschen, verwenden Sie 
         <literal>none</literal> als Wert.
        </para>
        <note>
         <simpara>
          Verwenden Sie <systemitem role="directive">php_value</systemitem>
          nicht, um boolesche Werte zu setzen. 
          <systemitem role="directive">php_flag</systemitem> (siehe unten) 
          sollte stattdessen verwendet werden.
         </simpara>
        </note>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_flag</systemitem>
        <parameter>Name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         Setzt eine boolesche Konfigurationsdirektive.
         Kann nur für Direktiven mit den Typen <constant>PHP_INI_ALL</constant>
         und <constant>PHP_INI_PERDIR</constant> verwendet werden.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_value</systemitem>
        <parameter>Name</parameter>
        <parameter>Walue</parameter>
       </term>
       <listitem>
        <para>
         Setzt den Wert der angegebenen Direktive.
         Dies kann <emphasis>nicht</emphasis> in &htaccess;-Dateien verwendet
         werden.
         Jeder Direktiventyp, der mit <systemitem role="directive">
         php_admin_value</systemitem> gesetzt wird, kann nicht durch
         &htaccess;- oder VirtualHost-Direktiven überschrieben werden.
         Um einen vorher gesetzten Wert zu löschen, verwenden Sie 
         <literal>none</literal> als Wert.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_flag</systemitem>
        <parameter>Name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         Setzt eine boolesche Konfigurationsdirektive.
         Dies kann <emphasis>nicht</emphasis> in &htaccess;-Dateien verwendet
         werden.
         Jeder Direktiventyp, der mit <systemitem role="directive">
         php_admin_value</systemitem> gesetzt wird, kann nicht durch
         &htaccess;- oder VirtualHost-Direktiven überschrieben werden.
         Used to set a boolean configuration directive.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <example>
      <title>Apache Konfigurationsbeispiel</title>
      <programlisting role="ini">
<![CDATA[
<IfModule mod_php5.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag safe_mode on
</IfModule>
<IfModule mod_php4.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag safe_mode on
</IfModule>
<IfModule mod_php3.c>
  php3_include_path ".:/usr/local/lib/php"
  php3_safe_mode on
</IfModule>
]]>
      </programlisting>
     </example>
    </para>
    <caution>
     <para>
      PHP-Konstanten existieren nicht außerhalb von PHP. So kann man z.B. in
      der &httpd.conf; nicht PHP Konstanten wie <constant>E_ALL</constant>
      oder <constant>E_NOTICE</constant> verwenden, um den Wert der 
      <link linkend="ini.error-reporting">error_reporting</link>-Direktive
      zu ändern, da diese keine Bedeutung haben und als <emphasis>0</emphasis>
      ausgewertet werden. Verwenden Sie stattdessen die zugehörigen
      Bitmasken-Werte direkt. Diese Konstanten können in der &php.ini;
      verwendet werden.
     </para>
    </caution>
   </sect2>

   <sect2 id="configuration.changes.windows">
    <title>Die PHP-Konfiguration mit der Windows Registry ändern</title>
     <simpara>
      Wenn Sie PHP auf Windows einsetzen, können Sie die 
      Konfigurationseinstellungen für jedes einzelne Verzeichnis mit der
      Windows Registry anpassen. Die Werte der Konfiguration werden unterhalb
      des Registrierungsschlüssels 
      <literal>HKLM\SOFTWARE\PHP\Per Directory Values</literal> in den zum
      Verzeichnisnamen passenden Unterschlüssel gespeichert.Zum Beispiel
      würden Werte für das Verzeichnis <literal>c:\inetpub\wwwroot</literal>
      im Registrierungsschlüssel <literal>HKLM\SOFTWARE\PHP\Per Directory
      Values\c\inetpub\wwwroot</literal> gespeichert werden. Die
      Einstellungen für dieses Verzeichnis wären für alle Skripte aktiv,
      die in diesem Verzeichnis oder einem seiner Unterverzeichnisse laufen.
      Die Werte in diesem Schlüssel sollten den Namen eine PHP-
      Konfigurationsdirektive und einen Zeichenkettenwert haben. 
      Konstenten in den Werten werden nicht ausgewertet. Es können jedoch
      nur Werte die in <constant>PHP_INI_USER</constant> änderbar sind
      auf diese Weise gesetzt werden, nicht als 
      <constant>PHP_INI_PERDIR</constant> deklarierte Werte.
     </simpara>
   </sect2>
   
   <sect2 id="configuration.changes.other">
    <title>Andere Zugänge zu PHP</title>
    <para>
     Egal wie Sie PHP betreiben, Sie können bestimmte Werte zur Laufzeit
     Ihrer Skripte mittels <function>ini_set</function> setzen. Werfen Sie
     dazu einen Blick auf die Dokumentation von <function>ini_set</function>.
    </para>
    <para>
     Wenn Sie an einer kompletten Liste von Konfigurationseinstellungen Ihres
     Systems inklusive deren aktuellen Werten interessiert sind, können Sie
     die Funktion <function>phpinfo</function> ausführen und die daraus
     resultierende Seite betrachten.Sie können auf die Werte einzelner
     Konfigurationsdirektiven zur Laufzeit mittels
     <function>ini_get</function> oder <function>get_cfg_var</function>
     zugreifen.
    </para>
   </sect2>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
