<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ba7093cf7f30dbcd301c62536ac7ef8664d891f4 Maintainer: simp Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>foreach</title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  Das <literal>foreach</literal>-Konstrukt bietet eine einfache Möglichkeit
  über <type>array</type>s und
  <interfacename>Traversable</interfacename>-Objekte zu iterieren.
  <literal>foreach</literal> erzeugt einen Fehler, wenn es mit einer Variablen
  verwendet wird, die einen anderen Datentyp enthält oder mit einer Variablen,
  die nicht initialisiert wurde.
  <informalexample>
   <simpara>
    <literal>foreach</literal> kann optional den <literal>Schlüssel</literal>
    jedes Elements erhalten:
   </simpara>
   <programlisting>
<![CDATA[
foreach (iterable_expression as $value) {
    statement_list
}

foreach (iterable_expression as $key => $value) {
    statement_list
}
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Die erste Form durchläuft das in
  <literal>iterable_expression</literal> angegebene Iterable.
  Bei jedem Durchlauf wird der Wert des aktuellen Elementes der
  Variable <literal>$value</literal> zugewiesen.
 </simpara>
 <simpara>
  Die zweite Form schreibt zusätzlich den Schlüssel des aktuellen
  Elementes in jedem Durchlauf in die Variable <literal>$key</literal>.
 </simpara>
 <simpara>
  Es ist zu beachten, dass <literal>foreach</literal> den internen Array-Zeiger
  nicht verändert, der von Funktionen wie <function>current</function> und
  <function>key</function> verwendet wird.
 </simpara>
 <simpara>
  Es ist möglich, die
  <link linkend="language.oop5.iterations">Objektiteration anzupassen</link>.
 </simpara>

 <example>
  <title>Gängige Verwendungen von <literal>foreach</literal></title>
  <programlisting role="php">
<![CDATA[
<?php

/* Beispiel: Nur Werte */
$array = [1, 2, 3, 17];

foreach ($array as $value) {
    echo "Aktueller Wert von \$array: $value.\n";
}

/* Beispiel: Schlüssel und Wert */
$array = [
    "eins" => 1,
    "zwei" => 2,
    "drei" => 3,
    "siebzehn" => 17
];

foreach ($array as $key => $value) {
    echo "Schlüssel: $key => Wert: $value\n";
}

/* Beispiel: Mehrdimensionale Schlüssel-Wert-Arrays */
$grid = [];
$grid[0][0] = "a";
$grid[0][1] = "b";
$grid[1][0] = "y";
$grid[1][1] = "z";

foreach ($grid as $y => $row) {
    foreach ($row as $x => $value) {
        echo "Wert an Position x=$x und y=$y: $value\n";
    }
}

/* Beispiel: Dynamische Arrays */
foreach (range(1, 5) as $value) {
    echo "$value\n";
}
?>
]]>
  </programlisting>
 </example>
 <note>
  <para>
   <literal>foreach</literal> unterstützt die Fehlerunterdrückung mittels
   <link linkend="language.operators.errorcontrol"><literal>@</literal></link>
   nicht
  </para>
 </note>

 <sect2 xml:id="control-structures.foreach.list">
  <title>Entpacken verschachtelter Arrays</title>
  <?phpdoc print-version-for="foreach.list"?>
  <para>
   Es ist möglich, über Arrays von Arrays zu iterieren
   und dabei die verschachtelten Arrays in Schleifenvariablen zu entpacken,
   indem entweder die
   <link linkend="language.types.array.syntax.destructuring">Array-Destrukturierung</link>
   mittels <literal>[]</literal> oder das Sprachkonstrukt
   <function>list</function> als Wert verwendet wird.

   <note>
    <simpara>
     Es ist zu beachten, dass die
     <link linkend="language.types.array.syntax.destructuring">Array-Destrukturierung</link>
     mittels <literal>[]</literal> erst seit PHP 7.1.0 möglich ist.
    </simpara>
   </note>
  </para>

  <para>
   <informalexample>
    <simpara>
     In den beiden folgenden Beispielen wird <literal>$a</literal> auf das
     erste Element des verschachtelten Arrays gesetzt und <literal>$b</literal>
     enthält das zweite Element:
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b]) {
    echo "A: $a; B: $b\n";
}

foreach ($array as list($a, $b)) {
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Wenn weniger Variablen angegeben werden, als Elemente im Array vorhanden
   sind, werden die restlichen Elemente ignoriert.
   Ebenso können Elemente durch die Verwendung eines Kommas übersprungen werden:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2, 5],
    [3, 4, 6],
];

foreach ($array as [$a, $b]) {
    // Beachten Sie, dass es hier kein $c gibt.
    echo "$a $b\n";
}

foreach ($array as [, , $c]) {
    // $a und $b überspringen
    echo "$c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1 2
3 4
5
6
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Gibt es nicht ausreichend Elemente im Array, um <function>list</function>
   zu füllen, wird eine Notice erzeugt.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b, $c]) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C:

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C:
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="control-structures.foreach.reference">
  <title>foreach und Referenzen</title>
  <para>
   Array-Elemente können innerhalb einer Schleife direkt geändert werden, indem
   <literal>$value</literal> ein <literal>&amp;</literal> vorangestellt wird.
   In diesem Fall wird der Wert per
   <link linkend="language.references">Referenz</link> zugewiesen.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr ist nun [2, 4, 6, 8]
unset($value); // die Referenz mit dem letzten Element aufheben
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <warning>
   <simpara>
    Die Referenz auf ein <literal>$value</literal> des letzten Array-Elements
    bleibt auch nach der <literal>foreach</literal>-Schleife erhalten. Es wird
    empfohlen, diese mittels <function>unset</function> zu löschen.
    Andernfalls tritt folgendes Verhalten auf:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr ist nun [2, 4, 6, 8]

// ohne unset($value) ist $value immer noch eine Referenz
// auf das letzte Element: $arr[3]

foreach ($arr as $key => $value) {
    // $arr[3] wird mit jedem Wert aus $arr aktualisiert...
    echo "{$key} => {$value} ";
    print_r($arr);
}
// ...bis schließlich der vorletzte Wert auf den letzten Wert kopiert wird
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
]]>
    </screen>
   </informalexample>
  </warning>
  <example>
  <title>Werte eines konstanten Arrays per Referenz durchlaufen</title>
   <programlisting role="php">
<![CDATA[
<?php
foreach ([1, 2, 3, 4] as &$value) {
    $value = $value * 2;
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="language.types.array">array</link></member>
   <member><interfacename>Traversable</interfacename></member>
   <member><link linkend="language.types.iterable">iterable</link></member>
   <member><function>list</function></member>
  </simplelist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
