<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336814 Maintainer: cmb Status: ready -->

<sect1 xml:id="control-structures.switch" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>switch</literal></title>
 <?phpdoc print-version-for="switch"?>
 <simpara>
  Die <literal>switch</literal> Anweisung entspricht in etwa einer
  Folge von <literal>if</literal> Anweisungen die jeweils den gleichen
  Ausdruck prüfen. Es kommt oft vor, dass man dieselbe Variable (oder
  denselben Ausdruck) gegen viele verschiedene mögliche Werte prüfen
  und abhängig davon unterschiedlichen Code ausführen möchte. Genau
  hierfür wurde die <literal>switch</literal> Anweisung eingeführt.
 </simpara>
 <note>
  <simpara>
   Beachten Sie, dass im Unterschied zu einigen anderen Sprachen die
   <link linkend="control-structures.continue">continue</link> Anweisung 
   auch auf switch anwendbar ist und sich ähnlich wie <literal>break</literal>
   verhält. Wenn Sie ein switch innerhalb einer Schleife verwenden und
   mit dem nächsten Schleifendurchlauf beginnen wollen so müssen Sie in
   diesem Fall <literal>continue 2</literal> angeben.
  </simpara>
 </note>
 <note>
  <para>
   Beachten Sie auch, dass switch/case <link linkend="types.comparisions-loose"
   >typschwache Vergleiche</link> durchführt.
  </para>
 </note>
 <para>
  <table>
   &reftitle.changelog;
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Mehrere default case Anweisungen erzeugen einen
       <constant>E_COMPILE_ERROR</constant> Fehler.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  Die folgenden beiden Beispiele zeigen zwei verschiedene Wege
  um das gleiche Verhalten zu erreichen. Eines benutzt eine 
  Folge von <literal>if</literal> und <literal>elseif</literal> 
  Anweisungen, das andere eine <literal>switch</literal>
  Anweisung:
  <example>
   <title><literal>switch</literal> Anweisung</title>
   <programlisting role="php">
<![CDATA[
<?php
if ($i == 0) {
    echo "i ist gleich 0";
} elseif ($i == 1) {
    echo "i ist gleich 1";
} elseif ($i == 2) {
    echo "i ist gleich 2";
}

switch ($i) {
    case 0:
        echo "i ist gleich 0";
        break;
    case 1:
        echo "i ist gleich 1";
        break;
    case 2:
        echo "i ist gleich 2";
        break;
}
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><literal>switch</literal> gestattet die Verwendung von Strings</title>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case "Apfel":
        echo "i ist Apfel";
        break;
    case "Balken":
        echo "i ist Balken";
        break;
    case "Kuchen":
        echo "i ist Kuchen";
        break;
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Um Fehler zu vermeiden ist es wichtig zu verstehen wie eine
  <literal>switch</literal> Anweisung ausgeführt wird. Eine
  <literal>switch</literal> Anweisung wird zeilenweise (genauer:
  Anweisung für Anweisung) ausgewertet. Zunächst einmal wird
  überhaupt kein Code ausgeführt. Erst wenn eine <literal>case</literal>
  Anweisung gefunden wird, die dem Wert des an <literal>switch</literal>
  übergebenen Ausdrucks entspricht, beginnt PHP tatsächlich die folgenden
  Anweisungen auszuführen. Die Ausführung wird fortgesetzt bis das Ende
  der <literal>switch</literal> Anweisung erreicht ist oder bis PHP 
  bei der Ausführung auf eine <literal>break</literal> Anweisung stößt.
  Wenn Sie am Ende der Anweisungsliste eines case kein <literal
  >break</literal> setzen, so wird die Ausführung mit dem nächsten
  case fortgesetzt, z.B.:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
        echo "i ist gleich 0";
    case 1:
        echo "i ist gleich 1";
    case 2:
        echo "i ist gleich 2";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Wenn in diesem Beispiel <varname>$i</varname> gleich 0 ist, führt PHP alle
  echo Anweisungen aus! Ist <varname>$i</varname> gleich 1, führt PHP die
  letzten beiden echo Anweisungen aus. Sie erreichen das erwartete Verhalten
  nur, wenn <varname>$i</varname> gleich 2 ist. Daher ist es wichtig
  <literal>break</literal> Anweisungen nicht zu vergessen (auch wenn Sie
  gelegentlich absichtlich darauf verzichten werden, diese unter bestimmten
  Bedingungen anzugeben).
 </simpara>
 <simpara>
  In einer <literal>switch</literal> Anweisung wird die Bedingung nur einmal
  ausgewertet und das Ergebnis mit jeder <literal>case</literal> Anweisung
  verglichen. In einer <literal>elseif</literal> Anweisung wird die Bedingung
  erneut ausgewertet. Wenn Ihre Bedingung komplizierter ist als ein einfacher
  Vergleich, und/oder sich in einer dichten Schleife befindet, kann ein
  <literal>switch</literal> schneller sein.
 </simpara>
 <para>
  Die Anweisungsliste eines case kann ebenso leer sein, was einfach die
  Kontrolle an die Anweisungsliste des nächsten case übergibt.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
case 0:
case 1:
case 2:
    echo "i ist kleiner als 3, aber nicht negativ";
    break;
case 3:
    echo "i ist 3";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Ein Sonderfall ist die <literal>default</literal> Klausel. Diese fängt alles
  ab, was nicht durch eine der anderen case Klauseln behandelt wurde. Zum
  Beispiel:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
        echo "i ist gleich 0";
        break;
    case 1:
        echo "i ist gleich 1";
        break;
    case 2:
        echo "i ist gleich 2";
        break;
    default:
       echo "i ist nicht gleich 0, 1 oder 2";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Der <literal>case</literal> Ausdruck kann ein beliebiger Ausdruck sein, der zu
  einem einfachen Typen ausgewertet wird, also Ganz- oder Fließkommazahlen und
  Zeichenketten. Arrays und Objekte können hier nicht verwendet werden, außer
  wenn sie zu einem einfachen Typen dereferenziert werden.
 </para>
 <para>
  Die alternative Syntax für Kontrollstrukturen wird für switch Anweisungen
  unterstützt. Weitere Information entnehmen Sie <link
  linkend="control-structures.alternative-syntax">Alternative Syntax für
  Kontrollstrukturen</link>.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i):
    case 0:
        echo "i ist gleich 0";
        break;
    case 1:
        echo "i ist gleich 1";
        break;
    case 2:
        echo "i ist gleich 2";
        break;
    default:
        echo "i ist nicht gleich 0, 1 oder 2";
endswitch;
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Es ist möglich ein Semikolon anstelle eines Doppelpunkts nach einem case zu
  verwenden, wie:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch($beer)
{
    case 'Bitburger';
    case 'Erdinger';
    case 'Jever';
        echo 'Gute Wahl';
    break;
    default;
        echo 'Bitte treffen Sie eine andere Wahl...';
    break;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
