<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 289335 Maintainer: sammywg Status: ready -->

<sect1 xml:id="control-structures.do.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>do-while</literal></title>
 <simpara>
  <literal>do-while</literal>-Schleifen sind sehr ähnlich zu
  <literal>while</literal>-Schleifen, außer dass der Wahrheitsausdruck erst am
  Ende eines jeden Durchlaufs statt zu dessen Beginn geprüft wird. Der
  Hauptunterschied zu einer normalen <literal>while</literal>-Schleife ist, dass
  die <literal>do-while</literal>-Schleife garantiert mindestens einmal
  durchlaufen wird (Der Wahrheitsausdruck wird ja nur am Ende jeden Durchlaufs
  geprüft), wohingegen es nicht zwingend ist, dass eine reguläre
  <literal>while</literal>-Schleife immer ausgeführt wird (hier wird der
  Wahrheitsausdruck bereits zu Beginn eines jeden Durchlaufs überprüft.
  Evaluiert er dabei zu &false;, wird die Verarbeitung der Schleife sofort
  abgebrochen).
 </simpara>
 <para>
  Es gibt nur eine Syntax für <literal>do-while</literal>-Schleifen:

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$i = 0;
do {
    echo $i;
} while ($i > 0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Die obige Schleife wird exakt einmal durchlaufen, da nach dem ersten Durchlauf,
  wenn der Wahrheitsausdruck geprüft wird, dieser &false; ergibt
  (<varname>$i</varname> ist nicht größer als 0), so dass die
  Schleifenausführung beendet wird.
 </simpara>
 <para>
  Fortgeschrittenen C-Programmierern ist möglicherweise eine etwas andere
  Verwendung von <literal>do-while</literal>-Schleifen bekannt, die es erlaubt,
  die Ausführung in der Mitte des Codeblocks zu unterbrechen. Dies wird durch
  ein Kapseln in <literal>do-while</literal>(0) und die Verwendung des <link
  linkend="control-structures.break"><literal>break</literal></link>-Statements
  erreicht. Das folgende Codefragment demonstriert dieses Verhalten:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
do {
    if ($i < 5) {
        echo "i ist nicht groß genug";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
   echo "i ist ok";

    /* i verarbeiten */

} while (0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Seien Sie nicht traurig, wenn Sie dies nicht oder nicht ganz verstehen.
  Sie können trotzdem Skripte - und wirklich leistungsfähige Skripte! -
  programmieren, ohne dieses "Feature" zu verwenden.
  Seit PHP 5.3.0 ist es möglich, statt dieses Hacks den <link
  linkend="control-structures.goto"><literal>goto</literal></link>-Operator
  zu verwenden.
 </simpara>

</sect1>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
