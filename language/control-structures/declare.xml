<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335128 Maintainer: sammywg Status: ready -->

<sect1 xml:id="control-structures.declare" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>declare</literal></title>
 <?phpdoc print-version-for="declare"?>
 <para>
  Das <literal>declare</literal>-Konstrukt wird verwendet, um
  Ausführungsdirektiven für einen Codeblock festzulegen. Die Syntax von
  <literal>declare</literal> ist ähnlich wie die Syntax anderer
  Ablauf-Kontrollstrukturen:
  <informalexample>
   <programlisting>
<![CDATA[
declare (directive)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Die <literal>directive</literal>-Sektion erlaubt es, das Verhalten des
  <literal>declare</literal>-Blocks anzugeben.
  Aktuell werden zwei Direktiven unterstützt: die
  <literal>ticks</literal>-Direktive (siehe unten für weitere Informationen über
  die <link linkend="control-structures.declare.ticks">ticks</link>-Direktive)
  und die <literal>encoding</literal>-Direktive (siehe unten für weitere
  Informationen über die <link
  linkend="control-structures.declare.encoding">encoding</link>-Direktive).
 </para>
 <note>
  <simpara>
   Die Encoding-Direktive wurde in PHP 5.3.0 hinzugefügt.
  </simpara>
 </note>
 <para>
  Da Direktiven behandelt werden, wenn die Datei kompiliert wird, dürfen nur
  Literale als Direktiven-Werte angegeben werden. Variable und Konstante können
  nicht verwendet werden. Zur Veranschaulichung:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Dies ist erlaubt:
declare(ticks=1);

// Dies ist ungültig:
const TICK_VALUE = 1;
declare(ticks=TICK_VALUE);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Der <literal>statement</literal>-Teil des <literal>declare</literal>-Blocks
  wird ausgeführt - wie genau die Ausführung aussieht und welche Seiteneffekte
  während der Ausführung auftreten können, ist abhängig von der im
  <literal>directive</literal>-Block gesetzten Direktive.
 </para>
 <para>
  Das <literal>declare</literal>-Konstrukt kann außerdem im globalen
  Sichtbarkeitsbereich verwendet werden, es hat dann Auswirkungen auf den
  gesamten folgenden Code (wird die Datei mit der
  <literal>declare</literal>-Anweisung inkludiert, hat die Anweisung jedoch
  keine Auswirkung auf das einbindende File).
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// dies sind gleichwertige Schreibweisen:

// Sie können diese Schreibweise verwenden:
declare(ticks=1) {
    // hier das vollständige Skript einfügen
}

// oder diese:
declare(ticks=1);
// hier das vollständige Skript einfügen
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 
 <sect2 xml:id="control-structures.declare.ticks">
  <title>Ticks</title>
  <para>
   Ein Tick ist ein Event, das alle <varname>N</varname> Low-Level-Statements
   auftritt, die vom Parser innerhalb des <literal>declare</literal>-Blocks
   ausgeführt werden.
   Der Wert für <varname>N</varname> wird durch die Verwendung von
   <code>ticks=<varname>N</varname></code> innerhalb der
   <literal>directive</literal>-Sektion des <literal>declare</literal>-Blocks
   angegeben.
  </para>
  <para>
   Nicht alle Statements führen zu einem Tick-Event. So etwa Konditionen
   und Argumente.
  </para>
  <para>
   Das/die bei jedem Tick auftretenden Event(s) werden durch die Verwendung
   der Funktion <function>register_tick_function</function> angegeben.
   Betrachten Sie das folgende Beispiel für mehr Details. Beachten Sie, dass
   mehr als ein Event bei jedem Tick auftreten kann.
  </para>
  <para>
   <example>
    <title>Tick Nutzungsbeispiel</title>
    <programlisting role="php">
<![CDATA[
<?php

declare(ticks=1);

// Funktion, welche bei jeden Tick-Event aufgerufen wird
function tick_handler()
{
    echo "tick_handler() aufgerufen\n";
}

register_tick_function('tick_handler');

$a = 1;

if ($a > 0) {
    $a += 2;
    print($a);
}

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Tick Nutzungsbeispiel</title>
    <programlisting role="php">
<![CDATA[
<?php

function tick_handler()
{
    echo "tick_handler() aufgerufen\n";
}

$a = 1;
tick_handler();

if ($a > 0) {
    $a += 2;
    tick_handler();
    print($a);
    tick_handler();
}
tick_handler();

?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   Siehe auch <function>register_tick_function</function> und
   <function>unregister_tick_function</function>.
  </simpara>
 </sect2>
 
 <sect2 xml:id="control-structures.declare.encoding">
  <title>Encoding</title>
  <para>
   Das Encoding eines Skripts kann pro Skript mittels der Encoding-Direktive
   festgelegt werden.
   <example>
    <title>Das Encoding eines Skripts deklarieren.</title>
    <programlisting role="php">
<![CDATA[
<?php
declare(encoding='ISO-8859-1');
// hier folgt der Code
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <caution>
   <simpara>
    Die einzig zulässige Syntax für ein declare, das mit Namespaces kombiniert
    wird, ist <literal>declare(encoding='...');</literal>, wobei
    <literal>...</literal> der Name des Encodings ist.
    <literal>declare(encoding='...') {}</literal> führt zu einem Parse-Error,
    wenn es mit Namespaces kombiniert wird.
   </simpara>
  </caution>
  <para>
   Der encodete declare-Wert wird in PHP 5.3 ignoriert, sofern PHP nicht mit
   <literal>--enable-zend-multibyte</literal> kompiliert wurde.
  </para>
  <para>
   PHP bietet abgesehen von <function>phpinfo</function> keine Möglichkeit zur Laufzeit
   herauszufinden, ob es mit <literal>--enable-zend-multibyte</literal> kompiliert wurde.
  </para>
  <para>
   See also <link linkend="ini.zend.script-encoding">zend.script_encoding</link>.
  </para>
 </sect2>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
