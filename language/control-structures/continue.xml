<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 310698 Maintainer: sammywg Status: ready -->

<sect1 xml:id="control-structures.continue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>continue</literal></title>
 <simpara>
  <literal>continue</literal> wird innerhalb von Schleifen verwendet, um den
  Rest des aktuellen Schleifendurchlaufs abzubrechen und mit der Auswertung der
  nächsten Bedingung fortzufahren, um dann den nächsten Durchlauf zu beginnen.
 </simpara>
 <note>
  <simpara>
   Beachten Sie, dass in PHP das <link
   linkend="control-structures.switch">switch</link>-Statement im Sinne von
   <literal>continue</literal> als Schleifenstruktur betrachtet wird.
  </simpara>
 </note>
 <simpara>
  <literal>continue</literal> akzeptiert ein optionales numerisches Argument,
  das angibt, wie viele Ebenen umschließender Schleifen bis zu ihrem Ende
  übersprungen werden sollen.
 </simpara>
 <note>
  <para>
   <literal>continue 0;</literal> und <literal>continue 1;</literal> sind
   äquivalent zu <literal>continue;</literal>.
  </para>
 </note>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
while (list($key, $value) = each($arr)) {
    if (!($key % 2)) { // ignoriere ungerade Werte
        continue;
    }
    mach_etwas_ungerade($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Äußere<br />\n";
    while (1) {
        echo "Mittlere<br />\n";
        while (1) {
            echo "Innere<br />\n";
            continue 3;
        }
        echo "Das hier wird nie ausgegeben.<br />\n";
    }
    echo "Das hier ebenfalls nicht.<br />\n";
}
?>
]]>
   </programlisting>
   </informalexample>
  </para>
  <para>
   Das Weglassen des Semikolons nach <literal>continue</literal> kann zu
   unerwarteten Ergebnissen führen. Hier ist ein Beispiel, das zeigt, was Sie
   nicht tun sollten.
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
for ($i = 0; $i < 5; ++$i) {
    if ($i == 2)
        continue
    print "$i\n";
}
?>
]]>
    </programlisting>
    <para>
     Man könnte meinen, die Ausgabe wäre:
    </para>
    <screen>
<![CDATA[
0
1
3
4
]]>
    </screen>
    <para>
     aber das Skript gibt in Wirklichkeit ...
    </para>
    <screen>
<![CDATA[
2
]]>
    </screen>
    <para>
     ... aus, da <literal>continue print "$i\n";</literal> als ein Ausdruck
     ausgeführt wird und <function>print</function> somit nur aufgerufen wird,
     wenn <literal>$i == 2</literal> ist. (Der Rückgabewert von
     <function>print</function>, welcher immer 1 ist, wird an
     <literal>continue</literal> als numerische Argument übergeben.)
    </para>
   </informalexample>
  </para>
</sect1>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
