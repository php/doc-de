<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: hholzgra Status: ready -->
<!-- Credits: betz -->
 <chapter xml:id="language.variables" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Variablen</title>

  <sect1 xml:id="language.variables.basics">
   <title>Grundlegendes</title>
   <simpara>
    Variablen werden in PHP dargestellt durch ein Dollar-Zeichen ($)
    gefolgt vom Namen der Variablen. Bei Variablen-Namen wird
    zwischen Groß- und Kleinschreibung unterschieden (case-sensitive).
   </simpara>

   <para>
    Variablen-Namen werden in PHP nach den gleichen Regeln wie
    andere Bezeichner erstellt. Ein gültiger Variablen-Name beginnt
    mit einem Buchstaben oder einem Unterstrich ("_"), gefolgt von
    einer beliebigen Anzahl von Buchstaben, Zahlen oder Unterstrichen.
    Als regulärer Ausdruck (regular expression) würde das wie folgt
    ausgedrückt: '[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'.
   </para>

   <note>
    <simpara>
     Unserem Zweck entspricht also ein Buchstabe von a bis z bzw.
     A bis Z oder einem ASCII-Zeichen von 127 bis 255 (0x7f bis 0xff).
    </simpara>
   </note>

   <note>
    <simpara>
     <literal>$this</literal> ist eine spezielle Variable der
     kein Wert zugewiesen werden kann.
    </simpara>
   </note>
 	 
   &tip.userlandnaming;

   <para>
    Information zu Funktionen im Zusammenhang mit Variablen
    finden Sie im Abschnitt 
    <link linkend="ref.var">Funktionen zur Behandlung von Variablen</link>.
   </para>
 	  	 
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$var = "Du";
$vaR = "und";
$Var = "ich";
$vAr = "wir lernen PHP"
echo "$var $vaR $Var, $vAr"; // gibt "Du und ich, wir lernen PHP" aus

$4site  = 'nicht jetzt';     // ungültig, da Anfang eine Zahl
$_4site = 'nicht jetzt';     // gültig, da Unterstrich am Anfang
$täbyte = 'irgendwas';       // gültig, da 'ä' dem (Erweiterten) ASCII-Wert 228 entspricht
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Variablen werden durch ihren Wert bestimmt. Das heisst,
    wenn Sie einer Variablen einen Ausdruck zuweisen, wird der gesamte
    Inhalt des Originalausdrucks in die Zielvariable kopiert. Die
    Folge ist, dass eine Variable, die ihren Inhalt von einer anderen
    Variablen erhalten hat, ihren Inhalt behält, auch wenn Sie danach
    den Inhalt der anderen (Quell- / Ursprungs-)Variablen ändern. Die
    Inhalte der Ziel- und Quellvariablen sind also insoweit unabhängig
    voneinander. Für weitere Informationen lesen Sie bitte das Kapitel
    unter <link
    linkend="language.expressions">Expressions / Ausdrücke</link>.
   </para>
   <para>
    PHP bietet eine andere Möglichkeit der Wertzuweisung 
    bei Variablen: <link linkend="language.references">Zuweisung durch
    Referenzierung</link>. Das bedeutet, dass der Wert der neuen
    Variablen eine Referenz zur Ursprungs-Variablen darstellt (mit
    anderen Worten: Der Wert ist ein Alias bzw. Zeiger auf den Inhalt
    der Ursprungsvariablen). Beide Variablen zeigen also auf die
    selbe(n) Speicherstelle(n). Änderungen der neuen Variablen ändern
    auch deren Ursprungs-Variable und umgekehrt.
   </para>

   <para>
    Für die Zuweisung per Referenz müssen Sie lediglich ein &amp;
    der (Ausgangs-, Quell-) Variablen voranstellen, die
    sie einer anderen Variablen zuweisen wollen. Der folgende Skript-
    Ausschnitt wird zweimal 'Mein Name ist Bob' ausgeben:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = 'Bob';             // 'Bob' der Variablen $foo zuweisen.
$bar = &$foo;             // Zeiger auf $foo in $bar erzeugen.
$bar = "Ich heiße $bar";  // $bar verändern...
echo $bar;
echo $foo;                // $foo wurde dadurch ebenfalls verändert.
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Zu beachten ist, dass nur Variablenbezeichner referenziert
    werden können.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = 25;
$bar = &$foo;     // Gültige Zuweisung.
$bar = &(24 * 7); // Ungültig, da kein Variablenbezeichner
                  // zugewiesen wird.
function test() {
    return 25;
}

$bar = &test();   // Ungültig.
?>
]]>
     </programlisting>
    </informalexample>
   </para>
 
   <para>
    Es ist in PHP nicht zwingend notwendig Variablen zu initialisieren, es
    wird aber trotzdem empfohlen. Nicht initialisierte Variablen haben einen
    Vorgabewert der vom Typ abhängt - &false; Null, leerer String oder leeres
    Array.
   </para>
   <para>
    <example>
     <title>Vorgabewerte uninitialisierter Variablen</title>
     <programlisting role="php">
<![CDATA[
<?php
echo ($unset_bool ? "true" : "false"); // false
$unset_int += 25; // 0 + 25 => 25
echo $unset_string . "abc"; // "" . "abc" => "abc"
$unset_array[3] = "def"; // array() + array(3 => "def") => array(3 => "def")
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Es ist problematisch sich auf den Vorgabewert einer nicht 
    initialisierten Variable zu verlassen wenn Sie Dateien inkludieren
    die die gleichen Variablennamen benutzen.
    Wenn <link linkend="ini.register-globals">register_globals</link>
    aktiviert ist führt dies zu einem extremen <link
    linkend="security.globals">Sicherheitsproblem</link>.
    Bei Zugriffen auf nicht initialisierte Variablen wird ein 
    Fehler der Stufe <link linkend="errorfunc.constants.errorlevels.e-notice">E_NOTICE</link>
    ausgegeben, dies trifft allerdings nicht auf das Anfügen
    von Elementen an nicht initialisierte Arrays zu. 
    Das <function>isset</function> Sprachkonstrukt kann genutzt werden
    um zu prüfen ob eine Variable bereits initialisiert wurde.
   </para>
  </sect1>

  <sect1 xml:id="language.variables.predefined">
   <title>Vordefinierte Variablen</title>
   <simpara>
    PHP bietet jedem ausgeführtem Skript eine Vielzahl von
    vordefinierten Variablen an. Viele dieser Variablen können
    jedoch nicht vollständig erläutert werden, da sie abhängig
    sind vom Web-Server, der Version und dem Setup des Web-
    Servers sowie weiteren Faktoren. Einige dieser Variablen
    stehen nicht zur Verfügung, wenn PHP-Skripte per <link
    linkend="features.commandline">Kommando-Zeilen-Aufruf</link>
    ausgeführt werden. Für eine Liste dieser Variablen lesen Sie bitte
    den Abschnitt <link linkend="reserved.variables">Vordefinierte
    Variablen</link>.
   </simpara>
   <warning>
    <simpara>
     Ab PHP 4.2.0 ist der standardmäßige Wert für die PHP-Anweisung
     <link linkend="ini.register-globals">register_globals</link>
     <emphasis>off</emphasis>. Dies ist eine wesentliche Änderung in
     PHP. Die Anweisung register_globals <emphasis>off</emphasis>
     beeinflusst den Satz von vordefinierten Variablen, die im
     globalen Bereich verfügbar sind. Um zum Beispiel
     <varname>DOCUMENT_ROOT</varname> zu bekommen, müssen Sie
     <varname>$_SERVER['DOCUMENT_ROOT']</varname> statt
     <varname>$DOCUMENT_ROOT</varname> verwenden oder um
     <varname>$id</varname> von der URL
     <literal>http://www.example.com/test.php?id=3</literal> zu
     bekommen <varname>$_GET['id']</varname> statt
     <varname>$id</varname> oder <varname>$_ENV['HOME']</varname>
     statt <varname>$HOME</varname>.
    </simpara>
    <simpara>
     Für diese Änderung betreffende Informationen lesen Sie bitte den
     Konfigurations-Eintrag für <link
     linkend="ini.register-globals">register_globals</link>, das
     Sicherheitskapitel über die <link
     linkend="security.globals">Verwendung von Register
     Globals</link> und außerdem die PHP
     <link xlink:href="&url.php.release4.1.0;">4.1.0</link> und
     <link xlink:href="&url.php.release4.2.0;">4.2.0</link> Release
     Announcements.
    </simpara>
    <simpara>
     Die reservierten vordefinierten Variablen, wie die
     <link linkend="language.variables.superglobals">Superglobalen
     Arrays</link>, sollten bevorzugt verwendet werden.
    </simpara>
   </warning>
   <simpara>
    Ab Version 4.1.0 stehen in PHP eine zusätzliche Reihe
    vordefinierter Arrays zur Verfügung, die Variablen vom Webserver
    (gegebenenfalls), von der Umgebung und von Benutzereingaben
    enthalten. Diese neuen Arrays sind insofern etwas sehr Spezielles,
    als sie automatisch global sind -- d.h., sie stehen automatisch in
    jedem Bereich zur Verfügung. Deshalb sind sie auch bekannt als
    'Superglobale'. (Es gibt in PHP keinen
    Mechanismus für benutzerdefinierte Superglobale.) Die Superglobale
    werden nachfolgend aufgelistet, aber für eine Liste ihres Inhalts
    und die weitere Diskussion vordefinierter Variablen und ihres
    Wesens lesen Sie bitte den Abschnitt <link
    linkend="reserved.variables">Reservierte vordefinierte
    Variablen</link>. Außerdem werden Sie feststellen, dass die alten
    vordefinierten Variablen (<varname>$HTTP_*_VARS</varname>) noch
    existieren.

    &avail.register-long-arrays;
   </simpara>
   <note>
    <title>Variable Variablen</title>
    <para>
     Superglobale können innerhalb von Funktionen und Methoden nicht als 
     <link linkend="language.variables.variable">Variable Variablen</link>
     verwendet werden.
    </para>
   </note>
  	 
   <note>
    <para>
     Obwohl Superglobale und die HTTP_*_VARS zur gleichen Zeit existieren
     können sind sie nicht identisch. Änderungen dieser Variablen haben
     keinen Einfluss auf die jeweils anderen.
    </para>
   </note>

   <para>
    Falls bestimmte Variablen nicht unter <link
    linkend="ini.variables-order">variables_order</link> angegeben
    sind, dann bleiben auch ihre entsprechenden vordefinierten Arrays
    leer.
   </para>

  </sect1>

  <sect1 xml:id="language.variables.scope">
   <title>Geltungsbereich von Variablen</title>
   <simpara>
    Der Geltungsbereich einer Variablen ergibt sich aus dem
    Zusammenhang, in dem sie definiert wurde. Meistens besteht
    dieser aus einem einzigen Bereich. Dieser beinhaltet auch den
    Bereich für Dateien, die per "include"- oder "require"-Anweisung
    eingebunden wurden, z.B.:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = 1;
include "b.inc";
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    Die Variable $a ist auch in der eingebundenen Datei
    <filename>b.inc</filename> verfügbar. In benutzerdefinierten Funktionen
    wird ein auf die Funktion beschränkter Geltungsbereich eingeführt. Jede in
    einer Funktion benutzte Variable ist zunächst auf den lokalen Bereich
    der Funktion beschränkt, z.B.:
   </simpara>
   <informalexample>
    <programlisting role="php"> 
<![CDATA[
<?php
$a = 1; // globaler Bereich

function test () { 
    echo $a; // Referenz auf einen lokalen Variablen-Bereich
} 

test ();
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    Dieses Skript erzeugt keine Bildschirm-Ausgabe, da sich die Echo-
    Anweisung auf eine lokale Variable namens <varname>$a</varname>
    bezieht und dieser kein Wert im lokalen Bezug zugewiesen worden ist.
    Dies ist ein kleiner Unterschied zu C, wo globale Variablen auch in
    Funktionen vorhanden sind, es sei denn, sie werden durch eine
    funktionsinterne Definition überschrieben. Das kann zu Problemen führen,
    denn in PHP müssen global geltende Variablen innerhalb von Funktionen als
    solche definiert werden.
   </simpara>

   <sect2 xml:id="language.variables.scope.global">
    <title>Das global Schlüsselwort</title>
    <simpara>
     Zunächst ein Beispiel für die Verwendung von
     <literal>global</literal>:
    </simpara>
    <para>
     <example>
      <title>Die Verwendung von global</title>
      <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function Summe()
{
    global $a, $b;

    $b = $a + $b;
} 

Summe();
echo $b;
?>
]]>
      </programlisting>
     </example>
    </para>

   <simpara>
    Das obige Skript gibt &quot;3&quot; aus. Durch das Deklararieren
    der Variablen <varname>$a</varname> und <varname>$b</varname>innerhalb
    der Funktion als global, weisen alle Referenzen zu beiden Variablen auf
    die nun globalen Werte. Es gibt keine Beschränkungen bei der Anzahl an
    globalen Variablen, die durch eine Funktion verändert werden können.
   </simpara>
   <simpara>
    Eine weitere Möglichkeit besteht in der Verwendung des speziellen
    <varname>$GLOBALS</varname> PHP-Array. Das obige Beispiel kann damit
    auch so  geschrieben werden:
   </simpara>
   <para>
    <example>
     <title>
      Die Verwendung von <varname>$GLOBALS</varname> statt global
     </title>
     <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function Summe()
{
    $GLOBALS["b"] = $GLOBALS["a"] + $GLOBALS["b"];
} 

Summe();
echo $b;
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    Das <varname>$GLOBALS</varname>-Array ist ein assoziatives Array
    mit dem Bezeichner der globalen Variablen als Schlüssel und dem
    Inhalt dieser Variablen als Wert des Array-Elements. Beachten Sie,
    dass <varname>$GLOBALS</varname> in jedem Bereich existiert, weil
    $GLOBALS eine <link
    linkend="language.variables.superglobals">Superglobale</link> ist.
    Hier ist ein Beispiel, das die Stärke von Superglobalen
    demonstriert:
   </simpara>
   <para>
    <example>
     <title>
      Beispiel zur Demonstration von Superglobalen und Bereich
     </title>
     <programlisting role="php">
<![CDATA[
<?php
function test_global()
{
    // Die meisten vordefinierten Variablen sind nicht "super" und
    // benötigen 'global', um im lokalen Bereich von Funktionen zur
    // Verfügung zu stehen.
    global $HTTP_POST_VARS;

    echo $HTTP_POST_VARS['name'];

    // Superglobale stehen in jedem Bereich zur Verfügung und
    // benötigen kein 'global'. Superglobale stehen seit PHP 4.1.0
    // zur Verfügung und HTTP_POST_VARS gilt nun als veraltet
    echo $_POST['name'];
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.variables.scope.static">
   <title>Die Verwendung von statischen Variablen</title>
   <simpara>
    Ein weiterer wichtiger Anwendungszweck von Variablen-Bereichen
    ist die <emphasis>static</emphasis>-Variable. Eine statische
    Variable existiert nur in einem lokalen Funktions-Bereich, der
    Wert geht beim Verlassen dieses Bereichs aber nicht verloren.
    Schauen Sie das folgende Beispiel an:
   </simpara>
   <para>
    <example>
     <title>
      Beispiel, das die Notwendigkeit von statischen Variablen
      demonstriert
     </title>
     <programlisting role="php">
<![CDATA[
<?php
function test ()
{
    $a = 0;
    echo $a;
    $a++;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Diese Funktion ist sinnlos, da sie bei jedem Aufruf <varname>$a</varname>
    auf <literal>0</literal> setzt und &quot;0&quot; ausgibt. Die Anweisung
    $a++, welche den Wert erhöht, macht keinen Sinn, da der Wert von
    <varname>$a</varname> beim Verlassen der Funktion verloren geht. Um eine
    sinnvolle Zählfunktion zu implementieren, die ihren aktuell gesetzten Wert
    nicht vergisst, müssen Sie die Variable <varname>$a</varname>als "static"
    deklarieren:
   </simpara>
   <para>
    <example>
     <title>Beispiel zur Verwendung statischer Variablen</title>
     <programlisting role="php">
<![CDATA[
<?php
function Test()
{
    static $a = 0;
    echo $a;
    $a++;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Jetzt wird bei jedem Aufruf der Test()-Funktion der aktuelle
    Wert von <varname>$a</varname> ausgegeben und dann um 1 erhöht.
   </simpara>
   <simpara>
    Static-Variablen ermöglichen auch einen Weg zum Umgang mit
    rekursiven Funktionen. Das sind Funktionen, die sich selbst
    aufrufen. Hierbei besteht die Gefahr, so genannte Endlos-
    Schleifen zu programmieren. Sie müssen also einen Weg vorsehen,
    diese Rekursion zu beenden. Die folgende einfache Funktion zählt
    rekursiv bis 10. Die statische Variable
    <varname>$zaehler</varname> wird benutzt, um die Rekursion zu
    beenden:
   </simpara>
   <para>
    <example>
     <title>Statische Variablen in rekursiven Funktionen</title>
     <programlisting role="php">
<![CDATA[
<?php
function Test()
{
    static $zaehler = 0;

    $zaehler++;
    echo $zaehler;
    if ($zaehler < 10) {
        Test ();
    }
    $zaehler--;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>  
    <para>  
      Statische Variablen werden wie in oben stehenden Beispielen deklariert. 
      Das Zuweisen eines Wertes, welcher das Ergebnis eines Ausdrucks ist,
      wird mit einem parse error quittiert.
    </para> 
    <para>  
     <example>
      <title>Statische Variablen deklarieren</title>
      <programlisting role="php">
<![CDATA[
<?php
function foo(){
    static $int = 0;          // korrekt
    static $int = 1+2;        // falsch  (da ein Ausdruck vorliegt)
    static $int = sqrt(121);  // falsch  (ebenfalls ein Ausdruck)

    $int++;
    echo $int;
}
?>
]]>
     </programlisting>
    </example>
   </para> 
  </note>
  </sect2>

  <sect2 xml:id="language.variables.scope.references">
   <title>Referenzen bei globalen und statischen Variablen</title>
   <simpara>
    Die Zend Engine 1, die PHP 4 zugrunde liegt,
    führt die <link
    linkend="language.variables.scope.static">static</link>- und
    <link
    linkend="language.variables.scope.global">global</link>-Wandler
    für Variablen in Bezug auf <link
    linkend="language.references">Referenzen</link> aus. Zum Beispiel
    erzeugt eine echte globale Variable, die mit der Anweisung
    <literal>global</literal> in den Funktionsbereich importiert
    wurde, tatsächlich eine Referenz zur globalen Variable. Das kann
    zu einem unerwarteten Verhalten führen, auf das im folgenden
    Beispiel eingegangen wird:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function test_global_ref() {
    global $obj;
    $obj = &new stdclass;
}

function test_global_noref() {
    global $obj;
    $obj = new stdclass;
}

test_global_ref();
var_dump($obj);
test_global_noref();
var_dump($obj);
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    Die Ausführung dieses Beispiels erzeugt die folgende Ausgabe:
   </simpara>
   <screen>
NULL
object(stdClass)(0) {
}
   </screen>
   <simpara>
    Ein ähnliches Verhalten gilt auch für die Anweisung
    <literal>static</literal>. Referenzen werden nicht statisch
    gespeichert:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function &get_instance_ref() {
    static $obj;

    echo "Statisches Objekt: ";
    var_dump($obj);
   if (!isset($obj)) {
        // Der statischen Variablen eine Referenz zuweisen
        $obj = &new stdclass;
    }
    $obj->eigenschaft++;
    return $obj;
}

function &get_instance_noref() {
    static $obj;

    echo "Statisches Objekt: ";
    var_dump($obj);
    if (!isset($obj)) {
        // Der statischen Variablen ein Objekt zuweisen
        $obj = new stdclass;
    }
    $obj->eigenschaft++;
    return $obj;
}

$obj1 = get_instance_ref();
$immer_noch_obj1 = get_instance_ref();
echo "\n";
$obj2 = get_instance_noref();
$immer_noch_obj2 = get_instance_noref();
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    Die Ausführung dieses Beispiels erzeugt die folgende Ausgabe:
   </simpara>
   <screen>
Statisches Objekt: NULL
Statisches Objekt: NULL

Statisches Objekt: NULL
Statisches Objekt: object(stdClass)(1) {
  ["eigenschaft"]=>
  int(1)
}
   </screen>
   <simpara>
    Dieses Beispiel demonstriert, dass die Referenz, die einer
    statischen Variablen zugewiesen wird, beim zweiten Aufruf der
    Funktion <literal>&amp;get_instance_ref()</literal> vergessen ist.
   </simpara>
   </sect2>
  </sect1>

  <sect1 xml:id="language.variables.variable">
   <title>Variable Variablen</title>
   <simpara>
    Manchmal ist es komfortabel, variable Variablen-Bezeichner zu
    benutzen. Das bedeutet, einen Variablen-Namen zu setzen und
    dynamisch zu gebrauchen. Eine normale Variable wird wie folgt
    gebildet:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = "Hallo";
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    Eine variable Variable nimmt den Wert einer Variablen und
    behandelt ihn als Bezeichner der Variablen. Im obigen Beispiel
    kann <emphasis>Hallo</emphasis> als Variablen-Name gebraucht
    werden, indem man zwei $-Zeichen benutzt, also schreibt:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$$a = "Welt";
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    Nun existieren in der PHP-Symbol-Struktur zwei definierte und
    gespeicherte Variablen: <varname>$a</varname> mit dem Inhalt "Hallo"
    und <varname>$Hallo</varname> mit dem Inhalt "Welt". Deshalb wird die
    Anweisung
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "$a ${$a}";
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    zur genau gleichen Ausgabe führen wie:
   </simpara>
   <informalexample>
    <programlisting>
<![CDATA[
<?php
echo "$a $Hallo";
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    also zu: <computeroutput>Hallo Welt</computeroutput>.
   </simpara>
   <simpara>
    Wenn Sie variable Variablen mit Arrays verwenden, müssen Sie eine
    Doppeldeutigkeit beachten. Wenn Sie nämlich
    <varname>$$a[1]</varname> schreiben, dann muss der Parser wissen,
    ob Sie <varname>$a[1]</varname> als Variable oder
    <varname>$$a</varname> als Variable und dann [1] als Index dieser
    Variablen verwenden wollen bzw. gemeint haben. Die Syntax zur
    Lösung dieser Doppeldeutigkeit: Verwenden Sie im ersten Fall
    <varname>${$a[1]}</varname> und im zweiten Fall
    <varname>${$a}[1]</varname>.
   </simpara>
   <warning>
    <simpara>
     Bitte beachten Sie, dass variable Variablen nicht bei <link
     linkend="language.variables.superglobals">Superglobalen
     Arrays</link> verwendet werden können.
     Die Variable <literal>$this</literal> ist also eine 
     spezielle Variabele die nicht dynamisch referenziert
     werden kann.
    </simpara>
   </warning>

  </sect1>

  <sect1 xml:id="language.variables.external">
   <title>Variablen aus externen Quellen</title>

   <sect2 xml:id="language.variables.external.form">
    <title>HTML-Formulare (GET and POST)</title>
    <simpara>
     Sobald ein Formular an ein PHP-Skript übergeben wird, werden die
     Informationen dieses Formulars dem Skript automatisch verfügbar
     gemacht. Es gibt viele Möglichkeiten, auf diese Informationen
     zuzugreifen, zum Beispiel:
    </simpara>
     
    <para>
     <example>
      <title>Ein einfaches HTML-Formular</title>
      <programlisting role="html">
<![CDATA[
<form action="foo.php" method="post">
    Name:  <input type="text" name="username" /><br />
    Email: <input type="text" name="email" /><br />
    <input type="submit" name="submit" value="Und ab!" />
</form>
]]>
      </programlisting>
     </example>
    </para>     
     
    <para>
     Abhängig von Ihrem speziellen Setup und Ihren persönlichen
     Vorlieben gibt es viele Möglichkeiten, auf die Daten von Ihren
     HTML-Formularen zuzugreifen. Hier einige Beispiele:
    </para>

    <para>
     <example>
      <title>
       Zugriff auf die Daten von einem einfachen POST HTML-Formular
      </title>
      <programlisting role="html">
<![CDATA[
<?php
// Seit PHP 4.1.0 verfügbar

   echo $_POST['benutzername'];
   echo $_REQUEST['benutzername'];

   import_request_variables('p', 'p_');
   echo $p_benutzername;

// Ab PHP 6.0.0 nicht mehr verfügbar. Ab PHP 5.0.0 können diese langen
// vordefinierten Variablen mit der Anweisung register_long_arrays
// deaktiviert werden.

   echo $HTTP_POST_VARS['benutzername'];

// Verfügbar, falls die PHP-Anweisung register_globals = on. Ab
// PHP 4.2.0 ist der standardmäßige Wert von register_globals = off.
// Es ist nicht empfehlenswert, diese Methode zu verwenden, bzw. sich
// darauf zu verlassen.

   echo $benutzername;
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Die Verwendung eines GET Formulars ist, davon abgesehen, dass Sie
    stattdessen die entsprechende vordefinierte GET-Variable erhalten,
    ähnlich. Außerdem wird GET auch für den QUERY_STRING (die
    Information nach dem '?' in einer URL) verwendet. So enthält zum
    Beispiel <literal>http://www.example.com/test.php?id=3</literal>
    GET-Daten, auf die mit <varname>$_GET['id']</varname> zugegriffen
    werden kann. Siehe auch <link
    linkend="reserved.variables.request">$_REQUEST</link> und
    <function>import_request_variables</function>.
   </para>

   <note>
    <para>
     <link linkend="language.variables.superglobals">Superglobale
     Arrays</link> wie <varname>$_POST</varname> und
     <varname>$_GET</varname> stehen seit PHP 4.1.0 zur Verfügung.
    </para>
   </note>

   <para>
    Wie gezeigt, war <link
    linkend="ini.register-globals">register_globals</link> vor PHP
    4.2.0 standardmäßig <emphasis>on</emphasis>. 
    Die PHP-Gemeinschaft ermuntert alle, sich nicht auf
    diese Anweisung zu stützen, weil es vorzuziehen ist, davon
    auszugehen, dass sie <emphasis>off</emphasis> ist und entsprechend
    zu programmieren.
   </para>

   <note>
    <para>
     Die Konfigurationseinstellung zu <link
     linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> betrifft
     Get-, Post- und Cookie-Werte. Ist diese Einstellung aktiv, wird
     der Wert (It's "PHP!") automatisch zu (It\'s \"PHP!\"). Escaping
     ist notwendig, wenn Sie ihre Daten in eine Datenbank einfügen
     wollen. Siehe auch <function>addslashes</function>,
     <function>stripslashes</function> und <link
     linkend="ini.magic-quotes-sybase">magic_quotes_sybase</link>.
    </para>
   </note>

   <simpara>
    Im Zusammenhang mit Formular-Variablen versteht PHP auch
    Arrays (siehe auch die <link linkend="faq.html">verwandte Faq</link>).
    Sie können z.B. die betreffenden Variablen gruppieren oder dieses
    Leistungsmerkmal nutzen, um Werte aus Mehrfach-Auswahl-Bereichen
    zu erhalten. Schicken wir zum Beispiel ein Formular an sich selbst
    und lassen nach dem Abschicken die Daten anzeigen:
   </simpara>
   <para>
    <example>
     <title>Komplexere Formular-Variablen</title>
      <programlisting role="php">
<![CDATA[
<?php
if ($_POST) {
    echo '<pre>';
    echo htmlspecialchars(print_r($_POST, true));
    echo '</pre>';
}
?>
<form action="" method="post">
    Name:  <input type="text" name="personal[name]" /><br />
    Email: <input type="text" name="personal[email]" /><br />
    Bier: <br />
    <select multiple name="bier[]">
        <option value="warthog">Warthog</option>
        <option value="guinness">Guinness</option>
        <option value="stuttgarter">Stuttgarter Schwabenbräu</option>
    </select><br />
    <input type="submit" name="submit" value="Und ab!" />
</form>
]]>
      </programlisting>
     </example>
    </para>

    <sect3 xml:id="language.variables.external.form.submit">
     <title>IMAGE SUBMIT Variablen-Bezeichner</title>
     <simpara>
      Zur Übertragung eines Formulars kann auch ein Bild (Image)
      statt eines Übertragungs-Schalters (Submit-Button) benutzt
      werden, dessen Tag wie folgt aussieht:
     </simpara>
     <informalexample>
      <programlisting role="html">
<![CDATA[
<input type="image" src="image.gif" name="sub" />
]]>
      </programlisting>
     </informalexample>
     <simpara>
      Klickt der Benutzer irgendwo auf das Bild, wird das
      entsprechende Formular an den Web-Server übertragen. Hierbei
      sind zwei zusätzliche Variablen vorhanden, sub_x und sub_y.
      Diese enthalten die Koordinaten des Klick-Punktes innerhalb des
      Bildes. Die Erfahreneren werden sagen, dass die Variablen, die
      vom Browser gesendet werden einen Punkt enthalten statt eines
      Unterstrichs. Dieser Punkt wird von PHP automatisch in einen
      Unterstrich verwandelt.
     </simpara>
    </sect3>

   </sect2>

   <sect2 xml:id="language.variables.external.cookies">
    <title>HTTP-Cookies</title>
    <simpara>
     PHP unterstützt HTTP-Cookies, wie sie in <link
     xlink:href="&spec.cookies;">Netscape's Spec</link> definiert sind.
     Cookies ermöglichen die Daten-Speicherung innerhalb der
     jeweiligen Browser-Umgebung zur Weiterleitung oder wiederholten
     Identifikation von Benutzern. Sie können Cookies erzeugen, indem
     Sie die Funktion <function>setcookie</function> benutzen. Cookies
     sind Teil des HTTP-Headers, deshalb muss die setcookie-Funktion
     aufgerufen werden, bevor irgendeine Ausgabe an den Browser
     gesendet wird. Dabei handelt es sich um die gleiche
     Einschränkung, die auch für die
     <function>header</function>-Funktion gilt. Cookie-Daten stehen
     dann sowohl in den entsprechenden Cookie-Daten-Arrays, wie zum
     Beispiel <varname>$_COOKIE</varname>,
     <varname>$HTTP_COOKIE_VARS</varname> als auch in
     <varname>$_REQUEST</varname> zur Verfügung. Für weitere Details
     und Beispiele lesen Sie bitte die
     <function>setcookie</function>-Seite des Handbuchs.
    </simpara>
    <simpara>
     Wenn Sie einer einzelnen Cookie-Variable mehrere Werte zuweisen
     wollen, müssen Sie diese als Array übertragen. Zum Beispiel:
    </simpara>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
setcookie("MeinCookie[foo]", "Ich teste 1", time()+3600);
setcookie("MeinCookie[bar]", "Ich teste 2", time()+3600);
?>
]]>
     </programlisting>
    </informalexample>

    <simpara>
     Das erzeugt zwei einzelne Cookies obwohl MeinCookie in Ihrem
     Skript nun ein einziges Array ist. Wenn Sie nur ein Cookie mit
     mehreren Werten setzen wollen, sollten Sie zuerst
     <function>serialize</function> oder <function>explode</function>
     auf das Array anwenden.
    </simpara>

    <simpara>
     Bedenken Sie, dass ein Cookie ein vorhergehendes Cookie
     gleichen Namens überschreibt, es sei denn, der Pfad oder
     die Domain ist anders. Für eine Warenkorb-Anwendung können
     Sie deshalb z.B. einen Zähler bilden und diesen weiterleiten:
    </simpara>
    <example>
     <title>Ein <function>setcookie</function>-Beispiel</title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['zaehler'])) {
    $zaehler = $_COOKIE['zaehler'] + 1;
} else {
    $zaehler = 1;
}
setcookie("zaehler", $zaehler, time()+3600);
setcookie("Cart[$zaehler]", $item, time()+3600);
?>
]]>
     </programlisting>
    </example>
   </sect2>

   <sect2 xml:id="language.variables.external.dot-in-names">
    <title>Punkte in eingelesenen Variablen-Bezeichnern</title>
    <para>
     Normalerweise verändert PHP die Variablen-Bezeichner nicht,
     wenn sie einem Skript übergeben werden. Es sollte aber beachtet
     werden, dass der Punkt (".") kein gültiger Bestandteil eines
     Variablen-Bezeichners ist. Deshalb achten Sie auf folgendes:
     <programlisting role="php">
<![CDATA[
<?php
$varname.ext;  /* ungültiger Variablen-Bezeichner */
?>
]]>
     </programlisting>
     Der PHP-Parser sieht eine Variable namens <varname>$varname</varname>,
     gefolgt von einem Zeichenketten-Verbindungs-Operator, dieser wiederrum
     gefolgt von der offenen Zeichenkette 'ext' (also nicht eingegrenzt
     durch '"' und auch keinem Schlüssel oder reserviertem Bezeichner
     entsprechend). Das kann natürlich nicht zum gewünschten Ergebnis
     führen.
    </para>
    <para>
     Deshalb ist es wichtig zu wissen, dass PHP in den ihm übergebenen
     Variablen alle Punkte (.) automatisch durch einen 
     Unterstrich (_) ersetzt.
    </para>
   </sect2>

   <sect2  xml:id="language.variables.determining-type-of">
    <title>Bestimmung des Variablen-Typs</title>
    <para>
     Da PHP den Typ der Variablen bestimmt und (im Allgemeinen) selbst
     eine entsprechende Umformung vornimmt, ist es nicht immer klar,
     welchen Typ eine Variable gerade hat. PHP beinhaltet einige
     Funktionen, die dies herausfinden, wie zum Beispiel:
     <function>gettype</function>, <function>is_array</function>,
     <function>is_float</function>, <function>is_int</function>,
     <function>is_object</function> und
     <function>is_string</function>. Lesen Sie bitte auch das Kapitel
     über <link linkend="language.types">Typen</link>.
    </para>
   </sect2>

  </sect1>
     
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
