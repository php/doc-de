<?xml version="1.0" encoding="iso-8859-1"?>
 <chapter id="language.variables">
  <title>Variablen</title>
  <!-- Anmerkung des Übersetzers:
       entspricht en/language/variables.xml 1.5 -->  

  <sect1 id="language.variables.basics">
   <title>Grundlegendes</title>
   <simpara>
    Variablen werden in PHP dargestellt durch ein Dollar-Zeichen ($)
    gefolgt vom Namen der Variablen. Bei Variablen-Namen wird
    zwischen Groß- und Kleinschreibung unterschieden (case-sensitive).
   </simpara>

   <para>
    Variablen-Namen werden in PHP nach den gleichen Regeln wie die
    andere Bezeichner erstellt. Ein gültiger Variablen-Name beginnt
    mit einem Buchstaben oder einem Unterstrich ("_"), gefolgt von
    einer beliebigen Anzahl von Buchstaben, Zahlen oder Unterstrichen.
    Als regulärer Ausdruck (regular expression) würde das wie folgt
    ausgedrückt: '[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'.
   </para>

   <note>
    <simpara>
     Unserem Zweck entspricht also ein Buchstabe von a bis z bzw.
     A bis Z oder einem ASCII-Zeichen von 127 bis 255 (0x7f bis 0xff).
    </simpara>
   </note>

   <para>
    <informalexample>
     <programlisting role="php"> 
$var = "Du";
$vaR = "und";
$Var = "ich";
$vAr = "wir lernen PHP"
echo "$var $vaR $Var, $vAr"; // gibt "Du und ich, wir lernen PHP" aus

$4site  = 'nicht jetzt';     // ungültig, da Anfang eine Zahl
$_4site = 'nicht jetzt';     // gültig, da Unterstrich am Anfang
$täbyte = 'irgendwas';       // gültig, da 'ä' dem ASCII-Wert 228 entspricht
     </programlisting>
    </informalexample>
   </para>

   <para>
    Variablen werden in PHP3 durch ihren Wert bestimmt. Das heisst,
    wenn sie einer Variablen einen Ausdruck zuweisen, wird der gesamte
    Inhalt des Originalausdrucks in die Zielvariable kopiert. Die
    Folge ist, dass eine Variable, die ihren Inhalt von einer anderen
    Variablen erhalten hat, ihren Inhalt behält, auch wenn sie danach
    den  Inhalt der anderen (Quell- / Ursprungs-)Variablen ändern. Die
    Inhalte der Ziel- und Quellvariablen sind also insoweit unabhängig
    voneinander. Für weitere Informationen lesen sie bitte <link
    linkend="language.expressions">Expressions / Ausdrücke</link>.
   </para>
   <para>
    PHP4 bietet eine andere Möglichkeit der Wertzuweisung bei
    Variablen: <emphasis>Zuweisung durch Referenzierung</emphasis>.
    Das bedeutet, dass der Wert der neuen Variablen eine Referenz zur
    Ursprungs-Variablen darstellt (mit anderen Worten: Der Wert ist
    ein Alias bzw. Zeiger auf den Inhalt der Ursprungsvariablen). Beide
    Variablen zeigen also auf die selbe(n) Speicherstelle(n).
    Änderungen der neuen Variablen ändern auch deren Ursprungs-
    Variable und umgekehrt. Der Wert / Inhalt wird also nicht kopiert. Die
    Übertragung geschieht dadurch auch schneller als in PHP3. Dies wird
    sich aber nur bei umfangreichen Schleifen oder bei der Übertragung
    von grossen Arrays oder Objekten bemerkbar machen.
   </para>
   <para>
    Für die Zuweisung per Referenz müssen sie lediglich ein "&" plus
    "amp;" (&amp;) der (Ausgangs-, Quell-) Variablen voranstellen, die
    sie einer anderen Variablen zuweisen wollen. Der folgende Skript-
    Ausschnitt wird zweimal 'Mein Name ist Bob' ausgeben:
    <informalexample>
     <programlisting role="php">
&lt;?php
$foo = 'Bob';             // 'Bob' der Variablen $foo zuweisen.
$bar = &amp;$foo;         // Zeiger auf $foo in $bar erzeugen.
$bar = "My name is $bar"; // $bar verändern...
echo $foo;                // $foo wurde dadurch ebenfalls verändert.
echo $bar;
?&gt;
     </programlisting>
    </informalexample>
   </para>
   <para>
    Zu beachten ist, dass nur Variablenbezeichner referenziert
    werden können.
    <informalexample>
     <programlisting role="php">
&lt;?php
$foo = 25;
$bar = &amp;$foo;     // Gültige Zuweisung.
$bar = &amp;(24 * 7); // Ungültig, da kein Variablenbezeichner
                         zugewiesen wird.
function test() {
    return 25;
}

$bar = &amp;test();   // Ungültig.
?&gt;
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="language.variables.predefined">
   <title>Vordefinierte Variablen</title>
   <simpara>
    PHP bietet jedem ausgeführtem Skript eine Vielzahl von
    vordefinierten Variablen an. Viele dieser Variablen können
    jedoch nicht vollständig erläutert werden, da sie abhängig
    sind vom Web-Server, der Version und dem Setup des Web-
    Servers sowie weiteren Faktoren. Einige dieser Variablen
    stehen nicht zur Verfügung, wenn PHP-Skripte per Kommando-
    Zeilen-Aufruf ausgeführt werden.
   </simpara>
   <simpara>
    Ungeachtet dieser Faktoren folgt nun eine Liste von
    vordefinierten Variablen innerhalb einer Basis-PHP3-
    Installation als Modul und einer Basis-Installation des
    <ulink url="&url.apache;">Apache</ulink>-Web-Servers in der
    Vers. 1.3.6.
   </simpara>
   <simpara>
    Eine Liste aller vordefinierten Variablen (und weitere
    nützliche Informationen) erhalten sie durch Lesen der Infos
    zu (und Gebrauch) der <function>phpinfo</function>-Funktion.
   </simpara>
   <note>
    <simpara>
     Diese Liste ist weder vollständig noch erhebt sie Anspruch
     auf Vollständigkeit. Sie dient lediglich als Anleitung zu den
     möglicherweise zu erwartenden Arten von vordefinierten
     Variablen und dem Zugriff darauf.
    </simpara>
   </note>

   <sect2 id="language.variables.predefined.apache">
    <title>Apache-Variablen</title>
    <simpara>
     Diese Variablen werden durch den <ulink
     url="&url.apache;">Apache</ulink>-Web-Server erzeugt. Sollten
     sie einen anderen Web-Server nutzen, gibt es keine Garantie,
     dass dieser die selben Variablen unterstützt. Es könnten
     einige sein; es könnten aber auch hier nicht aufgeführte sein.
     Viele dieser Variablen werden in den <ulink
     url="&url.cgispec;">CGI 1.1 Spezifikationen</ulink> aufgeführt.
     Darauf sollten sie vorbereitet sein.
    </simpara>
    <simpara>
     Einige sind beim Aufruf von PHP per Kommandozeile verfügbar.
     Sie können unterschiedliche Bedeutungen haben.
    </simpara>
    <para>
     <variablelist>
      <varlistentry>
       <term>GATEWAY_INTERFACE</term>
       <listitem>
	<simpara>
         Die Revision der CGI-Spezifikation, die der Web-Server
         benutzt, z.B. 'CGI/1.1'.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SERVER_NAME</term>
       <listitem>
	<simpara>
         Der Host-Name des Web-Servers, der das Skript ausführt. Das
         kann auch der Name eines virtuellen Servers sein.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SERVER_SOFTWARE</term>
       <listitem>
	<simpara>
         Der Identifikations-String des Web-Servers (aus den Headern),
         sobald er Anforderungen beantwortet.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SERVER_PROTOCOL</term>
       <listitem>
	<simpara>
         Name und Revision des Informations-Protokolls, über das die
         Seite angefordert wurde, z.B. 'HTTP/1.0'.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>REQUEST_METHOD</term>
       <listitem>
	<simpara>
         Welche Methode zum Zugriff auf die Seite benutzt wurde,
         z.B. 'GET', 'HEAD', 'POST', 'PUT'.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>QUERY_STRING</term>
       <listitem>
	<simpara>
         Der Abfrage-(Query-)String (falls vorhanden), mit dem auf
         die Seite zugegriffen wurde.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>DOCUMENT_ROOT</term>
       <listitem>
	<simpara>
         Das Verzeichnis des gerade ausgeführten Skripts aus Sicht
         des in der Konfigurations-Datei des Servers definierten
         Dokument-Wurzel-Verzeichnisses.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>HTTP_ACCEPT</term>
       <listitem>
	<simpara>
         Inhalt des <literal>Accept:</literal>-Headers der aktuellen
         Anforderung (so es einen solche Header gibt).
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>HTTP_ACCEPT_CHARSET</term>
       <listitem>
	<simpara>
         Inhalt des <literal>Accept-Charset:</literal>-Headers der
         aktuellen Anforderung (sofern es einen gibt).
         Beispiel: 'iso-8859-1,*,utf-8'.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>HTTP_ENCODING</term>
       <listitem>
	<simpara>
         Inhalt des <literal>Accept-Encoding:</literal>-Headers der
         aktuellen Anforderung (wenn es einen gibt).
         Beispiel: 'gzip'.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>HTTP_ACCEPT_LANGUAGE</term>
       <listitem>
	<simpara>
         Inhalt des <literal>Accept-Language:</literal>-Headers in
         der aktuellen Anforderung, sofern dieser Header existiert.
         Beispiel: 'en'.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>HTTP_CONNECTION</term>
       <listitem>
	<simpara>
         Inhalt des <literal>Connection:</literal>-Headers des
         aktuellen Request, so er vorhanden ist.
         Beispiel: 'Keep-Alive'.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>HTTP_HOST</term>
       <listitem>
	<simpara>
	 Inhalt des <literal>Host:</literal>-Headers der aktuellen
         Anforderung, wenn er existiert.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>HTTP_REFERER</term>
       <listitem>
	<simpara>
         Die Adresse (URL) - sofern vorhanden - der Seite, von
         der aus auf die aktuelle Seite gesprungen wurde. Diese
         wird vom Browser gesetzt. Nicht alle unterstützen dies.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>HTTP_USER_AGENT</term>
       <listitem>
	<simpara>
         Inhalt der <literal>User_Agent:</literal>-Header-Angabe
         der aktuellen Anfrage (wenn eine Angabe existiert). Dabei
         handelt es sich um eine Zeichenkette, welche das Browser-
         Programm benennt, mit dem die aktuelle Seite aufgerufen
         wurde, z.B. <computeroutput>Mozilla/4.5 [en] (X11; U;
         Linux 2.2.9 i586)</computeroutput>. Abgesehen von anderen
         Dingen können sie diesen Wert zusammen mit der
         <function>get_browser</function>-Funktion dazu verwenden,
         ihre Web-Seiten in Abhängigkeit von den Möglichkeiten des
         jeweils benutzten Browsers anzeigen zu lassen.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>REMOTE_ADDR</term>
       <listitem>
	<simpara>
         Die IP-Adresse, von der aus gerade auf die Web-Seite
         zugegriffen wird.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>REMOTE_PORT</term>
       <listitem>
	<simpara>
         Der Port, der zum Zugriff auf ihren Web-Server seitens
         des Anwender-Computers benutzt wird.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SCRIPT_FILENAME</term>
       <listitem>
	<simpara>
         Der absolute Pfadname des gerade ausgeführten Skripts.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SERVER_ADMIN</term>
       <listitem>
	<simpara>
         Der Inhalt der in der Konfigurations-Datei des Web-Servers
         (Apache) stehenden Angabe zum SERVER_ADMIN. Bei virtuellen
         Hosts der dafür eingetragene Wert.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SERVER_PORT</term>
       <listitem>
	<simpara>
         Der vom Server für den Web-Server benutzte Kommunikations-
         Port (normalerweise '80'). Verwenden sie z.B. SSL, wird
         dieser Port derjenige sein, den sie für sicheres HTTP
         definiert haben.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SERVER_SIGNATURE</term>
       <listitem>
	<simpara>
         Sofern eingeschaltet, enthält diese Zeichenkette die Server-
         Version und den virtuellen Host-Namen. Sie wird den durch
         den Server generierten Seiten hinzu gefügt.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>PATH_TRANSLATED</term>
       <listitem>
	<simpara>
         In Abhängigkeit vom Datei- / File-System der Pfad des
         aktuellen Skripts, nachdem der Server das virtuelle
         Mapping in ein reales Mapping umgesetzt hat (nicht der
         Dokument-Wurzel-Pfad).
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SCRIPT_NAME</term>
       <listitem>
	<simpara>
         Enthält den Pfad des aktuellen Skripts. Nützlich für
         Seiten, die auf sich selbst verweisen müssen.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>REQUEST_URI</term>
       <listitem>
	<simpara>
         Die URI, die durch den Zugriff auf die aktuelle Seite
         gegeben ist, z.B. '/index.html'.
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

   <sect2 id="language.variables.predefined.environment">
    <title>Umgebungs- / Environment-Variablen</title>
    <simpara>
     Diese Variablen werden aus der Umgebung, in der PHP läuft, in
     den globalen Namensbereich von PHP importiert. Viele werden
     durch die jeweilige Shell, in der PHP läuft, unterstützt bzw.
     gebildet. Da es verschiedenste Systemumgebungen mit den 
     unterschiedlichsten Shell`s gibt, ist es nicht möglich, eine
     abschließende Liste der definierten Umgebungs-Variablen
     aufzustellen. Lesen sie deshalb in der Anleitung zu ihrer
     Shell nach, um eine Liste dieser systembezogenen Variablen
     zu erhalten.
    </simpara>
    <simpara>
     Andere Umgebungs-Variablen beinhalten die CGI-Variablen,
     die ohne Rücksicht darauf, ob PHP als Web-Server-Modul
     oder im CGI-Modus läuft, gesetzt werden.
    </simpara>
   </sect2>

   <sect2 id="language.variables.predefined.php">
    <title>PHP-Variablen</title>
    <simpara>
     Diese Variablen werden durch PHP selbst erzeugt.
    </simpara>
    <para>
     <variablelist>
      <varlistentry>
       <term>argv</term>
       <listitem>
        <simpara>
         Ein Array von Informationen, die dem Skript übergeben
         werden. Wird das Skript an der Befehlszeile aufgerufen,
         ermöglicht dies C-ähnlichen Zugriff auf die Kommando-
         Zeilen-Parameter. Beim Aufruf per GET-Methode enthält
         dieses Array die Abfragewerte.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>argc</term>
       <listitem>
        <simpara>
         Anzahl der per Kommando-Zeile dem Skript übergebenen
         Parameter (wenn von dort aufgerufen).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>PHP_SELF</term>
       <listitem>
        <simpara>
         Der Datei-Name des gerade ausgeführten Skripts, relativ
         zum Wurzel-Verzeichnis des Dokuments. Bei Kommando-Zeilen-
         Aufrufen ist diese Variable nicht verfügbar.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>HTTP_COOKIE_VARS</term>
       <listitem>
        <simpara>
         Ein assoziatives Array von Variablen, das dem aktuellen Skript
         über HTTP-Cookies übergeben wurde. Nur verfügbar, wenn
         die Option "Variablen-Tracking" per <link
	       linkend="ini.track-vars">track_vars</link>-Konfigurations-
         oder per
         <computeroutput>&lt;?php_track_vars?&gt;</computeroutput>-
         Anweisung eingeschaltet wurde.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>HTTP_GET_VARS</term>
       <listitem>
        <simpara>
         Ein assoziatives Array von Variablen, das dem aktuellen
         Skript per HTTP-GET-Methode übergeben wurde. Nur möglich,
         wenn "Variablen-Tracking" per <link
         linkend="ini.track-vars">track_vars</link>-Konfigurations-
         oder per
         <computeroutput>&lt;?php_track_vars?&gt;</computeroutput>-
         Anweisung eingeschaltet ist.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>HTTP_POST_VARS</term>
       <listitem>
        <simpara>
         Ein assoziatives Array aus Varaiblen, welches dem aktuellen
         Skript per HTTP-POST-Methode übergeben wurde. Nur möglich,
         wenn "Variablen-Tracking" per <link
         linkend="ini.track-vars">track_vars</link>-Konfigurations-
         oder per Anweisung
         <computeroutput>&lt;?php_track_vars?&gt;</computeroutput>-
         eingeschaltet ist.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>HTTP_POST_FILES</term>
       <listitem>
        <simpara>
         Ein assoziatives Array aus Variablen, die Informationen über
         per HTTP POST-Methode hochgeladene Dateien enthalten. Dies ist
         nur verfügbar, wenn das "Variablen-Tracking" entweder über die
         Konfigurations-Anweisungen
         <link linkend="ini.track-vars">track_vars</link> oder 
         <computeroutput>&lt;?php_track_vars?&gt;</computeroutput>
         ermöglicht ist.
        </simpara>
       </listitem>
      </varlistentry>
  
      <varlistentry>
       <term>HTTP_ENV_VARS</term>
       <listitem>
        <simpara>
         Ein assoziatives Array aus Variablen, die dem aktuellen Skript
         über die Umgebung vermittelt werden. Dies ist nur verfügbar,
         wenn das "Variablen-Tracking" entweder über die
         Konfigurations-Anweisungen
         <link linkend="ini.track-vars">track_vars</link> oder 
  	     <computeroutput>&lt;?php_track_vars?&gt;</computeroutput>
         ermöglicht ist.
  	    </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>HTTP_SERVER_VARS</term>
       <listitem>
        <simpara>
         Ein assoziatives Array aus Variablen, die dem aktuellen Skript
         vom jeweiligen HTTP-Server übermittelt werden. Diese Variablen
         sind analog den o.a. Apache-Variablen. Dies ist nur verfügbar,
         wenn das "Variablen-Tracking" entweder über die
         Konfigurations-Anweisungen
         <link linkend="ini.track-vars">track_vars</link> oder 
  	     <computeroutput>&lt;?php_track_vars?&gt;</computeroutput>
         ermöglicht ist.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>
   </sect2>
  </sect1>


  <sect1 id="language.variables.scope">
   <title>Geltungsbereich von Variablen</title>
   <simpara>
    Der Geltungsbereich einer Variablen ergibt sich aus dem
    Zusammenhang, in dem sie definiert wurde. Meistens besteht
    dieser aus einem einzigen Bereich. Dieser beinhaltet auch den
    Bereich für Dateien, die per "Include"- oder "Require"-Anweisung
    eingebunden wurden, z.B.:
   </simpara>
   <informalexample>
    <programlisting role="php">
$a = 1;
include "b.inc";
    </programlisting>
   </informalexample>
   <simpara>
    Die Variable $a ist auch in der eingebundenen Datei b.inc
    verfügbar. In benutzer-definierten Funktionen wird ein auf die
    Funktion beschränkter Geltungsbereich eingeführt. Jede in einer
    Funktion benutzte Variable ist zunächst auf den lokalen Bereich
    der Funktion beschränkt, z.B.:
   </simpara>
   <informalexample>
    <programlisting role="php"> 
$a = 1; /* globaler Bereich */ 

function test () { 
    echo $a; /* Referenz auf einen lokalen Variablen-Bereich */ 
} 

test ();
    </programlisting>
   </informalexample>
   <simpara>
    Dieses Skript erzeugt keine Bildschirm-Ausgabe, da sich die Echo-
    Anweisung auf eine lokale Variable namens $a bezieht und dieser
    kein Wert im lokalen Bezug zugewiesen worden ist. Dies ist ein
    kleiner Unterschied zu C, wo globale Variablen auch in Funktionen
    vorhanden sind, es sei denn, sie werden durch eine funktionsinterne
    Definition überschrieben. Das kann zu Problemen führen, denn in PHP
    müssen global geltende Variablen innerhalb von Funktionen als
    solche definiert werden. Ein Beispiel:
   </simpara>
   <informalexample>
    <programlisting role="php">
$a = 1;
$b = 2;

function sum () {
    global $a, $b;
    $b = $a + $b;
} 

sum ();
echo $b;
    </programlisting>
   </informalexample>
   <simpara>
    Das obige Skript gibt &quot;3&quot; aus. Durch das Deklararieren
    der Variablen $a und $b innerhalb der Funktion als global, weisen
    alle Referenzen zu beiden Variablen auf die nun globalen Werte. Es
    gibt keine Beschränkungen bei der Anzahl an globalen Variablen,
    die durch eine Funktion verändert werden können.
   </simpara>
   <simpara>
    Eine weitere Möglichkeit besteht in der Verwendung des speziellen
    $GLOBALS PHP-Array. Das obige Beispiel kann damit auch so 
    geschrieben werden:
   </simpara>
   <informalexample>
    <programlisting role="php">
$a = 1;
$b = 2;

function sum () {
    $GLOBALS["b"] = $GLOBALS["a"] + $GLOBALS["b"];
} 

sum ();
echo $b;
    </programlisting>
   </informalexample>
   <simpara>
    Das $GLOBALS-Array ist ein assoziatives Array mit dem Bezeichner
    der globalen Variablen als Schlüssel und dem Inhalt dieser
    Variablen als Wert des Array-Elements.
   </simpara>
   <simpara>
    Ein weiterer wichtiger Anwendungszweck von Variablen-Bereichen
    ist die <emphasis>static</emphasis>-Variable. Eine statische-
    Variable existiert nur in einem lokalen Funktions-Bereich, der
    Wert geht beim Verlassen dieses Bereichs aber nicht verloren.
    Schauen sie das folgende Beispiel an:
   </simpara>
   <informalexample>
    <programlisting role="php">
function test () {
    $a = 0;
    echo $a;
    $a++;
}
    </programlisting>
   </informalexample>
   <simpara>
    Diese Funktion ist sinnlos, da sie bei jedem Aufruf $a auf 0
    setzt und &quot;0&quot; ausgibt. Die Anweisung $a++, welche den
    Wert erhöht, macht keinen Sinn, da der Wert von $a beim Verlassen
    der Funktion verloren geht. Um eine sinnvolle Zählfunktion zu
    implementieren, die ihren aktuell gesetzten Wert nicht vergisst,
    müssen sie die $a-Variable als "static" deklarieren:
   </simpara>
   <informalexample>
    <programlisting role="php">
function test () {
    static $a = 0;
    echo $a;
    $a++;
}
    </programlisting>
   </informalexample>
   <simpara>
    Jetzt wird bei jedem Aufruf der test()-Funktion der aktuelle
    Wert von $a ausgegeben und dann um 1 erhöht.
   </simpara>
   <simpara>
    Static-Variablen ermöglichen auch einen Weg des Umgangs mit
    rekursiven Funktionen. Das sind Funktionen, die sich selbst
    aufrufen. Hierbei besteht die Gefahr, so genannte Endlos-
    Schleifen zu programmieren. Sie müssen also einen Weg vorsehen,
    diese Rekursion zu beenden. Die folgende einfache Funktion zählt
    rekursiv bis 10. Die Variable $count wird benutzt, um die
    Rekursion zu beenden:
   </simpara>
   <informalexample>
    <programlisting role="php">
function test () {
    static $count = 0;

    $count++;
    echo $count;
    if ($count &lt; 10) {
        test ();
    }
    $count--;
}
    </programlisting>
   </informalexample>
  </sect1>

  <sect1 id="language.variables.variable">
   <title>Variable Variablen</title>
   <simpara>
    Manchmal ist es erforderlich, variable Variablen-Bezeichner zu
    benutzen. Das bedeutet, einen Variablen-Namen zu setzen und
    dynamisch zu gebrauchen. Eine normale Variable wird wie folgt
    gebildet:
   </simpara>
   <informalexample>
    <programlisting role="php">
$a = "hallo";
    </programlisting>
   </informalexample>
   <simpara>
    Eine variable Variable nimmt den Wert einer Variablen und
    behandelt ihn als Bezeichner der Variablen. Im obigen Beispiel
    kann <emphasis>hallo</emphasis> als Variablen-Name gebraucht
    werden, indem man zwei $-Zeichen benutzt, also schreibt:
   </simpara>
   <informalexample>
    <programlisting role="php">
$$a = "Welt";
    </programlisting>
   </informalexample>
   <simpara>
    Nun existieren in der PHP-Symbol-Struktur zwei definierte und
    gespeicherte Variablen: $a mit dem Inhalt "Hallo" und $hallo
    mit dem Inhalt "Welt". Deshalb wird die Anweisung
   </simpara>
   <informalexample>
    <programlisting role="php">
echo "$a ${$a}";
    </programlisting>
   </informalexample>
   <simpara>
    zur gleichen Ausgabe führen wie:
   </simpara>
   <informalexample>
    <programlisting>
echo "$a $hallo";
    </programlisting>
   </informalexample>
   <simpara>
    also zu: <emphasis>hallo Welt</emphasis>.
   </simpara>
   <simpara>
    Wenn sie variable Variablen mit Arrays verwenden, müssen sie
    eine Unklarheit beachten. Wenn sie nämlich $$a[1] schreiben,
    dann muss der Parser wissen, ob sie  $a[1] als Variable oder
    $$a als Variable und dann [1] als Index dieser Variablen
    verwenden wollen bzw. gemeint haben. Die Lösung: Verwenden
    sie ${$a[1]} für den ersten Fall und ${$a}[1] für den zweiten.
   </simpara>
  </sect1>

  <sect1 id="language.variables.external">
   <title>Variablen ausserhalb von PHP</title>

   <sect2 id="language.variables.external.form">
    <title>HTML-Formulare (GET and POST)</title>
    <simpara>
     Sobald ein Formular an ein PHP-Skript übergeben wird, wird
     jede Variable dieses Formulars dem Skript automatisch 
     verfügbar gemacht. Dafür sorgt PHP. Ein Beispiel:
    </simpara>
    <para>
    <example>
     <title>Einfache Formular-Variablen</title>
     <programlisting role="php">
&lt;form action="foo.php3" method="post">
    Name: &lt;input type="text" name="name">&lt;br>
    &lt;input type="submit">
&lt;/form>
     </programlisting>
    </example>
   </para>
   <simpara>
    Bei der Formular-Übergabe (hier per POST) erzeugt PHP die
    Variable <computeroutput>$name</computeroutput>, die genau
    das enthält, was sie in das <emphasis>Name:</emphasis>-Feld
    des Formulars eingegeben haben.
   </simpara>
   <simpara>
    Im Zusammenhang mit Formular-Variablen versteht PHP auch 
    Arrays, aber nur eindimensionale. Deshalb müssen sie die
    betreffenden Variablen vorher gruppieren oder das folgende
    Beispiel auf Mehrfach-Auswahl-Bereiche anwenden:
   </simpara>
   <para>
    <example>
     <title>Komplexere Formular-Variablen</title>
      <programlisting role="php">
&lt;form action="array.php" method="post">
    Name: &lt;input type="text" name="personal[name]">&lt;br>
    Email: &lt;input type="text" name="personal[email]">&lt;br>
    Bier: &lt;br>
    &lt;select multiple name="bier[]">
        &lt;option value="binding">Binding
        &lt;option value="warsteiner">Warsteiner
        &lt;option value="stauder">Stauder
        &lt;option value="stuttgarter">Stuttgarter Schwabenbräu
    &lt;/select>
    &lt;input type="submit">
&lt;/form>
      </programlisting>
     </example>
    </para>
    <simpara>
     Ist das PHP-"track_vars"-Feature eingeschaltet (entweder durch
     <link linkend="ini.track-vars">track_vars</link>-Konfigurations-
     Einstellung oder per <computeroutput>&lt;?php_track_vars?&gt;
     </computeroutput>-Anweisung), können die durch die POST- oder
     GET-Methode übertragenen Variablen in den globalen assoziativen
     Arrays $HTTP_POST_VARS und $HTTP_GET_VARS wieder gefunden werden.
    </simpara>

    <sect3 id="language.variables.external.form.submit">
     <title>IMAGE SUBMIT Variablen-Bezeichner</title>
     <simpara>
      Zur Übertragung eines Formulars kann auch ein Bild (Image)
      statt eines Übertragungs-Schalters (Submit-Button) benutzt
      werden, dessen Tag wie folgt aussieht:
     </simpara>
     <informalexample>
      <programlisting role="php">
&lt;input type=image src="image.gif" name="sub">
      </programlisting>
     </informalexample>
     <simpara>
      Klickt der Benutzer irgendwo auf das Bild, wird das entsprechende
      Formular an den Web-Server übertragen. Hierbei sind zwei
      zusätzliche Variablen vorhanden, sub_x und sub_y. Diese enthalten
      die Koordinaten des Klick-Punktes innerhalb des Bildes. Die
      Erfahreneren werden sagen, dass dabei kein Unterstrich vorhanden ist
      (da ein Punkt enthalten ist, also z.B. "sub.x"). Dieser wird
      aber automatisch von PHP erzeugt.
     </simpara>
    </sect3>

   </sect2>

   <sect2 id="language.variables.external.cookies">
    <title>HTTP-Cookies</title>
    <simpara>
     PHP unterstützt HTTP-Cookies, wie sie in <ulink
     url="&spec.cookies;">Netscape's Spec</ulink> definiert sind.
     Cookies ermöglichen die Daten-Speicherung innerhalb der
     jeweiligen Browser-Umgebung zur Weiterleitung oder
     wiederholten Identifikation von Benutzern. Sie können Cookies
     erzeugen, indem sie die <function>SetCookie</function>-
     Funktion benutzen. Cookies sind Teil des HTTP-Headers, deshalb
     muss die SetCookie-Funktion aufgerufen werden, bevor irgendeine
     Ausgabe an den Browser gesendet wird. Dabei handelt es sich um
     die gleiche Einschränkung, die auch für die
     <function>header</function>-Funktion gilt. Alle an sie gesendeten
     Cookies werden in PHP-Variablen umgesetzt, genau wie die Daten
     bei den GET- und POST-Methoden.
    </simpara>
    <simpara>
     Wenn sie einem einzelnen Cookie verschiedene Wert zuweisen wollen
     müssen sie dem Cookie-Namen <emphasis>[]</emphasis> hinzufügen.
     Z.B.:
    </simpara>
    <informalexample>
     <programlisting role="php">
SetCookie ("MeinCookie[]", "Ich teste", time()+3600);
     </programlisting>
    </informalexample>
    <simpara>
     Bedenken sie, dass ein Cookie ein vorhergehendes Cookie
     gleichen namens überschreibt, es sei denn, der Pfad oder
     die Domain ist anders. Für eine Warenkorb-Anwendung müssen
     sie deshalb z.B. einen Zähler bilden und diesen weiter leiten:
    </simpara>
    <example>
     <title>SetCookie-Beispiel</title>
     <programlisting role="php">
$Count++;
SetCookie ("Count", $Count, time()+3600);
SetCookie ("Cart[$Count]", $item, time()+3600);
     </programlisting>
    </example>
   </sect2>

   <sect2 id="language.variables.external.environment">
    <title>Umgebungs- / Environment-Variablen</title>

    <para>
     PHP sorgt automatisch für die Verfügbarkeit der Umgebungs-
     Variablen als normale PHP-Variablen.
     <informalexample>
      <programlisting role="php">
echo $HOME;  /* Zeigt die HOME-Umgebungs-Variable (sofern gesetzt). */
      </programlisting>
     </informalexample>
    </para>
    <para>
     Da Informationen per GET, POST und Cookie-Mechanismen übergeben
     werden, ist es manchmal das Beste, Umgebungs-Variablen explizit
     auszulesen. Dadurch wird die richtige Version eingelesen. Hierfür
     kann die <function>getenv</function>-Funktion genutzt werden. Den
     Wert einer Umgebungs-Variablen können sie per <function>putenv</function>-
     Funktion setzen.
    </para>
   </sect2>

   <sect2 id="language.variables.external.dot-in-names">
    <title>Punkte in eingelesenen Variablen-Bezeichnern</title>
    <para>
     Normalerweise verändert PHP nicht die Variablen-Bezeichner,
     wenn sie einem Skript übergeben werden. Es sollte aber beachtet
     werden, dass der Punkt (".") kein gültiger Bestandteil eines
     Variablen-Bezeichners ist. Deshalb achten sie auf folgendes:
     <programlisting role="php">
$varname.ext;  /* ungültiger Variablen-Bezeichner */
     </programlisting>
     Der PHP-Parser sieht eine Variable namens $varname, gefolgt von
     einem Zeichenketten-Verbindungs-Operator, dieser wiederrum
     gefolgt von der offenen Zeichenkette 'ext' (also nicht eingegrenzt
     durch '"' und auch keinem Schlüssel oder reserviertem Bezeichner
     entsprechend). Das kann natürlich nicht zum gewünschten Ergebnis
     führen.
    </para>
    <para>
     Deshalb ist es wichtig zu wissen, dass PHP in den ihm übergebenen
     Variablen alle Punkte (.) automatisch durch einen 
     Unterstrich (_) ersetzt.
    </para>
   </sect2>

   <sect2  id="language.variables.determining-type-of">
    <title>Bestimmung des Variablen-Typs</title>
    <para>
     Da PHP den Typ einer Variablen bestimmt und grundsätzlich selbst
     eine entsprechende Umformung vornimmt, ist es nicht immer klar,
     welchen Typ eine Variable gerade hat. PHP beinhaltet einige
     Funktionen, die dies herausfinden. Als da sind:
     <function>gettype</function>, <function>is_long</function>,
     <function>is_double</function>, <function>is_string</function>,
     <function>is_array</function> und
     <function>is_object</function>.
    </para>
   </sect2>

  </sect1>
     
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
