<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342845 Maintainer: nobody Status: ready -->
<!-- Credits: betz -->

 <chapter xml:id="language.variables" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Variablen</title>

  <sect1 xml:id="language.variables.basics">
   <title>Grundlegendes</title>
   <simpara>
    Variablen werden in PHP durch ein Dollar-Zeichen ($)
    gefolgt vom Namen der Variable dargestellt. Bei Variablen-Namen wird
    zwischen Groß- und Kleinschreibung unterschieden (case-sensitive).
   </simpara>

   <para>
    Variablen-Namen werden in PHP nach den gleichen Regeln wie
    andere Bezeichner erstellt. Ein gültiger Variablen-Name beginnt
    mit einem Buchstaben oder einem Unterstrich ("_"), gefolgt von
    einer beliebigen Anzahl von Buchstaben, Zahlen oder Unterstrichen.
    Als regulärer Ausdruck (regular expression) würde das wie folgt
    ausgedrückt:
    '<literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>'.
   </para>

   <note>
    <simpara>
     Unserem Zweck entspricht also ein Buchstabe von a bis z bzw.
     A bis Z oder einem Bytewert von 127 bis 255 (<literal>0x7f-0xff</literal>).
    </simpara>
   </note>

   <note>
    <simpara>
     <literal>$this</literal> ist eine spezielle Variable, die nicht geändert werden kann.
    </simpara>
   </note>

   &tip.userlandnaming;

   <para>
    Information zu Funktionen im Zusammenhang mit Variablen
    finden Sie im Abschnitt 
    <link linkend="ref.var">Funktionen zur Behandlung von Variablen</link>.
   </para>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$var = "du";
$Var = "ich";
echo "$var, $Var"; // gibt "du, ich" aus

$4site  = 'nicht jetzt';     // ungültig, da Anfang eine Zahl
$_4site = 'nicht jetzt';     // gültig, da Unterstrich am Anfang
$täbyte = 'irgendwas';       // gültig, da 'ä' dem (Erweiterten) ASCII-Wert 228 entspricht
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Standardmäßig wird Variablen immer ein Wert zugewiesen. Das heißt,
    wenn Sie einer Variablen einen Ausdruck zuweisen, wird der gesamte
    Inhalt des Originalausdrucks in die Zielvariable kopiert. Die
    Folge ist, dass eine Variable, die ihren Inhalt von einer anderen
    Variablen erhalten hat, ihren Inhalt behält, auch wenn Sie danach
    den Inhalt der anderen (Quell- / Ursprungs-)Variablen ändern. Die
    Inhalte der Ziel- und Quellvariablen sind also insoweit unabhängig
    voneinander. Für weitere Informationen lesen Sie bitte das Kapitel
    unter <link
    linkend="language.expressions">Expressions / Ausdrücke</link>.
   </para>
   <para>
    PHP bietet eine andere Möglichkeit der Wertzuweisung 
    bei Variablen: <link linkend="language.references">Zuweisung durch
    Referenzierung</link>. Das bedeutet, dass der Wert der neuen
    Variablen eine Referenz zur Ursprungs-Variablen darstellt (mit
    anderen Worten: Der Wert ist ein Alias bzw. Zeiger auf den Inhalt
    der Ursprungsvariablen). Beide Variablen zeigen also auf die
    selbe(n) Speicherstelle(n). Änderungen der neuen Variablen ändern
    auch deren Ursprungs-Variable und umgekehrt.
   </para>

   <para>
    Für die Zuweisung per Referenz müssen Sie lediglich ein Kaufmannsund (&amp;)
    der (Ausgangs-, Quell-) Variablen voranstellen, die
    sie einer anderen Variablen zuweisen wollen. Das folgende Code-
    Schnipsel wird zweimal '<literal>Mein Name ist Bob</literal>' ausgeben:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = 'Bob';             // 'Bob' der Variablen $foo zuweisen.
$bar = &$foo;             // $foo per $bar referenzieren.
$bar = "Ich heiße $bar";  // $bar verändern...
echo $bar;
echo $foo;                // $foo wurde ebenfalls verändert.
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Zu beachten ist, dass nur Variablenbezeichner referenziert
    werden können.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = 25;
$bar = &$foo;     // Gültige Zuweisung.
$bar = &(24 * 7); // Ungültig, da ein unbenannte Ausdruck referenziert wird.

function test()
{
    return 25;
}

$bar = &test();   // Ungültig.
?>
]]>
     </programlisting>
    </informalexample>
   </para>
 
   <para>
    Es ist in PHP nicht zwingend notwendig Variablen zu initialisieren, es
    wird aber trotzdem empfohlen. Nicht initialisierte Variablen haben einen
    Vorgabewert der vom Typ abhängt – Boolesche Werte sind standardmäßig &false;,
    Ganz- und Fließkommazahlen sind standardmäßig Null (0), Zeichenketten (die z.B. in
    <function>echo</function> verwendet werden) sind standardmäßig leer, und Arrays
    ebenfalls.
   </para>
   <para>
    <example>
     <title>Vorgabewerte uninitialisierter Variablen</title>
     <programlisting role="php">
<![CDATA[
<?php
// Nicht gesetzte UND nicht referenzierte (kein Verwendungskontext) Variable; gibt NULL aus
var_dump($unset_var);

// Verwendung als Boolescher Wert; gibt 'false' aus (siehe den ternären Operator für Details zu dieser Syntax)
echo($unset_bool ? "true\n" : "false\n");

// Verwendung als Zeichenkette; gibt 'string(3) "abc"' aus
$unset_str .= 'abc';
var_dump($unset_str);

// Verwendung als Ganzzahl; gibt 'int(25)' aus
$unset_int += 25; // 0 + 25 => 25
var_dump($unset_int);

// Verwendung als Fließkommazahl; gibt 'float(1.25)' aus
$unset_float += 1.25;
var_dump($unset_float);

// Verwendung als Array; gibt array(1) {  [3]=>  string(3) "def" } aus
$unset_arr[3] = "def"; // array() + array(3 => "def") => array(3 => "def")
var_dump($unset_arr);

// Verwendung als Objekt; erzeugt ein neues stdClass Objekt
// (siehe http://www.php.net/manual/en/reserved.classes.php)
// Gibt aus: object(stdClass)#1 (1) {  ["foo"]=>  string(3) "bar" }
$unset_obj->foo = 'bar';
var_dump($unset_obj);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Es ist problematisch sich auf den Vorgabewert einer nicht 
    initialisierten Variable zu verlassen, wenn Sie Dateien inkludieren
    die die gleichen Variablennamen benutzen.
    Wenn <link linkend="ini.register-globals">register_globals</link>
    aktiviert ist führt dies zu einem extremen <link
    linkend="security.globals">Sicherheitsproblem</link>.
    Bei Zugriffen auf nicht initialisierte Variablen wird ein 
    Fehler der Stufe <link linkend="errorfunc.constants.errorlevels.e-notice">E_NOTICE</link>
    ausgelöst, dies trifft allerdings nicht auf das Anfügen
    von Elementen an nicht initialisierte Arrays zu. 
    Das <function>isset</function> Sprachkonstrukt kann genutzt werden,
    um zu prüfen ob eine Variable bereits initialisiert wurde.
   </para>
  </sect1>

  <sect1 xml:id="language.variables.predefined">
   <title>Vordefinierte Variablen</title>

   <simpara>
    PHP bietet jedem ausgeführtem Skript eine Vielzahl von
    vordefinierten Variablen an. Viele dieser Variablen können
    jedoch nicht vollständig erläutert werden, da sie abhängig
    sind vom Web-Server, der Version und dem Setup des Web-
    Servers sowie weiteren Faktoren. Einige dieser Variablen
    stehen nicht zur Verfügung, wenn PHP-Skripte per <link
    linkend="features.commandline">Kommando-Zeilen-Aufruf</link>
    ausgeführt werden. Für eine Liste dieser Variablen lesen Sie bitte
    den Abschnitt <link linkend="reserved.variables">Vordefinierte
    Variablen</link>.
   </simpara>
   <warning>
    <simpara>
     Ab PHP 4.2.0 ist der standardmäßige Wert für die PHP-Direktive
     <link linkend="ini.register-globals">register_globals</link>
     <emphasis>off</emphasis>. Dies ist eine wesentliche Änderung in
     PHP. Die Direktive register_globals <emphasis>off</emphasis>
     beeinflusst den Satz von vordefinierten Variablen, die im
     globalen Geltungsbereich verfügbar sind. Um zum Beispiel
     <varname>DOCUMENT_ROOT</varname> zu bekommen, müssen Sie
     <varname>$_SERVER['DOCUMENT_ROOT']</varname> statt
     <varname>$DOCUMENT_ROOT</varname> verwenden, oder
     <varname>$_GET['id']</varname> von der URL
     <literal>http://www.example.com/test.php?id=3</literal>
     statt <varname>$id</varname> oder <varname>$_ENV['HOME']</varname>
     statt <varname>$HOME</varname>.
    </simpara>
    <simpara>
     Für diese Änderung betreffende Informationen lesen Sie bitte den
     Konfigurations-Eintrag für <link
     linkend="ini.register-globals">register_globals</link>, das
     Sicherheitskapitel über die <link
     linkend="security.globals">Verwendung von Register
     Globals</link> und außerdem die PHP
     <link xlink:href="&url.php.release4.1.0;">4.1.0</link> und
     <link xlink:href="&url.php.release4.2.0;">4.2.0</link> Release
     Ankündigungen.
    </simpara>
    <simpara>
     Die reservierten vordefinierten Variablen, wie die
     <link linkend="language.variables.superglobals">Superglobalen
     Arrays</link>, sollten bevorzugt verwendet werden.
    </simpara>
   </warning>

   <simpara>
    Ab Version 4.1.0 stehen in PHP eine zusätzliche Reihe
    vordefinierter Arrays zur Verfügung, die Variablen vom Webserver
    (gegebenenfalls), von der Umgebung und von Benutzereingaben
    enthalten. Diese neuen Arrays sind insofern etwas sehr Spezielles,
    als sie automatisch global sind – d.h., sie stehen automatisch in
    jedem Geltungsbereich zur Verfügung. Deshalb sind sie auch bekannt als
    "Superglobale". (Es gibt in PHP keinen
    Mechanismus für benutzerdefinierte Superglobale.) Die Superglobale
    werden nachfolgend aufgelistet, aber für eine Liste ihres Inhalts
    und die weitere Diskussion vordefinierter Variablen und ihres
    Wesens lesen Sie bitte den Abschnitt <link
    linkend="reserved.variables">Reservierte vordefinierte
    Variablen</link>. Außerdem werden Sie feststellen, dass die alten
    vordefinierten Variablen (<varname>$HTTP_*_VARS</varname>) noch
    existieren.

    &avail.register-long-arrays;
   </simpara>

   <note>
    <title>Variable Variablen</title>
    <para>
     Superglobale können innerhalb von Funktionen und Methoden nicht als 
     <link linkend="language.variables.variable">variable Variablen</link>
     verwendet werden.
    </para>
   </note>

   <note>
    <para>
     Obwohl Superglobale und die <literal>HTTP_*_VARS</literal> zur gleichen Zeit existieren
     können, sind sie nicht identisch. Änderungen dieser Variablen haben
     keinen Einfluss auf die jeweils anderen.
    </para>
   </note>

   <para>
    Falls bestimmte Variablen nicht unter <link
    linkend="ini.variables-order">variables_order</link> angegeben
    sind, dann bleiben auch ihre entsprechenden vordefinierten Arrays
    leer.
   </para>

  </sect1>

  <sect1 xml:id="language.variables.scope">
   <title>Geltungsbereich von Variablen</title>

   <simpara>
    Der Geltungsbereich einer Variablen ergibt sich aus dem
    Zusammenhang, in dem sie definiert wurde. Meistens besteht
    dieser aus einem einzigen Bereich. Dieser beinhaltet auch den
    Bereich für Dateien, die per "include"- oder "require"-Anweisung
    eingebunden wurden, z.B.:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = 1;
include 'b.inc';
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    Die Variable $a ist auch in der eingebundenen Datei
    <filename>b.inc</filename> verfügbar. In benutzerdefinierten Funktionen
    wird jedoch ein auf die Funktion beschränkter Geltungsbereich eingeführt. Jede in
    einer Funktion benutzte Variable ist zunächst auf den lokalen Bereich
    der Funktion beschränkt, z.B.:
   </simpara>
   <informalexample>
    <programlisting role="php"> 
<![CDATA[
<?php
$a = 1; // globaler Geltungsbereich

function test () { 
    echo $a; // Referenz auf ein Variable im lokalen Geltungsbereich
} 

test ();
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    Dieses Skript erzeugt keine Bildschirm-Ausgabe, da sich die Echo-
    Anweisung auf eine lokale Variable namens <varname>$a</varname>
    bezieht, und dieser kein Wert im lokalen Geltungsbereich zugewiesen worden ist.
    Dies ist ein kleiner Unterschied zu C, wo globale Variablen auch in
    Funktionen vorhanden sind, es sei denn, sie werden durch eine
    funktionsinterne Definition überschrieben. Das kann zu Problemen führen,
    so dass in PHP global geltende Variablen innerhalb von Funktionen als
    solche deklariert werden müssen.
   </simpara>

   <sect2 xml:id="language.variables.scope.global">
    <title>Das <literal>global</literal> Schlüsselwort</title>
    <simpara>
     Zunächst ein Beispiel für die Verwendung von
     <literal>global</literal>:
    </simpara>
    <para>
     <example>
      <title>Verwendung von <literal>global</literal></title>
      <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function Sum()
{
    global $a, $b;

    $b = $a + $b;
} 

Sum();
echo $b;
?>
]]>
      </programlisting>
     </example>
    </para>

   <simpara>
    Das obige Skript gibt <literal>3</literal> aus. Durch das Deklararieren
    der Variablen <varname>$a</varname> und <varname>$b</varname>innerhalb
    der Funktion als global, weisen alle Referenzen zu beiden Variablen auf
    die nun globalen Werte. Es gibt keine Beschränkungen bei der Anzahl an
    globalen Variablen, die durch eine Funktion verändert werden können.
   </simpara>
   <simpara>
    Eine weitere Möglichkeit besteht in der Verwendung des speziellen
    <varname>$GLOBALS</varname> PHP-Array. Das obige Beispiel kann damit
    auch so  geschrieben werden:
   </simpara>
   <para>
    <example>
     <title>Verwendung von <varname>$GLOBALS</varname> statt global</title>
     <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function Sum()
{
    $GLOBALS['b'] = $GLOBALS['a'] + $GLOBALS['b'];
} 

Sum();
echo $b;
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    Das <varname>$GLOBALS</varname>-Array ist ein assoziatives Array
    mit dem Bezeichner der globalen Variablen als Schlüssel und dem
    Inhalt dieser Variablen als Wert des Array-Elements. Beachten Sie,
    dass <varname>$GLOBALS</varname> in jedem Geltungsbereich existiert, weil
    $GLOBALS eine <link
    linkend="language.variables.superglobals">Superglobale</link> ist.
    Hier ist ein Beispiel, das die Stärke von Superglobalen
    demonstriert:
   </simpara>
   <para>
    <example>
     <title>Beispiel zur Demonstration von Superglobalen und Geltungsbereich</title>
     <programlisting role="php">
<![CDATA[
<?php
function test_global()
{
    // Die meisten vordefinierten Variablen sind nicht "super" und
    // benötigen 'global', um im lokalen Bereich von Funktionen zur
    // Verfügung zu stehen.
    global $HTTP_POST_VARS;

    echo $HTTP_POST_VARS['name'];

    // Superglobale stehen in jedem Bereich zur Verfügung und
    // benötigen kein 'global'. Superglobale stehen seit PHP 4.1.0
    // zur Verfügung und HTTP_POST_VARS gilt nun als veraltet
    echo $_POST['name'];
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Die Verwendung des <literal>global</literal>-Schlüsselworts außerhalb einer
     Funktion ist kein Fehler. Es kann verwendet werden, wenn die Datei von innerhalb
     einer Funktion eingebunden wird.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="language.variables.scope.static">
   <title>Die Verwendung von <literal>static</literal> Variablen</title>
   <simpara>
    Ein weiterer wichtiger Anwendungszweck von Variablen-Bereichen
    ist die <emphasis>statische</emphasis>-Variable. Eine statische
    Variable existiert nur in einem lokalen Funktions-Geltungsbereich, der
    Wert geht beim Verlassen dieses Bereichs aber nicht verloren.
    Schauen Sie das folgende Beispiel an:
   </simpara>
   <para>
    <example>
     <title>Beispiel, das die Notwendigkeit von statischen Variablen demonstriert</title>
     <programlisting role="php">
<![CDATA[
<?php
function test ()
{
    $a = 0;
    echo $a;
    $a++;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Diese Funktion ist sinnlos, da sie bei jedem Aufruf <varname>$a</varname>
    auf <literal>0</literal> setzt und <literal>0</literal> ausgibt. Die Anweisung
    <varname>$a</varname>++, welche den Wert erhöht, ergibt hier keinen Sinn, da der Wert von
    <varname>$a</varname> beim Verlassen der Funktion verloren geht. Um eine
    sinnvolle Zählfunktion zu implementieren, die ihren aktuell gesetzten Wert
    nicht vergisst, müssen Sie die Variable <varname>$a</varname> als statisch
    deklarieren:
   </simpara>
   <para>
    <example>
     <title>Beispiel zur Verwendung statischer Variablen</title>
     <programlisting role="php">
<![CDATA[
<?php
function test()
{
    static $a = 0;
    echo $a;
    $a++;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Nun wird <varname>$a</varname> nur beim ersten Aufruf der Funktion initialisiert,
    und jedes mal wenn die <literal>test()</literal>-Funktion aufgerufen wird, wird
    sie den Wert von <varname>$a</varname> ausgeben, und den Variablenwert erhöhen.
   </simpara>

   <simpara>
    Statische Variablen ermöglichen auch einen Weg zum Umgang mit
    rekursiven Funktionen. Das sind Funktionen, die sich selbst
    aufrufen. Hierbei besteht die Gefahr, so genannte Endlos-
    Schleifen zu programmieren. Sie müssen also einen Weg vorsehen,
    diese Rekursion zu beenden. Die folgende einfache Funktion zählt
    rekursiv bis 10. Die statische Variable
    <varname>$count</varname> wird benutzt, um die Rekursion zu
    beenden:
   </simpara>
   <para>
    <example>
     <title>Statische Variablen in rekursiven Funktionen</title>
     <programlisting role="php">
<![CDATA[
<?php
function test()
{
    static $count = 0;

    $count++;
    echo $count;
    if ($count < 10) {
        test();
    }
    $count--;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>  
    <para>  
     Statische Variablen werden wie in oben stehenden Beispielen deklariert. 
     Von PHP 5.6 an ist es möglich diesen Variablen Werte zuzuweisen, die das Ergebnis
     von Ausdrücken sind, aber es dürfen hier keine Funktion verwendet werden,
     was einen Parse-Fehler auslöst.
    </para> 
    <para>  
     <example>
      <title>Statische Variablen deklarieren</title>
      <programlisting role="php">
<![CDATA[
<?php
function foo(){
    static $int = 0;          // korrekt
    static $int = 1+2;        // korrekt (von PHP 5.6 an)
    static $int = sqrt(121);  // falsch (da es eine Funktion ist)

    $int++;
    echo $int;
}
?>
]]>
     </programlisting>
    </example>
   </para> 
  </note>
   <note>
    <para>
     Statische Deklarationen werden zur Übersetzungszeit aufgelöst.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="language.variables.scope.references">
   <title>Referenzen bei <literal>global</literal> und <literal>static</literal> Variablen</title>
   <simpara>
    Die Zend Engine 1, die PHP 4 zugrunde liegt,
    implementiert die <link
    linkend="language.variables.scope.static">static</link>- und
    <link
    linkend="language.variables.scope.global">global</link>-Modifikatoren
    für Variablen als <link
    linkend="language.references">Referenzen</link>. Zum Beispiel
    erzeugt eine echte globale Variable, die mit der Anweisung
    <literal>global</literal> in den Funktions-Geltungsbereich importiert
    wurde, tatsächlich eine Referenz zur globalen Variable. Das kann
    zu einem unerwarteten Verhalten führen, auf das im folgenden
    Beispiel eingegangen wird:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function test_global_ref() {
    global $obj;
    $obj = &new stdclass;
}

function test_global_noref() {
    global $obj;
    $obj = new stdclass;
}

test_global_ref();
var_dump($obj);
test_global_noref();
var_dump($obj);
?>
]]>
    </programlisting>
   </informalexample>

   &example.outputs;

   <screen>
NULL
object(stdClass)(0) {
}
   </screen>

   <simpara>
    Ein ähnliches Verhalten gilt auch für die Anweisung
    <literal>static</literal>. Referenzen werden nicht statisch
    gespeichert:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function &get_instance_ref() {
    static $obj;

    echo "Statisches Objekt: ";
    var_dump($obj);
    if (!isset($obj)) {
        // Der statischen Variablen eine Referenz zuweisen
        $obj = &new stdclass;
    }
    $obj->property++;
    return $obj;
}

function &get_instance_noref() {
    static $obj;

    echo "Statisches Objekt: ";
    var_dump($obj);
    if (!isset($obj)) {
        // Der statischen Variablen ein Objekt zuweisen
        $obj = new stdclass;
    }
    $obj->property++;
    return $obj;
}

$obj1 = get_instance_ref();
$still_obj1 = get_instance_ref();
echo "\n";
$obj2 = get_instance_noref();
$still_obj2 = get_instance_noref();
?>
]]>
    </programlisting>
   </informalexample>
   &example.outputs;
   <screen>
Statisches Objekt: NULL
Statisches Objekt: NULL

Statisches Objekt: NULL
Statisches Objekt: object(stdClass)(1) {
  ["property"]=>
  int(1)
}
   </screen>

   <simpara>
    Dieses Beispiel demonstriert, dass die Referenz, die einer
    statischen Variablen zugewiesen wird, beim zweiten Aufruf der
    Funktion <literal>&amp;get_instance_ref()</literal> vergessen ist.
   </simpara>
   </sect2>
  </sect1>

  <sect1 xml:id="language.variables.variable">
   <title>Variable Variablen</title>

   <simpara>
    Manchmal ist es komfortabel, variable Variablen-Bezeichner zu
    benutzen. Das bedeutet, einen Variablen-Namen zu setzen und
    dynamisch zu gebrauchen. Eine normale Variable wird wie folgt
    festgelegt:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = "Hallo";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Eine variable Variable nimmt den Wert einer Variablen und
    behandelt ihn als Bezeichner der Variablen. Im obigen Beispiel
    kann <emphasis>Hallo</emphasis> als Variablen-Name gebraucht
    werden, indem man zwei Dollar-Zeichen benutzt, also schreibt:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$$a = "Welt";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Nun existieren in der PHP-Symbol-Struktur zwei definierte und
    gespeicherte Variablen: <varname>$a</varname> mit dem Inhalt "Hallo"
    und <varname>$Hallo</varname> mit dem Inhalt "Welt". Deshalb wird die
    Anweisung
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "$a ${$a}";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    zur genau gleichen Ausgabe führen wie:
   </simpara>

   <informalexample>
    <programlisting>
<![CDATA[
<?php
echo "$a $Hallo";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    also zu: <computeroutput>Hallo Welt</computeroutput>.
   </simpara>

   <simpara>
    Wenn Sie variable Variablen mit Arrays verwenden, müssen Sie eine
    Doppeldeutigkeit beachten. Wenn Sie nämlich
    <varname>$$a[1]</varname> schreiben, dann muss der Parser wissen,
    ob Sie <varname>$a[1]</varname> als Variable oder
    <varname>$$a</varname> als Variable und dann [1] als Index dieser
    Variablen verwenden wollen bzw. gemeint haben. Die Syntax zur
    Lösung dieser Doppeldeutigkeit: Verwenden Sie im ersten Fall
    <varname>${$a[1]}</varname> und im zweiten Fall
    <varname>${$a}[1]</varname>.
   </simpara>

   <simpara>
    Auf Klasseneigenschaften kann ebenso unter Verwendung von variablen Eigenschaftsnamen
    zugegriffen werden. Der variable Eigenschaftsname wird innerhalb des Geltungsbereichs
    aufgelöst, aus dem der Aufruf erfolgt. Wenn sie beispielsweise einen Ausdruck
    wie etwa <varname>$foo->$bar</varname> haben, dann wird der lokale Geltungsbereich
    auf <varname>$bar</varname> untersucht, und dessen Wert wird als Eigenschaftsname
    von <varname>$foo</varname> verwendet. Dies gilt analog, wenn <varname>$bar</varname>
    ein Arrayzugriff ist.
   </simpara>

   <caution>
    <simpara>
     Weiterhin hat das Dereferenzieren einer variablen Eigenschaft, die ein Array
     ist, unterschiedliche Bedeutung in PHP 5 und PHP 7. Die
     <link linkend="migration70.incompatible.variable-handling.indirect">PHP 7.0 Migrationsanleitung</link>
     enthält weitere Details zu den Arten von Ausdrücken, die sich geändert haben,
     und wie geschweifte Klammern zu platzieren sind, um Mehrdeutigkeit zu vermeiden.
    </simpara>
   </caution>

   <simpara>
    Geschweifte Klammern können ebenfalls verwendet werden, um den Eigenschaftsnamen
    deutlich abzugrenzen. Sie sind besonders nützlich beim Zugriff auf Werte in einer
    Eigenschaft, die ein Array enthält, wenn der Eigenschaftsname aus mehreren Teilen
    besteht, oder wenn der Eigenschaftsname Zeichen enthält, die andernfalls nicht
    gültig sind (z.B. von <function>json_decode</function> oder
    <link linkend="book.simplexml">SimpleXML</link>).
   </simpara>

   <para>
    <example>
     <title>Beispiel zu variablen Eigenschaften</title>
      <programlisting role="php">
<![CDATA[
<?php
class foo {
    var $bar = 'Ich bin bar.';
    var $arr = array('Ich bin A.', 'Ich bin B.', 'Ich bin C.');
    var $r   = 'Ich bin r.';
}

$foo = new foo();
$bar = 'bar';
$baz = array('foo', 'bar', 'baz', 'quux');
echo $foo->$bar . "\n";
echo $foo->{$baz[1]} . "\n";

$start = 'b';
$end   = 'ar';
echo $foo->{$start . $end} . "\n";

$arr = 'arr';
echo $foo->{$arr[1]} . "\n";

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
Ich bin bar.
Ich bin bar.
Ich bin bar.
Ich bin r.
     </screen>
    </example>
   </para>

   <warning>
    <simpara>
     Bitte beachten Sie, dass variable Variablen nicht mit <link
     linkend="language.variables.superglobals">Superglobalen
     Arrays</link> in Funktionen oder Klassenmethoden verwendet werden können.
     Die Variable <literal>$this</literal> ist ebenfalls eine 
     spezielle Variable, die nicht dynamisch referenziert
     werden kann.
    </simpara>
   </warning>

  </sect1>

  <sect1 xml:id="language.variables.external">
   <title>Variablen aus externen Quellen</title>

   <sect2 xml:id="language.variables.external.form">
    <title>HTML-Formulare (GET and POST)</title>

    <simpara>
     Sobald ein Formular an ein PHP-Skript übergeben wird, werden die
     Informationen dieses Formulars dem Skript automatisch zur Verfügung
     gestellt. Es gibt ein paar Möglichkeiten, auf diese Informationen
     zuzugreifen, zum Beispiel:
    </simpara>
     
    <para>
     <example>
      <title>Ein einfaches HTML-Formular</title>
      <programlisting role="html">
<![CDATA[
<form action="foo.php" method="post">
    Name:  <input type="text" name="username" /><br />
    E-Mail: <input type="text" name="email" /><br />
    <input type="submit" name="submit" value="Und ab!" />
</form>
]]>
      </programlisting>
     </example>
    </para>     
     
    <para>
     Von PHP 5.4.0 an gibt es nur zwei Möglichkeiten, um auf die Daten der HTML-Formulare
     zuzugreifen. Die zurzeit verfügbaren Methoden werden unten aufgeführt:
    </para>

    <para>
     <example>
      <title>Zugriff auf die Daten eines einfachen POST-HTML-Formular</title>
      <programlisting role="html">
<![CDATA[
<?php
echo $_POST['username'];
echo $_REQUEST['username'];
?>
]]>
     </programlisting>
    </example>
   </para>

    <para>
     Es gab einige weitere Möglichkeiten, um auf Nutzereingaben in alten PHP-Versionen
     zuzugreifen. Diese werden unten aufgeführt. Weitere Details sind dem Changelog
     am Ende der Seite zu entnehmen.
     <example>
      <title>Alte Methoden zum Zugriff auf Nutzereingaben</title>
      <programlisting role="php">
<![CDATA[
<?php
// OBACHT: diese Methoden WERDEN NICHT mehr unterstützt.
// Gültige Methoden werden weiter oben beschrieben.

// Verwendung von import_request_variables() - diese Funktion wurde in PHP 5.4.0 entfernt
   import_request_variables('p', 'p_');
   echo $p_username;

// Diese langen vordefinierten Variablen wurden in PHP 5.4.0 entfernt
   echo $HTTP_POST_VARS['username'];

// Verwendung von register_globals. Dieses Feature wurde in PHP 5.4.0 entfernt
   echo $username;
?>
]]>
      </programlisting>
     </example>
    </para>

   <para>
    Die Verwendung eines GET Formulars ist, davon abgesehen, dass Sie
    stattdessen die entsprechende vordefinierte GET-Variable erhalten,
    ähnlich. Außerdem wird GET auch für den <literal>QUERY_STRING</literal> (die
    Information nach dem '?' in einer URL) verwendet. So enthält zum
    Beispiel <literal>http://www.example.com/test.php?id=3</literal>
    GET-Daten, auf die mit <varname>$_GET['id']</varname> zugegriffen
    werden kann. Siehe auch <varname>$_REQUEST</varname>.
   </para>

    <note>
     <para>
      Punkte und Leerzeichen in Variablennamen werden in Unterstriche umgewandelt.
      Zum Beispiel wird <literal>&lt;input name="a.b" /&gt;</literal> zu
      <literal>$_REQUEST["a_b"]</literal>.
     </para>
    </note>

   <simpara>
    Im Zusammenhang mit Formular-Variablen versteht PHP auch
    Arrays (siehe auch die <link linkend="faq.html">verwandte Faq</link>).
    Sie können z.B. die betreffenden Variablen gruppieren oder dieses
    Leistungsmerkmal nutzen, um Werte aus Mehrfach-Auswahl-Eingabeelementen
    zu erhalten. Schicken wir zum Beispiel ein Formular an sich selbst,
    und lassen nach dem Versand die Daten anzeigen:
   </simpara>

   <para>
    <example>
     <title>Komplexere Formular-Variablen</title>
      <programlisting role="php">
<![CDATA[
<?php
if ($_POST) {
    echo '<pre>';
    echo htmlspecialchars(print_r($_POST, true));
    echo '</pre>';
}
?>
<form action="" method="post">
    Name:  <input type="text" name="personal[name]" /><br />
    E-Mail: <input type="text" name="personal[email]" /><br />
    Bier: <br />
    <select multiple name="bier[]">
        <option value="warthog">Öttinger</option>
        <option value="guinness">Bitburger</option>
        <option value="stuttgarter">Stuttgarter Schwabenbräu</option>
    </select><br />
    <input type="submit" name="submit" value="Und ab!" />
</form>
]]>
      </programlisting>
     </example>
    </para>

    <sect3 xml:id="language.variables.external.form.submit">
     <title>IMAGE SUBMIT Variablen-Bezeichner</title>

     <simpara>
      Zur Übertragung eines Formulars kann auch ein Bild
      statt eines Übertragungs-Schalters (Submit-Button) benutzt
      werden, dessen Tag wie folgt aussieht:
     </simpara>

     <informalexample>
      <programlisting role="html">
<![CDATA[
<input type="image" src="image.gif" name="sub" />
]]>
      </programlisting>
     </informalexample>

     <simpara>
      Klickt der Benutzer irgendwo auf das Bild, wird das
      entsprechende Formular an den Web-Server übertragen. Hierbei
      sind zwei zusätzliche Variablen vorhanden, <varname>sub_x</varname> und <varname>sub_y</varname>.
      Diese enthalten die Koordinaten des Klick-Punktes innerhalb des
      Bildes. Die Erfahreneren werden bemerken, dass die Variablen, die
      vom Browser gesendet werden, einen Punkt enthalten statt eines
      Unterstrichs. Dieser Punkt wird von PHP automatisch in einen
      Unterstrich verwandelt.
     </simpara>
    </sect3>

   </sect2>

   <sect2 xml:id="language.variables.external.cookies">
    <title>HTTP-Cookies</title>
    <simpara>
     PHP unterstützt HTTP-Cookies, wie in
     <link xlink:href="&url.rfc;6265">RFC 6265</link> definiert.
     Cookies ermöglichen die Daten-Speicherung innerhalb der
     jeweiligen Browser-Umgebung zum Tracken oder zur
     Identifikation von Benutzern. Sie können Cookies erzeugen, indem
     Sie die Funktion <function>setcookie</function> benutzen. Cookies
     sind Teil des HTTP-Headers, deshalb muss die setcookie-Funktion
     aufgerufen werden, bevor irgendeine Ausgabe an den Browser
     gesendet wird. Dabei handelt es sich um die gleiche
     Einschränkung, die auch für die
     <function>header</function>-Funktion gilt. Cookie-Daten stehen
     dann in den entsprechenden Cookie-Daten-Arrays, wie zum
     Beispiel <varname>$_COOKIE</varname>, als auch in
     <varname>$_REQUEST</varname> zur Verfügung. Für weitere Details
     und Beispiele lesen Sie bitte die
     <function>setcookie</function>-Seite des Handbuchs.
    </simpara>

    <simpara>
     Wenn Sie einer einzelnen Cookie-Variable mehrere Werte zuweisen
     wollen, müssen Sie diese als Array zuweisen. Zum Beispiel:
    </simpara>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
  setcookie("MeinCookie[foo]", "Ich teste 1", time()+3600);
  setcookie("MeinCookie[bar]", "Ich teste 2", time()+3600);
?>
]]>
     </programlisting>
    </informalexample>

    <simpara>
     Das erzeugt zwei einzelne Cookies obwohl <varname>MyCookie</varname> in Ihrem
     Skript nun ein einziges Array ist. Wenn Sie nur ein Cookie mit
     mehreren Werten setzen wollen, sollten Sie erwägen
     <function>serialize</function> oder <function>explode</function>
     auf das Array anzuwenden.
    </simpara>

    <simpara>
     Bedenken Sie, dass ein Cookie ein vorhergehendes Cookie
     gleichen Namens überschreibt, es sei denn, der Pfad oder
     die Domain ist anders. Für eine Warenkorb-Anwendung können
     Sie deshalb z.B. einen Zähler bilden und diesen weiterleiten:
    </simpara>

    <example>
     <title>Ein <function>setcookie</function>-Beispiel</title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['zaehler'])) {
    $count = $_COOKIE['zaehler'] + 1;
} else {
    $count = 1;
}
setcookie('zaehler', $count, time()+3600);
setcookie("Cart[$count]", $item, time()+3600);
?>
]]>
     </programlisting>
    </example>

   </sect2>

   <sect2 xml:id="language.variables.external.dot-in-names">
    <title>Punkte in eingehenden Variablen-Bezeichnern</title>
    <para>
     Normalerweise verändert PHP die Variablen-Bezeichner nicht,
     wenn sie einem Skript übergeben werden. Es sollte aber beachtet
     werden, dass der Punkt (".") kein gültiger Bestandteil eines
     Variablen-Bezeichners ist. Deshalb achten Sie auf folgendes:
     <programlisting role="php">
<![CDATA[
<?php
$varname.ext;  /* ungültiger Variablen-Bezeichner */
?>
]]>
     </programlisting>
     Der PHP-Parser sieht eine Variable namens <varname>$varname</varname>,
     gefolgt von einem Zeichenketten-Verbindungs-Operator, dieser wiederum
     gefolgt von der offenen Zeichenkette 'ext' (also nicht eingegrenzt
     durch '"' und auch keinem Schlüsselwort oder reserviertem Bezeichner
     entsprechend). Das kann natürlich nicht zum gewünschten Ergebnis
     führen.
    </para>

    <para>
     Deshalb ist es wichtig zu wissen, dass PHP in den ihm übergebenen
     Variablen alle Punkte (.) automatisch durch einen 
     Unterstrich (_) ersetzt.
    </para>
   </sect2>

   <sect2  xml:id="language.variables.determining-type-of">
    <title>Bestimmung des Variablen-Typs</title>

    <para>
     Da PHP den Typ der Variablen bestimmt und (im Allgemeinen) selbst
     eine entsprechende Umformung vornimmt, ist es nicht immer klar,
     welchen Typ eine Variable gerade hat. PHP beinhaltet einige
     Funktionen, die dies herausfinden, wie zum Beispiel:
     <function>gettype</function>, <function>is_array</function>,
     <function>is_float</function>, <function>is_int</function>,
     <function>is_object</function> und
     <function>is_string</function>. Lesen Sie bitte auch das Kapitel
     über <link linkend="language.types">Typen</link>.
    </para>
    <para>
     Da HTTP ein Text-Protokoll ist, werden die meisten, wenn nicht alle, Inhalte von
     <link linkend="language.variables.superglobals">superglobalen Arrays</link>,
     wie <varname>$_POST</varname> und <varname>$_GET</varname>, als Zeichenketten
     erhalten bleiben. PHP wird nicht versuchen die Werte in spezifische Typen umzuwandeln.
     Im Beispiel weiter unten wird <varname>$_GET["var1"]</varname> die Zeichenkette
     "null" und <varname>$_GET["var2"]</varname> die Zeichenkette "123" enthalten.
     <programlisting>
<![CDATA[
/index.php?var1=null&var2=123
]]>
     </programlisting>
    </para>
   </sect2>

     <sect2 xml:id="language.variables.external.changelog">
    &reftitle.changelog;

    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>5.4.0</entry>
         <entry>
          <link linkend="security.globals">Globals registrieren</link>, 
          <link linkend="security.magicquotes">Magic Quotes</link> and
          <link linkend="ini.register-long-arrays">register_long_arrays</link>
          wurde entfernt
         </entry>
        </row>
        <row>
         <entry>5.3.0</entry>
         <entry>
          <link linkend="security.globals">Globals registrieren</link>, 
          <link linkend="security.magicquotes">Magic Quotes</link> and
          <link linkend="ini.register-long-arrays">register_long_arrays</link>
          wurde missbilligt
         </entry>
        </row>
        <row>
         <entry>4.2.0</entry>
         <entry>
          <link linkend="ini.register-globals">register_globals</link>
          Direktive ist standardmässig <emphasis>off</emphasis>.
         </entry>
        </row>
        <row>
         <entry>4.1.0</entry>
         <entry>
          <link linkend="language.variables.superglobals">Superglobale Arrays</link>, 
          wie <varname>$_POST</varname> oder <varname>$_GET</varname> wurden 
          verfügbar gemacht
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>

  </sect1>
     
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
