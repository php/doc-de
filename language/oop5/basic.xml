<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.14 Maintainer: simp Status: ready -->

 <sect1 id="language.oop5.basic">
  <title>Die Grundlagen</title>

  <sect2 id="language.oop5.basic.class">
   <title>class</title>
   <para>
    Jede Klassendefinition beginnt mit dem Schlüsselwort class, gefolgt von
    einem Klassennamen, welcher ein beliebiger Name sein kann, der kein 
    <link linkend="reserved">reservierter</link> Bezeichner von PHP ist.
    Darauf folgt ein Paar spitzer Klammern, die die Definitionen der
    Klassenmember und Methoden enthalten. Die Pseudovariable 
    <varname>$this</varname> ist verfügbar, falls eine Methode aus einem 
    Objektkontext heraus aufgerufen wird. <varname>$this</varname> ist eine
    Referenz auf das aufrufende Objekt (üblicherweise das Objekt zu dem die 
    Methode gehört, es kann sich aber auch um ein anderes Objekt handeln, falls 
    die Methode <link linkend="language.oop5.static">statisch</link> aus dem
    Kontext eines zusätzlichen Objektes aufgerufen wird). Dies wird anhand
    des nachfolgenden Beispiels erläutert:
    
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this ist definiert (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this ist nicht definiert.\n";
        }
    }
}

class B
{
    function bar()
    {
        A::foo();
    }
}

$a = new A();
$a->foo();
A::foo();
$b = new B();
$b->bar();
B::bar();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
$this ist definiert (A)
$this ist nicht definiert.
$this ist definiert (B)
$this ist nicht definiert.
]]>
     </screen>
    </informalexample>
   </para>
   <example>
    <title>Einfache Klassendefinition</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // Memberdeklaration
    public $var = 'ein Vorgabewert';

    // Methodendeklaration
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 id="language.oop5.basic.new">
   <title>new</title>
   <para>
    Um eine Instanz eines Objektes zu erzeugen, muss ein neues Objekt erzeugt
    und einer Variablen zugewiesen werden. Bei der Erzeugung wird das Objekt 
    immer zugewiesen, außer wenn das Objekt einen definierten
    <link linkend="language.oop5.decon">Konstruktor</link> besitzt, der
    aufgrund eines Fehlers eine <link linkend="language.exceptions">Exception</link>
    wirft.
   </para>
   <example>
    <title>Eine Instanz erzeugen</title>
    <programlisting role="php">
<![CDATA[
<?php
$instanz = new SimpleClass()
?>
]]>
    </programlisting>
   </example>
   <para>
    Wenn man eine bereits erzeugte Instanz eines Objektes einer neuen Variablen
    zuweist, wird die neue Variable auf die selbe Instanz zugreifen wie das
    Objekt, das zugewiesen wurde. Dieses Verhalten ist das selbe, wenn man
    Instanzen an Funktionen übergibt. Eine neue Instanz eines bereits erzeugten
    Objektes erhält man, indem man es
    <link linkend="language.oop5.cloning">klont</link>.
   </para>
   <example>
    <title>Objektzuweisung</title>
    <programlisting role="php">
<![CDATA[
<?php
$zugewiesen   =  $instanz;
$referenz     =& $instanz;

$instanz->var = '$zugewiesen wird diesen Wert haben';

$instanz = null; // $instanz und $referenz werden null

var_dump($instanz);
var_dump($referenz);
var_dump($zugewiesen);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$zugewiesen wird diesen Wert haben"
}
]]>
    </screen>
   </example>
  </sect2>

  <sect2 id="language.oop5.basic.extends">
   <title>extends</title>
   <para>
    Eine Klasse kann Methoden und Member einer anderen Klasse erben, indem
    man das extends Schlüsselwort in der Deklaration benutzt. Es ist nicht
    möglich, mehrere Klassen zu erweitern, eine Klasse kann nur eine einzige
    Basisklasse beerben.
   </para>
   <para>
    Die ererbten Methoden - es sei denn Sie wurden von der Vaterklasse als
    <link linkend="language.oop5.final">final</link> definiert - und Member
    können überschrieben werden, indem Sie mit dem selben Namen wie in der
    Vaterklasse erneut deklariert werden. Es ist möglich, auf die überschriebenen
    Methoden oder Member zuzugreifen, wenn diese mittels
    <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>
    referenziert werden.
   </para>
   <example>
    <title>Einfache Vererbung</title>
    <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // Die Vatermethode überschreiben
    function displayVar()
    {
        echo "Erweiternde Klasse\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Erweiternde Klasse
ein Vorgabewert
]]>
    </screen>
   </example>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
