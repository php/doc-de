<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: wiesemann Status: ready -->

 <sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
  <title>Die Grundlagen</title>

  <sect2 xml:id="language.oop5.basic.class">
   <title>class</title>
   <para>
    Einfache Klassendefinitionen beginnen mit dem Schlüsselwort
    <literal>class</literal>, gefolgt von einem Klassennamen, gefolgt von
    einem Paar geschweifter Klammern, die die Definitionen der
    Eigenschaften und Methoden der Klasse enthalten.
   </para>
   <para>
    Der Klassenname kann jeder gültige Bezeichner sein, vorausgesetzt es ist kein von PHP
    <link linkend="reserved">reserviertes Wort</link>. Ein gültiger
    Klassenname beginnt mit einem Buchstaben oder einem Unterstrich, gefolgt
    von einer beliebigen Anzahl von Buchstaben, Ziffern oder Unterstrichen;
    als regulärer Ausdruck formuliert:
    <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>.
   </para>
   <para>
    Eine Klasse darf aus ihren eigenen
    <link linkend="language.oop5.constants">Konstanten</link>,
    <link linkend="language.oop5.properties">Variablen</link>
    ("Eigenschaften" genannt) und Funktionen ("Methoden" genannt)
    bestehen.
   </para>
   <example>
    <title>Definition einer einfachen Klasse</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // Deklaration einer Eigenschaft
    public $var = 'ein Standardwert';

    // Deklaration einer Methode
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
    </programlisting>
   </example>
   <para>
    Die Pseudovariable
    <varname>$this</varname> ist verfügbar, falls eine Methode aus einem 
    Objektkontext heraus aufgerufen wird. <varname>$this</varname> ist eine
    Referenz auf das aufgerufene Objekt.
   </para>
   <warning>
    <para>
     Wird eine nicht-statische Methode statisch aufgerufen, so
     wird ein <classname>Error</classname> ausgelöst.
     Vor PHP 8.0.0 wurde hierbei ein Hinweis über das veraltete
     Verhalten ausgegeben und <varname>$this</varname> war
     nicht definiert.
    </para>
    <example xml:id="language.oop5.basic.class.this">
     <title>Einige Beispiele für die <varname>$this</varname>-Pseudovariable</title>
     <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this ist definiert (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this ist nicht definiert.\n";
        }
    }
}

class B
{
    function bar()
    {
        A::foo();
    }
}

$a = new A();
$a->foo();

A::foo();

$b = new B();
$b->bar();

B::bar();
?>
]]>
     </programlisting>
     &example.outputs.7;
     <screen>
<![CDATA[
$this is defined (A)

Deprecated: Non-static method A::foo() should not be called statically in %s  on line 27
$this is not defined.

Deprecated: Non-static method A::foo() should not be called statically in %s  on line 20
$this is not defined.

Deprecated: Non-static method B::bar() should not be called statically in %s  on line 32

Deprecated: Non-static method A::foo() should not be called statically in %s  on line 20
$this is not defined.
]]>
     </screen>
     &example.outputs.8;
     <screen>
<![CDATA[
$this is defined (A)

Fatal error: Uncaught Error: Non-static method A::foo() cannot be called statically in %s :27
Stack trace:
#0 {main}
  thrown in %s  on line 27
]]>
     </screen>
    </example>
   </warning>
  </sect2>

  <sect2 xml:id="language.oop5.basic.new">
   <title>new</title>
   <para>
    Um eine Instanz einer Klasse zu erzeugen, muss das <literal>new</literal>-Schlüsselwort
    verwendet werden. Ein Objekt wird immer erzeugt, außer wenn das Objekt einen definierten
    <link linkend="language.oop5.decon">Konstruktor</link> besitzt, der
    aufgrund eines Fehlers eine <link linkend="language.exceptions">Exception</link>
    wirft. Klassen sollten vor ihrer Instantiierung definiert werden (in manchen
    Fällen ist dies eine Notwendigkeit).
   </para>
   <para>
    Wenn ein <type>string</type> mit dem Namen einer Klasse mit <literal>new</literal>
    genutzt wird, wird eine neue Instanz dieser Klasse erzeugt. Falls sich die Klasse
    in einem Namensraum befindet, muss der voll qualifizierte Name hierfür genutzt werden.
   </para>
   
   <note>
    <para>
     Falls der Konstruktor keine Übergabeargumente erwartet, können die Klammern hinter
     dem Klassennamen weggelassen werden.
    </para>
   </note>
   
   <example>
    <title>Eine Instanz erzeugen</title>
    <programlisting role="php">
<![CDATA[
<?php
$instanz = new SimpleClass();

// dies ist auch mit einer Variablen möglich:
$klassenname = 'SimpleClass';
$instanz = new $klassenname(); // new SimpleClass()
?>
]]>
    </programlisting>
   </example>
   <para>
    Im Kontext einer Klasse ist es möglich, neue Objekte mit
    <literal>new self</literal> und <literal>new parent</literal>
    anzulegen.
   </para>
   <para>
    Wenn man eine bereits erzeugte Instanz einer Klasse einer neuen Variablen
    zuweist, wird die neue Variable auf die selbe Instanz zugreifen wie das
    Objekt, das zugewiesen wurde. Dieses Verhalten ist das selbe, wenn man
    Instanzen an Funktionen übergibt. Eine Kopie eines bereits erzeugten
    Objektes erhält man, indem man es
    <link linkend="language.oop5.cloning">klont</link>.
   </para>
   <example>
    <title>Objektzuweisung</title>
    <programlisting role="php">
<![CDATA[
<?php
$instanz = new SimpleClass();

$zugewiesen   =  $instanz;
$referenz     =& $instanz;

$instanz->var = '$zugewiesen wird diesen Wert haben';

$instanz = null; // $instanz und $referenz werden null

var_dump($instanz);
var_dump($referenz);
var_dump($zugewiesen);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$zugewiesen wird diesen Wert haben"
}
]]>
    </screen>
   </example>
   <para>
    Es ist auf verschiedene Arten möglich, Instanzen eines Objekts zu erzeugen:
   </para>
   <example>
    <title>Erzeugen neuer Objekte</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    static public function getNew()
    {
        return new static;
    }
}

class Child extends Test
{}

$obj1 = new Test();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew();
var_dump($obj3 instanceof Test);

$obj4 = Child::getNew();
var_dump($obj4 instanceof Child);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
]]>
    </screen>
   </example>
   <para>
    Es ist möglich, auf ein Mitglied eines neu erzeugten
    Objekts in einem einzigen Ausdruck zuzugreifen:
   </para>
   <example>
    <title>Zugriff auf ein Mitglied eines neu erzeugten Objekts</title>
    <programlisting role="php">
<![CDATA[
<?php
echo (new DateTime())->format('Y');
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
2016
]]>
    </screen>
   </example>

   <note>
    <simpara>
     Vor PHP 7.1 werden die Argumente nicht ausgewertet, wenn keine
     Konstruktor-Funktion definiert ist.
    </simpara>
   </note>
  </sect2>
  
  <sect2 xml:id="language.oop5.basic.properties-methods">
   <title>Eigenschaften und Methoden</title>
   <para>
    Klassen-Eigenschaften und -Methoden leben in separaten "Namensräumen", so
    dass es eine Eigenschaft und eine Methode des selben Namens geben kann. Der
    Zugriff auf eine Eigenschaft und eine Methode wird gleich notiert, und ob
    auf eine Eigenschaft zugegriffen oder eine Methode aufgerufen wird, hängt
    einzig und allein vom Kontext ab, d.h. ob die Verwendung ein
    Variablenzugriff oder ein Funktionsaufruf ist.
   </para>
   <example>
    <title>Variablenzugriff vs. Methodenaufruf</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar = 'Eigenschaft';
    
    public function bar() {
        return 'Methode';
    }
}

$obj = new Foo();
echo $obj->bar, PHP_EOL, $obj->bar(), PHP_EOL;
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Eigenschaft
Methode
]]>
    </screen>
   </example>
   <para>
    Das bedeutet, dass der Aufruf einer <link
    linkend="functions.anonymous">anonymen Funktion</link>, die einer
    Eigenschaft zugewiesen wurde, nicht direkt möglich ist. Statt dessen muss
    beispielsweise die Eigenschaft zunächst einer Variablen zugewiesen werden.
    Es ist möglich, eine solche Eigenschaft direkt aufzurufen, indem man sie in 
    Klammern einschließt.
   </para>
   <example>
    <title>Aufruf einer anonymen Funktion, die in einer Eigenschaft gespeichert ist</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar;
    
    public function __construct() {
        $this->bar = function() {
            return 42;
        };
    }
}

$obj = new Foo();

echo ($obj->bar)(), PHP_EOL;
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
42
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.extends">
   <!-- TODO Example about class constant redefinition -->
   <!-- TODO Split into it's own page? -->
   <title>extends</title>
   <para>
    Eine Klasse kann die Konstanten, Methoden und Eigenschaften einer anderen Klasse erben, indem
    man das <literal>extends</literal>-Schlüsselwort in der Deklaration benutzt.
    Es ist nicht möglich, mehrere Klassen zu erweitern; eine Klasse kann nur eine
    einzige Basisklasse beerben.
   </para>
   <para>
    Die geerbten Konstanten, Methoden und Eigenschaften können durch eine Neudeklaration
    mit dem gleichen Namen wie in der Elternklasse überschrieben werden. Falls
    die Elternklasse eine Methode als <link linkend="language.oop5.final">final</link>
    definiert hat, kann diese Methode nicht überschrieben werden. Es ist möglich,
    auf die überschriebenen Methoden oder statischen Eigenschaften zuzugreifen,
    wenn diese mittels
    <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>
    referenziert werden.
   </para>
   <example>
    <title>Einfache Vererbung</title>
    <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // Die Vatermethode überschreiben
    function displayVar()
    {
        echo "Erweiternde Klasse\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Erweiternde Klasse
ein Standardwert
]]>
    </screen>
   </example>
   
   <sect3 xml:id="language.oop.lsp">
    <title>Regeln zur Signaturkompatibilität</title>
    <para>
     Wenn eine Methode überschrieben wird, so muss deren Signatur mit derjenigen
     der Elternmethode kompatibel sein. Andernfalls wird ein fataler Fehler 
     hervorgerufen oder, vor PHP 8.0.0, eine Warnung der Stufe 
     <constant>E_WARNING</constant> ausgegeben. Eine Signatur ist kompatibel,
     wenn sie die Regeln zur <link linkend="language.oop5.variance">Varianz</link>
     berücksichtigt, einen notwendigen Parameter optional macht und alle neuen
     Parameter optional sind. Dies ist als das Liskovsche Substitutionsprinzip,
     kurz LSP, bekannt. 
     Der <link linkend="language.oop5.decon.constructor">Konstruktor</link> sowie
     <literal>private</literal> Methoden sind von diesen Regeln zur 
     Signaturkompatibilität ausgenommen, weshalb kein fataler Fehler in solchen
     Fällen der Signaturinkompatibilität hervorgerufen wird.     
    </para>
    <example>
     <title>Kompatible Kindmethoden</title>
     <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function foo(int $a) {
        echo "Gültig\n";
    }
}

class Extend1 extends Base
{
    function foo(int $a = 5)
    {
        parent::foo($a);
    }
}

class Extend2 extends Base
{
    function foo(int $a, $b = 5)
    {
        parent::foo($a);
    }
}

$extended1 = new Extend1();
$extended1->foo();
$extended2 = new Extend2();
$extended2->foo(1);
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Gültig
Gültig
]]>
     </screen>
    </example>

    <para>
     Das folgende Beispiel demonstriert, dass eine Kindmethode nicht zur Elternmethode kompatibel ist,
     wenn sie einen Parameter entfernt oder einen optionalen Parameter notwendig macht.
    </para>
    <example>
     <title>Fataler Fehler, wenn eine Kindmethode einen Parameter entfernt</title>
     <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function foo(int $a = 5) {
        echo "Gültig\n";
    }
}

class Extend extends Base
{
    function foo()
    {
        parent::foo(1);
    }
}
]]>
     </programlisting>
     &example.outputs.8.similar;
     <screen>
<![CDATA[
Fatal error: Declaration of Extend::foo() must be compatible with Base::foo(int $a = 5) in /in/evtlq on line 13
]]>
     </screen>
    </example>
    <example>
     <title>Fataler Fehler, wenn eine Kindmethode einen optionalen Parameter notwendig macht</title>
     <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function foo(int $a = 5) {
        echo "Gültig\n";
    }
}

class Extend extends Base
{
    function foo(int $a)
    {
        parent::foo($a);
    }
}
]]>
     </programlisting>
     &example.outputs.8.similar;
     <screen>
<![CDATA[
Fatal error: Declaration of Extend::foo(int $a) must be compatible with Base::foo(int $a = 5) in /in/qJXVC on line 13
]]>
     </screen>
    </example>

    <warning>
     <para>
      Die Umbenennung eines Parameters einer Methode in einer Kindklasse führt 
      nicht zur Inkompatibilität. Dies ist jedoch nicht empfohlen, da es zu
      Fehlern der Stufe <classname>Error</classname> führt, wenn 
      <link linkend="functions.named-arguments">benannte Parameter</link>
      verwendet werden.
     </para>
     <example>
      <title>Fehler, wenn benannte Parameter verwendet und diese in der Kindklasse umbenannt werden</title>
      <programlisting role="php">
<![CDATA[
<?php

class A {
    public function test($foo, $bar) {}
}

class B extends A {
    public function test($a, $b) {}
}

$obj = new B;

// Pass parameters according to A::test() contract
$obj->test(foo: "foo", bar: "bar"); // ERROR!
]]>
      </programlisting>
      &example.outputs.similar;
      <screen>
<![CDATA[
Fatal error: Uncaught Error: Unknown named parameter $foo in /in/XaaeN:14
Stack trace:
#0 {main}
  thrown in /in/XaaeN on line 14
]]>
      </screen>
     </example>
    </warning>
   </sect3>   
  </sect2>

 <sect2 xml:id="language.oop5.basic.class.class">
   <title>::class</title>

   <para>
    Das Schlüsselwort <literal>class</literal> kann auch für die
    Namensauflösung einer Klasse verwendet werden. Um den vollständig
    qualifizierten Namen der Klasse <literal>ClassName</literal> zu erhalten,
    kann <literal>ClassName::class</literal> verwendet werden. Dies ist vor allem
    dann praktisch, wenn mit
    <link linkend="language.namespaces">Namensräumen</link> gearbeitet wird.    
   </para>
   <para>
    <example xml:id="language.oop5.basic.class.class.name">
     <title>Auflösung von Klassennamen</title>
     <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }

    echo ClassName::class;
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
NS\ClassName
]]>
     </screen>
    </example>
   </para>
   <note>
    <para>
     Bei der Auflösung des Klassennamens unter Verwendung von
     <literal>::class</literal> handelt es sich um eine Transformation zur
     Übersetzungszeit. Das bedeutet, dass zu der Zeit, zu der die
     Klassennamen-Zeichenkette erzeugt wird, noch kein Autoloading erfolgt ist.
     Daraus folgt, dass Klassennamen erweitert werden, selbst wenn die Klasse
     nicht existiert. In diesem Fall wird kein Fehler erzeugt.
    </para>
    <example xml:id="language.oop5.basic.class.class.fail">
     <title>Fehlende Auflösung des Klassennamens></title>
     <programlisting role="php">
<![CDATA[
<?php
print Does\Not\Exist::class;
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Does\Not\Exist
]]>
     </screen>
    </example>
   </note>
   <para>
    Von PHP 8.0.0 an kann die Konstante <literal>::class</literal> auch auf
    Objekte angewendet werden. Diese Auflösung des Klassennamens erfolgt nicht
    zur Übersetzungszeit, sondern zur Laufzeit. Sie hat die gleichen
    Auswirkungen wie der Aufruf von <function>get_class</function> auf das
    Objekt.
   </para>
   <example xml:id="language.oop5.basic.class.class.object">
    <title>Namensauflösung eines Objekts</title>
    <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }
}
$c = new ClassName();
print $c::class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NS\ClassName
]]>
    </screen>
   </example>
  </sect2>
  <sect2 xml:id="language.oop5.basic.nullsafe">
   <title>Nullsafe-Methoden und -Eigenschaften</title>
   <para>
    Von PHP 8.0.0 an kann auf Eigenschaften und Methoden stattdessen auch mit
    dem "Nullsafe"-Operator zugegriffen werden: <literal>?-></literal>. Der
    Nullsafe-Operator funktioniert genauso als Eigenschafts- oder
    Methodenzugriff wie oben, mit dem Unterschied, dass &null; zurückgegeben
    wird, statt dass eine Exception erzeugt wird, wenn das Objekt, das
    dereferenziert wird, &null; ist. Wenn die Dereferenzierung Teil einer
    Zeichenkette ist, wird der Rest der Zeichenkette übersprungen.
   </para>
   <para>
    Der Effekt ist ähnlich, wie wenn man jeden Zugriff zuerst mit
    <function>ist_null</function> prüft, aber kompakter.
   </para>
   <para>
    <example>
     <title>Nullsafe Operator</title>
     <programlisting role="php">
<![CDATA[
<?php

// Von PHP 8.0.0 an entspricht diese Zeile:
$result = $repository?->getUser(5)?->name;

// dem folgenden Codeblock:
if (is_null($repository)) {
    $result = null;
} else {
    $user = $repository->getUser(5);
    if (is_null($user)) {
        $result = null;
    } else {
        $result = $user->name;
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Der Nullsafe-Operator wird am besten verwendet, wenn Null ein gültiger
     und potenziell erwarteter möglicher Rückgabewert für eine Eigenschaft
     oder eine Methode ist. Um einen Fehler anzuzeigen, ist die Erzeugung
     einer Exception vorzuziehen.
    </para>
   </note>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
