<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.36 Maintainer: hholzgra Status: ready -->
<!-- Credits: simp -->
 <sect1 xml:id="language.oop5.reflection" xmlns="http://docbook.org/ns/docbook">
  <title>Reflection</title>
  <sect2 xml:id="language.oop5.reflection.toc">
   <title>Table of Contents</title>
   <simplelist>
    <member><link linkend="language.oop5.reflection.introduction">Einleitung</link></member>
    <member><link linkend="language.oop5.reflection.reflector">Die Reflector Interface</link></member>
    <member><link linkend="language.oop5.reflection.reflectionexception">Die ReflectionException Klasse</link></member>
    <member><link linkend="language.oop5.reflection.reflectionfunction">Die ReflectionFunction Klasse</link></member>
    <member><link linkend="language.oop5.reflection.reflectionparameter">Die ReflectionParameter Klasse</link></member>
    <member><link linkend="language.oop5.reflection.reflectionclass">Die Reflection Klasse</link></member>
    <member><link linkend="language.oop5.reflection.reflectionobject">Die ReflectionObject Klasse</link></member>
    <member><link linkend="language.oop5.reflection.reflectionmethod">Die ReflectionMethod Klasse</link></member>
    <member><link linkend="language.oop5.reflection.reflectionproperty">Die ReflectionProperty Klasse</link></member>
    <member><link linkend="language.oop5.reflection.reflectionextension">Die ReflectionExtension Klasse</link></member>
    <member><link linkend="language.oop5.reflection.extending">Erweitern der Reflection Klassen</link></member>
   </simplelist>
  </sect2>
  <sect2 xml:id="language.oop5.reflection.introduction">
   <title>Einleitung</title>
   <para>
    Php 5 bringt eine komplette Reflection API mit, die Möglichkeiten bietet, um
    Klassen, Interfaces, Funktionen und Methoden ebenso wie auch Extensions
    zurückzuentwickeln. Zusätzlich bietet die Reflection API Wege,
    dokumentarische Kommentare von Funktionen, Klassen und Methoden abzufragen.
   </para>
   <para>
    Die Refelection API ist eine objektorientierte Erweiterung der Zend Engine,
    bestehend aus den folgenden Klassen:
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Reflection { }
interface Reflector { }
class ReflectionException extends Exception { }
class ReflectionFunction extends ReflectionFunctionAbstract implements Reflector { }
class ReflectionParameter implements Reflector { }
class ReflectionMethod extends ReflectionFunctionAbstract implements Reflector { }
class ReflectionClass implements Reflector { }
class ReflectionObject extends ReflectionClass { }
class ReflectionProperty implements Reflector { }
class ReflectionExtension implements Reflector { }
?>
]]>
    </programlisting>
   </informalexample>
   <note>
    <simpara>
     Für detailierte Erläuterungen dieser Klassen werfen Sie einen Blick auf die
     nächsten Kapitel.
    </simpara>
   </note>
   <para>
    Wenn wir den unten stehenden Beispielcode ausführen würden:
    <example>
     <title>Grundlegende Nutzung der Reflection API</title>
     <programlisting role='php'>
<![CDATA[
<?php
Reflection::export(new ReflectionClass('Exception'));
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Class [ <internal> class Exception ] {

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [6] {
    Property [ <default> protected $message ]
    Property [ <default> private $string ]
    Property [ <default> protected $code ]
    Property [ <default> protected $file ]
    Property [ <default> protected $line ]
    Property [ <default> private $trace ]
  }

  - Methods [9] {
    Method [ <internal> final private method __clone ] {
    }

    Method [ <internal, ctor> public method __construct ] {

      - Parameters [2] {
        Parameter #0 [ <optional> $message ]
        Parameter #1 [ <optional> $code ]
      }
    }

    Method [ <internal> final public method getMessage ] {
    }

    Method [ <internal> final public method getCode ] {
    }

    Method [ <internal> final public method getFile ] {
    }

    Method [ <internal> final public method getLine ] {
    }

    Method [ <internal> final public method getTrace ] {
    }

    Method [ <internal> final public method getTraceAsString ] {
    }

    Method [ <internal> public method __toString ] {
    }
  }
}
]]>
     </screen>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.reflection.reflector">
   <title><classname>Reflector</classname></title>
   <para>
    <classname>Reflector</classname> ist ein von allen Reflektionsklassen
    implementiertes Interface.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
interface Reflector
{
    public string __toString()
    public static string export()
}
?>
]]>
    </programlisting>
   </informalexample>
  </sect2>

  <sect2 xml:id="language.oop5.reflection.reflectionexception">
   <title><classname>ReflectionException</classname></title>
   <para>
    <classname>ReflectionException</classname> erweitert die normale
    <link linkend="language.exceptions">Exception</link> und wird von der
    Reflection API geworfen. Es werden keine spezifischen Methoden oder
    Eigenschaften eingeführt.
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.reflection.reflectionfunction">
   <title><classname>ReflectionFunction</classname></title>
   <para>
    Die  <classname>ReflectionFunction</classname> Klasse lässt Sie
    Funktionen zurückentwickeln.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class ReflectionFunction extends ReflectionFunctionAbstract implements Reflector
{
    final private __clone()
    public void __construct(string name)
    public string __toString()
    public static string export(string name, bool return)
    public string getName()
    public bool isInternal()
    public bool isDisabled()
    public bool isUserDefined()
    public string getFileName()
    public int getStartLine()
    public int getEndLine()
    public string getDocComment()
    public array getStaticVariables()
    public mixed invoke([mixed args [, ...]])
    public mixed invokeArgs(array args)
    public bool returnsReference()
    public ReflectionParameter[] getParameters()
    public int getNumberOfParameters()
    public int getNumberOfRequiredParameters()
}
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    Die Elternklasse <classname>ReflectionFunctionAbstract</classname> hat die
    gleichen Methoden mit Ausnahme von <function>invoke</function>,
    <function>invokeArgs</function>, <function>export</function> und
    <function>isDisabled</function>.
   </para>
   <note>
    <simpara>
     <function>getNumberOfParameters</function> und
     <function>getNumberOfRequiredParameters</function> wurden in PHP
     5.0.3 hinzugefügt, während <function>invokeArgs</function> in PHP 5.1.0
     neu hinzukam.
    </simpara>
   </note>
   <para>
    Um einen Blick in eine Funktion zu werfen, muss man erst eine Instanz der Klasse
    <classname>ReflectionFunction</classname> erzeugen. Danach kann man jede
    der oben aufgeführten Methoden dieser Instanz aufrufen.
   </para>
   <example>
    <title>Die <classname>ReflectionFunction</classname> Klasse benutzen</title>
    <programlisting role='php'>
<![CDATA[
<?php
/**
 * Ein einfacher Zähler
 *
 * @return    int
 */
function counter()
{
    static $c = 0;
    return $c++;
}

// Erzeuge eine neue Instanz der ReflectionFunction Klasse
$func = new ReflectionFunction('counter');

// Grundlegende Informationen ausgeben
printf(
    "===> Die %s Funktion '%s'\n".
    "     ist deklariert in %s\n".
    "     Zeilen %d bis %d\n",
    $func->isInternal() ? 'interne' : 'benutzerdefinierte',
    $func->getName(),
    $func->getFileName(),
    $func->getStartLine(),
    $func->getEndline()
);

// Dokumentaischen Kommentar ausgeben
printf("---> Dokumentation:\n %s\n", var_export($func->getDocComment(), 1));

// Statische Variablen ausgeben, wenn welche existieren
if ($statics = $func->getStaticVariables())
{
    printf("---> Statische Variablen: %s\n", var_export($statics, 1));
}

// Die Funktion aufrufen
printf("---> Der Aufruf gibt zurück: ");
var_dump($func->invoke());


// Sie könnten bevorzugen die export() Methode zu verwenden
echo "\nReflectionFunction::export() gibt zurück:\n";
echo ReflectionFunction::export('counter');
?>
]]>
    </programlisting>
   </example>
   <note>
    <simpara>
     Die Methode <function>invoke</function> akzeptiert eine variable Anzahl
     von Argumenten, welche genau wie von <function>call_user_func</function>
     an die Funktion übergeben werden.
    </simpara>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.reflection.reflectionparameter">
   <title><classname>ReflectionParameter</classname></title>
   <para>
    Die  <classname>ReflectionParameter</classname> Klasse frgt Informationen
    über die Parameter einer Funktion oder Methode ab.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class ReflectionParameter implements Reflector
{
    final private __clone()
    public void __construct(string function, string parameter)
    public string __toString()
    public static string export(mixed function, mixed parameter, bool return)
    public string getName()
    public bool isPassedByReference()
    public ReflectionClass getDeclaringClass()
    public ReflectionClass getClass()
    public bool isArray()
    public bool allowsNull()
    public bool isPassedByReference()
    public bool isOptional()
    public bool isDefaultValueAvailable()
    public mixed getDefaultValue()
    public int getPosition()
}
?>
]]>
    </programlisting>
   </informalexample>
   <note>
    <para>
     <function>getDefaultValue</function>,
     <function>isDefaultValueAvailable</function> und
     <function>isOptional</function> wurden in PHP 5.0.3 hinzugefügt,
     während <function>isArray</function> in PHP 5.1.0 neu ist.
     <function>getDeclaringFunction</function> und
     <function>getPosition</function> wurden in PHP 5.1.3 hinzugefügt.
    </para>
   </note>
   <para>
    Um einen Blick in Funktionsparameter zu werfen, muss man zuerst eine Instanz
    der Klassen <classname>ReflectionFunction</classname> oder
    <classname>ReflectionMethod</classname> erzeugen und kann dann deren
    <function>getParameters</function> Methode verwenden, um ein Array ihrer
    Parameter abzufragen.
   </para>
   <example>
    <title>Die <classname>ReflectionParameter</classname> Klasse verwenden</title>
    <programlisting role='php'>
<![CDATA[
<?php
function foo($a, $b, $c) { }
function bar(Exception $a, &$b, $c) { }
function baz(ReflectionFunction $a, $b = 1, $c = null) { }
function abc() { }

// Erzeuge eine Instanz von ReflectionFunction mit dem
// auf der Kommandozeile übergebenen Parameter
$reflect = new ReflectionFunction($argv[1]);

echo $reflect;

foreach ($reflect->getParameters() as $i => $param) {
    printf(
        "-- Parameter #%d: %s {\n".
        "   Klasse: %s\n".
        "   Erlaubt NULL: %s\n".
        "   Als Referenz übergeben: %s\n".
        "   Ist optional?: %s\n".
        "}\n",
        $i, // ab PHP 5.2.3 kann auch $param->getPosition() genutzt werden
        $param->getName(),
        var_export($param->getClass(), 1),
        var_export($param->allowsNull(), 1),
        var_export($param->isPassedByReference(), 1),
        $param->isOptional() ? 'ja' : 'nein'
    );
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.reflection.reflectionclass">
   <title><classname>ReflectionClass</classname></title>
   <para>
    Die <classname>ReflectionClass</classname> Klasse erlaubt es, Klassen
    und Interfaces zurückzuentwickeln.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class ReflectionClass implements Reflector
{
    final private __clone()
    public void __construct(string name)
    public string __toString()
    public static string export(mixed class, bool return)
    public string getName()
    public bool isInternal()
    public bool isUserDefined()
    public bool isInstantiable()
    public bool hasConstant(string name)
    public bool hasMethod(string name)
    public bool hasProperty(string name)
    public string getFileName()
    public int getStartLine()
    public int getEndLine()
    public string getDocComment()
    public ReflectionMethod getConstructor()
    public ReflectionMethod getMethod(string name)
    public ReflectionMethod[] getMethods()
    public ReflectionProperty getProperty(string name)
    public ReflectionProperty[] getProperties()
    public array getConstants()
    public mixed getConstant(string name)
    public ReflectionClass[] getInterfaces()
    public bool isInterface()
    public bool isAbstract()
    public bool isFinal()
    public int getModifiers()
    public bool isInstance(stdclass object)
    public stdclass newInstance(mixed args)
    public stdclass newInstanceArgs(array args)
    public ReflectionClass getParentClass()
    public bool isSubclassOf(ReflectionClass class)
    public array getStaticProperties()
    public mixed getStaticPropertyValue(string name [, mixed default])
    public void setStaticPropertyValue(string name, mixed value)
    public array getDefaultProperties()
    public bool isIterateable()
    public bool implementsInterface(string name)
    public ReflectionExtension getExtension()
    public string getExtensionName()
}
?>
]]>
    </programlisting>
   </informalexample>
   <note>
    <simpara>
     <function>hasConstant</function>, <function>hasMethod</function>,
     <function>hasProperty</function>, <function>getStaticPropertyValue</function>
     und <function>setStaticPropertyValue</function> wurden in PHP 5.1.0
     hinzugefügt, während <function>newInstanceArgs</function> in PHP 5.1.3 dazu
     kam.
    </simpara>
   </note>
   <para>
    Um einen Blick in eine Klasse zu werfen, muss man zuerst eine Instanz der
    Klasse <classname>ReflectionClass</classname> erzeugen. Man kann danach jede
    der oben angeführten Methoden der Instanz verwenden.
   </para>
   <example>
    <title>Die <classname>ReflectionClass</classname> Klasse verwenden</title>
    <programlisting role='php'>
<![CDATA[
<?php
interface Serializable
{
    // ...
}

class Object
{
    // ...
}

/**
 * Eine Zählerklasse
 */
class Counter extends Object implements Serializable
{
    const START = 0;
    private static $c = Counter::START;

    /**
     * Zähler aufrufen
     *
     * @access  public
     * @return  int
     */
    public function count() {
        return self::$c++;
    }
}

// Eine Instanz der Klasse ReflectionClass erzeugen
$class = new ReflectionClass('Counter');

// Grundlegende Informationen ausgeben
printf(
    "===> %s%s%s %s '%s' [extends %s]\n" .
    "     deklariert in %s\n" .
    "     Zeilen %d bis %d\n" .
    "     hat die Modifizierer %d [%s]\n",
        $class->isInternal() ? 'internal' : 'user-defined',
        $class->isAbstract() ? ' abstract' : '',
        $class->isFinal() ? ' final' : '',
        $class->isInterface() ? 'interface' : 'class',
        $class->getName(),
        var_export($class->getParentClass(), 1),
        $class->getFileName(),
        $class->getStartLine(),
        $class->getEndline(),
        $class->getModifiers(),
        implode(' ', Reflection::getModifierNames($class->getModifiers()))
);

// Dokumentarischen Kommentar ausgeben
printf("---> Dokumentation:\n %s\n", var_export($class->getDocComment(), 1));

// Ausgeben, welche Interfaces von der Klasse implementiert werden
printf("---> Implementiert:\n %s\n", var_export($class->getInterfaces(), 1));

// Klassenkonstanten ausgeben
printf("---> Konstanten: %s\n", var_export($class->getConstants(), 1));

// Klasseneigenschaften ausgeben
printf("---> Eigenschaften: %s\n", var_export($class->getProperties(), 1));

// Klassenmethoden ausgeben
printf("---> Methoden: %s\n", var_export($class->getMethods(), 1));

// Wenn die Klassen instantiierbar ist, erzeuge eine Instanz
if ($class->isInstantiable()) {
    $counter = $class->newInstance();

    echo '---> Ist $counter Instanz? ';
    echo $class->isInstance($counter) ? 'ja' : 'nein';

    echo "\n---> ist new Object() Instanz? ";
    echo $class->isInstance(new Object()) ? 'ja' : 'nein';
}
?>
]]>
    </programlisting>
   </example>
   <note>
    <simpara>
     Die Methode <function>newInstance</function> akzeptiert eine variable
     Anzahl von Argumenten, welche der Funktion genau wie in
     <function>call_user_func</function> übergeben werden.
    </simpara>
   </note>
   <note>
    <simpara>
     <literal>$class = new ReflectionClass('Foo'); $class-&gt;isInstance($arg)</literal>
     ist äquivalent zu <literal>$arg instanceof Foo</literal> oder
     <literal>is_a($arg, 'Foo')</literal>.
    </simpara>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.reflection.reflectionobject">
   <title><classname>ReflectionObject</classname></title>
   <para>
    Die Klasse <classname>ReflectionObject</classname> erlaubt das Zurückentwickeln
    von Objekten.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class ReflectionObject extends ReflectionClass
{
    final private __clone()
    public void __construct(mixed object)
    public string __toString()
    public static string export(mixed object, bool return)
}
?>
]]>
    </programlisting>
   </informalexample>
  </sect2>

  <sect2 xml:id="language.oop5.reflection.reflectionmethod">
   <title><classname>ReflectionMethod</classname></title>
   <para>
    Die <classname>ReflectionMethod</classname> Klasse erlaubt es,
    Klassenmethoden zurückzuentwickeln.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class ReflectionMethod extends ReflectionFunctionAbstract implements Reflector
{
    public __construct(mixed class, string name)
    public string __toString()
    public static string export(mixed class, string name, bool return)
    public mixed invoke(stdclass object [, mixed args [, ...]])
    public mixed invokeArgs(stdclass object, array args)
    public bool isFinal()
    public bool isAbstract()
    public bool isPublic()
    public bool isPrivate()
    public bool isProtected()
    public bool isStatic()
    public bool isConstructor()
    public bool isDestructor()
    public int getModifiers()
    public ReflectionClass getDeclaringClass()

    // Ererbt von ReflectionFunctionAbstract
    final private __clone()
    public string getName()
    public bool isInternal()
    public bool isUserDefined()
    public string getFileName()
    public int getStartLine()
    public int getEndLine()
    public string getDocComment()
    public array getStaticVariables()
    public bool returnsReference()
    public ReflectionParameter[] getParameters()
    public int getNumberOfParameters()
    public int getNumberOfRequiredParameters()
}
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    Um einen Blick in eine Methode zu werfen, muss man zuerst eine Instanz der
    <classname>ReflectionMethod</classname> Klasse erzeugen. Man kann dann
    jede der oben aufgeführten Methoden dieser Instanz aufrufen.
   </para>
   <example>
    <title>Die <classname>ReflectionMethod</classname> Klasse verwenden</title>
    <programlisting role='php'>
<![CDATA[
<?php
class Counter
{
    private static $c = 0;

    /**
     * Zähler erhöhen
     *
     * @final
     * @static
     * @access  public
     * @return  int
     */
    final public static function increment()
    {
        return ++self::$c;
    }
}

// Erzeuge eine Instanz der ReflectionMethod Klasse
$method = new ReflectionMethod('Counter', 'increment');

// Grundlegende Informationen ausgeben
printf(
    "===> Die %s%s%s%s%s%s%s Methode '%s' (welche %s ist)\n" .
    "     deklariert in %s\n" .
    "     Zeilen %d bis %d\n" .
    "     hat die Modifizierer %d[%s]\n",
        $method->isInternal() ? 'interne' : 'benutzerdefinierte',
        $method->isAbstract() ? ' abstract' : '',
        $method->isFinal() ? ' final' : '',
        $method->isPublic() ? ' public' : '',
        $method->isPrivate() ? ' private' : '',
        $method->isProtected() ? ' protected' : '',
        $method->isStatic() ? ' static' : '',
        $method->getName(),
        $method->isConstructor() ? 'der Konstruktor' : 'eine normale Methode',
        $method->getFileName(),
        $method->getStartLine(),
        $method->getEndline(),
        $method->getModifiers(),
        implode(' ', Reflection::getModifierNames($method->getModifiers()))
);

// Dokumentarischen Kommentar ausgeben
printf("---> Dokumentation:\n %s\n", var_export($method->getDocComment(), 1));

// Statische Variablen ausgeben, falls welche existieren
if ($statics= $method->getStaticVariables()) {
   printf("---> Statische Variablen: %s\n", var_export($statics, 1));
}

// Die Methode aufrufen
printf("---> Aufruf gibt zurück: ");
var_dump($method->invoke(NULL));
?>
]]>
    </programlisting>
   </example>
   <note>
    <simpara>
     Der Versuch, eine private, protected oder abstract Methode aufzurufen,
     wird darin enden, dass eine Exception aus der <function>invoke</function>
     Methode geworfen wird.
    </simpara>
   </note>
   <note>
    <simpara>
     Für statische Methoden sollten Sie, wie man oben sieht, NULL als erstes
     Argument von <function>invoke</function> übergeben. Für nicht statische
     Methoden übergeben Sie eine Instanz der Klasse.
    </simpara>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.reflection.reflectionproperty">
   <title><classname>ReflectionProperty</classname></title>
   <para>
    Die <classname>ReflectionProperty</classname> Klasse lässt Sie
    Klasseneigenschaften zurückentwickeln.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class ReflectionProperty implements Reflector
{
    final private __clone()
    public __construct(mixed class, string name)
    public string __toString()
    public static string export(mixed class, string name, bool return)
    public string getName()
    public bool isPublic()
    public bool isPrivate()
    public bool isProtected()
    public bool isStatic()
    public bool isDefault()
    public void setAccessible() /* Ab PHP 5.3.0 */
    public int getModifiers()
    public mixed getValue(stdclass object)
    public void setValue(stdclass object, mixed value)
    public ReflectionClass getDeclaringClass()
    public string getDocComment()
}
?>
]]>
    </programlisting>
   </informalexample>
   <note>
    <simpara>
     <function>getDocComment</function> wurde in PHP 5.1.0 hinzugefügt.
     <function>setAccessible</function> wurde in PHP 5.3.0 hinzugefügt.
    </simpara>
   </note>
   <para>
    Um einen Blick in eine Eigenschaft zu werfen, müssen Sie zuerst eine
    Instanz der Klasse <classname>ReflectionProperty</classname> erzeugen.
    Danach können Sie jede der oben angeführten Methoden der Instanz aufrufen.
   </para>
   <example>
    <title>Die <classname>ReflectionProperty</classname> Klasse verwenden</title>
    <programlisting role='php'>
<![CDATA[
<?php
class String
{
    public $laenge  = 5;
}

// Erzeuge eine Instanz der Klasse ReflectionPropety
$prop = new ReflectionProperty('String', 'laenge');

// Grundlegende Informationen ausgeben
printf(
    "===> Die %s%s%s%s Eigenschaft '%s' (welche %s wurde)\n" .
    "     hat die Modizifierer %s\n",
        $prop->isPublic() ? ' public' : '',
        $prop->isPrivate() ? ' private' : '',
        $prop->isProtected() ? ' protected' : '',
        $prop->isStatic() ? ' static' : '',
        $prop->getName(),
        $prop->isDefault() ? 'zur Kompilierungszeit deklariert' :
                             'zur Laufzeit erzeugt',
        var_export(Reflection::getModifierNames($prop->getModifiers()), 1)
);

// Eine Instanz von String erzeugen
$obj= new String();

// Aktuellen Wert abfragen
printf("---> Wert ist: ");
var_dump($prop->getValue($obj));

// Wert ändern
$prop->setValue($obj, 10);
printf("---> Setze Wert auf 10, neuer Wert ist: ");
var_dump($prop->getValue($obj));

// Objekt ausgeben
var_dump($obj);
?>
]]>
    </programlisting>
   </example>
   <note>
    <simpara>
     Der Versuch, den Wert einer private oder protected Klasseneigenschaft
     zu lesen oder zu setzen, wird darin enden, dass eine Exception geworfen
     wird.
    </simpara>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.reflection.reflectionextension">
   <title><classname>ReflectionExtension</classname></title>
   <para>
    Die <classname>ReflectionExtension</classname> Klasse lässt Sie
    Extensions zurückentwickeln. Man kann alle geladenen Extensions zur
    Laufzeit mittels <function>get_loaded_extensions</function> abrufen.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class ReflectionExtension implements Reflector {
    final private __clone()
    public __construct(string name)
    public string __toString()
    public static string export(string name, bool return)
    public string getName()
    public string getVersion()
    public ReflectionFunction[] getFunctions()
    public array getConstants()
    public array getINIEntries()
    public ReflectionClass[] getClasses()
    public array getClassNames()
     public string info()
}
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    Um einen Blick in eine Extension zu werfen, muss man zuerst eine Instanz
    der Klasse <classname>ReflectionExtension</classname> erzeugen. Danach kann
    man alle oben aufgeführten Methoden der Instanz aufrufen.
   </para>
   <example>
    <title>Die <classname>ReflectionExtension</classname> Klasse verwenden</title>
    <programlisting role='php'>
<![CDATA[
<?php
// Erzeuge eine neue Instanz der ReflectionExtension Klasse
$ext = new ReflectionExtension('standard');

// Grundlegende Informationen ausgeben
printf(
    "Name         : %s\n" .
    "Version      : %s\n" .
    "Funktionen   : [%d] %s\n" .
    "Konstanten   : [%d] %s\n" .
    "INI Einträge : [%d] %s\n" .
    "Klassen      : [%d] %s\n",
        $ext->getName(),
        $ext->getVersion() ? $ext->getVersion() : 'NO_VERSION',
        sizeof($ext->getFunctions()),
        var_export($ext->getFunctions(), 1),

        sizeof($ext->getConstants()),
        var_export($ext->getConstants(), 1),

        sizeof($ext->getINIEntries()),
        var_export($ext->getINIEntries(), 1),

        sizeof($ext->getClassNames()),
        var_export($ext->getClassNames(), 1)
);
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.reflection.extending">
   <title>Die Reflection Klassen erweitern</title>
   <para>
    Für den Fall, dass Sie spezialisierte Versionen der eingebauten Klassen
    erzeugen wollen (zum Beispiel, um kolorierte HTML Ausgaben zu erzeugen oder
    leicht zugängliche Klassenvariablen oder -methoden oder Hilfmethoden
    hinzuzufügen), können Sie fortfahren und die Klassen ableiten.
   </para>
   <example>
    <title>Erweiterung der eingebauten Klassen</title>
    <programlisting role='php'>
<![CDATA[
<?php
/**
 * M_Reflection_Method Klasse
 */
class My_Reflection_Method extends ReflectionMethod
{
    public $visibility = array();

    public function __construct($o, $m)
    {
        parent::__construct($o, $m);
        $this->visibility= Reflection::getModifierNames($this->getModifiers());
    }
}

/**
 * Demoklasse #1
 *
 */
class T {
    protected function x() {}
}

/**
 * Demoklasse #2
 *
 */
class U extends T {
    function x() {}
}

// Informationen ausgeben
var_dump(new My_Reflection_Method('U', 'x'));
?>
]]>
    </programlisting>
   </example>
   <note>
    <simpara>
     Achtung: Wenn Sie den Konstruktor überschreiben, denken Sie daran,
     den Vaterkonstruktor _vor_ jedem anderen Code den Sie hinzufügen aufzurufen.
     Unterlassung wird zu folgendem Ergebnis führen:
     <literal>
      Fatal error: Internal error: Failed to retrieve the reflection object
     </literal>
    </simpara>
   </note>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
