<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 306851 Maintainer: simp Status: ready -->
 <sect1 xml:id="language.oop5.iterations" xmlns="http://docbook.org/ns/docbook">
  <title>Objektiteration</title>
  <para>
   PHP 5 bietet eine Möglichkeit Objekte so zu definieren, dass es möglich ist
   eine Liste von Elementen zu durchlaufen, z.B. mit einem &foreach;-Statement.
   Standardmäßig werden alle <link linkend="language.oop5.visibility">sichtbaren</link>
   Eigenschaften für die Iteration benutzt.
  </para>

  <example>
   <title>Einfache Objektiteration</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    public $var1 = 'Wert 1';
    public $var2 = 'Wert 2';
    public $var3 = 'Wert 3';

    protected $protected = 'protected var';
    private   $private   = 'private var';

    function iterateVisible() {
       echo "MyClass::iterateVisible:\n";
       foreach($this as $key => $value) {
           print "$key => $value\n";
       }
    }
}

$class = new MyClass();

foreach($class as $key => $value) {
    print "$key => $value\n";
}
echo "\n";


$class->iterateVisible();

?>
]]>
   </programlisting>
   &example.outputs; 
   <screen role="php">
<![CDATA[
var1 => Wert 1
var2 => Wert 2
var3 => Wert 3

MyClass::iterateVisible:
var1 => Wert 1
var2 => Wert 2
var3 => Wert 3
protected => protected var
private => private var
]]>
   </screen>

  </example>

 <para>
  Wie die Ausgabe zeigt, lief das &foreach; über alle <link 
  linkend="language.oop5.visibility">sichtbaren</link> Variablen, auf die
  zugegriffen werden kann. Um es einen Schritt weiter zu treiben, kann man
  eines der PHP 5 internen <link
  linkend="language.oop5.interfaces">Interfaces</link>, nämlich 
  <varname>Iterator</varname>, implementieren. Das erlaubt dem Objekt zu entscheiden
  was und wie das Objekt iteriert wird.
 </para>

  <example>
   <title>Objektiteration mit implementiertem Iterator</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyIterator implements Iterator
{
    private $var = array();

    public function __construct($array)
    {
        if (is_array($array)) {
            $this->var = $array;
        }
    }

    public function rewind() {
        echo "zurückspulen\n";
        reset($this->var);
    }

    public function current() {
        $var = current($this->var);
        echo "aktuell: $var\n";
        return $var;
    }

    public function key() {
        $var = key($this->var);
        echo "key: $var\n";
        return $var;
    }

    public function next() {
        $var = next($this->var);
        echo "nächstes: $var\n";
        return $var;
    }

    public function valid() {
        $var = $this->current() !== false;
        echo "gültig: {$var}\n";
        return $var;
    }
}

$values = array(1,2,3);
$it = new MyIterator($values);

foreach ($it as $a => $b) {
    print "$a: $b\n";
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
zurückspulen
aktuell: 1
gültig: 1
aktuell: 1
key: 0
0: 1
nächstes: 2
aktuell: 2
gültig: 1
aktuell: 2
key: 1
1: 2
nächstes: 3
aktuell: 3
gültig: 1
aktuell: 3
key: 2
2: 3
nächstes:
aktuell:
gültig:
]]>
   </screen>

  </example>

  <para>
   Man kann eine Klasse ebenfalls so definieren, dass diese nicht alle Funktionen
   von <varname>Iterator</varname> definieren muss, indem man einfach das PHP 5
   <varname>IteratorAggregate</varname> Interface implementiert.
  </para>

  <example>
   <title>Objektiteration mit implementiertem IteratorAggregate</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyCollection implements IteratorAggregate
{
    private $items = array();
    private $count = 0;

    // benötigte Funktion des IteratorAggregate Interface
    public function getIterator() {
        return new MyIterator($this->items);
    }

    public function add($value) {
        $this->items[$this->count++] = $value;
    }
}

$coll = new MyCollection();
$coll->add('Wert 1');
$coll->add('Wert 2');
$coll->add('Wert 3');

foreach ($coll as $key => $val) {
    echo "key/value: [$key -> $val]\n\n";
}
?>
]]>
   </programlisting>
   &example.outputs;  
   <screen role="php">
<![CDATA[
zurückspulen
aktuell: Wert 1
gültig: 1
aktuell: Wert 1
key: 0
key/value: [0 -> Wert 1]

nächstes: Wert 2
aktuell: Wert 2
gültig: 1
aktuell: Wert 2
key: 1
key/value: [1 -> Wert 2]

nächstes: Wert 3
aktuell: Wert 3
gültig: 1
aktuell: Wert 3
key: 2
key/value: [2 -> Wert 3]

nächstes:
aktuell:
gültig:
]]>
   </screen>

  </example>

  <note>
   <para>
    Für mehr Beispiele für die Benutzung von Iteratoren siehe auch
    <link linkend="spl.iterators">SPL Erweiterung</link>.
   </para>
  </note> 

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
