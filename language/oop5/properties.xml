<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: simp Status: ready -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>Eigenschaften</title>

  <para>
   Variablen in einer Klasse werden "Eigenschaften" genannt. Die
   Begriffe "Attribute" oder "Felder" werden ebenfalls verwendet,
   um sich auf das selbe Konzept zu beziehen, aber innerhalb
   dieser Referenz wird der Begriff "Eigenschaften" verwendet.
   Diese werden definiert, indem man eines der Schlüsselwörter
   <literal>public</literal>, <literal>protected</literal>
   oder <literal>private</literal> gefolgt von einer regulären
   Variablendeklaration verwendet. Die Deklaration darf eine
   Initialisierung des Variablenwertes beinhalten, der zu
   setzende Wert muss dabei allerdings ein konstanter Wert
   sein - d.h. dieser muss zum Kompilierungszeitpunkt
   ausgewertet werden können und darf nicht von Informationen
   abhängen, die erst zur Laufzeit zur Verfügung stehen.
  </para>
  <para>
   Siehe <xref linkend="language.oop5.visibility" /> für mehr
   Informationen zur Bedeutung von <literal>public</literal>, 
   <literal>protected</literal> und <literal>private</literal>.
  </para>
  <note>
   <para>
    Um Abwärtskompatibilität mit PHP 4 zu gewährleisten, akzeptiert
    PHP 5 weiterhin die Verwendung des Schlüsselwortes 
    <literal>var</literal> zur Deklaration von Eigenschaften anstelle
    von (oder zusätzlich zu) <literal>public</literal>, 
    <literal>protected</literal> oder <literal>private</literal>.
    <literal>var</literal> wird jedoch nicht mehr benötigt.
    In den Versionen von PHP 5.0 bis 5.1.3 wurde die Verwendung
    von <literal>var</literal> als veraltet betrachtet und
    erzeugte eine <constant>E_STRICT</constant>-Warnung, aber
    seit PHP 5.1.3 ist dies nicht länger veraltet und erzeugt
    keine Warnung.
   </para>
   <para>
    Wenn eine Eigenschaft mittels <literal>var</literal> anstelle
    von <literal>public</literal>, <literal>protected</literal>
    oder <literal>private</literal> deklariert wird, so wird
    PHP 5 diese Eigenschaft so behandeln, als wäre sie mittels
    <literal>public</literal> deklariert worden.
   </para>
  </note>
  <para>
   Innerhalb der Methoden einer Klasse kann auf Eigenschaften, 
   Konstanten und Methoden in der Form 
   <varname>$this-&gt;Eigenschaft</varname> (wobei 
   <literal>Eigenschaft</literal> der Name der Eigenschaft ist)
   zugegriffen werden, solange nicht aus dem Kontext einer statischen
   Methode auf eine statische Eigenschaft zugegriffen wird. In diesem
   Fall kann mittels <varname>self::$Eigenschaft</varname> darauf
   zugegriffen werden. Siehe auch 
   <link linkend="language.oop5.static">Static Schlüsselwort</link>
   für mehr Informationen zu diesem Thema.
  </para>
  <para>
   Die Pseudo-Variable <varname>$this</varname> ist innerhalb
   jeder Klassenmethode verfügbar, wenn diese Methode im Kontext
   eines Objektes aufgerufen wird. <varname>$this</varname> ist
   eine Referenz auf das aufrufende Objekt (üblicherweise das
   Objekt, zu dem diese Methode gehört; möglicherweise ein anderes
   Objekt, wenn die Methode 
   <link linkend="language.oop5.static">statisch</link> aus einem
   sekundären Objekt aufgerufen wird).
  </para>

  <para>
   <example>
    <title>Deklaration von Eigenschaften</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // Ungültige Deklarationen von Eigenschaften:
   public $var1 = 'Hallo ' . 'Welt';
   public $var2 = <<<EOD
Hallo Welt
EOD;
   public $var3 = 1+2;
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Gültige Deklarationen von Eigenschaften:
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // Dies ist nur in PHP 5.3.0 oder später gültig.
   public $var8 = <<<'EOD'
Hallo Welt
EOD;
}
?>
]]>
    </programlisting>   
   </example>
  </para>

  <note>
   <para>
    Es gibt einige nützliche Funktionen für den Umgang mit Klassen
    und Objekten. Siehe hierzu
    <link linkend="ref.classobj">Klassen- und Objekt-Funktionen</link>.
   </para>
  </note>

  <para>
   Im Gegensatz zur
   <link linkend="language.types.string.syntax.heredoc">Heredoc-Syntax</link>
   kann die 
   <link linkend="language.types.string.syntax.nowdoc">Nowdoc-Syntax</link>
   in jedem Kontext für statische Daten verwendet werden, einschließlich
   der Deklaration von Eigenschaften.
   <example>
    <title>Beispiel für ein nowdoc zur Initialisierung einer Eigenschaft</title>
    <programlisting role="php">
<![CDATA[
<?php
class foo {
   // Seit PHP 5.3.0
   public $bar = <<<'EOT'
bar
EOT;
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    Unterstützung für Nowdoc wurde in PHP 5.3.0 hinzugefügt.
   </para>
  </note>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
