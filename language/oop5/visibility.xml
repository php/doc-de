<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7d7b378abd302430b8ce7cedb4b78c7033f5e88c Maintainer: wiesemann Status: wip -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Sichtbarkeit</title>
  <para>
   Die Sichtbarkeit einer Eigenschaft, Methode oder (von PHP 7.1.0 an) einer Konstante kann definiert werden, indem
   man der Deklaration eines der Schlüsselwörter <literal>public</literal>,
   <literal>protected</literal> oder <literal>private</literal> voranstellt.
   Auf public deklarierte Elemente kann von überall her zugegriffen werden.
   Protected beschränkt den Zugang auf Elternklassen und abgeleitete Klassen
   (sowie die Klasse, die das Element definiert). Private grenzt die Sichtbarkeit
   einzig auf die Klasse ein, die das Element definiert.
  </para>

  <sect2 xml:id="language.oop5.visibility-members">
   <title>Sichtbarkeit von Membern</title>
   <para>
     Klasseneigenschaften können als public, private oder protected definiert
     werden. Eigenschaften, die ohne explizites Schlüsselwort für die
     Sichtbarkeit deklariert sind, werden als public definiert.
   </para>
   <example>
    <title>Eigenschaftendeklaration</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Definiere MyClass
 */
class MyClass
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Funktioniert
echo $obj->protected; // Fataler Fehler
echo $obj->private; // Fataler Fehler
$obj->printHello(); // Zeigt Public, Protected und Private


/**
 * Definiere MyClass2
 */
class MyClass2 extends MyClass
{
    // Wir können die public- und protected-Eigenschaften neu deklarieren,
    // aber nicht die private
    public $public = 'Public2';
    protected $protected = 'Protected2';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj2->public; // Funktioniert
echo $obj2->protected; // Fataler Fehler
echo $obj2->private; // Undefiniert
$obj2->printHello(); // Zeigt Public2, Protected2, Undefined

?>
]]>
    </programlisting>
   </example>
   <sect3 xml:id="language.oop5.visibility-members-aviz">
    <title>Asymmetric Property Visibility</title>
    <simpara>
     As of PHP 8.4, properties may also have their
     visibility set asymmetrically, with a different scope for
     reading (<literal>get</literal>) and writing (<literal>set</literal>).
     Specifically, the <literal>set</literal> visibility may be
     specified separately, provided it is not more permissive than the
     default visibility.
    </simpara>
    <example>
     <title>Asymmetric Property visibility</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    public function __construct(
        public private(set) string $title,
        public protected(set) string $author,
        protected private(set) int $pubYear,
    ) {}
}

class SpecialBook extends Book
{
    public function update(string $author, int $year): void
    {
        $this->author = $author; // OK
        $this->pubYear = $year; // Fatal Error
    }
}

$b = new Book('How to PHP', 'Peter H. Peterson', 2024);

echo $b->title; // Works
echo $b->author; // Works
echo $b->pubYear; // Fatal Error

$b->title = 'How not to PHP'; // Fatal Error
$b->author = 'Pedro H. Peterson'; // Fatal Error
$b->pubYear = 2023; // Fatal Error
?>
]]>
     </programlisting>
    </example>
    <para>There are a few caveats regarding asymmetric visibility:</para>
    <itemizedlist>
     <listitem>
      <simpara>
       Only typed properties may have a separate <literal>set</literal> visibility.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       The <literal>set</literal> visibility must be the same
       as <literal>get</literal> or more restrictive. That is,
       <code>public protected(set)</code> and <code>protected protected(set)</code>
       are allowed, but <code>protected public(set)</code> will cause a syntax error.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       If a property is <literal>public</literal>, then the main visibility may be
       omitted.  That is, <code>public private(set)</code> and <code>private(set)</code>
       will have the same result.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       A property with <literal>private(set)</literal> visibility
       is automatically <literal>final</literal>, and may not be redeclared in a child class.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Obtaining a reference to a property follows <literal>set</literal> visibility, not <literal>get</literal>.
       That is because a reference may be used to modify the property value.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Similarly, trying to write to an array property involves both a <literal>get</literal> and
       <literal>set</literal> operation internally, and therefore will follow the <literal>set</literal>
       visibility, as that is always the more restrictive.
      </simpara>
     </listitem>
    </itemizedlist>
    <simpara>
     When a class extends another, the child class may redefine
     any property that is not <literal>final</literal>.  When doing so,
     it may widen either the main visibility or the <literal>set</literal>
     visibility, provided that the new visibility is the same or wider
     than the parent class.  However, be aware that if a <literal>private</literal>
     property is overridden, it does not actually change the parent's property
     but creates a new property with a different internal name.
    </simpara>
    <example>
     <title>Asymmetric Property inheritance</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    protected string $title;
    public protected(set) string $author;
    protected private(set) int $pubYear;
}

class SpecialBook extends Book
{
    public protected(set) $title; // OK, as reading is wider and writing the same.
    public string $author; // OK, as reading is the same and writing is wider.
    public protected(set) int $pubYear; // Fatal Error. private(set) properties are final.
}
?>
]]>
     </programlisting>
    </example>
   </sect3>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Sichtbarkeit von Methoden</title>
   <para>
    Klassenmethoden müssen mit public, private oder protected definiert werden.
    Methoden ohne jede explizite Deklaration sind als public definiert.
   </para>
   <example>
    <title>Methodendeklaration</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Definiere MyClass
 */
class MyClass
{
    // Deklariert einen public Konstruktor
    public function __construct() { }

    // Deklariere eine public Funktion
    public function MyPublic() { }

    // Deklariere eine protected Funktion
    protected function MyProtected() { }

    // Deklariere eine private Funktion
    private function MyPrivate() { }

    // Dies ist public
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Funktioniert
$myclass->MyProtected(); // Fataler Fehler
$myclass->MyPrivate(); // Fataler Fehler
$myclass->Foo(); // Public, Protected und Private funktionieren


/**
 * Definiere MyClass2
 */
class MyClass2 extends MyClass
{
    // Dies ist public
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Fataler Fehler
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Funktioniert
$myclass2->Foo2(); // Public und Protected funktionieren, Private nicht

class Bar
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }

    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }

    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new Foo();
$myFoo->test(); // Bar::testPrivate
                // Foo::testPublic
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-constants">
   <title>Sichtbarkeit von Konstanten</title>
   <para>
    Von PHP 7.1.0 an können Klassenkonstanten als public, private, oder
    protected definiert werden. Konstanten, die ohne eine explizite
    Sichtbarkeitsangabe deklariert wurden, sind public.
   </para>
   <example>
    <title>Konstantendeklaration von PHP 7.1.0 an</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Definiere MyClass
 */
class MyClass
{
    // Deklariere eine öffentliche Konstante
    public const MY_PUBLIC = 'öffentlich';

    // Deklariere eine geschützte Konstante
    protected const MY_PROTECTED = 'geschützt';

    // Deklariere eine private Konstante
    private const MY_PRIVATE = 'privat';

    public function foo()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE;
    }
}

$myclass = new MyClass();
MyClass::MY_PUBLIC; // funktioniert
MyClass::MY_PROTECTED; // fataler Fehler
MyClass::MY_PRIVATE; // fataler Fehler
$myclass->foo(); // öffentlich, geschützt und private funktioniert


/**
 * Definiere MyClass2
 */
class MyClass2 extends MyClass
{
    // Dies ist öffentlich
    function foo2()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE; // fataler Fehler
    }
}

$myclass2 = new MyClass2;
echo MyClass2::MY_PUBLIC; // funktioniert
$myclass2->foo2(); // öffentlich und geschützt funktioniert, aber nicht privat
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
   <title>Sichtbarkeit von anderen Objekten</title>
   <para>
    Objekte des gleichen Types haben untereinander Zugriff auf die als private
    und protected markierten Member, obwohl es sich nicht um die
    gleichen Instanzen handelt. Dies liegt daran, dass die Details über die
    Implementierung innerhalb solcher Objekte bekannt sind.
   </para>
   <example>
    <title>Zugriff auf als private markierte Member des gleichen Objekttyps</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Zugriff auf die private Methode';
    }

    public function baz(Test $other)
    {
        // Ändern der privaten Eigenschaft ist möglich:
        $other->foo = 'Hallo';
        var_dump($other->foo);

        // Aufruf der privaten Methode ist ebenfalls möglich:
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(5) "Hallo"
Zugriff auf die private Methode
+]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
