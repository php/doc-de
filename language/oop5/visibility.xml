<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283798 Maintainer: nobody Status: ready -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Sichtbarkeit</title>
  <para>
   Die Sichtbarkeit einer Eigenschaft oder Methode kann definiert werden, indem
   man der Deklaration eines der Schlüsselwörter public, protected oder 
   private voranstellt. Auf public deklarierte Elemente kann von überall her
   zugegriffen werden. Protected beschränkt den Zugang auf Vaterklassen und 
   abgeleitete Klassen (sowie die Klasse die das Element definiert). Private 
   grenzt die Sichtbarkeit einzig auf die Klasse ein, die das Element definiert.
  </para>
  <sect2 xml:id="language.oop5.visiblity-members">
   <title>Sichtbarkeit von Membern</title>
   <para>
   Klassenmember müssen mitteld public, private oder protected definiert werden.
   </para>
   <para>
    <example>
     <title>Memberdeklaration</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Definiere MyClass
 */
class MyClass
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Funktioniert
echo $obj->protected; // Fataler Fehler
echo $obj->private; // Fataler Fehler
$obj->printHello(); // Zeigt Public, Protected und Private


/**
 * Definiere MyClass2
 */
class MyClass2 extends MyClass
{
    // Wir können die public und protected Methoden neu deklarieren, 
    // aber nicht private
    protected $protected = 'Protected2';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj2->public; // Funktioniert
echo $obj2->private; // Undefiniert
echo $obj2->protected; // Fataler Fehler
$obj2->printHello(); // Zeigt Public, Protected2, Undefined

?> 
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <simpara>
     Die PHP 4 Methode, Variablen mit dem Schlüsselwort <emphasis>var</emphasis>
     zu deklarieren, ist aus Gründen der Abswärtskompatibilität weiterhin
     unterstützt (als Synonym für das public-Schlüsselwort). In PHP 5
     vor 5.1.3 hat dessen Verwendung eine <constant>E_STRICT</constant>-Warnung
     hervorgerufen.
    </simpara>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Sichtbarkeit von Methoden</title>
   <para>
    Klassenmethoden müssen mit public, private oder protected definiert werden.
    Methoden ohne jede Deklaration sind als public definiert.
   </para>
   <para>
    <example>
     <title>Methodendeklaration</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Definiere MyClass
 */
class MyClass
{
    // Deklariert einen public Konstruktor
    public function __construct() { }

    // Deklariere eine public Funktion
    public function MyPublic() { }

    // Deklariere eine protected Funktion
    protected function MyProtected() { }

    // Deklariere eine private Funktion
    private function MyPrivate() { }

    // Dies ist public
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Funktioniert
$myclass->MyProtected(); // Fataler Fehler
$myclass->MyPrivate(); // Fataler Fehler
$myclass->Foo(); // Public, Protected und Private funktionieren


/**
 * Definiere MyClass2
 */
class MyClass2 extends MyClass
{
    // Dies ist public
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Fataler Fehler
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Funktioniert
$myclass2->Foo2(); // Public und Protected funktionieren, Private nicht

class Bar 
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar 
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new foo();
$myFoo->test(); // Bar::testPrivate 
                // Foo::testPublic
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
