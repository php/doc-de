<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335484 Maintainer: hholzgra Status: ready -->
 <sect1 xml:id="language.oop5.typehinting" xmlns="http://docbook.org/ns/docbook">
  <title>Type Hinting</title>
  <para>
   PHP 5 führt Type Hinting ein. Funktionen sind damit fähig, Parameter zu
   zwingen, Objekte (indem man den Namen der Klasse im Funktionsprototyp
   spezifiziert), Interfaces, Arrays (seit PHP 5.1) oder <type>callable</type>
   zu sein. Wird dabei <type>NULL</type>
   als Vorgabewert für einen Parameter angegeben so ist dies ein weiterer
   gültiger Aufrufwert neben dem spezifizierten Typ.
  </para>

  <para>
   Wenn eine Klasse oder ein Interface als Type Hint angegeben wird, dann sind
   alle ihre Kinder bzw. seine Implementierungen ebenfalls erlaubt.
  </para>

  <para>
   Type Hints können nicht mit skalaren Typen wie <type>int</type> oder
   <type>string</type> verwendet werden.
   <link linkend="language.types.resource">Ressourcen</link> und
   <link linkend="language.oop5.traits">Traits</link> sind ebenfalls nicht erlaubt.
  </para>
  
  <example>
   <title>Type Hinting Beispiele</title>
    <programlisting role="php">
<![CDATA[
<?php
// Eine Beispielklasse
class MyClass
{
    /**
     * Eine Testfunktion
     *
     * Der erste Parameter muss ein Objekt des Typs OtherClass sein
     */
    public function test(OtherClass $otherclass) {
        echo $otherclass->var;
    }


    /**
     * Eine weitere Testfunktion
     *
     * Der erste Parameter muss ein Array sein
     */
    public function test_array(array $input_array) {
        print_r($input_array);
    }

    /**
     * Der erste Parameter muss ein Iterator sein
     */
    public function test_interface(Traversable $iterator) {
        echo get_class($iterator);
    }

    /**
     * Der erste Parameter muss ein callable sein
     */
    public function test_callable(callable $callback, $data) {
        call_user_func($callback, $data);
    }
}

// Eine weitere Beispielklasse
class OtherClass {
    public $var = 'Hallo Welt';
}
?>
]]>
   </programlisting>
   <para>
    Wird der Type Hint nicht erfüllt, führt dies zu einem abfangbaren fatalen Fehler.
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Eine Instanz jeder Klasse
$myclass = new MyClass;
$otherclass = new OtherClass;

// Fatal Error: Argument 1 must be an object of class OtherClass
$myclass->test('hello');

// Fatal Error: Argument 1 must be an instance of OtherClass
$foo = new stdClass;
$myclass->test($foo);

// Fatal Error: Argument 1 must not be null
$myclass->test(null);

// Funktioniert: Gibt Hallo Welt aus
$myclass->test($otherclass);

// Fatal Error: Argument 1 must be an array
$myclass->test_array('a string');

// Funktioniert: Gibt das Array aus
$myclass->test_array(array('a', 'b', 'c'));

// Funktioniert: Gibt das ArrayObject aus
$myclass->test_interface(new ArrayObject(array()));

// Funktioniert: Gibt int(1) aus
$myclass->test_callable('var_dump', 1);
?>
]]>
   </programlisting>
   <para>
    Type Hinting funktioniert ebenfalls mit Methoden
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Eine Beispielklasse
class MyClass {
    public $var = 'Hallo Welt';
}

/**
 * Eine Testfunktion
 *
 * Der erste Parameter muss ein Objekt vom Typ MyClass sein
 */
function myFunction (MyClass $foo) {
    echo $foo->var;
}

// Funktioniert
$myclass = new MyClass;
myFunction($myclass);
?>
]]>
   </programlisting>
   <para>
    Type hinting mit möglichen NULL Werten:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

/* Akzeptiert NULL Werte */
function test(stdClass $obj = NULL) {

}

test(NULL);
test(new stdClass);

?>
]]>
   </programlisting>
  </example>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
