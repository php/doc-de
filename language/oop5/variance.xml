<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 871df69f47f578c79cad7889f7e27d4b737baf4d Maintainer: simp Status: ready -->

<sect1 xml:id="language.oop5.variance" xmlns="http://docbook.org/ns/docbook">
 <title>Kovarianz und Kontravarianz</title>

 <para>
  Mit PHP 7.2.0 wurde teilweise Kontravarianz eingeführt, indem Typeneinschränkungen
  bei Parametern von Kindmethoden entfernt wurden.
  Mit PHP 7.4.0 wurde dann vollständige Unterstützung für Kovarianz und 
  Kontravarianz eingeführt.
 </para>
 <para>
  Kovarianz erlaubt es den Methoden eines Kindes, einen spezifischeren Typen als die 
  Elternmethode für den Rückgabewert zurückzugeben.
  Auf der anderen Seite erlaubt die Kontravarianz einen weniger spezifischen Parametertypen
  in einer Kindmethode als in der Elternmethode.
 </para>
 <para>
  Eine Typdeklaration wird in den folgenden Fällen als spezifischer angesehen:
  <itemizedlist>
   <listitem>
    <simpara>
     Ein Typ wird aus einem Vereinigungstypen entfernt
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Ein Klassentyp wird zu dem Typen eines seiner Kinder geändert
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Der Typ <type>float</type> wird zu <type>int</type> geändert
    </simpara>
   </listitem>
  </itemizedlist>

  Falls das Gegenteil zutrifft, wird ein Klassentyp als weniger 
  spezifisch angesehen.
 </para>

 <sect2 xml:id="language.oop5.variance.covariance">
  <title>Kovarianz</title>

  <para>
   Um Kovarianz zu illustrieren, wird eine einfache abstrakte Elternklasse 
   <varname>Tier</varname> erzeugt. <varname>Tier</varname> wird von seinen
   Kindern <varname>Katze</varname> und <varname>Hund</varname> beerbt.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class Tier
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    abstract public function gibLaut();
}

class Hund extends Tier
{
    public function gibLaut()
    {
        echo $this->name . " bellt";
    }
}

class Katze extends Tier 
{
    public function gibLaut()
    {
        echo $this->name . " miaut";
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Beachtenswert ist, dass keine der Methoden hier einen Wert zurückgibt. Es werden nun
   ein paar Factories hinzugefügt, die ein neues Objekt der Klassen <varname>Tier</varname>, 
   <varname>Katze</varname> oder <varname>Hund</varname> erzeugen.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface TierHeim
{
    public function adoptiere(string $name): Tier;
}

class KatzenHeim implements TierHeim
{
    public function adoptiere(string $name): Katze // statt den Klassentyp Tier zurückzugeben, kann hier Typ Katze verwendet werden
    {
        return new Katze($name);
    }
}

class HundeHeim implements TierHeim
{
    public function adoptiere(string $name): Hund // statt den Klassentyp Tier zurückzugeben, kann hier Typ Hund verwendet werden
    {
        return new Hund($name);
    }
}

$kaetzchen = (new KatzenHeim)->adoptiere("Ricky");
$kaetzchen->gibLaut();
echo "\n";

$huendchen = (new HundeHeim)->adoptiere("Mavrick");
$huendchen->gibLaut();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Ricky miaut
Mavrick bellt
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.oop5.variance.contravariance">
  <title>Kontravarianz</title>

  <para>
   Um das vorherige Beispiel mit den Klassen <varname>Tier</varname>, 
   <varname>Katze</varname> und <varname>Hund</varname> fortzusetzen,
   werden nun die Klassen <varname>Nahrung</varname> sowie <varname>Tierfutter</varname>
   definiert, sowie auch eine Methode <varname>iss(Tierfutter $futter)</varname> zur
   abstrakten Klasse <varname>Tier</varname> hinzugefügt.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Nahrung {}

class Tierfutter extends Nahrung {}

abstract class Tier
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function iss(Tierfutter $futter)
    {
        echo $this->name . " isst " . get_class($futter);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Um das Verhalten der Kontravarianz zu sehen, wird nun die Methode
   <varname>iss</varname> in der Klasse <varname>Hund</varname> überschrieben,
   um jedes Objekt der Klasse <varname>Nahrung</varname> zuzulassen. Die Klasse
   <varname>Katze</varname> bleibt unverändert.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Hund extends Tier
{
    public function iss(Nahrung $futter) {
        echo $this->name . " isst " . get_class($futter);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Das folgende Beispiel zeigt das Verhalten der Kontravarianz.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$kaetzchen = (new KatzenHeim)->adoptiere("Ricky");
$katzenFutter = new Tierfutter();
$kaetzchen->iss($katzenFutter);
echo "\n";

$huendchen = (new HundeHeim)->adoptiere("Mavrick");
$banane = new Nahrung();
$huendchen->iss($banane);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Ricky isst Tierfutter
Mavrick isst Nahrung
]]>
   </screen>

   <para>
    Was geschieht nun aber, wenn man der <varname>iss</varname>-Methode von 
    <varname>$kaetzchen</varname> versucht die <varname>$banane</varname>
    zu übergeben?
   </para>

   <programlisting role="php">
<![CDATA[
$kitty->iss($banane);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught TypeError: Argument 1 passed to Tier::iss() must be an instance of Tierfutter, instance of Nahrung given
]]>
   </screen>
  </informalexample>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
