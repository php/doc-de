<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331135 Maintainer: simp Status: ready -->
 <sect1 xml:id="language.oop5.cloning" xmlns="http://docbook.org/ns/docbook">
  <title>Objekte klonen</title>

  <para>
   Eine Kopie eines Objektes mit vollständig replizierten Eigenschaften zu
   erzeugen ist nicht immer das gewünschte Verhalten. Ein gutes Beispiel für
   die Notwendigkeit von Kopierkonstruktoren ist ein Objekt, welches ein GTK
   Fenster repräsentiert und dieses Objekt enthält die Ressource des GTK-Fensters.
   Wenn Sie ein Duplikat dieses Objektes erzeugen, könnten Sie
   ein neues Fenster mit gleichen Eigenschaften erzeugen wollen und das neue
   Objekt soll die Ressource des neuen Fensters speichern.
   Ein weiteres Beispiel ist ein Objekt, welches eine Referenz auf ein anderes
   Objekt, das es benutzt, hält und wenn das Vaterobjekt repliziert wird, will
   man eine neue Instanz dieses anderen Objektes erzeugen, damit das Replikat
   eine eigene Kopie besitzt.
  </para>

  <para>
   Eine Objektkopie wird durch die Nutzung des <emphasis>clone</emphasis> 
   Schlüsselwortes (welches wenn möglich die 
   <link linkend="object.clone">__clone()</link>-Methode des Objektes aufruft) 
   erzeugt. Die <link linkend="object.clone">__clone()</link>-Methode eines 
   Objektes kann nicht direkt aufgerufen werden.
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
$kopie_des_objektes = clone $objekt;
]]>
   </programlisting>
  </informalexample>

  <para>
   Wenn ein Objekt geklont wird, wird PHP 5 eine seichte Kopie der Eigenschaften
   des Objektes durchführen. Alle Eigenschaften, die Referenzen auf andere
   Variablen sind, werden Referenzen bleiben.
  </para>

  <methodsynopsis xml:id="object.clone">
   <type>void</type><methodname>__clone</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Sobald der Klonvorgang abgeschlossen und eine <link linkend="object.clone">__clone()</link>-
   Methode definiert ist, so wird die <link linkend="object.clone">__clone()</link>-Methode
   des neu erzeugten Objekts aufgerufen, damit alle notwendigen Eigenschaften verändert werden
   können.
  </para>

  <example>
   <title>Ein Objekt klonen</title>
   <programlisting role="php">
<![CDATA[
<?php
class SubObject
{
    static $instanzen = 0;
    public $instanz;

    public function __construct() {
        $this->instanz = ++self::$instanzen;
    }

    public function __clone() {
        $this->instanz = ++self::$instanzen;
    }
}

class MyCloneable
{
    public $objekt1;
    public $objekt2;

    function __clone()
    {
        // Erzwinge eine Kopie von this->object,
        // andernfalls wird es auf das selbe Objekt zeigen
        $this->objekt1 = clone $this->objekt1;
    }
}

$obj = new MyCloneable();

$obj->objekt1 = new SubObject();
$obj->objekt2 = new SubObject();

$obj2 = clone $obj;


print("Original Objekt:\n");
print_r($obj);

print("geklontes Objekt:\n");
print_r($obj2);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
Original Objekt:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instanz] => 1
        )

    [object2] => SubObject Object
        (
            [instanz] => 2
        )

)
geklontes Object:
MyCloneable Object
(
    [objekt1] => SubObject Object
        (
            [instanz] => 3
        )

    [objekt2] => SubObject Object
        (
            [instanz] => 2
        )

)
]]>

   </screen>

  </example>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
