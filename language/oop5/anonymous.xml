<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339452 Maintainer: cmb Status: ready -->

<sect1 xml:id="language.oop5.anonymous" xmlns="http://docbook.org/ns/docbook">
 <title>Anonyme Klassen</title>

 <para>
  Unterstützung für anonyme Klassen wurde in PHP 7 hinzugefügt. Anonyme Klassen
  sind nützlich, wenn einfache Objekte zum einmaligen Gebrauch erzeugt werden
  müssen.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

// Code vor PHP 7
class Logger
{
    public function log($msg)
    {
        echo $msg;
    }
}

$util->setLogger(new Logger());

// PHP 7+ Code
$util->setLogger(new class {
    public function log($msg)
    {
        echo $msg;
    }
});
]]>
  </programlisting>
 </informalexample>

 <para>
  Sie können Argumente über ihren Konstruktor empfangen, andere Klassen
  erweitern, Interfaces implementieren und Traits verwenden, so wie das eine
  normale Klasse auch kann:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class SomeClass {}
interface SomeInterface {}
trait SomeTrait {}

var_dump(new class(10) extends SomeClass implements SomeInterface {
    private $num;

    public function __construct($num)
    {
        $this->num = $num;
    }

    use SomeTrait;
});
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(class@anonymous)#1 (1) {
  ["Command line code0x104c5b612":"class@anonymous":private]=>
  int(10)
}
]]>
  </screen>
 </informalexample>

 <para>
  Das Verschachteln einer anonymen Klasse innerhalb einer anderen Klasse gibt
  jener keinen Zugriff auf private oder geschützte Methoden oder Eigenschaften
  der äußeren Klasse. Um die geschützten Methoden oder Eigenschaften der äußeren
  Klasse zu verwenden, kann die anonyme Klasse die äußere Klasse erweitern. Um
  private Eigenschaften der äußeren Klasse in der anonymen
  Klasse zu verwenden, müssen sie dem Konstruktor übergeben werden:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class Outer
{
    private $prop = 1;
    protected $prop2 = 2;

    protected function func1()
    {
        return 3;
    }

    public function func2()
    {
        return new class($this->prop) extends Outer {
            private $prop3;

            public function __construct($prop)
            {
                $this->prop3 = $prop;
            }

            public function func3()
            {
                return $this->prop2 + $this->prop3 + $this->func1();
            }
        };
    }
}

echo (new Outer)->func2()->func3();
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
6
]]>
  </screen>
 </informalexample>
 <para>
  All objects created by the same anonymous class declaration are instances of
  that very class.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
function anonymous_class()
{
    return new class {};
}

if (get_class(anonymous_class()) === get_class(anonymous_class())) {
    echo 'same class';
} else {
    echo 'different class';
}]]>
 </programlisting>
 &example.outputs;
 <screen>
<![CDATA[
same class
]]>
  </screen>
 </informalexample>

 <note>
  <para>
   Es ist zu beachten, dass anonymen Klassen von der Engine ein Name zugewiesen
   wird, wie im folgenden Beispiel gezeigt. Dieser Name muss als
   Implementierungsdetail eingestuft werden, auf dass sich nicht verlassen
   werden sollte.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo get_class(new class {});
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
class@anonymous/in/oNi1A0x7f8636ad2021
]]>
   </screen>
  </informalexample>
 </note>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
