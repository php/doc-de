<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 344091 Maintainer: hholzgra Status: ready -->
<!-- Credits: simp -->
 <sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
  <title>Konstruktoren und Destruktoren</title>

  <sect2 xml:id="language.oop5.decon.constructor">
   <title>Konstruktor</title>
   <methodsynopsis xml:id="object.construct">
    <type>void</type><methodname>__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>args</parameter><initializer>""</initializer></methodparam>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    PHP 5 erlaubt es Entwicklern, Konstruktormethoden für Klassen zu deklarieren.
    Klassen mit Konstruktormethoden rufen diese für jedes neu erzeugte Objekt
    auf, so dass Konstruktoren für alle Initialisierungen passend sind, 
    die das Objekt brauchen könnte bevor es benutzt wird.
   </para>
   <note>
    <simpara>
     Konstruktoren von Vaterklassen werden nicht implizit aufgerufen, wenn die
     Kindklasse einen Konstruktor definiert. Um einen Vaterkonstruktor zu benutzen
     ist ein Aufruf von <function>parent::__construct</function> innerhalb des 
     Kindkonstruktors notwendig. Falls das Kind keinen Konstruktor definiert,
     dann kann er von der Vaterklasse genau wie eine normale Klassenmethode
     geerbt werden (falls er nicht als privat deklariert wurde).
    </simpara>
   </note>
   <example>
    <title>Die neuen, vereinheitlichten Konstruktoren verwenden</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
    function __construct() {
        print "Im BaseClass Konstruktor\n";
    }
}

class SubClass extends BaseClass {
    function __construct() {
        parent::__construct();
        print "Im SubClass Konstruktor\n";
    }
}

class OtherSubClass extends BaseClass {
    // erbt den Konstruktor von BaseClass
}

// In BaseClass constructor
$obj = new BaseClass();

// In BaseClass constructor
// In SubClass constructor
$obj = new SubClass();

// In BaseClass constructor
$obj = new OtherSubClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Aus Gründen der Abwärtskompatibilität mit PHP 3 und 4 sucht PHP, falls keine
    <link linkend="object.construct">__construct()</link> Methode vorhanden ist,
    nach einem
    Konstruktur des alten Stils, d.h. einer Methode mit dem selben Namen wie die Klasse.
    Der einzige Fall in dem somit Kompatibilitätsprobleme auftreten können, ist wenn
    die Klasse eine Methode <link linkend="object.construct">__construct()</link> definiert,
    welche jedoch für andere Zwecke benutzt wird.
   </para>
   <warning>
    <simpara>
     Konstruktoren des alten Stils wurden in PHP 7.0
     <emphasis>MISSBILLIGT</emphasis>, und werden in einer zukünftigen Version
     entfernt. Neuer Code sollte immer 
     <link linkend="object.construct">__construct()</link> verwenden.
    </simpara>
   </warning>
   <para>
    Im Gegensatz zu anderen Methoden, generiert PHP keinen <constant>E_STRICT</constant>
    Fehler, wenn <link linkend="object.construct">__construct()</link> in einer Kindklasse
    andere Parameter definiert, als die <link linkend="object.construct">__construct()</link>
    Methode der Elternklasse.
   </para>
   <para>
    Seit PHP 5.3.3 werden Methoden, welche mit dem Klassennamen übereinstimmen, nicht länger
    als Konstruktoren behandelt, wenn die Klasse sich in einem Namespace befindet. Klassen,
    welche sich nicht in einem Namespace befinden, betrifft dies jedoch nicht.
   </para>
   <example>
    <title>Konstruktoren in Klassen in Namespaces</title>
    <programlisting role="php">
<![CDATA[
<?php
namespace Foo;
class Bar {
    public function Bar() {
        // wird in PHP 5.3.0-5.3.2 als Konstruktor behandelt
        // wird in PHP 5.3.3 und höher als reguläre Methode behandelt
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.decon.destructor">
   <title>Destruktor</title>
   <methodsynopsis xml:id="object.destruct">
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP 5 führt ein Destruktorkonzept ähnlich dem anderer objektorientierter
    Programmiersprachen wie C++ ein. Die Destruktormethode wird aufgerufen,
    sobald es keine weiteren Referenzen auf ein bestimmtes Objekt mehr gibt,
    oder in beliebiger Reihenfolge am Ende des Skripts.
   </para>
   <example>
    <title>Destruktor Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
    function __construct() {
        print "Im Konstruktor\n";
        $this->name = "MyDestructableClass";
    }

    function __destruct() {
        print "Zerstoere " . $this->name . "\n";
    }
}

$obj = new MyDestructableClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Wie Konstruktoren auch, werden Vaterdestruktoren nicht implizit durch die
    Engine aufgerufen. Um einen Vaterdestruktor zu benutzen muss man
    explizit die Funktion <function>parent::__destruct</function> in der
    Destruktorimplementierung aufrufen. Ebenso wie Konstruktoren kann eine Kindklasse
    den Destruktor des Vaters erben, falls sie keinen eigenen implementiert.
   </para>
   <para>
    Der Destruktor wird aufgerufen, wenn das Script mittels <function>exit</function>
    abgebrochen wird. Wenn <function>exit</function> innerhalb eines Destruktors
    aufgerufen wird, verhindert das die Ausführung von jeglichen weiteren Shutdown
    Routinen.
   </para>
   <note>
    <para>
     Der Destruktor wird während der Skript Abschaltung aufgerufen, weshalb die
     Header immer bereits gesendet sind. Das aktuelle Verzeichnis während der
     Beendigungsphase des Skripts kann bei einigen SAPIs (z.B. Apache)
     ein anderes sein.
   </para>
   </note>
   <note>
    <para>
     Der Versuch eine Exception aus einem Destruktor (der in der Beendigungsphase
     des Skripts aufgerufen wurde) heraus zu werfen wird
     einen fatalen Fehler auslösen.
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
