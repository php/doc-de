<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.11 Maintainer: simp Status: ready -->
 <sect1 id="language.oop5.decon">
  <title>Konstruktoren und Destruktoren</title>

  <sect2 id="language.oop5.decon.constructor">
   <title>Konstruktor</title>
   <methodsynopsis>
    <type>void</type><methodname>__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    PHP 5 erlaubt es Entwicklern, Konstruktormethoden für Klassen zu deklarieren.
    Klassen mit Konstruktormethoden rufen diese für jedes neu erzeugte Objekt
    auf, so dass Konstruktoren für alle Initialisierungen passend sind, 
    die das Objekt brauchen könnte bevor es benutzt wird.
   </para>
   <note>
    <simpara>
     Konstruktoren von Vaterklassen werden nicht implizit aufgerufen, wenn die
     Kindklasse einen Konstruktor definiert. Um einen Vaterkonstruktor zu benutzen
     ist ein Aufruf von <function>parent::__construct</function> innerhalb des 
     Kindkonstruktors notwendig.
    </simpara>
   </note>
   <example>
    <title>Die neuen, vereinheitlichten Konstruktoren verwenden</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "Im BaseClass Konstruktor\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "Im SubClass Konstruktor\n";
   }
}

$obj = new BaseClass();
$obj = new SubClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Für die Abwärtskompatibilität sucht PHP 5 nach einer Konstruktorfunktion 
    nach dem alten Stil mit dem Namen der Klasse, falls es keine
    <function>__construct</function> Funktion für eine Klasse findet.
    Effektiv bedeutet das, dass der einzige Fall mit Kompatibilitätsproblemen
    derjenige einer Klasse mit dem Namen <function>__construct</function> ist, 
    welche für andere Zwecke benutzt wird.
   </para>
  </sect2>

  <sect2 id="language.oop5.decon.destructor">
   <title>Destruktor</title>
   <methodsynopsis>
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP 5 führt ein Destruktorkonzept ähnlich dem anderer objektorientierter
    Programmiersprachen wie C++ ein. Die Destruktormethode wird aufgerufen,
    sobald alle Referenzen auf ein bestimmtes Objekt entfernt werden oder
    wenn das Objekt explizit zerstört wird.
   </para>
   <example>
    <title>Destruktor Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
   function __construct() {
       print "Im Konstruktor\n";
       $this->name = "MyDestructableClass";
   }

   function __destruct() {
       print "Zerstoere " . $this->name . "\n";
   }
}

$obj = new MyDestructableClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Wie Konstruktoren auch, werden Vaterdestruktoren nicht implizit durch die
    Engine aufgerufen. Um einen Vaterdestruktor zu benutzen muss man
    explizit die Funktion <function>parent::__destruct</function> in der
    Destruktorimplementierung aufrufen
   </para>
   <note>
    <para>
     Der Destruktor wird während der Skript Abschaltung aufgerufen, weshalb die
     Header immer bereits gesendet sind.
   </para>
   </note>
   <note>
    <para>
     Der Versucht eine Exception aus einem Destruktor heraus zu werfen wird
     einen fatalen Fehler auslösen.
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
