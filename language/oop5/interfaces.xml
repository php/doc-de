<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334698 Maintainer: hholzgra Status: ready -->
 <sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook">
  <title>Interfaces</title>
  <para>
   Interfaces erlauben die Erzeugung von Code, der spezifiziert, welche
   Methoden eine Klasse implementieren muss, ohne definieren zu müssen,
   wie diese Methoden behandelt werden.
  </para>
  <para>
   Interfaces werden mit dem <literal>interface</literal> Schlüsselwort auf dieselbe Weise wie
   eine Standardklasse definiert, ohne dass eine der Methoden ihren
   Inhalt definiert.
  </para>
  <para>
   Alle in einem Interface deklarierten Methoden müssen public sein; dies liegt
   in der Natur eines Interfaces.
  </para>
  <sect2 xml:id="language.oop5.interfaces.implements">
   <title><literal>implements</literal></title>
   <para>
    Um ein Interface zu implementieren, wird der
    <literal>implements</literal>-Operator benutzt. Alle Methoden des
    Interfaces müssen innerhalb der Klasse implementiert werden;
    Unterlassung wird zu einem fatalen Fehler führen.
    Klassen dürfen, falls dies gewünscht wird, mehr als ein Interface 
    implementieren, indem man die Interfaces voneinander mit einem Komma
    abtrennt.
   </para>
  <note>
   <para>
    Vor PHP 5.3.9 konnte eine Klasse nicht zwei Interfaces, die identische Funktionsnamen
    deklarieren, implementieren, da dies zu Doppeldeutigkeiten führen würde.
    Neuere Versionen von PHP erlauben dies, solange die doppelten Methoden die
    gleiche Signatur haben.
   </para>
  </note>
  <note>
   <para>
    Ein Interface kann ebenso wie eine Klasse mit Hilfe des Schlüsselwortes
    <link linkend="language.oop5.inheritance">extends</link> erweitert werden.
   </para>
  </note>
   <note>
    <para>
     Die Klasse, die das Interface implementiert, muss genau die gleichen
     Methoden-Signaturen, die im Interface definiert sind, verwenden.
     Andernfalls führt das zu einem fatalem Fehler.
     </para>
    </note>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.constants">
   <title><literal>Konstanten</literal></title>
   <para>
    Ein Interface kann Konstanten definieren. Interface-Konstanten funktionieren
    genauso wie <link linkend="language.oop5.constants">Klassenkonstanten</link>,
    außer dass sie von anderen Interfaces oder Klassen, die von
    diesem Interface erben, nicht verändert werden können.
   </para>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.interfaces.examples.ex1">
    <title>Interface-Beispiel</title>
     <programlisting role="php">
<![CDATA[
<?php
// Deklariere das Interface 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implementiere das Interface
// Dies funktioniert
class Template implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
  
    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
 
        return $template;
    }
}

// Dies wird nicht funktionieren
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}

?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex2">
    <title>Interface-Vererbung</title>
    <programlisting role="php">
<![CDATA[
<?php
interface a

public function foo();


interface b extends a
{
  public function baz(Baz $baz);
}

// Dies Funktioniert 
class c implements b
{
  public function foo()
  {
  }

  public function baz(Baz $baz)
  {
  }
}

// Dies funktioniert nicht und führt zu einem fatalen Fehler
class d implements b
{
  public function foo()
  {
  }

  public function baz(Foo $foo)
  {
  }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex3">
    <title>Interface-Mehrfachvererbung</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
  public function foo();
}

interface b
{
  public function bar();
}

interface c extends a, b
{
  public function baz();
}

class d implements c
{
  public function foo()
  {
  }

  public function bar()
  {
  }

  public function baz()
  {
  }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex4">
    <title>Interfaces mit Konstanten</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
  const b = 'Interface constant';
}

// Ausgabe: Interface constant
echo a::b;

// Der folgende Abschnitt wird nicht funktionieren, da
// ein Überschreiben der Konstanten nicht gestattet ist.
class b implements a
{
  const b = 'Class constant';
}
?>
]]>
    </programlisting>
   </example>
   <para>
    Ein Interface, in Verbindung mit Type Hinting, bietet eine gute Möglichkeit,
    um sicherzustellen, dass ein bestimmtes Objekt bestimmte Methoden enthält.
    Siehe
    <link linkend="language.operators.type">instanceof</link>-Operator und
    <link linkend="language.oop5.typehinting">Type Hinting</link>.
   </para>
  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
