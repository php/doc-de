<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.10 Maintainer: nobody Status: ready -->
 <sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook">
  <title>Interfaces</title>
  <para>
   Interfaces erlauben die Erzeugung von Code, der spezifiziert, welche
   Methoden eine Klasse implementieren muss, ohne definieren zu müssen,
   wie diese Methoden behandelt werden.
  </para>
  <para>
   Interfaces werden mit dem interface Schlüsselwort auf die selbe Weise wie
   eine Standardklasse definiert, ohne dass eine der Methoden ihren
   Inhalt definiert.
  </para>
  <para>
   Alle in einem Interface deklarierten Methoden müssen public sein, dies liegt
   in der Natur eines Interfaces.
  </para>
  <sect2 xml:id="language.oop5.interfaces.implements">
   <title><literal>implements</literal></title>
   <para>
    Um ein Interface zu implementieren wird der <literal>implements</literal>
    Operator benutzt. Alle Methoden des Interfaces müssen innerhalb der Klasse
    implementiert werden; Unterlassung wird zu einem fatalen Fehler führen.
    Klassen dürfen, falls dies gewünscht wird, mehr als ein Interface 
    implementieren, indem man die Interfaces von einander mit einem Komma
    abtrennt.
   </para>
  <note>
   <para>
    Eine Klasse kann nicht zwei Interfaces, die sich identische Funktionsnamen
    teilen, implementieren, da dies zu Doppeldeutigkeiten führen würde.
   </para>
  </note>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.interfaces.examples.ex1">
    <title>Interface Beispiel</title>
     <programlisting role="php">
<![CDATA[
<?php
// Deklariere das Interface 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implementiere das Interface
// Dies funktioniert
class Template implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
  
    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
 
        return $template;
    }
}

// Dies wird nicht funktionieren
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}

?>
]]>
    </programlisting>
   </example>
   <simpara>
     Siehe auch den <link linkend="language.operators.type">instanceof</link>
     Operator.
   </simpara>
  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
