<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.13 Maintainer: simp Status: ready -->
 <sect1 id="language.oop5.abstract">
  <title>Klassenabstraktion</title>

  <para>
   PHP 5 führt abstrakte Klassen und Methoden ein. Es ist nicht erlaubt, eine
   Instanz einer Klasse zu erzeugen, die abstrakt definiert wurde. Jede Klasse,
   die wenigstens eine abstrakte Methode enthält, muss ebenso abstrakt sein.
   Abstrakt definierte Methoden deklarieren einfach die Signatur der Methode,
   sie dürfen nicht die Implementierung definieren.
  </para>

  <para>
   Wenn eine abstrakte Klasse abgeleitet wird, müssen alle in der Deklaration
   der Vaterklasse abstrakt bezeichneten Methoden durch das Kind definiert 
   werden. Zusätzlich müssen diese Methoden mit der selben (oder einer 
   schwächeren) <link linkend="language.oop5.visibility">Sichtbarkeit</link>
   definiert werden. Wenn die abstrakte Methode zum Beispiel als protected
   definiert ist, muss die Funktionsimplementierung entweder als protected
   oder public definiert sein.
  </para>

  <example>
   <title>Beispiel für abstrakte Klasse</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class AbstractClass
{
    // Die abgeleitete Klasse zwingen, diese Methoden zu definieren
    abstract protected function getValue();
    abstract protected function prefixValue($prefix);

    // Gemeinsame Methode
    public function printOut() {
        print $this->getValue() . "\n";
    }
}

class ConcreteClass1 extends AbstractClass
{
    protected function getValue() {
        return "ConcreteClass1";
    }

    public function prefixValue($prefix) {
        return "{$prefix}ConcreteClass1";
    }
}

class ConcreteClass2 extends AbstractClass
{
    public function getValue() {
        return "ConcreteClass2";
    }
    
    public function prefixValue($prefix) {
        return "{$prefix}ConcreteClass2";
    }
}

$class1 = new ConcreteClass1;
$class1->printOut();
echo $class1->prefixValue('FOO_') ."\n";

$class2 = new ConcreteClass2;
$class2->printOut();
echo $class2->prefixValue('FOO_') ."\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
   </screen>
  </example>

   <para>
    Bestehender Code, der keine benutzerdefinierten Klassen oder Funktionen mit
    dem Namen 'abstract' besitzt, sollte ohne Änderungen lauffähig sein.
   </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
