<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: simp Status: ready -->
<!-- Credits: wiesemann -->
 <sect1 xml:id="language.oop5.abstract" xmlns="http://docbook.org/ns/docbook">
  <title>Klassenabstraktion</title>

  <para>
   PHP unterstützt abstrakte Klassen und Methoden. Abstrakt definierte
   Klassen können nicht instantiiert werden. Jede Klasse,
   die wenigstens eine abstrakte Methode enthält, muss ebenso abstrakt sein.
   Abstrakt definierte Methoden deklarieren nur die Signatur der Methode -
   sie können nicht die Implementierung definieren.
  </para>

  <para>
   Wenn von einer abstrakten Klasse abgeleitet wird, müssen alle in der Deklaration
   der Elternklasse als abstrakt bezeichneten Methoden durch das Kind definiert 
   werden und den üblichen Regeln zur
   <link linkend="language.oop5.inheritance">Vererbung</link> und
   <link linkend="language.oop.lsp">Signatur-Kompatibilität</link> folgen.
  </para>

  <example>
   <title>Beispiel für abstrakte Klasse</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class AbstractClass
{
    // Die abgeleitete Klasse zwingen, diese Methoden zu definieren
    abstract protected function getValue();
    abstract protected function prefixValue($prefix);

    // Gemeinsame Methode
    public function printOut() {
        print $this->getValue() . "\n";
    }
}

class ConcreteClass1 extends AbstractClass
{
    protected function getValue() {
        return "ConcreteClass1";
    }

    public function prefixValue($prefix) {
        return "{$prefix}ConcreteClass1";
    }
}

class ConcreteClass2 extends AbstractClass
{
    public function getValue() {
        return "ConcreteClass2";
    }

    public function prefixValue($prefix) {
        return "{$prefix}ConcreteClass2";
    }
}

$class1 = new ConcreteClass1;
$class1->printOut();
echo $class1->prefixValue('FOO_') ."\n";

$class2 = new ConcreteClass2;
$class2->printOut();
echo $class2->prefixValue('FOO_') ."\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
   </screen>
  </example>
  
  <example>
   <title>Beispiel für abstrakte Klasse</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class AbstractClass
{
  // Unsere abstrakte Methode muss nur die verpflichtenden Parameter definieren
  abstract protected function prefixName($name);

}

class ConcreteClass extends AbstractClass
{
  // Unsere Kindklasse kann optionale Parameter definieren, die sich nicht in der
  // Signatur der Elternklasse wiederfinden
  public function prefixName($name, $separator = ".") {
      if ($name == "Pacman") {
          $prefix = "Mr";
      } elseif ($name == "Pacwoman") {
          $prefix = "Mrs";
      } else {
          $prefix = "";
      }
      return "{$prefix}{$separator} {$name}";
  }
}

$class = new ConcreteClass;
echo $class->prefixName("Pacman"), "\n";
echo $class->prefixName("Pacwoman"), "\n";
?>
]]>
    </programlisting>
     &example.outputs;
    <screen>
<![CDATA[
Mr. Pacman
Mrs. Pacwoman
]]>
    </screen>
   </example>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
