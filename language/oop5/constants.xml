<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336770 Maintainer: hholzgra Status: ready -->
<!-- Credits: simp -->
 <sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Klassenkonstanten</title>
  <para>
   Es ist möglich für jede Klasse konstante Werte zu definieren, die gleich
   und unabänderlich bleiben. Konstanten weichen darin von normalen Variablen
   ab, dass man nicht das <varname>$</varname> Symbol benutzt, um sie zu
   deklarieren oder zu benutzen. 
  </para>
  <para>
   Der Wert kann nur ein konstanter Ausdruck sein, keine (zum Beispiel)
   Variablen, Klassenattribute, Ergebnisse einer mathematischen Operation
   oder Funktionsaufrufe.
  </para>
  <para>
   Ein Interface kann ebenfalls <literal>constants</literal> enthalten. 
   Die <link linkend="language.oop5.interfaces">Interface-Dokumentation</link>
   enthält Beispiele dazu.
  </para>
  <para>
   Beginnend mit PHP 5.3.0 ist es möglich eine Variable als Klassenreferenz
   zu nutzen. Der Variablenwert kann kein Schlüsselwort (wie <literal>self</literal>, 
   <literal>parent</literal> oder <literal>static</literal>) sein.
  </para>

  <example>
   <title>Eine Konstante definieren und benutzen</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    const CONSTANT = 'Konstanter Wert';

    function showConstant() {
        echo  self::CONSTANT . "\n";
    }
}

echo MyClass::CONSTANT . "\n";

$classname = "MyClass";
echo $classname::CONSTANT . "\n"; // Ab PHP 5.3.0

$class = new MyClass();
$class->showConstant();

echo $class::CONSTANT;  // Ab PHP 5.3.0
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Beispiel für statische Daten</title>
   <programlisting role="php">
<![CDATA[
<?php
class foo {
    // Ab PHP 5.3.0
    const BAR = <<<'EOT'
bar
EOT;
}
?>
]]>
   </programlisting>
   <para>
    Nowdocs können, anders als heredocs, in jedem statischen
    Datenkontext verwendet werden.
   </para>
  </example>
  <note>
   <para>
    Unterstützung von Nowdocs wurde in PHP 5.3.0 eingeführt.
   </para>
  </note>

  <example>
   <title>Beispiel mit konstanten Ausdrücken</title>
   <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;

class foo {
    // Ab PHP 5.6.0
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'Der Wert von THREE ist '.self::THREE;
}
?>
]]>
   </programlisting>
   <para>
    Es ist möglich einen skalaren Ausdruck, der numerische und
    Zeichenketten-Literale und/oder Konstanten enthält, im Kontext einer
    Klassenkonstante zu verwenden.
   </para>
  </example>
  <note>
   <para>
    Die Unterstützung von konstanten Ausdrücken wurde in PHP 5.6.0 hinzugefügt.
   </para>
  </note>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
