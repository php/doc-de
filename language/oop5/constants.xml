<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5d1673b7a0e1a941111595d25cda663d8667a015 Maintainer: hholzgra Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 1.0 Reviewer: samesch -->
<!-- Credits: simp -->
<sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Klassenkonstanten</title>
 <para>
  Es ist möglich, <link linkend="language.constants">Konstanten</link> für
  jede Klasse zu definieren, die gleich und unveränderlich bleiben. Die
  standardmäßige Sichtbarkeit einer Klassenkonstante ist
  <literal>public</literal>.
 </para>
 <note>
 <para>
  Klassenkonstanten können von einer Kindklasse neu definiert werden.
  Ab PHP 8.1.0 können Klassenkonstanten nicht von einer untergeordneten Klasse neu definiert werden,
  wenn sie als <link linkend="language.oop5.final">final</link> definiert ist.
 </para>
 </note>
 <para>
  Ein Interface kann ebenfalls <literal>Konstanten</literal> enthalten. Die
  <link linkend="language.oop5.interfaces">Interface-Dokumentation</link>
  enthält Beispiele dazu.
 </para>
 <para>
  Es ist möglich, eine Variable als Klassenreferenz zu nutzen. Der
  Variablenwert darf kein Schlüsselwort (wie <literal>self</literal>,
  <literal>parent</literal> oder <literal>static</literal>) sein.
 </para>
 <para>
  Es ist zu beachten, dass Klassenkonstanten nur einmal pro Klasse angelegt
  werden und nicht für jedes Klassenexemplar.
 </para>
 <example>
  <title>Eine Konstante definieren und benutzen</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    const CONSTANT = 'Konstanter Wert';

    function showConstant() {
        echo  self::CONSTANT . "\n";
    }
}

echo MyClass::CONSTANT . "\n";

$classname = "MyClass";
echo $classname::CONSTANT . "\n";

$class = new MyClass();
$class->showConstant();

echo $class::CONSTANT."\n";
?>
]]>
  </programlisting>
 </example>
 <para>
  Die spezielle Konstante <constant>::class</constant> erlaubt die Auflösung
  voll qualifizierter Klassennamen zur Kompilierzeit, was nützlich für Klassen
  in Namensräumen ist:
 </para>
 <example>
  <title>Beispiel für ::class in einem Namensraum</title>
  <programlisting role="php">
<![CDATA[
<?php
namespace foo {
    class bar {
    }

    echo bar::class; // foo\bar
}
?>
]]>
  </programlisting>
 </example>
 <example>
  <title>Beispiel für Ausdrücke mit Klassenkonstanten</title>
  <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;
class foo {
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'Der Wert von THREE ist '.self::THREE;
}
?>
]]>
  </programlisting>
 </example>
 <example>
  <title>Sichtbarkeitsmodifizierer von Klassenkonstanten seit PHP 7.1.0</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public const BAR = 'bar';
    private const BAZ = 'baz';
}
echo Foo::BAR, PHP_EOL;
echo Foo::BAZ, PHP_EOL;
?>
]]>
  </programlisting>
   &example.outputs.71;
   <screen>
<![CDATA[
bar

Fatal error: Uncaught Error: Cannot access private const Foo::BAZ in …
]]>
   </screen>
 </example>
 <note>
  <para>
   Von PHP 7.1.0 an sind Sichtbarkeitsmodifizierer für Klassenkonstanten
   erlaubt.
  </para>
 </note>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
