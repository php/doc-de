<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337875 Maintainer: hholzgra Status: ready -->
<!-- Credits: simp -->
 <sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
  <title>Static-Schlüsselwort</title>

  <tip>
   <simpara>
    Diese Seite beschreibt die Verwendung des <literal>static</literal>
    Schlüsselworts, um statische Methoden und Eigenschaften zu definieren.
    <literal>static</literal> kann ebenfalls benutzt werden, um
    <link linkend="language.variables.scope.static">statische Variablen zu definieren</link>
    und für
    <link linkend="language.oop5.late-static-bindings">späte statische Bindung</link>.
    Bitte entnehmen Sie diesen Seiten Informationen zu diesen Bedeutungen von
    <literal>static</literal>.
   </simpara>
  </tip>

  <para>
   Klassenmember oder -methoden als statisch zu deklarieren macht diese 
   zugänglich, ohne dass man die Klasse instantiieren muss. Auf ein als statisch
   deklariertes Member kann nicht mit einem instantiierten Klassenobjekt
   zugegriffen werden (obgleich eine statische Methode dies kann).
  </para>

  <para>
   Für die Abwärtskompatibilität zu PHP 4 werden Eigenschaften oder Methoden behandelt,
   als ob diese als <literal>public static</literal> deklariert wären, wenn
   keine <link linkend="language.oop5.visibility">Sichtbarkeit</link> 
   deklariert wird.
  </para>

  <sect2 xml:id="language.oop5.static.methods">
   <title>Statische Methoden</title>

   <para>
     Weil statische Methoden ohne die Instanz eines erzeugten Objektes aufrufbar
     sind, ist die Pseudovariable <varname>$this</varname> nicht innerhalb von
     der als statisch deklarierten Methode verfügbar.
    </para>
  
   <caution>
    <simpara>
     In PHP 5 erzeugt ein statischer Aufruf von nicht-statischen Methoden eine
     Warnung der Stufe <constant>E_STRICT</constant>.
    </simpara>
   </caution>

   <warning>
    <simpara>
     In PHP 7 ist der statische Aufruf von nicht-statischen Methoden missbilligt,
     und erzeugt eine Warnung der Stufe <constant>E_DEPRECATED</constant>.
     Die Unterstützung von statischen Aufrufen nicht-statischer Methoden kann in
     der Zukunft entfernt werden.
    </simpara>
   </warning>

   <example>
    <title>Statisches Methoden-Beispiel</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod(); // Von PHP 5.3.0 an
?> 
]]>
     </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.static.properties">
   <title>Statische Eigenschaften</title>

   <para>
    Auf statische Eigenschaften kann nicht durch das Objekt mittels des
    Pfeiloperators -&gt; zugegriffen werden.
   </para>
  
   <para>
    Wie bei jeder anderen statischen PHP-Variablen können
    als Initialwerte für statische Eigenschaften nur Zeichenketten
    und Konstanten zugewiesen werden, die Zuweisung berechneter Ausdrücke
    ist nicht möglich. In PHP 5.6 und später gelten die Regeln für &const; Ausdrücke:
    einige beschränkte Ausdrücke sind möglich, vorausgesetzt dass sie zur
    Kompilierzeit ausgewertet werden können.
   </para>

   <para>
    Beginnend mit PHP 5.3.0 kann die Klasse über eine Variable
    referenziert werden. Der Variablenwert kann dabei kein Schlüsselwort
    (wie <literal>self</literal>,  <literal>parent</literal> oder 
    <literal>static</literal>) sein.
   </para>
 
   <example>
    <title>Beispiel für statische Eigenschaften</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // Undefinierte "Eigenschaft" my_static 

print $foo::$my_static . "\n";
$classname = 'Foo';
print $classname::$my_static . "\n"; // Von PHP 5.3.0 an

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
    </programlisting>
   </example>
  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
