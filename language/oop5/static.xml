<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.19 Maintainer: hholzgra Status: ready -->
<!-- Credits: simp -->
 <sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
  <title>Static Schlüsselwort</title>

  <para>
   Klassenmember oder -methoden als statisch zu deklarieren macht diese 
   zugänglich, ohne dass man die Klasse instantiieren muss. Auf ein als statisch
   deklariertes Member kann nicht mit einem instantiierten Klassenobjekt
   zugegriffen werden (obgleich eine statische Methode dies kann).
  </para>

  <para>
   Für die Abwärtskompatibilität zu PHP 4 werden Member oder Methode behandelt
   als ob diese als <literal>public static</literal> deklariert wären, wenn
   keine <link linkend="language.oop5.visibility">Sichtbarkeit</link> 
   deklariert wird.
  </para>

  <para>
   Als Initialwerte für statische Eigenschaften können nur Zeichenketten
   und Konstanten zugewiesen werden, die Zuweisung berechneter Ausdrücke
   ist nicht möglich. Während also die Initialisierung mit einem Integer
   oder Array möglich ist können der Wert einer anderen Variablen, der
   Rückgabewert einer Funktion oder ein Objekt nicht als Initialwert
   zugewiesen werden.
  </para>

  <para>
   Weil statische Methoden ohne die Instanz eines erzeugten Objektes aufrufbar
   sind, ist die Pseudovariable <varname>$this</varname> nicht innerhalb von
   der als statisch deklarierten Methode verfügbar.
  </para>
  
  <para>
   Auf statische Eigenschaften kann nicht durch das Objekt mittels des
   Pfeiloperators -&gt; zugegriffen werden.
  </para>
  
  <para>
   Unstatische Methoden statisch aufzurufen ruft eine Warnung der Stufe 
   E_STRICT hervor.
  </para>

  <para>
   Beginnend mit PHP 5.3.0 kann die Klasse über eine Variable
   referenziert werden. Der Variablenwert kann dabei kein Schlüsselwort
   (wie <literal>self</literal>,  <literal>parent</literal> oder 
   <literal>static</literal>) sein.
  </para>

  <example>
   <title>Beispiel für statische Member</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // Undefinierte "Eigenschaft" my_static 

print $foo::$my_static . "\n";
$classname = 'Foo';
print $classname::$my_static . "\n";

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Beispiel für statische Methoden</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod();
?> 
]]>
    </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
