<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 312729 Maintainer: simp Status: ready -->
 <sect1 xml:id="language.oop5.serialization" xmlns="http://docbook.org/ns/docbook">
  <title>Serialisierung von Objekten</title>
  <title>Serialisierung von Objekten - Objekte in Sessions</title>

  <para>
   <function>serialize</function> erzeugt einen String, welcher
   die Byte-Stream-Repräsentation eines jeden Wertes besitzt,
   der in PHP gespeichert werden kann. 
   <function>unserialize</function> kann diesen String verwenden,
   um die ursprünglichen Variablenwerte wiederherzustellen. Verwendet
   man <function>serialize</function>, um ein Objekt zu speichern,
   so werden alle Variablen dieses Objektes gespeichert. Die 
   Methoden des Objektes werden nicht gespeichert, nur der Name
   der Klasse.
  </para>
  
  <para>
   Damit man imstande ist, ein Objekt mit <function>unserialize</function>
   wiederherzustellen, muss die Klasse des Objektes definiert sein.
   Das heißt, wenn man ein Objekt der Klasse A serialisiert, erhält man
   einen String, der sich auf die Klasse A bezieht und die Werte
   aller darin enthaltenen Variablen beinhaltet. Wenn man in einer
   anderen Datei diesen String wieder zu einem Objekt der Klasse A
   deserialisieren will, so muss die Klasse A in dieser Datei
   vorher bekannt sein. Dies kann man erreichen, indem man die
   Definition der Klasse A in eine mittels include
   ladbare Datei auslagert und diese Datei einbindet oder die Funktion
   <function>spl_autoload_register</function> verwendet.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// classa.inc:
  
  class A {
      public $one = 1;
    
      public function show_one() {
          echo $this->one;
      }
  }
  
// page1.php:

  include("classa.inc");
  
  $a = new A;
  $s = serialize($a);
  // $s irgendwo ablegen, wo page2.php dies finden kann.
  file_put_contents('store', $s);

// page2.php:

  // Dies ist nötig, damit unserialize korrekt funktioniert. 
  include("classa.inc");

  $s = file_get_contents('store');
  $a = unserialize($s);

  // Nun kann man die Funktion show_one() des Objektes $a
  // verwenden.
  $a->show_one();
?>
]]>
   </programlisting>
  </informalexample>
  
  <para>
   Wenn eine Anwendung Sessions verwendet und die Funktion
   <function>session_register</function> benutzt, um Objekte zu
   registrieren, so werden diese Objekte automatisch am Schluss jeder
   PHP-Seite serialisiert und in jeder nachfolgenden PHP-Seite
   deserialisiert. Das heißt, dass diese Objekte in jeder Seite
   der Anwendung auftauchen können, sobald diese Teil der Session
   werden. <function>session_register</function> wurde in
   PHP 5.4.0 jedoch entfernt.
  </para>
  
  <para>
   Es ist dringend empfohlen, dass wenn eine Anwendung Objekte zur späteren
   Verwendung in der Anwendung serialisiert, die Klassendefinitionen in
   der gesamten Anwendung eingebunden werden. Wird dies nicht beachtet, so
   wird das Objekt ohne eine Klassendefinition deserialisiert, was dazu
   führen wird, dass PHP dem Objekt eine Klasse
   <classname>__PHP_Incomplete_Class_Name</classname> zuweisen wird, welche
   keine Methoden besitzt. Dies wird das Objekt nutzlos machen. 
  </para>
  
  <para>
   Wenn also im obigen Beispiel <varname>$a</varname> Teil einer Session würde,
   indem man <literal>session_register("a")</literal> benutzt, so sollte die
   Datei <literal>classa.inc</literal> in jeder Seite eingebunden werden, nicht 
   nur in <filename>page1.php</filename> und <filename>page2.php</filename>.
  </para>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
