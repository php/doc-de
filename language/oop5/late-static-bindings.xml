<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 305233 Maintainer: hholzgra  Status: ready -->
 <sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
  <title>Späte statische Bindung</title>
  <para>
   Beginnend mit PHP 5.3.0 unterstützt PHP späte statische Bindung ("Late
   static binding"). Hiermit kann die aufgerufene Klasse im Kontext statischer
   Vererbung referenziert werden.
  </para>

  <para>
   Genauer gesagt funktioniert späte statische Bindung durch das Speichern der
   Klasse, die im letzten "nicht weiterleitenden Aufruf" angegeben wurde.
   Im Fall von statischen Methodenaufrufen, ist dies die explizit angegebene Klasse
   (üblicherweise diejenige auf der linken Seite des
   <link linkend="language.oop5.paamayim-nekudotayim"><literal>::</literal></link>
   Operators); im Fall von nicht statischen Methodenaufrufen, ist es die Klasse
   des Objekts. Ein "weiterleitender Aufruf" ist ein statischer, der durch
   <literal>self::</literal>, <literal>parent::</literal>, <literal>static::</literal>,
   oder, in der Klassenhierarchie nach oben gehend, durch
   <function>forward_static_call</function>, eingeleitet wurde.
   <!-- technically, static:: may be non forwarding, but it's irrelevant -->

   Die Funktion <function>get_called_class</function> kann benutzt werden,
   um eine Zeichenkette mit dem Namen der aufgerufenen Klasse abzufragen,
   und <literal>static::</literal> führt ihren Geltungsbereich ein.
  </para>

  <para>
   Diese Funktionalität wurde in Hinblick auf die interne Perspektive als
   "späte statische Bindung" benannt. "Späte Bindung" bezieht sich auf die
   Tatsache, dass <literal>static::</literal> nicht über die Klasse, in der
   die aufgerufene Methode definiert ist, aufgelöst wird, stattdessen wird
   diese mit Hilfe von Laufzeitinformationen bestimmt.

   Die Benennung als "statische Bindung" beruht darauf, dass dieser Mechanismus
   unter anderem für statische Methodenaufrufe genutzt werden kann.
  </para>

  <sect2 xml:id="language.oop5.late-static-bindings.self">
   <title>Beschränkungen von <literal>self::</literal></title>
   <para>
    Statische Referenzen auf die aktuelle Klasse wie <literal>self::</literal>
    oder <literal>__CLASS__</literal> werden mit Hilfe der Klasse, zu der die
    Methode gehört, also in welcher sie definiert ist, aufgelöst.
   </para>
   <example>
    <title>Nutzung von <literal>self::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        self::who();
    }
}

class B extends A {
    public static function who() {
         echo __CLASS__;
    }
}

B::test();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>

  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>Nutzung später statischer Bindung</title>

   <para>
    Späte statische Bindung versucht diese Beschränkung zu umgehen,
    indem ein neues Schlüsselwort eingeführt wird, dass die Klasse
    referenziert, die tatsächlich zur Laufzeit genutzt wurde,
    also im Wesentlichen ein Schlüsselwort, das es Ihnen gestattet
    im vorangegangenen Beispiel aus der aufgerufenen Methode
    <literal>test()</literal> die Klasse <literal>B</literal>
    zu referenzieren. Es wurde entschieden, kein neues Schlüsselwort einzuführen
    sondern statt dessen <literal>static</literal> zu verwenden, das bereits
    als reserviertes Schlüsselwort existierte.
   </para>

   <example>
    <title>Einfache Nutzung von <literal>static::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        static::who(); // statische Bindung
    }
}

class B extends A {
    public static function who() {
         echo __CLASS__;
    }
}

B::test();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     In nicht statischen Kontexten ist die aufgerufene Klasse die Klasse des
     Objekt-Exemplars. Da <literal>$this-></literal> versucht private Methoden
     im gleichen Geltungsbereich aufzurufen, kann die Verwendung von
     <literal>static::</literal> andere Ergebnisse liefern. Ein weiterer
     Unterschied ist, dass <literal>static::</literal> sich nur auf statische
     Eigenschaften beziehen kann.
    </para>
   </note>
   <example>
    <title>Nutzung von <literal>static::</literal> außerhalb eines statischen Kontexts</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    private function foo() {
        echo "Erfolg!\n";
    }
    public function test() {
        $this->foo();
        static::foo();
    }
}

class B extends A {
   /* foo() wird nach B kopiert, weshalb ihr Geltungsbreich immer noch A ist,
    * und der Aufruf wird erfolgreich sein */
}

class C extends A {
    private function foo() {
        /* ursprüngliche Methode wird ersetzt; der Geltungsbereich der neuen ist C */
    }
}

$b = new B();
$b->test();
$c = new C();
$c->test();   //scheitert
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Erfolg!
Erfolg!
Erfolg!


Fatal error:  Call to private method C::foo() from context 'A' in /tmp/test.php on line 9
]]>
    </screen>
   </example>
   <note>
    <para>
     Die Auflösung später statischer Bindungen endet mit einem vollständig
     aufgelösten statischen Aufruf ohne Alternative. Statische Aufrufe, die
     Schlüsselworte wie <literal>parent::</literal> oder <literal>self::</literal>
     nutzen, geben dagegen die Aufrufinformationen weiter.
    </para>
    <example>
     <title>Weitergegebene und nicht weitergegebene Aufrufe</title>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function foo() {
        static::who();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

class B extends A {
    public static function test() {
        A::foo();
        parent::foo();
        self::foo();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}
class C extends B {
    public static function who() {
        echo __CLASS__."\n";
    }
}

C::test();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
C
C
]]>
     </screen>
    </example>
   </note>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
