<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.7 Maintainer: simp Status: ready -->
 <sect1 id="language.oop5.paamayim-nekudotayim">
  <title>Gültigkeitsbereichsoperator (::)</title>

  <para>
   Der Gültigkeitsbereichsoperator (auch Paamayim Nekudotayim genannt) oder
   in einfacheren Worten der Doppel-Doppelpunkt ist ein Kürzel, das Zugriff
   auf <link linkend="language.oop5.static">statische</link>,
   <link linkend="language.oop5.constants">konstante</link> und überschriebene
   Member oder Methoden einer Klasse erlaubt.
  </para>

  <para>
   Wenn Sie diese Elemente außerhalb der Klassendefinition ansprechen, benutzen
   Sie den Namen der Klasse.
  </para>

  <para>
   Paamayim Nekudotayim scheint auf den ersten Blick eine eigenartige Wahl
   für die Benennung eines Doppel-Doppelpunktes zu sein. Jedoch entschied sich
   das Zend Team ihn so zu nennen, während Sie die Zend Engine 0.5 schrieben
   (welche PHP 3 antreibt). Tatsächlich bedeutet das Doppel-Doppelpunkt - 
   in Hebräisch.
  </para>

  <example>
   <title>:: außerhalb der Klassendefinition</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'Ein konstanter Wert';
}

echo MyClass::CONST_VALUE;
?>
]]>
   </programlisting>
  </example>

  <para>
   Die zwei speziellen Schlüsselwörter <varname>self</varname> und 
   <varname>parent</varname> werden benutzt, um auf Member und Methoden von
   innerhalb der Klassendefinition zuzugreifen.
  </para>

  <example>
   <title>:: innerhalb der Klassendefinition</title>
   <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'statische var';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

OtherClass::doubleColon();
?>
]]>
   </programlisting>
  </example>

  <para>
   Wenn eine abgeleitete Klasse die Definition der Methode eines Vaters 
   überschreibt, wird PHP die Methode des Vaters nicht aufrufen. Es obliegt der
   abgeleiteten Klasse, ob die Methode der Vaterklasse augerufen wird oder nicht.
   Dies gilt ebenfalls für 
   <link linkend="language.oop5.decon">Konstruktoren und Destruktoren</link>, <link
   linkend="language.oop5.overloading">Überladung</link> und <link
   linkend="language.oop5.magic">magische</link> Methodendefinitionen.
  </para>

  <example>
   <title>Eine Vatermethode aufrufen</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // Die Definition des Vaters überschreiben
    public function myFunc()
    {
        // Aber dennoch die Funktion des Vaters aufrufen
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

