<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339526 Maintainer: hholzgra Status: ready -->
<!-- Credits: simp -->
<sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
 <title>Magische Methoden</title>
 <para>
  Die Funktionen
  <link linkend="object.construct">__construct()</link>,
  <link linkend="object.destruct">__destruct()</link>,
  <link linkend="object.call">__call()</link>,
  <link linkend="object.callstatic">__callStatic()</link>,
  <link linkend="object.get">__get()</link>,
  <link linkend="object.set">__set()</link>,
  <link linkend="object.isset">__isset()</link>,
  <link linkend="object.unset">__unset()</link>,
  <link linkend="object.sleep">__sleep()</link>,
  <link linkend="object.wakeup">__wakeup()</link>,
  <link linkend="object.tostring">__toString()</link>,
  <link linkend="object.invoke">__invoke()</link>,
  <link linkend="object.set-state">__set_state()</link>,
  <link linkend="object.clone">__clone()</link> und
  <link linkend="object.debuginfo">__debugInfo()</link>
  sind in PHP-Klassen magisch. Man kann keine Funktionen gleichen Namens in
  einer seiner Klassen haben, wenn man nicht die magische Funktionalität,
  die sie mit sich bringen, haben will.
 </para>
 
 <caution>
  <simpara>
   PHP reserviert alle Funktionsnamen, die mit __ beginnen, als magisch.
   Es wird empfohlen, keine Funktionsnamen mit __ in PHP zu benutzen, es sei
   denn, man möchte dokumentierte magische Funktionalität verwenden.
  </simpara>
 </caution>
 
 <sect2 xml:id="language.oop5.magic.sleep">
  <title>
   <link linkend="object.sleep">__sleep()</link> and
   <link linkend="object.wakeup">__wakeup()</link>
  </title>
  
  <methodsynopsis xml:id="object.sleep">
   <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
   <void/>
  </methodsynopsis>
  <methodsynopsis xml:id="object.wakeup">
   <type>void</type><methodname>__wakeup</methodname>
   <void/>
  </methodsynopsis>
  
  <para>
   <function>serialize</function> prüft, ob Ihre Klasse eine Funktion mit dem
   magischen Namen <link linkend="object.sleep">__sleep()</link> besitzt. Wenn
   dem so ist, wird die Funktion vor jeder Serialisierung ausgeführt. Sie kann
   das Objekt aufräumen und es wird von ihr erwartet, dass sie ein Array mit den
   Namen aller Variablen zurückliefert, die serialisiert werden sollen. Wenn die
   Methode nichts zurückgibt, so wird &null; serialisiert und eine
   <constant>E_NOTICE</constant> geworfen.
  </para>
  <note>
   <para>
    <link linkend="object.sleep">__sleep()</link> kann nicht Namen von privaten
    Eigenschaften von Elternklassen zurückgeben. In diesem Fall wird eine
    <constant>E_NOTICE</constant> geworfen. Stattdessen sollte das
    <classname>Serializable</classname> Interface verwendet werden.
   </para>
  </note>
  <para>
   Die beabsichtigte Verwendung von <link linkend="object.sleep">__sleep()</link>
   ist, nicht gespeicherte Daten zu sichern oder ähnliche Aufräumarbeiten zu
   erledigen. Die Funktion ist ebenfalls nützlich, wenn Sie sehr große Objekte
   haben, welche nicht komplett gespeichert werden müssen.
  </para>
  <para>
   Umgekehrt überprüft <function>unserialize</function> die Anwesenheit einer
   Funktion mit dem magischen Namen <link linkend="object.wakeup">__wakeup()</link>.
   Falls vorhanden, kann diese Funktion alle Ressourcen, die das Objekt haben könnte,
   wiederherstellen.
  </para>
  <para>
   Der beabsichtigte Zweck von <link linkend="object.wakeup">__wakeup()</link> ist es,
   alle Datenbankverbindungen wiederherzustellen, die während der Serialisierung
   verloren gegangen sein könnten, oder auch andere Aufgaben zur erneuten Initialisierung.
  </para>
  <example>
   <title>Sleep- und Wakeup-Beispiel</title>
   <programlisting role="php">
<![CDATA[
<?php
class Connection
{
 protected $link;
 private $dsn, $username, $password;

 public function __construct($dsn, $username, $password)
 {
  $this->dsn = $dsn;
  $this->username = $username;
  $this->password = $password;
  $this->connect();
 }

 private function connect()
 {
  $this->link = new PDO($this->dsn, $this->username, $this->password);
 }

 public function __sleep()
 {
  return array('dsn', 'username', 'password');
 }

 public function __wakeup()
 {
  $this->connect();
 }
}?>
]]>
   </programlisting>
  </example>
 </sect2>
 
 <sect2 xml:id="language.oop5.magic.tostring">
  <title><link linkend="object.tostring">__toString()</link></title>
  <methodsynopsis xml:id="object.tostring">
   <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Die <link linkend="object.tostring">__toString()</link> Methode erlaubt
   einer Klasse zu entscheiden, wie sie reagieren soll, wenn sie in eine Zeichenkette
   umgewandelt wird. Die beeinflusst beispielsweise, was <literal>echo $obj;</literal>
   ausgeben wird. Diese Methode muss eine Zeichenkette zurückgeben, ansonsten wird ein
   <constant>E_RECOVERABLE_ERROR</constant> geworfen.
  </para>
  <warning>
   <simpara>
    Aus der Methode <link linkend="object.tostring">__toString()</link> kann keine 
    Exception geworfen werden. Wenn dies getan wird, so tritt ein fataler Fehler auf.
   </simpara>
  </warning>
  <example>
   <title>Einfaches Beispiel</title>
   <programlisting role="php">
<![CDATA[
<?php
// Deklariere eine einfache Klasse
class TestClass
{
 public $foo;

 public function __construct($foo)
 {
  $this->foo = $foo;
 }

 public function __toString()
 {
  return $this->foo;
 }
}

$class = new TestClass('Hallo');
echo $class;
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hallo
]]>
   </screen>
  </example>
  <para>
   Es muss angemerkt werden, dass die <link linkend="object.tostring">__toString()</link>
   Methode in Versionen vor PHP 5.2.0 nur in direkter Kombination mit
   <function>echo</function> oder <function>print</function> aufgerufen
   wurde.
   Beginnend mit PHP 5.2.0 erfolgt dieser Aufruf in jedem Stringkontext
   (z.B. in <function>printf</function> mit <literal>%s</literal>-Platzhalter),
   aber in keinem der anderen Typenkontexte (z.B. mit dem
   <literal>%d</literal>-Platzhalter). Ebenfalls beginnend mit PHP 5.2.0
   bewirkt die Umwandlung eines Objekts ohne <link linkend="object.tostring">__toString()</link>
   Methode in einen String einen Fehler der Klasse <constant>E_RECOVERABLE_ERROR</constant>.
  </para>
 </sect2>
 
 <sect2 xml:id="language.oop5.magic.invoke">
  <title><link linkend="object.invoke">__invoke()</link></title>
  <methodsynopsis xml:id="object.invoke">
   <type>mixed</type><methodname>__invoke</methodname>
   <methodparam choice="opt"><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Die <link linkend="object.invoke">__invoke()</link>-Methode wird aufgerufen,
   wenn ein Skript versucht, ein Objekt als Funktion aufzurufen.
  </para>
  <note>
   <para>
    Dieses Feature ist ab PHP 5.3.0 verfügbar.
   </para>
  </note>
  <example>
   <title>Nutzung von <link linkend="object.invoke">__invoke()</link></title>
   <programlisting role="php">
<![CDATA[
<?php
class CallableClass
{
 function __invoke($x)
 {
  var_dump($x);
 }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
 </sect2>
 
 <sect2 xml:id="language.oop5.magic.set-state">
  <title><link linkend="object.set-state">__set_state()</link></title>
  <methodsynopsis xml:id="object.set-state">
   <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
   <methodparam><type>array</type><parameter>properties</parameter></methodparam>
  </methodsynopsis>
  <para>
   Diese <link linkend="language.oop5.static">statische</link> Methode wird
   seit PHP 5.1.0 für Klassen aufgerufen, die mittels
   <function>var_export</function> exportiert werden.
  </para>
  <para>
   Der einzige Parameter dieser Methode ist ein Array, welches aus exportierten
   Eigenschaften der Form <literal>array('Eigenschaft' => Wert, ...)</literal>
   besteht.
  </para>
  <example>
   <title>Verwendung von <link linkend="object.set-state">__set_state()</link> (seit PHP 5.1.0)</title>
   <programlisting role="php">
<![CDATA[
<?php

class A
{
 public $var1;
 public $var2;

 public static function __set_state($an_array) // seit PHP 5.1.0
 {
  $obj = new A;
  $obj->var1 = $an_array['var1'];
  $obj->var2 = $an_array['var2'];
  return $obj;
 }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

eval('$b = ' . var_export($a, true) . ';'); // $b = A::__set_state(array(
           //    'var1' => 5,
           //    'var2' => 'foo',
           // ));
var_dump($b);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
   <note>
    <simpara>
     Wenn ein Objekt exportiert wird, überprüft <function>var_export</function>
     nicht ob <link linkend="object.set-state">__set_state()</link> von der
     Objektklasse implementiert wird, so dass der erneute Import solcher Objekte
     fehlschlägt, falls __set_state() nicht implementiert ist. Die betrifft im
     Besonderen einige interne Klassen.
    </simpara>
    <simpara>
     It is the responsibility of the programmer to verify that only objects will
     be re-imported, whose class implements __set_state().
    </simpara>
   </note>
 </sect2>
 
 <sect2 xml:id="language.oop5.magic.debuginfo">
  <title><link linkend="object.debuginfo">__debugInfo()</link></title>
  <methodsynopsis xml:id="object.debuginfo">
   <type>array</type><methodname>__debugInfo</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Diese Methode wird von <function>var_dump</function> aufgerufen, wenn
   ein Objekt ausgegeben wird, um die Eigenschaften auszulesen die gezeigt
   werden sollen. Wenn diese Methode in einem Objekt nicht definiert ist, 
   so werden alle Eigenschaften die public, protected oder private sind
   angezeigt.
  </para>
  <para>
   Diese Feature wurde mit PHP 5.6.0 hinzugefügt.
  </para>
  <example>
   <title>Verwendung von <link linkend="object.debuginfo">__debugInfo()</link></title>
   <programlisting role="php">
<![CDATA[
<?php
class C {
 private $prop;

 public function __construct($val) {
  $this->prop = $val;
 }

 public function __debugInfo() {
  return [
   'propSquared' => $this->prop ** 2,
  ];
 }
}

var_dump(new C(42));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
    </screen>
   </example>
 </sect2>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
