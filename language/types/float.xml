<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 345104 Maintainer: simp Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.types.float" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Gleitkommazahlen</title>

 <para>
  Gleitkommazahlen (auch als "floats", "doubles" oder "reelle Zahlen" bezeichnet)
  können anhand einer der folgenden Schreibweisen bezeichnet werden:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$a = 1.234; 
$b = 1.2e3; 
$c = 7E-10;
?>
]]>
  </programlisting>
 </informalexample>

 <para>
  Formell:
 </para>

 <informalexample>
  <programlisting>
<![CDATA[
LNUM          [0-9]+
DNUM          ([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*)
EXPONENT_DNUM [+-]?(({LNUM} | {DNUM}) [eE][+-]? {LNUM})
]]>
  </programlisting>
 </informalexample>

 <para>
  Die Größe einer Gleitkommazahl ist plattformabhängig, ein Maximalwert von circa 
  1.8e308 mit einer Präzision von ungefähr 14 Dezimal-Nachkommastellen ist jedoch 
  ein üblicher Wert (64-Bit IEEE-Format).
 </para>

 <warning xml:id="warn.float-precision">
  <title>Genauigkeit von Gleitkommazahlen</title>

  <para>
   Gleitkommazahlen haben eine begrenzte Präzision. Obgleich dies vom System 
   abhängig ist, verwendet PHP üblicherweise das IEEE 754 Double Precision 
   Format, welches einen maximalen relativen Rundungsfehler in einer Größenordnung
   en 1.11e-16 ergibt. Nicht-Elementare arithmetische Operationen können jedoch 
   größere Fehler hervorgerufen und natürlich muss eine Fortpflanzung des Fehlers
   berücksichtigt werden, wenn mehrere Operationen zusammengesetzt werden.
  </para>
  
  <para>
   Außerdem gibt es rationale Zahlen die zur Basis 10 als Gleitkommazahlen exakt 
   dargestellt werden können, beispielsweise <literal>0.1</literal> or
   <literal>0.7</literal>, für die es aber keine exakte Repräsentation als 
   Gleitkommazahlen zur Basis 2 gibt, welche intern aber unabhängig von der Größe 
   der Mantisse verwendet wird. Daher können Sie nicht ohne einen geringen 
   Präzisionsverlust in ihre intern binäre Darstellung umgewandelt werden. 
   Dies kann zu verwirrenden Ergebnissen führen:
   <literal>floor((0.1+0.7)*10)</literal> wird üblicherweise
   <literal>7</literal> ergeben statt des erwarteten Ergebnises von
   <literal>8</literal>, da die interne Repräsentation etwas ist wie
   <literal>7.9999999999999991118...</literal>.
  </para>

  <para>
   Man sollte sich daher niemals bis zur letzten Nachkommastelle auf 
   Fließkommazahlen verlassen und Fließkommazahlen niemals direkt auf Gleichheit 
   prüfen. Wenn eine höhere Präzision notwendig ist, stehen die 
   <link linkend="ref.bc">Mathematikfunktionen mit beliebiger Präzision</link> und 
   <link linkend="ref.gmp">gmp</link>-Funktionen zur Verfügung.
  </para>
  
  <para>
   Für eine "einfache" Erklärung, steht der Ratgeber 
   <link xlink:href="&url.floating.point.guide;">Floating Point Guide</link> zur 
   Verfügung, welchee auch den Titel hat "Why don’t my numbers add up?"
  </para>
 </warning>

 <sect2 xml:id="language.types.float.casting">
  <title>Konvertierung in float</title>
  
  <para>
   Informationen zur Konvertierung von <type>String</type>s zu 
   <type>Float</type>s findet man unter 
   <link linkend="language.types.string.conversion">Konvertierung von
   Zeichenketten zu Zahlen</link>. Werte alle anderen Typen werden 
   konvertiert, indem der Wert zuerst in den Typ <type>Integer</type> 
   konvertiert wird und dieser anschließend zu <type>Float</type>. 
   Weitere Informationen findet man unter 
   <link linkend="language.types.integer.casting">Konvertierung in Integer</link>.
   Seit PHP 5 wird eine Notice erzeugt, wenn ein <type>Object</type> in 
   einen <type>Float</type> konvertiert wird.
  </para>

 </sect2>

 <sect2 xml:id="language.types.float.comparison">
  <title>Gleitkommazahlen vergleichen</title>

  <para>
   Wie in der obigen Warnung bereits dargestellt, ist es problematisch 
   Gleitkommazahlen auf Gleichheit zu überprüfen, aufgrund ihrer internen 
   Darstellungsart. Es gibt allerdings Wege diese Vergleiche von 
   Gleitkommazahlen anzustellen, die diese Beschränkungen umgehen.
  </para>

  <para>
   Um Gleitkommazahlen auf Gleichheit zu prüfen, wird eine obere Schranke 
   für den Rundungsfehler verwendet. Dieser Wert ist bekannt als 
   Maschinengenauigkeit Epsilon bekannt und stellt die kleinste annehmbare
   Differenz in der Berechnung dar.
  </para>
  
  <informalexample>
   <simpara>
    <varname>$a</varname> und <varname>$b</varname> sind bis auf 5 Nachkommastellen gleich.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1.23456789;
$b = 1.23456780;
$epsilon = 0.00001;

if(abs($a-$b) < $epsilon) {
    echo "true";
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="language.types.float.nan">
  <title>NaN</title>
  <para>
   Einige numerische Operationen können einen Wert ergeben der durch 
   die Konstante <constant>NAN</constant> repräsentiert wird. Dieses Ergebnis 
   repräsentiert einen undefinierten oder nicht darstellbaren Wert in 
   den Fließkommaberechnungen. Jeder strikte oder nicht strikte Vergleich dieses Werts
   mit jedem beliebigen anderen Wert, inklusive sich selbst, nur nicht &true;, 
   wird ein Ergebnis von &false; hervorbringen.
  </para>
  <para>
   Da <constant>NAN</constant> eine beliebige Anzahl von anderen Werten darstellen 
   kann, sollte <constant>NAN</constant> nicht mit anderen Werten verglichen werden, 
   einschließlich sich selbst. Stattdessen sollte zur Prüfung 
   <function>is_nan</function> verwendet werden.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
