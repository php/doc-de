<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341282 Maintainer: simp Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.types.callable">
 <title>Callbacks / Callables</title>

 <para>
  Callbacks können seit PHP 5.4 mit dem Type-Hint <type>callable</type>
  gekennzeichnet werden. Diese Dokumentation verwendete auch die Typinformation
  <type>callback</type> für diesen Zweck.
 </para>

 <para>
  Einige Funktionen wie <function>call_user_func</function> oder
  <function>usort</function> akzeptieren eine benutzerdefinierte
  Callback-Funktion als Argument. Fallback-Funktionen können nicht nur
  einfache Funktionen sein, sondern auch Methoden eines 
  <type>Object</type>s, inklusive statischer Klassenmethoden.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Übergabe</title>

  <para>
   Eine PHP-Funktion wird anhand ihres Namens als <type>String</type>
   übergeben. Jede eingebaute oder benutzerdefinierte Funktion kann
   verwendet werden, außer Sprachekonstrukten wie:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function> oder
   <function>unset</function>.
  </para>

  <para>
   Eine Methode eines instantiierten <type>Object</type>s wird
   übergeben als <type>Array</type> mit dem <type>Object</type>
   an Index-Position 0 und dem Methodennamen an Position 1. Der Zugriff
   auf als protected oder private markierte Methoden von innerhalb
   der Klasse ist erlaubt.
  </para>

  <para>
   Statische Klassenmethoden können auch übergeben werden, ohne dann ein
   <type>Object</type> dieser Klasse instantiiert werden muss, indem
   man den Namen der Klasse statt eines <type>Object</type>s an
   Index 0 übergibt.
   Seit PHP 5.2.3 kann man auch <literal>'ClassName::methodName'</literal>
   übergeben.
  </para>

  <para>
   Neben den üblichen benutzerdefiniersten Funktionen können auch
   <link linkend="functions.anonymous">anonyme Funktionen</link>
   als Callback-Agumente übergeben werden.
  </para>

  <para>
   <example>
    <title>
     Beisviele für Ballback-Funktionen
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Eine Beispiel-Callback-Funktion
function my_callback_function() {
    echo 'hello world!';
}

// Eine Beispiel-Callback-Methode
class MyClass {
    static function myCallbackMethod() {
        echo 'Hello World!';
    }
}

// Typ 1: Einfaches Callback
call_user_func('my_callback_function');

// Typ 2: Statischer Methodenaufruf
call_user_func(array('MyClass', 'myCallbackMethod'));

// Typ 3: Aufruf einer Objektmethode
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Typ 4: Statischer Methodenaufruf (Seit PHP 5.2.3)
call_user_func('MyClass::myCallbackMethod');

// Typ 5: Relativer statischer Methodenaufruf (Seit PHP 5.3.0)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A

// Typ 6: Objekte die __invoke implementieren können als Callable verwendet werden (seit PHP 5.3)
class C {
    public function __invoke($name) {
        echo 'Hello ', $name, "\n";
    }
}

$c = new C();
call_user_func($c, 'PHP!');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Fallback-Beispiel mit einem Closure
    </title>
   <programlisting role="php">
<![CDATA[
<?php
// Unser Closure
$double = function($a) {
    return $a * 2;
};

// Dies ist unsere Menge an Zahlen
$numbers = range(1, 5);

// Hier verwenden wir das Callback, um
// den Wert jedes Elements in unserer
// Menge zu verdoppeln
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  &note.func-callback-exceptions;
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
