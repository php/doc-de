<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 117340b0d72bc8884290450ae8b89643528e0f58 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.types.type-system">
 <title>Typsystem</title>

 <para>
  PHP verwendet ein nominales Typsystem mit einer starken verhaltenbasierten
  Subtypisierungsbeziehung. Die Subtypisierungsbeziehung wird zur Kompilierzeit
  überprüft, während die Überprüfung der Typen dynamisch zur Laufzeit erfolgt.
 </para>

 <para>
  Das PHP-Typsystem unterstützt verschiedene atomare Typen, die zusammengesetzt
  werden können, um komplexere Typen zu erzeugen. Einige dieser Typen können
  als <link linkend="language.types.declarations">Typendeklaration</link>
  geschrieben werden.
 </para>

 <sect2 xml:id="language.types.type-system.atomic">
  <title>Atomare Typen</title>
  <para>
   Manche atomare Typen sind eingebaute Typen, die fest in die Sprache
   integriert sind und nicht durch benutzerdefinierte Typen reproduziert
   werden können.
  </para>

  <para>
   Liste der Basistypen:
   <itemizedlist>
    <listitem>
     <simpara>Eingebaute Typen</simpara>
     <itemizedlist>
      <listitem>
       <simpara>Typ <type>null</type></simpara>
      </listitem>
      <listitem>
       <simpara>
        Skalare Typen:
       </simpara>
       <itemizedlist>
        <listitem>
         <simpara>Typ <type>bool</type></simpara>
        </listitem>
        <listitem>
         <simpara>Typ <type>int</type></simpara>
        </listitem>
        <listitem>
         <simpara>Typ <type>float</type></simpara>
        </listitem>
        <listitem>
         <simpara>Typ <type>string</type></simpara>
        </listitem>
       </itemizedlist>
      </listitem>
      <listitem>
       <simpara>Typ <type>array</type></simpara>
      </listitem>
      <listitem>
       <simpara>Typ <type>object</type></simpara>
      </listitem>
      <listitem>
       <simpara>Typ <type>resource</type></simpara>
      </listitem>
      <listitem>
       <simpara>Typ <type>never</type></simpara>
      </listitem>
      <listitem>
       <simpara>Typ <type>void</type></simpara>
      </listitem>
      <listitem>
       <simpara>
        <link linkend="language.types.relative-class-types">Relative Klassentypen</link>:
        <type>self</type>, <type>parent</type> und <type>static</type>
       </simpara>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="language.types.value">Wertetypen</link>
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara><type>false</type></simpara>
      </listitem>
      <listitem>
       <simpara><type>true</type></simpara>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <simpara>
      Benutzerdefinierte Typen (im Allgemeinen als Klassentypen bezeichnet)
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        <link linkend="language.oop5.interfaces">Schnittstellen</link>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <link linkend="language.oop5.basic.class">Klassen</link>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <link linkend="language.types.enumerations">Aufzählungen</link>
       </simpara>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <simpara>Typ <type>callable</type></simpara>
    </listitem>
   </itemizedlist>
  </para>

  <sect3 xml:id="language.types.type-system.atomic.scalar">
   <title>Skalare Typen</title>
   <simpara>
    Ein Wert gilt als skalar, wenn er vom Typ <type>int</type>,
    <type>float</type>, <type>string</type> oder <type>bool</type> ist.
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.type-system.atomic.user-defined">
   <title>Benutzerdefinierte Typen</title>
   <simpara>
    Mit <link linkend="language.oop5.interfaces">Schnittstellen</link>,
    <link linkend="language.oop5.basic.class">Klassen</link> und
    <link linkend="language.types.enumerations">Aufzählungen</link> können
    benutzerdefinierte Typen erstellt werden.
    Diese werden als benutzerdefinierte Typen oder Klassentypen bezeichnet.
    So kann beispielsweise eine Klasse namens <literal>Elefant</literal>
    definiert werden, aus der Objekte vom Typ <literal>Elefant</literal>
    instanziiert werden. Eine Funktion kann dann einen Parameter vom Typ
    <literal>Elefant</literal> anfordern.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.type-system.composite">
  <title>Zusammengefasste Typen</title>
  <para>
   Es ist möglich, mehrere atomare Typen zu zusammengefassten Typen zu
   kombinieren. In PHP können Typen auf folgende Weise kombiniert werden:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     Schnittmenge von Klassentypen (Schnittstellen und Klassennamen).
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Zusammenfassung von Typen (Union-Typen).
    </simpara>
   </listitem>
  </itemizedlist>

  <sect3 xml:id="language.types.type-system.composite.intersection">
   <title>Schnittmengentypen</title>
   <para>
    Ein Schnittmengentyp akzeptiert Werte, die mehrere Klassentyp-Deklarationen
    erfüllen, anstatt nur einer. Die einzelnen Typen, die den Schnittmengentyp
    bilden, werden durch das Symbol <literal>&amp;</literal> verbunden. Daher
    wird ein Schnittmengentyp, der aus den Typen <literal>T</literal>,
    <literal>U</literal> und <literal>V</literal> besteht, als
    <literal>T&amp;U&amp;V</literal> geschrieben.
   </para>
  </sect3>

  <sect3 xml:id="language.types.type-system.composite.union">
   <title>Zusammengefasste Typen (Union-Typen)</title>
   <para>
    Ein Union-Typ akzeptiert die Werte mehrerer verschiedener Typen und nicht
    nur eines einzigen. Die einzelnen Typen, die den Union-Typ bilden, werden
    durch das Symbol <literal>|</literal> verbunden. Daher wird ein Union-Typ,
    der aus den Typen <literal>T</literal>, <literal>U</literal> und
    <literal>V</literal> besteht, als <literal>T|U|V</literal> geschrieben.
    Wenn einer der Typen ein Schnittmengentyp ist, muss er in Klammern gesetzt
    werden, damit er in <acronym>DNF</acronym> geschrieben werden kann:
    <literal>T|(X&amp;Y)</literal>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.type-system.alias">
  <title>Typ-Aliase</title>

  <para>
   PHP unterstützt die beiden Typ-Aliase <type>mixed</type> und
   <type>iterable</type>, die dem
   <link linkend="language.types.type-system.composite.union">Union-Typ</link>
   von <literal>object|resource|array|string|float|int|bool|null</literal>
   bzw. <literal>Traversable|array</literal> entsprechen.
  </para>

  <note>
   <simpara>
    PHP unterstützt keine benutzerdefinierten Typ-Aliase.
   </simpara>
  </note>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
