<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 344005 Maintainer: sammywg Status: ready -->

 <chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
  <title>Ausnahmebehandlung (Exception-Handling)</title>

  <sect1 xml:id="language.exceptions.extending">
   <title>Exceptions erweitern</title>
   <para>
    Eine benutzerdefinierte Exceptionklasse kann durch Ableitung von der
    eingebauten Exceptionklasse  erstellt werden. Die unten angegebenen
    Methoden und Eigenschaften zeigen, was innerhalb der Kindklasse von der
    eingebauten Exceptionklasse verfügbar ist.
   </para>
   <example>
    <title>Die eingebaute Exceptionklasse</title>
    <programlisting role="php">
<![CDATA[
<?php
class Exception extends Throwable
{
    protected $message = 'Unknown exception';   // Exceptionmitteilung
    private   $string;                          // __toString-Cache
    protected $code = 0;                        // Benutzerdefinierte Fehlernummer
    protected $file;                            // Quelldateiname der Exception
    protected $line;                            // Quelldateizeile der Exception
    private   $trace;                           // Rückverfolgung
    private   $previous;                        // Vorherige Exception, falls verschachtelte Exception

    public function __construct($message = null, $code = 0, Exception $previous = null);

    final private function __clone();           // Verhindert klonen von Exceptions

    final public function getMessage();         // Mitteilung der Exception
    final public function getCode();            // Fehlercode der Exception
    final public function getFile();            // Quelldateiname
    final public function getLine();            // Quelldateizeile
    final public function getTrace();           // Array zum Rückverfolgen
    final public function getPrevious();        // Vorherige Exception
    final public function getTraceAsString();   // Formatierter String der Rückverfolgung

    // Überschreibbar
    public function __toString();               // Formatierter String für
                                                // Ausgabe
}
?>
]]>
    </programlisting>
   </example>
   <para>
    Wenn eine Klasse die eingebaute Exceptionklasse erweitert und den <link
    linkend="language.oop5.decon">Konstruktor</link> neu definiert, ist es
    dringend empfohlen, dass der Konstruktor der Klasse <link
    linkend="language.oop5.paamayim-nekudotayim">parent::__construct()</link>
    aufruft, um sicherzustellen, dass alle verfügbaren Daten korrekt
    zugewiesen wurden. Die <link
    linkend="language.oop5.magic">__toString()</link>-Methode kann
    überschrieben werden, um eine maßgeschneiderte Ausgabe anzubieten, wenn
    das Objekt durch eine Zeichenkette repräsentiert werden soll.
   </para>
   <note>
    <para>
     Exceptions können nicht geklont werden. Der Versuch eine Exception zu
     <link linkend="language.oop5.cloning">klonen</link> wird einen fatalen
     <constant>E_ERROR</constant>-Fehler zur Folge haben.
    </para>
   </note>
   <example>
    <title>Die Exceptionklasse erweitern (PHP 5.3.0+)</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Eine maßgeschneiderte Exceptionklasse definieren
 */
class MyException extends Exception
{
    // Die Exception neu definieren, damit die Mitteilung nicht optional ist
    public function __construct($message, $code = 0, Exception $previous = null) {
        // etwas Code

        // sicherstellen, dass alles korrekt zugewiesen wird
        parent::__construct($message, $code, $previous);
    }

    // maßgeschneiderte Stringdarstellung des Objektes
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "Eine eigene Funktion dieses Exceptiontyps\n";
    }
}


/**
 * Erzeuge eine Klasse, um die Exception zu testen
 */
class TestException
{
    public $var;

    const THROW_NONE    = 0;
    const THROW_CUSTOM  = 1;
    const THROW_DEFAULT = 2;

    function __construct($avalue = self::THROW_NONE) {

        switch ($avalue) {
            case self::THROW_CUSTOM:
                // eigene Exception werfen
                throw new MyException('1 ist ein ungültiger Parameter', 5);
                break;

            case self::THROW_DEFAULT:
                // Vorgabe werfen
                throw new Exception('2 ist kein zugelassener Parameter', 6);
                break;

            default:
                // Keine Exception, das Objekt wird erzeugt
                $this->var = $avalue;
                break;
        }
    }
}


// Beispiel 1
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (MyException $e) {      // Wird gefangen
    echo "Meine Exception gefangen\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Übersprungen
    echo "Standardexception gefangen\n", $e;
}

// Ausführung fortsetzen
var_dump($o); // Null
echo "\n\n";


// Beispiel 2
try {
    $o = new TestException(TestException::THROW_DEFAULT);
} catch (MyException $e) {      // Dieser Typ passt nicht
    echo "Meine Exception gefangen\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Wird gefangen
    echo "Standardexception gefangen\n", $e;
}

// Ausführung fortsetzen
var_dump($o); // Null
echo "\n\n";


// Beispiel 3
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (Exception $e) {        // Wird gefangen
    echo "Standardexception gefangen\n", $e;
}

// Ausführung fortsetzen
var_dump($o); // Null
echo "\n\n";


// Beispiel 4
try {
    $o = new TestException();
} catch (Exception $e) {        // Übersprungen, keine Exception ausgelöst
    echo "Standardexception gefangen\n", $e;
}

// Ausführung fortsetzen
var_dump($o); // TestException
echo "\n\n";
?>
]]>
    </programlisting>
    <note>
     <para>
      PHP 5-Versionen vor PHP 5.3.0 unterstützen keine verschachtelten
      Exceptions. Für das Beispiel kann der folgende Code-Schnipsel als Ersatz
      für die Klasse MyException verwendet werden.
     </para>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Eine maßgeschneiderte Exceptionklasse definieren
 */
class MyException extends Exception
{
    // Die Exception neu definieren, damit die Mitteilung nicht optional ist
    public function __construct($message, $code = 0) {
        // etwas Code

        // sicherstellen, dass alles korrekt zugewiesen wird
        parent::__construct($message, $code);
    }

    // maßgeschneiderte Stringdarstellung des Objektes
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "Eine eigene Funktion dieses Exceptiontyps\n";
    }
}
?>
]]>
     </programlisting>
    </note>
   </example>
  </sect1>

  <simplesect xml:id="language.exceptions.introduction">
   <para>
    PHP 5 hat ein Exceptionmodell ähnlich dem anderer Programmiersprachen.
    Eine Exception kann in PHP geworfen (&throw;) und abgefangen (&catch;)
    werden. Um das Abfangen potentieller Exceptions zu ermöglichen, sollte der
    jeweilige Code von einem &try;-Block umschlossen werden. Jeder &try;-Block
    muss mindestens einen zugehörigen &catch;- oder &finally;-Block besitzen.
   </para>
   <para>
    Das geworfene Objekt muss eine Instanz der Klasse
    <classname>Exception</classname> oder einer Unterklasse von
    <classname>Exception</classname> sein. Der Versuch ein Objekt zu werfen,
    das das nicht ist, wird einen fatalen PHP-Fehler zur Folge haben.
   </para>
  </simplesect>

  <simplesect xml:id="language.exceptions.catch">
   <title><literal>catch</literal></title>
   <para>
    Mehrere &catch;-Blöcke können verwendet werden, um verschiedene Klassen
    von Exceptions abzufangen. Die normale Programmausführung (wenn keine
    Exception innerhalb des &try;-Blockes geworfen wird) wird nach dem
    letzten in Folge definierten &catch;-Block fortgesetzt. Exceptions können
    innerhalb eines &catch;-Blockes geworfen (oder weitergeworfen) werden.
   </para>
   <para>
    Wenn eine Exception geworfen wird, führt PHP den Programmcode hinter der
    auslösenden Anweisung nicht aus, sondern versucht, den ersten passenden
    &catch;-Block zu finden. Falls eine Exception nicht abgefangen wird, wird
    ein fataler Fehler mit einer
    "<literal>Uncaught Exception ...</literal>"-Nachricht ausgegeben, wenn
    keine Behandlung mittels <function>set_exception_handler</function>
    definiert wurde.
   </para>
   <para>
    In PHP 7.1 und später kann ein &catch;-Block mehrere Exceptions getrennt
    durch Pipe-Zeichen (<literal>|</literal>) angeben. Dies ist nützlich, wenn
    unterschiedliche Exceptions von unterschiedlichen Klassenhierarchien gleich
    behandelt werden sollen.
   </para>
  </simplesect>

  <simplesect xml:id="language.exceptions.finally">
   <title><literal>finally</literal></title>
   <para>
    Ab PHP 5.5 darf nach den &catch;-Blöcken oder stattdessen auch ein
    &finally;-Block definiert werden. Egal, ob eine Exception geworfen wurde,
    wird der Code innerhalb des &finally;-Blocks immer nach den &try;- und
    &catch;-Blöcken ausgeführt, bevor die normale Ausführung fortgesetzt wird.
   </para>
  </simplesect>

  <simplesect xml:id="language.exceptions.notes">
   &reftitle.notes;

   <note>
    <para>
     Interne PHP-Funktionen verwenden in den meisten Fällen <link
     linkend="ini.error-reporting">Error-Reporting</link>, nur moderne <link
     linkend="language.oop5">objektorientierte</link> Extensions nutzen
     Exceptions. Fehler können allerdings einfach mittels <link
     linkend="class.errorexception">ErrorException</link> in eine Exception
     umgewandelt werden.
    </para>
   </note>
   <tip>
    <para>
     Die <link linkend="intro.spl">Standard PHP Library (SPL)</link> bietet
     eine große Anzahl <link
     linkend="spl.exceptions">eingebauter Exceptions</link>.
    </para>
   </tip>
  </simplesect>

  <simplesect xml:id="language.exceptions.examples">
   &reftitle.examples;

   <example>
    <title>Eine Exception werfen</title>
    <programlisting role="php">
<![CDATA[
<?php
function inverse($x) {
    if (!$x) {
       throw new Exception('Division durch Null.');
    }
    return 1/$x;
}

try {
    echo inverse(5) . "\n";
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo 'Exception abgefangen: ',  $e->getMessage(), "\n";
}

// Ausführung fortsetzen
echo "Hallo Welt\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0.2
Exception abgefangen: Division durch Null
Hallo Welt
]]>
    </screen>
   </example>
   <example>
    <title>Exceptionbehandlung mit einem <literal>finally</literal>-Block</title>
    <programlisting role="php">
<![CDATA[
<?php
function inverse($x) {
    if (!$x) {
        throw new Exception('Division durch Null.');
    }
    return 1/$x;
}

try {
    echo inverse(5) . "\n";
} catch (Exception $e) {
    echo 'Exception abgefangen: ',  $e->getMessage(), "\n";
} finally {
    echo "Erstes finally.\n";
}

try {
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo 'Exception abgefangen: ',  $e->getMessage(), "\n";
} finally {
    echo "Zweites finally.\n";
}

// Ausführung fortsetzen
echo "Hallo Welt\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0.2
Erstes finally.
Exception abgefangen: Division durch Null.
Zweites finally.
Hallo Welt
]]>
    </screen>
   </example>
   <example>
    <title>Verschachtelte Exceptions</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyException extends Exception { }

class Test {
    public function testing() {
        try {
            try {
                throw new MyException('foo!');
            } catch (MyException $e) {
                // weiterwerfen der Exception
                throw $e;
            }
        } catch (Exception $e) {
            var_dump($e->getMessage());
        }
    }
}

$foo = new Test;
$foo->testing();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "foo!"
]]>
    </screen>
   </example>
   <example>
    <title>Multi catch exception handling</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyException extends Exception { }

class MyOtherException extends Exception { }

class Test {
    public function testing() {
        try {
            throw new MyException();
        } catch (MyException | MyOtherException $e) {
            var_dump(get_class($e));
        }
    }
}

$foo = new Test;
$foo->testing();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(11) "MyException"
]]>
    </screen>
   </example>
  </simplesect>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
