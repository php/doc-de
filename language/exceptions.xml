<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.10 Maintainer: sammywg Status: ready -->

 <chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
  <title>Ausnahmebehandlung</title>

  <para>
   PHP 5 hat ein Exceptionmodell ähnlich dem anderer Programmiersprachen.
   Eine Exception kann in PHP geworfen (<literal>throw</literal>) und abgefangen
   (<literal>catch</literal>) werden.

   Um das Fangen potentieller Exceptions
   zu ermöglichen, sollte der jeweilige Code von einem
   <literal>try</literal>-Block umschlossen werden. Jeder
   <literal>try</literal>-Block muss mindestens einen zugehörigen
   <literal>catch</literal> Block besitzen. Mehrere
   <literal>catch</literal>-Blöcke können verwendet werden, um verschiedene
   Klassen von Exceptions abzufangen.

   Die normale Programmausführung (wenn keine Exception innerhalb des
   <literal>try</literal>-Blockes geworfen wird oder kein zur Klasse der geworfenen
   Exception passendes <literal>catch</literal> vorhanden ist) wird nach dem
   letzten in Folge definierten catch-Block fortgesetzt. Exceptions können
   innerhalb eines <literal>catch</literal>-Blockes geworfen (oder
   weitergeworfen) werden.
  </para>
  <para>
   Wenn eine Exception geworfen wird, wird der Programmcode hinter der
   auslösenden Anweisung nicht ausgeführt, und PHP versucht, den ersten
   passenden <literal>catch</literal>-Block zu finden. Falls eine Exception
   nicht abgefangen wird, wird ein fataler Fehler mit einer "<literal>Uncaught
   Exception ...</literal>"-Nachricht ausgegeben, wenn nicht eine Behandlung
   mittels <function>set_exception_handler</function> definiert wurde.
  </para>
  <note>
   <para>
    Interne PHP-Funktionen verwenden in den meisten Fällen <link
    linkend="ini.error-reporting">Error-Reporting</link>, nur moderne <link
    linkend="language.oop5">objektorientierte</link> Extensions nutzen
    Exceptions. Fehler können allerdings einfach mittels <link
    linkend="class.errorexception">ErrorException</link> in eine Exception
    umgewandelt werden.
   </para>
  </note>
  <tip>
   <para>
    Die <link linkend="intro.spl">Standard PHP Library</link> bietet eine
    große Anzahl eingebauter und direkt verwendbarer Exceptions.
   </para>
  </tip>
   <example>
    <title>Eine Exception werfen</title>
    <programlisting role="php">
<![CDATA[
<?php
function inverse($x) {
    if (!$x) {
       throw new Exception('Division durch Null.');
    }
    else return 1/$x;
}

try {
    echo inverse(5) . "\n";
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo 'Exception abgefangen: ',  $e->getMessage(), "\n";
}

// Ausführung fortsetzen
echo 'Hallo Welt';
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0.2
Exception abgefangen: Division durch Null
Hallo Welt
]]>
    </screen>
   </example>
   <example>
    <title>Verschachtelte Exceptions</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyException extends Exception { }

class Test {
    public function testing() {
        try {
            try {
                throw new MyException('foo!');
            } catch (MyException $e) {
                /* weiterwerfen der Exception */
                throw $e;
            }
        } catch (Exception $e) {
            var_dump($e->getMessage());
        }
    }
}

$foo = new Test;
$foo->testing();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "foo!"
]]>
    </screen>
   </example>

  <sect1 xml:id="language.exceptions.extending">
   <title>Exceptions erweitern</title>
   <para>
    Eine benutzerdefinierte Exceptionklasse kann durch Ableitung von der
    eingebauten Exceptionklasse  erstellt werden. Die unten angegebenen Methoden
    und Eigenschaften zeigen, was innerhalb der Kindklasse von der eingebauten
    Exceptionklasse verfügbar ist.
   </para>
   <example>
    <title>Die eingebaute Exceptionklasse</title>
    <programlisting role="php">
<![CDATA[
<?php
class Exception
{
    protected $message = 'Unknown exception';   // Exceptionmitteilung
    protected $code = 0;                        // Benutzerdefinierte Fehlernummer
    protected $file;                            // Quelldateiname der Exception
    protected $line;                            // Quelldateizeile der Exception

    function __construct($message = null, $code = 0);

    final function getMessage();                // Mitteilung der Exception
    final function getCode();                   // Fehlercode der Exception
    final function getFile();                   // Quelldateiname
    final function getLine();                   // Quelldateizeile
    final function getTrace();                  // Array zum Rückverfolgen
    final function getTraceAsString();          // Formatierter String der
                                                // Rückverfolgung

    /* Überschreibbar */
    function __toString();                       // Formatierter String für
                                                 // Ausgabe
}
?>
]]>
    </programlisting>
   </example>
   <para>
    Wenn eine Klasse die eingebaute Exceptionklasse erweitert und den <link
    linkend="language.oop5.decon">Konstruktor</link> neu definiert, ist es
    dringend empfohlen, dass der Konstruktor der Klasse <link
    linkend="language.oop5.paamayim-nekudotayim">parent::__construct()</link>
    aufruft, um sicherzustellen, dass alle verfügbaren Daten korrekt zugewiesen
    wurden. Die <link linkend="language.oop5.magic">__toString()</link>-Methode
    kann überschrieben werden, um eine maßgeschneiderte Ausgabe anzubieten,
    wenn das Objekt durch eine Zeichenkette repräsentiert werden soll.
   </para>
   <example>
    <title>Die Exceptionklasse erweitern</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Eine maßgeschneiderte Exceptionklasse definieren
 */
class MyException extends Exception
{
    // Die Exceptionmitteilung neu definieren, damit diese nicht optional ist
    public function __construct($message, $code = 0) {
        // etwas Code

        // sicherstellen, dass alles korrekt zugewiesen wird
        parent::__construct($message, $code);
    }

    // maßgeschneiderte Stringdarstellung des Objektes
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "Eine eigene Funktion dieses Exceptiontyps\n";
    }
}


/**
 * Erzeuge eine Klasse, um die Exception zu testen
 */
class TestException
{
    public $var;

    const THROW_NONE    = 0;
    const THROW_CUSTOM  = 1;
    const THROW_DEFAULT = 2;

    function __construct($avalue = self::THROW_NONE) {

        switch ($avalue) {
            case self::THROW_CUSTOM:
                // eigene Exception werfen
                throw new MyException('1 ist ein ungültiger Parameter', 5);
                break;

            case self::THROW_DEFAULT:
                // Vorgabe werfen
                throw new Exception('2 ist kein zugelassener Parameter', 6);
                break;

            default:
                // Keine Exception, das Objekt wird erzeugt
                $this->var = $avalue;
                break;
        }
    }
}


// Beispiel 1
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (MyException $e) {      // Wird gefangen
    echo "Meine Exception gefangen\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Übersprungen
    echo "Standardexception gefangen\n", $e;
}

// Ausführung fortsetzen
var_dump($o);
echo "\n\n";


// Beispiel 2
try {
    $o = new TestException(TestException::THROW_DEFAULT);
} catch (MyException $e) {      // Dieser Typ passt nicht
    echo "Meine Exception gefangen\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Wird gefangen
    echo "Standardexception gefangen\n", $e;
}

// Ausführung fortsetzen
var_dump($o);
echo "\n\n";


// Beispiel 3
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (Exception $e) {        // Wird gefangen
    echo "Standardexception gefangen\n", $e;
}

// Ausführung fortsetzen
var_dump($o);
echo "\n\n";


// Beispiel 4
try {
    $o = new TestException();
} catch (Exception $e) {        // Übersprungen, keine Exception ausgelöst
    echo "Standardexception gefangen\n", $e;
}

// Ausführung fortsetzen
var_dump($o);
echo "\n\n";
?>
]]>
    </programlisting>
   </example>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
