 <chapter id="language.oop">
  <title>Klassen und Objekte</title>

  <sect1 id="keyword.class">
   <title><literal>Klassen</literal></title>
   <para>
    Eine Klasse ist eine Sammlung von Variablen und von Funktionen,
    die mit diesen Variablen arbeiten. Eine Klasse wird folgendermaßen
    definiert:
    <informalexample>
     <programlisting role="php">
&lt;?php
class Einkaufswagen {
    var $produkte;  // Produkte in Ihrem Einkaufswagen
   
    // Füge dem Einkaufswagen $anzahl Artikel der Sorte $artnr zu
 
    function fuege_hinzu ($artnr, $anzahl) {
        $this->produkte[$artnr] += $anzahl;
    }
   
    // Nimm $anzahl von Artikel wieder aus dem Einkaufswagen
 
    function nimm_heraus ($artnr, $anzahl) {
        if ($this->produkte[$artnr] > $anzahl) {
            $this->produkte[$artnr] -= $anzahl;
            return true;
        } else {
            return false;
        }   
    }
}
?>
     </programlisting>
    </informalexample>
   </para>
   <para>
    In diesem Beispiel wird eine Klasse "Einkaufswagen" definiert. Sie
    besteht aus einem assoziativen Array von Produkten im
    Einkaufswagen und zwei Funktionen zum Zufügen und Entfernen von
    Einkäufen.
   </para>
   <para>
    Klassen sind Typen, dass heisst die Blaupausen für realle
    Variablen.  Um sie zu nutzen, muß zunächst eine Variable mit dem
    Operator <literal>new</literal> angelegt werden.
   </para>
   <informalexample>
    <programlisting role="php">
$einkaufswagen = new Einkaufswagen;
$einkaufswagen->fuege_hinzu("10", 1);
    </programlisting>
   </informalexample>
   <para>
    Hier wird das Objekt $einkaufswagen aus der Klasse Einkaufswagen
    geschaffen. Dann wird die enthaltene Funktion fuege_hinzu()
    aufgerufen, um ein Produkt mit der Artikelnummer 10 in den
    Einkaufswagen zu tun.
   </para>
   <para>
    Klassen können ebenfalls Erweiterungen von anderen Klassen sein.
    Die erweiterte, oder auch abgeleitete Klasse enthält alle
    Funktionen der ursprünglichen Klasse, und dazu die eigenen
    Ergänzungen.  Das geschieht mit dem Schlüsselwort
    "extends". Mehrfachvererbung wird von PHP nicht unterstützt.
   </para>
   <informalexample>
    <programlisting role="php">
class Mein_Einkaufswagen extends Einkaufswagen {
    var $besitzer;
  
    function setze_besitzer ($name) {
        $this->besitzer = $name;
    }
}
    </programlisting>
   </informalexample>
   <para>
    In diesem Beispiel wird eine Klasse Mein_Einkaufswagen definiert.
    Sie enthält alle Funktionen der Klasse Einkaufswagen, eine
    zusätzliche Variable $besitzer und die zusätzliche Funktion
    setze_besitzer().  Man kann den Einkaufswagen auch weiterhin wie
    oben erzeugen, nur kann man jetzt auch den Besitzer setzen oder
    herausfinden. Die alten Funktionen der Klasse Einkaufswagen können
    ebenfalls weiterverwendet werden.
   </para>
   <informalexample>
    <programlisting role="php">
$meinkaufswagen = new Mein_Einkaufswagen; // Kreiere einen Einkaufswagen
$meinkaufswagen->setze_besitzer ("kris"); // Name dieser Klasse
print $meinkaufswagen->besitzer;          // schreibe den Namen des Besitzers
$meinkaufswagen->fuege_hinzu ("10", 1);   // (Siehe oben, vererbt 
                                          // von Einkaufswagen)
    </programlisting>
   </informalexample>
   <para>
    Innerhalb der Funktionen einer Klasse bezeichnet die Variable
    $this das aktuelle Objekt. Sie können mit $this->irgendwas auf
    dessen Variablen und Funktionen zugreifen.
   </para>
   <para>
    Konstruktoren sind Funktionen eine Klasse, die beim Erschaffen
    eines neuen Objektes automatisch aufgerufen werden.  Eine Funktion
    wird zu einem Kontruktor, wenn Sie den gleichen Namen wie die
    Klasse trägt.
   </para>
   <informalexample>
    <programlisting role="php">
class Auto_Einkaufswagen extends Einkaufswagen {
    function Auto_Einkaufswagen () {
        $this->fuege_hinzu ("10", 1);
    }
}
    </programlisting>
   </informalexample>
   <para>
    Die Klasse Auto_Einkaufswagen entspricht der Klasse Einkaufswagen
    plus einen Kontstruktor, der bereits für eine erste Füllung 
    (1 Artikel der Nummer 10) gesorgt hat. Jeder neu erzeugte 
    Auto_Einkaufswagen enthält so von vorneherein diesen Artikel.
    Kontruktoren können auch Parameter enthalten. Aber diese Parameter
    sind optional, und können so nützlicher eingesetzt werden.
   </para>
   <informalexample>
    <programlisting role="php">
class Konstruktor_Einkaufswagen extends Einkaufswagen {
    function Konstruktor_Einkaufswagen ($produkt = "10", $anzahl = 1) {
        $this->fuege_hinzu ($produkt, $anzahl);
    }
}
 
// Kaufe wieder den gleichen alten Kram ein.
 
$standard_einkaufswagen   = new Konstruktor_Einkaufswagen;
 
// Kaufe etwas bestimmtes ein ...
 
$anderer_Einkaufswagen = new Konstruktor_Einkaufswagen ("20", 17);
    </programlisting>
   </informalexample>
   <caution>
    <simpara>
     Bei abgeleiteten Klassen wird der Konstruktor der Ursprungsklasse
     nicht automatisch aufgerufen, wenn der Konstruktor der
     abgeleiteten Klasse aufgerufen wird.
    </simpara>
   </caution>
  </sect1>
 
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
