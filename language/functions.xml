<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: hholzgra Status: working -->
<!-- Credits: tom -->

 <chapter xml:id="language.functions" xmlns="http://docbook.org/ns/docbook">
  <title>Funktionen</title>

  <sect1 xml:id="functions.user-defined">
   <title>Vom Nutzer definierte Funktionen</title>

   <para>
    Eine Funktion kann wie folgt definiert werden:
   </para>

   <para>
    <example>
     <title>Pseudocode zur Demonstration der Nutzung von Variablen</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo ($arg_1, $arg_2, ..., $arg_n)
{
    echo "Beispielfunktion.\n";
    return $retval;
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    Jeder beliebige korrekte PHP-Code kann in einer Funktion
    vorkommen, sogar andere Funktionen und <link
    linkend="keyword.class">Klassen</link>-Definitionen.
   </simpara>
   <para>
    Für Funktionsnamen gelten in PHP die gleichen Regeln wie für
    andere Bezeichner. Ein gültiger Funktionsname beginnt mit
    einem Buchstaben oder Unterstrich gefolgt von einer beliebigen
    Anzahl von Buchstaben, Ziffern und Unterstrichen. Als
    regulärer Ausdruck wird dies so ausgedrückt:
    <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>.
   </para>
   &tip.userlandnaming;
   <simpara>
    Es ist nicht erforderlich, dass Funktionen bereits definiert sein
    müssen, wenn auf sie verviesen wird,
    <emphasis>außer</emphasis> wenn eine Funktion nur bedingt definiert
    wird, wie in den beiden untenstehenden Beispielen gezeigt.
   </simpara>
   <para>
    Wenn eine Funktion nur unter bestimmten Bedingungen definiert wird,
    muss die Definition dieser Funktion noch <emphasis>vor</emphasis>
    deren Aufruf abgearbeitet werden.
   </para>
   <para>
    <example>
     <title>Bedingte Funktionen</title>
     <programlisting role="php">
<![CDATA[
<?php

$makefoo = true;

/* Wir können foo() von hier aus nicht
   aufrufen, da sie noch nicht existiert,
   aber wir können bar() aufrufen */

bar();

if ($makefoo) {
  function foo ()
  {
    echo "Ich existiere nicht, bis mich die Programmausführung erreicht hat.\n";
  }
}

/* Nun können wir foo() sicher aufrufen,
   da $makefoo als true ausgewertet wurde */

if ($makefoo) foo();

function bar()
{
  echo "Ich existiere sofort nach Programmstart.\n";
}

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Funktionen innerhalb von Funktionen</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo()
{
  function bar()
  {
    echo "Ich existiere nicht, bis foo() aufgerufen wurde.\n";
  }
}

/* Wir können bar() noch nicht
   aufrufen, da es nicht existiert */

foo();

/* Nun können wir auch bar() aufrufen,
   da sie durch die Abarbeitung von
   foo() verfügbar gemacht wurde */

bar();

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Alle Funktionen und Klassen in PHP existieren im globalen Namensraum -
    sie können außerhalb von Funktionen aufgerufen werden, selbst wenn sie
    innerhalb einer Funktion definiert wurden und umgekehrt.
   </para>
   <simpara>
    PHP unterstützt weder das Überladen von Funktionen, noch ist es
    möglich, zuvor deklarierte Funktionen neu zu definieren oder die
    Definition zu löschen.
   </simpara>
   <note>
    <simpara>
     Groß- und Kleinschreibung spielt zwar bei Funktionsnamen keine
     Rolle, es empfiehlt sich aber trotzdem bei Funktionsaufrufen
     die gleiche Schreibweise wie in der Deklaration zu benutzen.
    </simpara>
   </note>
   <simpara>
    Sowohl <link linkend="functions.variable-arg-list">eine
    variable Anzahl Parameter</link> als auch
    <link linkend="functions.arguments.default">Vorgabewerte
    für Parameter</link> werden in Funktionen unterstützt.
    Siehe auch die Funktionsreferenzen für
    <function>func_num_args</function>,
    <function>func_get_arg</function> und
    <function>func_get_args</function> für weitere Informationen.
   </simpara>

   <para>
    Es ist in PHP möglich, Funktionen rekursiv aufzurufen.
    Sie sollten aber rekursive Aufrufe mit einer Rekursionstiefe
    von mehr als 100-200 vermeiden, da diese zu einem Stacküberlauf
    und damit zum Programmabbruch führen können.
    <example>
     <title>Rekursive Funktionen</title>
     <programlisting role="php">
<![CDATA[
<?php
function recursion($a)
{
    if ($a < 20) {
        echo "$a\n";
        recursion($a + 1);
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect1>

  <sect1 xml:id="functions.arguments">
   <title>Funktionsparameter</title>

   <simpara>
    Mit einer Parameterliste kann man Informationen an eine Funktion
    übergeben. Die Parameterliste ist eine durch Kommas getrennte
    Liste von Ausdrücken.
   </simpara>
   <para>
    PHP unterstützt die Weitergabe von Parametern als Werte (das ist
    der Standard), als <link
    linkend="functions.arguments.by-reference">Verweise</link> und
    als <link linkend="functions.arguments.default">Vorgabewerte</link>.
    <link linkend="functions.variable-arg-list">Eine variable Anzahl
    von Parametern</link> wird ebenfalls unterstützt, siehe auch die
    Funktionsreferenzen für
    <function>func_num_args</function>,
    <function>func_get_arg</function> und
    <function>func_get_args</function> für weitere Informationen.
   </para>

   <para>
    <example>
     <title>Arrays an Funktionen übergeben</title>
     <programlisting role="php">
<![CDATA[
<?php
function rechne_array($eingabe)
{
    echo "$eingabe[0] + $eingabe[1] = ", $eingabe[0]+$eingabe[1];
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <sect2 xml:id="functions.arguments.by-reference">
    <title>Verweise als Parameter übergeben</title>

    <simpara>
     Normalerweise werden den Funktionen Werte als Parameter
     übermittelt. Wenn man den Wert dieses Parameters innerhalb der
     Funktion ändert, bleibt der Parameter außerhalb der Funktion
     unverändert. Wollen Sie aber erreichen, dass die Änderung auch außerhalb
     der Funktion sichtbar wird, müssen Sie die Parameter als Verweise
     (Referenzen) übergeben.
    </simpara>

    <para>
     Wenn eine Funktion einen Parameter generell als Verweis behandeln
     soll, setzt man in der Funktionsdefinition ein kaufmännisches Und
     (&amp;) vor den Parameternamen:
    </para>

    <para>
     <example>
      <title>Übergeben von Funktionsparametern als Verweis</title>
      <programlisting role="php">
<![CDATA[
<?php
function fuege_etwas_anderes_an (&$string)
{
    $string .= 'und nun zu etwas anderem.';
}
$str = 'Dies ist ein String, ';
fuege_etwas_anderes_an ($str);
echo $str; // Ausgabe: 'Dies ist ein String, und nun zu etwas anderem.'
?>
]]>
      </programlisting>
     </example>
    </para>

   </sect2>

   <sect2 xml:id="functions.arguments.default">
    <title>Vorgabewerte für Parameter</title>

    <para>
     Eine Funktion kann C++-artige Vorgabewerte für skalare Parameter
     wie folgt definieren:
    </para>

    <para>
     <example>
      <title>Einsatz von Vorgabeparametern</title>
      <programlisting role="php">
<![CDATA[
<?php
function machkaffee ($typ = "Cappucino")
{
    return "Ich mache eine Tasse $typ.\n";
}
echo machkaffee ();
echo machkaffee (null);
echo machkaffee ("Espresso");
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     Die Ausgabe von diesem kleinen Skript ist:
    </para>
    <para>
     <screen>
Ich mache eine Tasse Cappucino.
Ich mache eine Tasse.
Ich mache eine Tasse Espresso.
     </screen>
    </para>
    <para>
     PHP gestattet es, Arrays und den speziellen Typ &null; als
     Vorgabewert zu nutzen, zum Beispiel:
    </para>
    <para>
     <example>
      <title>Nichtskalare Typen als Vorgabewert</title>
      <programlisting role="php">
<![CDATA[
<?php
function makecoffee ($types = array("cappuccino"), $coffeeMaker = NULL)
{
    $device = is_null($coffeeMaker) ? "hands" : $coffeeMaker;
    return "Ich mache eine Tasse ".join(", ", $types)." mit $device.\n";
}
echo makecoffee ();
echo makecoffee (array("cappuccino", "lavazza"), "teapot");
?>
]]>
      </programlisting>
     </example>
    </para>

    <simpara>
     Der Vorgabewert muss ein konstanter Ausdruck sein, darf also zum
     Beispiel keine Variable, Eigenschaft einer Klasse oder ein
     Funktionsaufruf sein.
    </simpara>
    <para>
     Bitte beachten Sie, dass alle Vorgabewerte rechts von den
     Nicht-Vorgabeparametern stehen sollten - sonst wird es nicht
     funktionieren. Betrachten Sie folgendes Beispiel:
    </para>

    <para>
     <example>
      <title>Ungültige Anwendung von Vorgabewerten</title>
      <programlisting role="php">
<![CDATA[
<?php
function mach_joghurt ($typ = "rechtsdrehendes", $geschmack)
{
    return "Mache einen Becher $typ $geschmack-joghurt.\n";
}

echo mach_joghurt ("Brombeer");   // arbeitet nicht wie erwartet
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     Die Ausgabe dieses Beispiels ist:
    </para>

    <para>
     <screen>
Warning: Missing argument 2 in call to mach_joghurt() in
/usr/local/etc/httpd/htdocs/phptest/functest.html on line 41
Mache einen Becher Brombeer-joghurt.
     </screen>
    </para>

    <para>
     Nun vergleichen Sie bitte oberes Beispiel mit folgendem:
    </para>

    <para>
     <example>
     <title>Richtiger Einsatz von Vorgabewerten</title>
      <programlisting role="php">
<![CDATA[
<?php
function mach_joghurt ($geschmack, $typ = "rechtsdrehendes")
{
    return "Mache einen Becher $typ $geschmack-Joghurt.\n";
}

echo mach_joghurt ("Brombeer");   // arbeitet wie erwartet.
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     ... und jetzt ist die Ausgabe:
    </para>

    <para>
     <screen>
Mache einen Becher rechtsdrehendes Brombeer-Joghurt.
     </screen>
    </para>

    <note>
     <simpara>
      Das Setzen von Standardwerten für Argumente, die als Referenz
      übergeben werden ("passed by reference") wird seit PHP 5
      unterstützt.
     </simpara>
    </note>

   </sect2>

   <sect2 xml:id="functions.variable-arg-list">
    <title>Variable Anzahl von Parametern</title>

    <simpara>
     Beginnend mit PHP 4 wird eine variable Anzahl von Parametern in
     benutzerdefinierten Funktionen unterstützt. Das Handling dieser Parameter
     fällt mittels der Funktionen <function>func_num_args</function>,
     <function>func_get_arg</function> und
     <function>func_get_args</function> sehr leicht.
    </simpara>

    <simpara>
     Es ist keine spezielle Syntax erforderlich. Die Parameter können
     wie gehabt explizit in den Funktionsdeklarationen angegeben
     werden und werden sich wie gewohnt verhalten.
    </simpara>

   </sect2>

  </sect1>

  <sect1 xml:id="functions.returning-values">
   <title>Rückgabewerte</title>

   <para>
    Sie können Werte mit dem optionalen Befehl "return" zurückgeben.
    Es können Variablen jeden Typs zurückgegeben werden, auch Arrays
    oder Objekte. Dies beendet sofort die Funktion und die Kontrolle
    wird wieder an die aufrufende Zeile zurückgegeben. Weitere
    Informationen finden Sie unter <function>return</function>.
   </para>

   <para>
    <example>
     <title>Einsatz von <function>return</function></title>
     <programlisting role="php">
<![CDATA[
<?php
function quadrat ($zahl)
{
    return $zahl * $zahl;
}
echo quadrat (4);   // gibt '16' aus.

?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Es ist nicht möglich, mehrere Werte von einer Funktion zurückzugeben.
    Ein ähnliches Resultat kann man aber durch die Rückgabe von Arrays
    erreichen.
   </para>

   <para>
    <example>
    <title>Rückgabe mehrere Werte in Arrays</title>
     <programlisting role="php">
<![CDATA[
<?php
function kleine_zahlen()
{
   return array (0, 1, 2);
}
list ($null, $eins, $zwei) = kleine_zahlen();
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Um von einer Funktion eine Referenz zurückzugeben, müssen Sie
    den Referenz-Operator &amp; sowohl in der Funktionsdeklaration,
    als auch bei der Zuweisung des zurückgegebenen Wertes verwenden:
   </para>

   <para>
    <example>
     <title>Rückgabe von Referenzen</title>
     <programlisting role="php">
<![CDATA[
<?php
function &returniere_referenz()
{
    return $einereferenz;
}

$neuereferenz =& returniere_referenz();
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Weitere Informationen über Referenzen finden Sie im Kapitel
    <link linkend="language.references">Referenzen in PHP</link>.
   </simpara>
  </sect1>

  <sect1 xml:id="functions.variable-functions">
   <title>Variablenfunktionen</title>

   <para>
    PHP unterstützt das Konzept der Variablenfunktionen. Wenn Sie an
    das Ende einer Variablen Klammern hängen, versucht PHP eine
    Funktion aufzurufen, deren Name der aktuelle Wert der Variablen
    ist. Dies kann unter anderem für Callbacks, Funktionstabellen,
    usw. genutzt werden.
   </para>
   <para>
    Variablenfunktionen funktionieren nicht mit Sprachkonstrukten
    wie <function>echo</function>, <function>print</function>,
    <function>unset</function>, <function>isset</function>,
    <function>empty</function>, <function>include</function> und
    <function>require</function>. Sie müssen Ihre eigenen Wrapperfunktionen
    verwenden, um diese Konstrukte als variable Funktionen benutzen zu
    können.
   </para>
   <para>
    <example>
     <title>Beispiel für Variablenfunktionen</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    echo "In foo()<br />\n";
}

function bar($arg = '')
{
    echo "In bar(); der Parameter ist '$arg'.<br />\n";
}

// Dies ist eine Wrapperfunkiton für echo
function echoit($string)
{
    echo $string;
}

$func = 'foo';
$func();        // Dies ruft foo() auf

$func = 'bar';
$func('test');  // Dies ruft bar() auf

$func = 'echoit';
$func('test');  // Dies ruft echoit() auf
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Sie können auch die Methode eines Objektes mittels der variablen
    Funktionen aufrufen.
    <example>
     <title>Variable Methode</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    function Variable()
    {
        $name = 'Bar';
        $this->$name(); // Dies ruft die Bar() Methode auf
    }

    function Bar()
    {
        echo "Das ist Bar";
    }
}

$foo = new Foo();
$funcname = "Variable";
$foo->$funcname();   // Dies ruft $foo->Variable() auf

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Siehe auch
    <function>call_user_func</function>,
    <link linkend="language.variables.variable">Variable Variablen</link> und
    <function>function_exists</function>.
   </para>
  </sect1>

  <sect1 xml:id="functions.internal">
   <title>Interne (eingebaute) Funktionen</title>

   <para>
    PHP enthält standmäßig viele Funktionen und Konstrukte, weiterhin
    gibt es viele Funktionen die vorausssetzen, dass bestimmte PHP-Extensions
    einkompiliert wurden, anderenfalls erhalten Sie beim
    Aufruf "undefined function"-Fehlermeldungen.
    Um z.B. <link linkend="ref.image">Grafik-Funktionen</link> wie
    <function>imagecreatetruecolor</function> zu nutzen, müssen Sie PHP mit
    <productname>GD</productname>-Unterstützung kompilieren, oder um
    <function>mysql_connect</function> zu nutzen, muss Ihr PHP mit <link
    linkend="ref.mysql">MySQL</link>-Unterstützung kompiliert sein.
    Viele Kernfunktionen wie z.B. die <link
    linkend="ref.strings">String</link>- und <link
    linkend="ref.var">Variablen</link>-Funktionen sind bereits in
    jeder PHP-Version enthalten. Ein Aufruf von <function>phpinfo</function>
    oder <function>get_loaded_extensions</function> zeigt Ihnen, welche
    Extensions in Ihrer PHP-Installation verfügbar sind.
    Beachten Sie weiterhin, dass viele Extensions bereits standardmäßig
    aktiviert sind und das PHP-Manual nach Extensions unterteilt ist.
    Weitere Informationen zur Einrichtung von PHP finden Sie in den
    Kapiteln <link linkend="configuration">Konfiguration</link>,
    <link linkend="install">Installation</link> und den Kapiteln
    zu den einzelnen Extensions.
   </para>
   <para>
    Wie Funktionsprototypen zu lesen und zu verstehen sind, ist im
    Kapitel '<link linkend="about.prototypes">Wie man eine Funktionsdefinition
    (Prototyp) liest'</link> erklärt.
    Es ist wichtig zu erkennen, was eine Funktion zurückgibt und ob
    die übergebenen Parameter verändert werden. So gibt z.B.
    <function>str_replace</function> den bearbeiteten String zurück,
    während <function>usort</function> direkt auf der übergebenen
    Variablen arbeitet.
    Jede Handbuchseite enthält spezifische Informationen für jede
    Funktion wie ihre Parameter, die Rückgabewerte sowohl bei Erfolg
    als auch im Fehlerfall, Änderungen des Verhaltens und die Verfügbarkeit.
    Die Kenntnis dieser wichtigen (und oft subtilen) Unterschiede ist
    von entscheidender Bedeutung für das Schreiben korrekten PHP-Codes.
   </para>
   <note>
    <simpara>
     Wenn Funktionen andere Parameter erhalten als erwartet, d.h. wenn z.B.
     ein <type>array</type> übergeben wird obwohl ein <type>string</type>
     erwartet wird, so ist der Rückgabewert undefiniert. In solchen Fällen
     ist es üblich, dass &null; zurückgegeben wird, dies ist aber nur eine
     Konvention, auf die Sie sich nicht unbedingt verlassen können.
    </simpara>
   </note>
   <para>
    Siehe auch <function>function_exists</function>,
    <link linkend="funcref">the function reference</link>,
    <function>get_extension_funcs</function> und
    <function>dl</function>.
   </para>
  </sect1>

  <sect1 xml:id="functions.anonymous">
   <title>Anonymous functions</title>

   <simpara>
    Anonymous functions, also known as <literal>closures</literal>, allow the
    creation of functions which have no specified name. They are most useful as
    the value of <link linkend="language.types.callback">callback</link>
    parameters, but they have many other uses.
   </simpara>

   <example>
    <title>Anonymous function example</title>
    <programlisting role="php">
<![CDATA[
<?php
echo preg_replace_callback('~-([a-z])~', function ($match) {
    return strtoupper($match[1]);
}, 'hello-world');
// outputs helloWorld
?>
]]>
    </programlisting>
   </example>

   <simpara>
    Closures can also be used as the values of variables; PHP automatically 
    converts such expressions into instances of the
    <classname>Closure</classname> internal class. Assigning a closure to a
    variable uses the same syntax as any other assignment, including the
    trailing semicolon:
   </simpara>

   <example>
    <title>Anonymous function variable assignment example</title>
    <programlisting role="php">
<![CDATA[
<?php
$greet = function($name)
{
    printf("Hello %s\r\n", $name);
};

$greet('World');
$greet('PHP');
?>
]]>
    </programlisting>
   </example>
   
   <simpara>
    Closures may also inherit variables from the parent scope. Any such
    variables must be declared in the function header. Inheriting variables from
    the parent scope is <emphasis>not</emphasis> the same as using global
    variables. Global variables exist in the global scope, which is the same no
    matter what function is executing. The parent scope of a closure is the
    function in which the closure was declared (not necessarily the function it
    was called from). See the following example:
   </simpara>

   <example>
    <title>Closures and scoping</title>
    <programlisting role="php">
<![CDATA[
<?php
// A basic shopping cart which contains a list of added products
// and the quantity of each product. Includes a method which
// calculates the total price of the items in the cart using a
// closure as a callback.
class Cart
{
    const PRICE_BUTTER  = 1.00;
    const PRICE_MILK    = 3.00;
    const PRICE_EGGS    = 6.95;

    protected   $products = array();
    
    public function add($product, $quantity)
    {
        $this->products[$product] = $quantity;
    }
    
    public function getQuantity($product)
    {
        return isset($this->products[$product]) ? $this->products[$product] :
               FALSE;
    }
    
    public function getTotal($tax)
    {
        $total = 0.00;
        
        $callback =
            function ($quantity, $product) use ($tax, &$total)
            {
                $pricePerItem = constant(__CLASS__ . "::PRICE_" .
                    strtoupper($product));
                $total += ($pricePerItem * $quantity) * ($tax + 1.0);
            };
        
        array_walk($this->products, $callback);
        return round($total, 2);;
    }
}

$my_cart = new Cart;

// Add some items to the cart
$my_cart->add('butter', 1);
$my_cart->add('milk', 3);
$my_cart->add('eggs', 6);

// Print the total with a 5% sales tax.
print $my_cart->getTotal(0.05) . "\n";
// The result is 54.29
?>
]]>
    </programlisting>
   </example>
   
   <simpara>
    Anonymous functions are currently implemented using the
    <link linkend="reserved.classes.closure">
    <classname>Closure</classname></link> class. This is an implementation
    detail and should not be relied upon.
   </simpara>
   
   <note>
    <simpara>
     Anonymous functions are available since PHP 5.3.0.
    </simpara>
   </note>

   <note>
    <simpara>
     It is possible to use <function>func_num_args</function>,
     <function>func_get_arg</function>, and <function>func_get_args</function>
     from within a closure.
    </simpara>
   </note>

  </sect1>

 </chapter>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
