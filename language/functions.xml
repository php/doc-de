<?xml version="1.0" encoding="iso-8859-1"?>
 <chapter id="functions">
  <title>Funktionen</title>

  <sect1 id="functions.user-defined">
   <title>Vom Nutzer definierte Funktionen</title>
 
   <para>
    Eine Funktion kann wie folgt definiert werden:
 
    <informalexample>
     <programlisting role="php">
function foo ($arg_1, $arg_2, ..., $arg_n) {
    echo "Beispielfunktion.\n";
    return $retval;
}
     </programlisting>
    </informalexample>
   </para>
     
   <simpara>
    Jeder beliebige korrekte PHP-Code kann in einer Funktion
    vorkommen, sogar andere Funktionen und <link
    linkend="keyword.class">Klassen- </link>Definitionen.
   </simpara>
   <simpara>
    In PHP3 müssen Funktionen definiert sein, bevor man auf sie
    verweist.  In PHP4 ist das nicht mehr erforderlich.
   </simpara>
  </sect1>
 
  <sect1 id="functions.arguments">
   <title>Funktionsparameter</title>
 
   <simpara>
    Mit einer Parameterliste kann man Informationen an eine Funktion 
    übergeben. Die Parameterliste ist eine kommagetrennte Liste von
    Variablen und/oder Konstanten.
   </simpara>
   <para>
    PHP unterstützt die Weitergabe von Parametern als Werte (das ist
    der Standard), als <link
    linkend="functions.arguments.by-reference">Verweise </link>, und
    als <link linkend="functions.arguments.default">Vorgabewerte
    </link>. Die Übergabe einer beliebigen Parameterzahl ist nicht
    möglich, einen ähnlichen Effekt kann man aber durch die Übergabe
    von Arrays erreichen.
 
    <informalexample>
     <programlisting role="php">
function rechne_array($eingabe) {
    echo "$eingabe[0] + $eingabe[1] = ", $eingabe[0]+$eingabe[1];
}
     </programlisting>
    </informalexample>
   </para>
 
   <sect2 id="functions.arguments.by-reference">
    <title>Verweise als Parameter übergeben</title>
 
    <simpara>
     Normalerweise werden den Funktionen Werte als Parameter
     übermittelt. Wenn man den Wert dieses Parameters innerhalb der
     Funktion ändert, bleibt der Parameter ausserhalb der Funktion
     unverändert. Wollen Sie aber genau das erreichen, dann müssen
     Sie die Parameter als Verweise übergeben. 
    </simpara>
       
    <para>
     Wenn eine Funktion einen Parameter generell als Verweis behandeln
     soll, setzt man ein kaufmännisches Und (&amp;) in der
     Funktionsdefinition vor den Parameternamen:
 
     <informalexample>
      <programlisting role="php">
function fuege_etwas_anderes_an (&amp;$string) {
    $string .= 'und nun zu etwas völlig anderem.';
}
$str = 'Dies ist ein String, ';
fuege_etwas_anderes_an ($str);
echo $str; // Ausgabe 'Dies ist ein String, und nun zu etwas völlig anderem.'
      </programlisting>
     </informalexample>
    </para>
 
    <para>
     Wenn Sie eine Variable andererseits als Verweis an eine Funktion
     übergeben wollen, die dies nicht tut, können Sie das
     kaufmännische Und (&amp;) auch beim Aufruf der Funktion
     verwenden:
 
     <informalexample>
      <programlisting role="php">
function bla ($fasel) {
    $fasel .= ' und nun zu etwas völlig anderem.';
}
$str = 'Dies ist ein String, , ';
bla ($str);
echo $str;  // outputs 'Dies ist ein String, '
bla (&amp;$str);
echo $str;  // outputs 'Dies ist ein String, und nun zu etwas völlig anderem.'
      </programlisting>
     </informalexample>
    </para>
   </sect2>
 
   <sect2 id="functions.arguments.default">
    <title>Vorgabewerte für Parameter</title>
 
    <para>
     Eine Funktion kann C++-artige Vorgabewerte für skalare Parameter
     wie folgt definieren:
 
     <informalexample>
      <programlisting role="php">
function machkaffee ($typ = "Cappucino") {
    return "Ich mache eine Tasse $typ.\n";
}
echo machkaffee ();
echo machkaffee ("Espresso");
      </programlisting>
     </informalexample>
    </para>
 
    <para>
     Die Ausgabe von diesem kleinen Skript ist:
 
     <screen>
Ich mache eine Tasse Cappucino.
Ich mache eine Tasse Espresso.
     </screen>
    </para>
 
    <simpara>
     Der Vorgabewert muß eine Konstante sein, darf also (zum Beispiel)
     keine Variable oder Element einer Klasse sein.
    </simpara>
    <para>
     Bitte beachten Sie, dass alle Vorgabewerte rechts von den 
     Nicht-Vorgabeparametern stehen sollten; - sonst wird es nicht 
     funktionieren. Betrachten Sie folgendes Beispiel:

     <informalexample>
      <programlisting role="php">
function mach_joghurt ($typ = "rechtsdrehendes", $geschmack) {
    return "Mache einen Becher $typ $geschmack-joghurt.\n";
}
 
echo mach_joghurt ("Brombeer");   // arbeitet nicht wie erwartet
      </programlisting>
     </informalexample>
    </para>
 
    <para>
     Die Ausgabe dieses Beispiels ist::
 
     <screen>
Warning: Missing argument 2 in call to makeyogurt() in 
/usr/local/etc/httpd/htdocs/php3test/functest.html on line 41
Mache einen Becher Brombeer-joghurt.
     </screen></para>
 
    <para>
     Nun vergleichen Sie bitte oberes Beispiel mit folgendem:
 
     <informalexample>
      <programlisting role="php">
function mach_joghurt ($geschmack, $typ = "rechtsdrehendes") {
    return "Mache einen Becher $typ $geschmack-joghurt.\n";
}
 
echo mach_jogurt ("Brombeer");   // arbeitet wie erwartet.
      </programlisting>
     </informalexample>
    </para>
 
    <para>
     ... und jetzt ist die Ausgabe:
 
     <screen>
Mache einen Becher rechtsdrehendes Brombeer-Joghurt.
     </screen>
    </para>

   </sect2>

  </sect1>
 
  <sect1 id="functions.returning-values">
   <title>Rückgabewerte</title>
 
   <para>
    Sie können Werte mit dem optionalen Befehl "return" zurückgeben.
    Es können Variablen jedes Typs zurückgegeben werden, auch Listen
    oder Objekte.
    <informalexample>
     <programlisting role="php">
function quadrat ($zahl) {
    return $zahl * $zahl;
}
echo quadrat (4);   // gibt '16' aus.
     </programlisting>
    </informalexample>
   </para>
      
   <para>
    Es ist leider nicht möglich, mehrere Werte von einer Funktion
    zurückgeben zu lassen. Ein ähnliches Resultat kann man aber durch
    die Rückgabe von Listen bekommen.
 
    <informalexample>
     <programlisting role="php">
function kleine_zahlen() {
   return array (0, 1, 2);
}
list ($null, $eins, $zwei) = kleine_zahlen();
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 
  <sect1 id="functions.old-syntax">
   <title><literal>old_function</literal></title>
 
   <simpara>
    Der Befehl <literal>old_function</literal> erlaubt es, ein
    Funktion genauso wie bei PHP/FI2 zu definieren (nur "function"
    wird durch "old_function" ersetzt.
   </simpara>
   <simpara>
    Dieser Befehl sollte nur vom PHP/FI2->PHP3-Konverter genutzt
    werden.
   </simpara>
   <warning>
    <para>
     Funktionen, die durch <literal>old_function</literal> definiert
     werden, können nicht von PHP selbst aufgerufen werden. Das heißt
     unter anderem, dass sie nicht in Funktionen wie <function>usort
     </function>, <function>array_walk</function> und <function>
     register_shutdown_function</function> benutzt werden können.
     Dieses Manko können Sie umgehen, indem Sie eine Adapterfunktion
     in normalem PHP3 schreiben, die die
     <literal>old_function</literal> aufruft.
    </para>
   </warning>

  </sect1>

  <sect1 id="functions.variable-functions">
   <title>Variablenfunktionen</title>

   <para>
    PHP unterstützt das Konzept der Variablenfunktionen. Wenn Sie an
    das Ende einer Variablen Klammern hängen, versucht PHP eine
    Funktion aufzurufen, deren Name der aktuelle Wert der Variable
    ist. Diese Möglichkeit kann für Callbacks, Funktionstabellen und
   </para>

   <para>
    <example>
     <title>Beispiel für Variablenfunktionen</title>
     <programlisting role="php">
&lt;?php
function blah() {
    echo "In blah()&lt;br>\n";
}

function fasel($arg = '') {
    echo "In fasel(); ist der Parameter '$arg'.&lt;br>\n";
}

$func = 'blah';
$func();
$func = 'fasel';
$func('test');
?>
     </programlisting>
    </example>
   </para>

  </sect1>
 
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
