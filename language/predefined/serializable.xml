<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.2 Maintainer: sammywg Status: ready -->

<phpdoc:classref xml:id="class.serializable" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Das Serializable-Interface</title>
 <titleabbrev>Serializable</titleabbrev>

 <partintro>

<!-- {{{ Serializable intro -->
  <section xml:id="serializable.intro">
   &reftitle.intro;
   <para>
    Interface für benutzerdefiniertes Serialisieren.
   </para>

   <para>
    Klassen, die dieses Interface implementieren, unterstützen <link
    linkend="language.oop5.magic.sleep">__sleep</link> und <link
    linkend="language.oop5.magic.sleep">__wakeup</link> nicht mehr. Die
    Methode serialize wird immer aufgerufen, wenn eine Instanz serialisiert
    werden muss. Dabei wird weder __destruct() aufgerufen noch irgend ein
    anderer Seiteneffekt erzeugt, es sei denn, ein solcher wird in der Methode
    serialize explizit erzeugt. Wenn die Daten deserialisiert werden, ist die
    Klasse bekannt und die passende unserialize()-Methode wird anstelle des
    Konstruktors __construct() aufgerufen. Falls notwendig, kann der
    Standardkonstruktor innerhalb von unserialize() aufgerufen werden.
    constructor you may do so in the method
   </para>
  </section>
<!-- }}} -->

  <section xml:id="serializable.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Serializable</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Serializable</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">Methoden</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.serializable')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="serializable.examples">
   <example xml:id="serializable.example.basic"><!-- {{{ -->
    <title>Basisnutzung</title>
    <programlisting role="php">
<![CDATA[
<?php
class obj implements Serializable {
    private $data;
    public function __construct() {
        $this->data = "Meine private-Daten";
    }
    public function serialize() {
        return serialize($this->data);
    }
    public function unserialize($data) {
        $this->data = unserialize($data);
    }
    public function getData() {
        return $this->data;
    }
}

$obj = new obj;
$ser = serialize($obj);

$newobj = unserialize($ser);

var_dump($newobj->getData());
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
string(15) "Meine private-Daten"
]]>
    </screen>
   </example><!-- }}} -->
  </section>


 </partintro>

 &language.predefined.serializable.serialize;
 &language.predefined.serializable.unserialize;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
