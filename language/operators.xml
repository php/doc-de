<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: hholzgra Status: working -->
<!-- CREDITS: tzwenny, betz -->
 <chapter xml:id="language.operators" xmlns="http://docbook.org/ns/docbook">
  <title>Operatoren</title>
  <simpara>
   Ein Operator ist etwas das Sie mit einem oder mehreren Werten füttern (oder
   Ausdrücken, um im Programmierjargon zu sprechen) und Sie erhalten als
   Ergebnis einen anderen Wert (damit wird diese Konstruktion selbst zu einem
   Ausdruck). Als Eselsbrücke können Sie sich Operatoren als Funktionen oder
   Konstrukte vorstellen, die Ihnen einen Wert zurück liefern (ähnlich print)
   und alles, was Ihnen keinen Wert zurück liefert (ähnlich echo) als irgend
   etwas Anderes.
  </simpara>
  <para>
   Es gibt drei Arten von Opratoren. Als erstes gibt es den unären Operator,
   der nur mit einem Wert umgehen kann, zum Beispiel ! (der
   Verneinungsoperator) oder ++ (der Inkrementoperator). Die zweite Gruppe
   sind die sogenannten binären Operatoren; diese Gruppe enthält die meisten
   Operatoren, die PHP unterstützt. Eine Liste dieser Operatoren finden Sie
   weiter unten im Abschnitt
   <link linkend="language.operators.precedence">Operator-Rangfolge
   </link>.
  </para>
  <para>
   Die dritte Gruppe bildet der ternäre Operator : ?:. Dieser sollte eher
   benutzt werden um abhängig von einem dritten Ausdruck eine Auswahl zwischen
   zwei Ausdrücken zu treffen, als zwischen zwei Sätzen oder Pfaden der
   Programmausführung zu wählen. Übrigens ist es eine sehr gute Idee ternäre
   Ausdrücke in Klammern zu setzen.
  </para>

  <sect1 xml:id="language.operators.precedence">
   <title>Operator-Rangfolge</title>
   <para>
    Die Operator-Rangfolge legt fest, wie "eng" ein Operator zwei
    Ausdrücke miteinander verbindet. Zum Beispiel ist das Ergebnis des
    Ausdruckes <literal>1 + 5 * 3</literal> <literal>16</literal>
    und nicht <literal>18</literal>, da der Multiplikations-Operator
    ("*") in der Rangfolge höher steht als der Additions-Operator
    ("+"). Wenn nötig, können Sie Klammern setzen, um die Rangfolge
    der Operatoren zu beeinflussen. Zum Beispiel ergibt: <literal>(1 + 5) *
    3</literal> <literal>18</literal>. Ist die Rangfolge der Operatoren gleich,
    wird links nach rechts Assoziativität benutzt.
   </para>
   <para>
    Die folgende Tabelle zeigt die Rangfolge der Operatoren, oben
    steht der Operator mit dem höchsten Rang.

    <table>
     <title>Operator-Rangfolge</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Assoziativität</entry>
        <entry>Operator</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>keine Richtung</entry>
        <entry>new</entry>
       </row>
       <row>
        <entry>rechts</entry>
        <entry>[</entry>
       </row>
       <row>
        <entry>rechts</entry>
        <entry>
         ! ~ ++ -- (int) (float) (string) (array) (object) @
        </entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>* / %</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>+ - .</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>&lt;&lt; &gt;&gt;</entry>
       </row>
       <row>
        <entry>keine Richtung</entry>
        <entry>&lt; &lt;= &gt; &gt;=</entry>
       </row>
       <row>
        <entry>keine Richtung</entry>
        <entry>== != === !==</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>&amp;</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>^</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>|</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>&amp;&amp;</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>||</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>? :</entry>
       </row>
       <row>
        <entry>rechts</entry>
        <entry>
         = += -= *= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;=
        </entry>
       </row>
       <row>
        <entry>rechts</entry>
        <entry>print</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>and</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>xor</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>or</entry>
       </row>
       <row>
        <entry>links</entry>
        <entry>,</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <note>
    <para>
     Obwohl <literal>!</literal> einen höheren Rang gegenüber
     <literal>=</literal> hat, erlaubt es Ihnen PHP immer noch
     ähnliche Ausdrücke wie den folgenden zu schreiben: <literal>if
     (!$a =foo())</literal>.In diesem Ausdruck wird die Ausgabe von
     <literal>foo()</literal> der Variablen <varname>$a</varname>
     zugewiesen.
    </para>
   </note>
  </sect1>

  <sect1 xml:id="language.operators.arithmetic">
   <title>Arithmetische Operatoren</title>
   <simpara>
    Erinnern Sie sich noch an die Grundrechenarten aus der Schule? Die
    arithmetischen Operatoren funktionieren genauso:
   </simpara>

   <table>
    <title>Arithmetische Operatoren</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Beispiel</entry>
       <entry>Name</entry>
       <entry>Ergebnis</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a + $b</entry>
       <entry>Addition</entry>
       <entry>Summe von $a und $b.</entry>
      </row>
      <row>
       <entry>$a - $b</entry>
       <entry>Subtraktion</entry>
       <entry>Differenz von $a und $b.</entry>
      </row>
      <row>
       <entry>$a * $b</entry>
       <entry>Multiplikation</entry>
       <entry>Produkt von $a und $b.</entry>
      </row>
      <row>
       <entry>$a / $b</entry>
       <entry>Division</entry>
       <entry>Quotient von $a und  $b.</entry>
      </row>
      <row>
       <entry>$a % $b</entry>
       <entry>Modulus</entry>
       <entry>Rest von $a geteilt durch $b.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <simpara>
    Der Divisions-Operator ("/") gibt immer eine Fließkommazahl
    zurück, sogar wenn die zwei Operanden Ganzzahlen sind (oder
    Zeichenketten, die nach Ganzzahlen umgewandelt wurden).
   </simpara>
   <simpara>
    Siehe auch im Handbuch das Kapitel über <link
    linkend="ref.math">Mathematische Funktionen</link>.
   </simpara>
  </sect1>

  <sect1 xml:id="language.operators.assignment">
   <title>Zuweisungsoperatoren</title>
   <simpara>
    Der einfachste Zuweisungsoperator ist "=". Wahrscheinlich kommt
    man als erstes auf die Idee, ihn mit "ist gleich" zu bezeichnen.
    Das ist falsch. In Wirklichkeit bedeutet er, dass dem linken
    Operanden der Wert des Ausdrucks auf der rechten Seite zugewiesen
    wird (man müsste ihn also mit "wird gesetzt auf den Wert von"
    übersetzen).
   </simpara>
   <para>
    Der Wert eines Zuweisungs-Ausdruckes ist der zugewiesene Wert.
    D.h. der Wert des Ausdruckes "$a = 3" ist 3. Das erlaubt es,
    einige raffinierte Dinge anzustellen:
    <informalexample>
     <programlisting role="php"> 
<![CDATA[
<?php

$a = ($b = 4) + 5; // $a ist nun gleich 9 und $b wurde auf den Wert 4 gesetzt.

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Zusätzlich zu dem oben vorgestellten Zuweisungsoperator "=" gibt
    es "kombinierte Operatoren" für alle
    <link linkend="language.operators">binären, arithmetischen</link> und
    String-Operatoren, die es erlauben, den Wert einer Variablen in
    einem Ausdruck zu benutzen, und dieser anschließend das Ergebnis
    des Ausdrucks als neuen Wert zuzuweisen. Zum Beispiel: 
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$a = 3;
$a += 5; // setzt $a auf den Wert 8, als ob wir geschrieben haetten: $a = $a + 5;
$b = "Hallo ";
$b .= "Du!"; // setzt $b auf den Wert "Hallo Du!", aequivalent zu 
             // $b = $b . "Du!";
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Man beachte, dass die Zuweisung nur den Wert der Ursprungsvarialbe
    der neuen Variable zuweist (Zuweisung als Wert, sie "kopiert"),
    weshalb sich Änderungen an der einen Variablen nicht auf die
    andere auswirken werden. Das kann wichtig sein, wenn man ein
    großes Array o. ä. in einer Schleife kopieren muss. Beginnend mit
    PHP 4 wird 'assignement by reference' (Zuweisung als Verweis),
    mit Hilfe der Schreibweise <computeroutput
    >$var =&amp;$othervar;</computeroutput> unterstützt , das 
    funktioniert jedoch nicht in
    PHP 3. 'Assignement by reference' bedeutet, dass beide Variablen
    nach der Zuweisung die selben Daten repräsentieren und nichts
    kopiert wird. Um mehr über Referenzen zu lernen, lesen Sie bitte
    den Abschnitt <link linkend="language.references">Referenzen
    erklärt</link>.
   </para>

  </sect1>

  <sect1 xml:id="language.operators.bitwise">
   <title>Bit-Operatoren</title>
   <simpara>
    Bit-Operatoren erlauben es, in einem Integer bestimmte Bits "ein-
    oder  auszuschalten" (auf 0 oder 1 zu setzen). Wenn beide, der
    links- und rechtsseitige Parameter, Zeichenketten sind, arbeiten
    die Bit-Operatoren mit ASCII-Werten der einzelnen Zeichen.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo 12 ^ 9; // Ausgabe '5'

echo "12" ^ "9"; // Ausgabe: das Backspace-Zeichen (ascii 8)
                 // ('1' (ascii 49)) ^ ('9' (ascii 57)) = #8

echo "hallo" ^ "hello"; // Gibt die ASCII-Werte #0 #4 #0 #0 #0
                        // 'a' ^ 'e' = #4 aus
?>
]]>
     </programlisting>
    </informalexample> 
   </para>

   <table>
    <title>Bit-Operatoren</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Beispiel</entry>
       <entry>Name</entry>
       <entry>Ergebnis</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a &amp; $b</entry>
       <entry>Und</entry>
       <entry>
        Bits, die in $a und $b gesetzt sind werden gesetzt.
       </entry>
      </row>
      <row>
       <entry>$a | $b</entry>
       <entry>Oder</entry>
       <entry>
        Bits, die in $a oder $b gesetzt sind werden gesetzt.
       </entry>
      </row>
      <row>
       <entry>$a ^ $b</entry>
       <entry>Entweder oder (Xor)</entry>
       <entry>
        Bits, die entweder in $a oder $b, jedoch nicht in beiden
        gesetzt sind, werden gesetzt.
       </entry>
      </row>
      <row>
       <entry>~ $a</entry>
       <entry>Nicht</entry>
       <entry>
        Die Bits, die in $a nicht gesetzt sind, werden gesetzt und
        umgekehrt.
       </entry>
      </row>
      <row>
       <entry>$a &lt;&lt; $b</entry>
       <entry>Nach links verschieben</entry>
       <entry>
        Verschiebung der Bits von $a um $b Stellen nach links (jede
        Stelle entspricht einer Mulitplikation mit zwei).
       </entry>
      </row>
      <row>
       <entry>$a &gt;&gt; $b</entry>
       <entry>Nach rechts verschieben</entry>
       <entry>
        Verschiebt die Bits von $a um $b Stellen nach rechts (jede
        Stelle entspricht einer Division durch zwei).
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 xml:id="language.operators.comparison">
   <title>Vergleichs-Operatoren</title>
   <simpara>
    Vergleichs-Operatoren erlauben es - wie der Name schon sagt -
    zwei Werte zu vergleichen. Wenn Sie an Beispielen verschiedener
    auf Typen bezogener Vergleiche interessiert sind, können Sie sich
    <link linkend="types.comparisons">PHP type comparison
    tables</link> anschauen.
   </simpara>

   <table>
    <title>Vergleichsoperatoren</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Beispiel</entry>
       <entry>Name</entry>
       <entry>Ergebnis</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a == $b</entry>
       <entry>Gleich</entry>
       <entry>Gibt &true; zurück, wenn $a gleich $b ist.</entry>
      </row>
      <row>
       <entry>$a === $b</entry>
       <entry>Identisch</entry>
       <entry>
        Gibt &true; zurück wenn $a gleich $b ist und beide vom
        gleichen Typ sind (eingeführt in PHP 4).
       </entry>
      </row>
      <row>
       <entry>$a != $b</entry>
       <entry>Ungleich</entry>
       <entry>
        Gibt &true; zurück, wenn $a nicht gleich $b ist.
       </entry>
      </row>
      <row>
       <entry>$a &lt;&gt; $b</entry>
       <entry>Ungleich</entry>
       <entry>
        Gibt &true; zurück, wenn $a nicht gleich $b ist.
       </entry>
      </row>
      <row>
       <entry>$a !== $b</entry>
       <entry>Nicht identisch</entry>
       <entry>
        Gibt &true; zurück, wenn $a nicht gleich $b ist, oder wenn
        beide nicht vom gleichen Typ sind (eingeführt in PHP 4).
       </entry>
      </row>
      <row>
       <entry>$a &lt; $b</entry>
       <entry>Kleiner Als</entry>
       <entry>Gibt &true; zurück, wenn $a kleiner als $b ist.</entry>
      </row>
      <row>
       <entry>$a &gt; $b</entry>
       <entry>Größer Als</entry>
       <entry>Gibt &true; zurück, wenn $a größer als $b ist.</entry>
      </row>
      <row>
       <entry>$a &lt;= $b</entry>
       <entry>Kleiner Gleich </entry>
       <entry>
        Gibt &true; zurück, wenn $a kleiner oder gleich $b ist.
       </entry>
      </row>
      <row>
       <entry>$a &gt;= $b</entry>
       <entry>Größer Gleich</entry>
       <entry>
        Gibt &true; zurück, wenn $a größer oder gleich $b ist.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <sect2 xml:id="language.operators.comparison.ternary">
    <title>Ternärer Operator</title>
   <para>
    Ein weiterer Vergleichs-Operator ist der "?:" (oder
    ternäre) Operator.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Beispielanwendung für den ternären Operator
$action = (empty($_POST['action'])) ? 'standard' : $_POST['action'];

// Obiges ist mit dieser if/else-Anweisung identisch
if (empty($_POST['action'])) {
    $action = 'standard';
} else {
    $action = $_POST['action'];
}
?>
]]>
     </programlisting>
    </informalexample> 
    Der Ausdruck <literal>(ausdr1) ? (ausdr2) : (ausdr3)</literal>
    gibt <replaceable>ausdr2</replaceable> zurück, wenn
    <replaceable>ausdr1</replaceable> &true; zurückgibt und
    <replaceable>ausdr3</replaceable>, wenn
    <replaceable>ausdr1</replaceable> &false; zurückgibt.
   </para>
   <para>
     Seit PHP 5.3 kann man beim ternären Operator den mittleren Teil
     weglassen. Der Ausdruck <literal>(ausdr1) ?: (ausdr3)</literal> 
    gibt <replaceable>ausdr1</replaceable> zurück, wenn 
    <replaceable>ausdr1</replaceable> als &true; ausgewertet wird, 
    andernfalls <replaceable>ausdr3</replaceable>.
   </para>
   <para>
    Siehe auch <function>strcasecmp</function>,
    <function>strcmp</function>,
    <link linkend="language.operators.array">Array-Operatoren</link>
    und den Abschnitt über <link linkend="language.types">Typen</link>.
   </para>
   </sect2>

  </sect1>

  <sect1 xml:id="language.operators.errorcontrol">
   <title>Fehler-Kontroll-Operatoren</title>
   
   <simpara>
    PHP unterstützt einen Operator zur Fehlerkontrolle: Das @-Symbol.
    Stellt man das @ in PHP vor einen Ausdruck werden alle
    Fehlermeldungen, die von diesem Ausdruck erzeugt werden könnten,
    ignoriert.
   </simpara>

   <simpara>
    Ist das <link
    linkend="ini.track-errors"><option>track_errors</option></link>-Feature
    aktiviert, werden alle Fehlermeldungen, die von diesem Ausdruck erzeugt
    werden, in der Variablen <link
    linkend="reserved.variables.phperrormsg">$php_errormsg</link>
    gespeichert. Da diese Variable mit jedem neuen Auftreten eines
    Fehlers überschrieben wird, sollte man sie möglichst bald nach
    Verwendung des Ausdrucks überprüfen, wenn man mit ihr arbeiten
    will.
   </simpara>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/* Beabsichtigter Dateifehler */
$my_file = @file ('nicht_vorhandene_Datei') or
    die ("Datei konnte nicht geöffnetwerden: Fehler war:'$php_errormsg'");

// Das funktioniert bei jedem Ausdruck, nicht nur bei Funktionen:
$value = @$cache[$key]; 
// erzeugt keine Notice, falls der Index $key nicht vorhanden ist.

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <note>
    <simpara>
     Der @-Operator funktioniert nur bei <link
     linkend="language.expressions">Ausdrücken</link>. Eine einfache
     Daumenregel: wenn Sie den Wert von etwas bestimmen können, dann
     können Sie den @-Operator davor schreiben. Zum Beispiel können
     Sie ihn vor Variablen, Funktionsaufrufe und vor
     <function>include</function> setzen, vor Konstanten und so
     weiter. Nicht verwenden können Sie diesen Operator vor Funktions-
     oder Klassendefinitionen oder vor Kontrollstrukturen wie zum
     Beispiel <literal>if</literal> und <literal>foreach</literal> und
     so weiter.
    </simpara>
   </note>
   <simpara>
    Siehe auch <function>error_reporting</function> und den Abschnitt
    über <link linkend="ref.errorfunc">Error Handling and Logging
    Functions</link>.
   </simpara>
   <note>
    <para>
     Der @ Fehler-Kontroll-Operator verhindert jedoch keine Meldungen,
     welche aus Fehlern beim Parsen resultieren.
    </para>
   </note>

   <warning>
    <para>
     Zum gegenwärtigen Zeitpunkt deaktiviert der "@"
     Fehler-Kontrolloperator die Fehlermeldungen selbst bei kritischen
     Fehlern, die die Ausführung eines Skripts beenden. Unter anderem
     bedeutet das, wenn Sie "@" einer bestimmten Funktion
     voranstellen, diese aber nicht zur Verfügung steht oder falsch
     geschrieben wurde, Ihr PHP-Skript einfach beendet wird, ohne
     Hinweis auf die Ursache.
    </para>
   </warning>
  </sect1>

  <sect1 xml:id="language.operators.execution">
   <title>Operatoren zur Programmausführung</title>
   <para>
    PHP unterstützt einen Operator zur Ausführung externer Programme:
    Die sog. Backticks (``). Achtung: Die Backticks sind keine
    einfachen Anführungszeichen! PHP versucht, den Text zwischen den
    Backticks als Kommandozeilen-Befehl auszuführen. Die Ausgabe des
    aufgerufenen Programms wird zurückgegeben (d.h. wird nicht einfach
    ausgegeben, sondern kann einer Variablen zugewiesen werden). Die
    Verwendung des Backtick-Operators ist mit
    <function>shell_exec</function> identisch.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$output = `ls -al`;
echo "<pre>$output</pre>";
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <note>
    <para>
     Der Backtick-Operator steht nicht zur Verfügung, wenn &safemode;
     aktiviert ist oder die Funktion <function>shell_exec</function>
     deaktiviert wurde.
    </para>
   </note>
   <para>
    Siehe auch den Abschnitt über <link linkend="ref.exec">Funktionen
    zur Programmausführung</link>, <function>popen</function>,
    <function>proc_open</function> und <link
    linkend="features.commandline">Using PHP from the
    commandline</link>.
   </para>
  </sect1>

  <sect1 xml:id="language.operators.increment">
   <title>Inkrement- bzw. Dekrementoperatoren</title>

   <para>
    PHP unterstützt Prä- und Post-Inkrement- und Dekrementoperatoren
    im Stil der Programmiersprache C.
   </para>

   <table>
    <title>Inkrement- und Dekrementoperatoren</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Beispiel</entry>
       <entry>Name</entry>
       <entry>Auswirkung</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>++$a</entry>
       <entry>Prä-Inkrement</entry>
       <entry>
        Erhöht den Wert von $a um eins (inkrementiert $a) und gibt
        anschließend den neuen Wert von $a zurück.
       </entry>
      </row>
      <row>
       <entry>$a++</entry>
       <entry>Post-Inkrement</entry>
       <entry>
        Gibt zuerst den aktuellen Wert von $a zurück und erhöht dann
        den Wert von $a um eins.
       </entry>
      </row>
      <row>
       <entry>--$a</entry>
       <entry>Prä-Dekrement</entry>
       <entry>
        Vermindert den Wert von $a um eins (dekrementiert $a) und gibt
        anschließend den neuen Wert von $a zurück.
       </entry>
      </row>
      <row>
       <entry>$a--</entry>
       <entry>Post-Dekrement</entry>
       <entry>
        Gibt zuerst den aktuellen Wert von $a zurück und erniedrigt
        dann den Wert von $a um eins.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    Ein einfaches Beispiel-Skript:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "<h3>Post-Inkrement</h3>";
$a = 5;
echo "Sollte 5 sein: " . $a++ . "<br />\n";
echo "Sollte 6 sein: " . $a . "<br />\n";

echo "<h3>Pre-Inkrement</h3>";
$a = 5;
echo "Sollte 6 sein: " . ++$a . "<br />\n";
echo "Sollte 6 sein: " . $a . "<br />\n";

echo "<h3>Post-Dekrement</h3>";
$a = 5;
echo "Sollte 5 sein: " . $a-- . "<br />\n";
echo "Sollte 4 sein: " . $a . "<br />\n";

echo "<h3>Pre-Dekrement</h3>";
$a = 5;
echo "Sollte 4 sein: " . --$a . "<br />\n";
echo "Sollte 4 sein: " . $a . "<br />\n";
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    PHP folgt bei der Behandlung arithmetischer Operationen an
    Zeichenvariablen der Perl-Konvention und nicht der von C. Zum
    Beispiel wird in Perl aus 'Z'+1 'AA', während aus 'Z'+1 in C '['
    wird ( ord('Z') == 90, ord('[') == 91 ). Beachten Sie, dass
    Zeichenvariablen zwar inkrementiert aber nicht dekrementiert
    werden können.
    <example>
     <title>Arithmetrische Operationen an Zeichenvariablen</title>
     <programlisting role="php">
<![CDATA[
<?php
$i = 'W';
for($n=0; $n<6; $n++)
  echo ++$i . "\n";

/*
  Erzeugt in etwa folgende Ausgabe:

X
Y
Z
AA
AB
AC

*/
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect1>


  <sect1 xml:id="language.operators.logical">
   <title>Logische Operatoren</title>

   <table>
    <title>Logische Operatoren</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Beispiel</entry>
       <entry>Name</entry>
       <entry>Ergebnis</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a and $b</entry>
       <entry>Und</entry>
       <entry>&true; wenn sowohl $a als auch $b &true; ist.</entry>
      </row>
      <row>
       <entry>$a or $b</entry>
       <entry>Oder</entry>
       <entry>&true; wenn $a oder $b &true; ist.</entry>
      </row>
      <row>
       <entry>$a xor $b</entry>
       <entry>Entweder Oder</entry>
       <entry>
        &true; wenn entweder $a oder $b &true; ist, aber nicht beide.
       </entry>
      </row>
      <row>
       <entry>! $a</entry>
       <entry>Nicht</entry>
       <entry>&true; wenn $a nicht &true; ist.</entry>
      </row>
      <row>
       <entry>$a &amp;&amp; $b</entry>
       <entry>Und</entry>
       <entry>&true; wenn sowohl $a als auch $b &true; ist.</entry>
      </row>
      <row>
       <entry>$a || $b</entry>
       <entry>Oder</entry>
       <entry>&true; wenn $a oder $b &true; ist.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <simpara>
    Der Grund dafür, dass es je zwei unterschiedliche Operatoren für 
    die "Und"- und die "Oder"-Verknüpfung gibt ist der, dass die beiden
    Operatoren jeweils Rangfolgen haben. (siehe auch <link
    linkend="language.operators.precedence">Operator-Rangfolge</link>.)
   </simpara>

   <example>
    <title>Logische Operatoren dargestellt</title>
    <programlisting role="php">
<![CDATA[
<?php

// --------------------
// foo() wird nie aufgerufen werden, da die Operatoren umgangen werden

$a = (false && foo());
$b = (true  || foo());
$c = (false and foo());
$d = (true  or  foo());

// --------------------
// "||" hat eine größere Priorität als "or"

// Das Ergebnis des Ausdrucks (false || true) wird $e zugewiesen
// Funktioniert wie: ($e = (false || true))
$e = false || true;

// Die Konstante "false" wird $f zugewiesen und danach wird true ignoriert
// Funktioniert wie: (($e = false) or true)
$f = false or true;

var_dump($e, $f);

// --------------------
// "&&" hat eine größere Priorität als "and"

// Das Ergebnis des Ausdrucks (true && false) wird $g zugewiesen
// Funktioniert wie: ($g = (true && false))
$g = true && false;

// Die Konstante "true" wird $h zugewiesen und danach wird false ignoriert
// Funktioniert wie: (($h = true) and false)
$h = true and false;

var_dump($g, $h);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
bool(true)
bool(false)
bool(false)
bool(true)
]]>
    </screen>
   </example>

  </sect1>

  <sect1 xml:id="language.operators.string">
   <title>Zeichenketten-Operatoren</title>
   <simpara>
    Es gibt in PHP zwei Operatoren für <type>string</type>
    (Zeichenkette). Der erste ist der Vereinigungs-Operator ('.'),
    dessen Rückgabewert eine zusammengesetzte Zeichenkette aus dem
    rechten und dem linken Argument ist. Der zweite ist der
    Vereinigungs-Zuweisungsoperator ('.='), der das Argument auf der
    rechten Seite an das Argument der linken Seite anhängt. Siehe
    <link
    linkend="language.operators.assignment">Zuweisungs-Operatoren</link>
    für weitere Informationen.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = "Hallo ";
$b = $a . "Welt!"; // $b enthält jetzt den Text "Hallo Welt!"

$a = "Hallo ";
$a .= "Welt!";    // $a enthält jetzt den Text "Hallo Welt!"
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Siehe auch die Abschnitte über <link
    linkend="language.types.string">Strings / Zeichenketten</link> und
    <link linkend="ref.strings">String-Funktionen</link>.
   </para>
  </sect1>

  <sect1 xml:id="language.operators.array">
   <title>Array-Operatoren</title>
   <table>
    <title>Array-Operatoren</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Beispiel</entry>
       <entry>Name</entry>
       <entry>Ergebnis</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a + $b</entry>
       <entry>Vereinigung</entry>
       <entry>Verinigung von $a und $b.</entry>
      </row>
      <row>
       <entry>$a == $b</entry>
       <entry>Gleichwerigkeit</entry>
       <entry>
        &true; wenn $a und $b die gleichen Schlüssel- und Wert-Paare 
        enthalten.</entry>
      </row>
      <row>
       <entry>$a === $b</entry>
       <entry>Identität</entry>
       <entry>
        &true; wenn $a und $b die gleichen Schlüssel- und Wert-Paare 
        in der gleichen Reihenfolge enthalten.
       </entry>
      </row>
      <row>
       <entry>$a != $b</entry>
       <entry>Ungleichheit</entry>
       <entry>&true; wenn $a nicht gleich $b ist.</entry>
      </row>
      <row>
       <entry>$a &lt;&gt; $b</entry>
       <entry>Ungleichheit</entry>
       <entry>&true; wenn $a nicht gleich $b ist.</entry>
      </row>
      <row>
       <entry>$a !== $b</entry>
       <entry>nicht identisch</entry>
       <entry>&true; wenn $a nicht identisch zu $b ist.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    Der <literal>+</literal> Operator hängt das rechsstehende Array an das
    linksstehende Array an, wobei doppelte Schlüssel NICHT überschrieben
    werden.
   </para>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = array("a" => "Apfel", "b" => "Banane");
$b = array("a" =>"pear", "b" => "Erdbeere", "c" => "Kirsche");

$c = $a + $b; // Verinigung von $a mit $b;
echo "Vereinigung von \$a mit \$b: \n";
var_dump($c);

$c = $b + $a; // Vereinigung von $b mit $a;
echo "Vereinigung von \$b mit \$a: \n";
var_dump($c);
?>
]]>
     </programlisting>
    </informalexample>
    Dieses Skript gibt folgendes aus:
    <screen role="php">
<![CDATA[
Vereinigung von $a mit $b:
array(3) {
  ["a"]=>
  string(5) "Apfel"
  ["b"]=>
  string(6) "Banane"
  ["c"]=>
  string(7) "Kirsche"
}
Vereinigung von $b mit $a:
array(3) {
  ["a"]=>
  string(4) "pear"
  ["b"]=>
  string(8) "Erdbeere"
  ["c"]=>
  string(7) "Kirsche"
}
]]>
    </screen>
   </para>
   <para>
    Beim Vergleich werden Arrayelemente als gleich angesehen, wenn diese
    dieselben Schlüssel und Werte beinhalten.
   </para>
   <para>
    <example>
     <title>Array-Vergleiche</title>
     <programlisting role="php">
<![CDATA[
<?php
$a = array("Apfel", "Banane");
$b = array(1 => "Banane", "0" => "Apfel");

var_dump($a == $b); // bool(true)
var_dump($a === $b); // bool(false)
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Siehe auch die Abschnitte über <link
    linkend="language.types.array">Arrays</link> und <link
    linkend="ref.array">Array-Funktionen</link>.
   </para>
  </sect1>
  <sect1 xml:id="language.operators.type">
   <title>Typ Operatoren</title>
   <para>
    In PHP gibt es einen einzigen Typ Operator: <literal>instanceof</literal>.
    <literal>instanceof</literal> wird dazu verwendet um festzustellen, ob ein
    gegebenes Objekt ein Objekt ist, das zu einer bestimmten
    <link linkend="language.oop5.basic.class">Klasse</link> gehört.
   </para>
   <simpara>
    <literal>instanceof</literal> wurde in PHP 5 eingeführt. Vorher wurde <function>is_a</function>
    benutzt, aber <function>is_a</function> ist veraltet und <literal>instanceof</literal> sollte
    stattdessen benutzt werden.
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class A { }
class B { }

$ding = new A;

if ($ding instanceof A) {
    echo 'A';
}
if ($ding instanceof B) {
    echo 'B';
}
?>
]]>
    </programlisting>
    <simpara>
     Da <varname>$ding</varname> ein <type>object</type> vom Typ A und nicht
     von B ist, wird nur der Programmblock ausgeführt, der abhängig von Typ A ist:
    </simpara>
    <screen>A</screen>
   </informalexample>
   <para>
    Siehe auch <function>get_class</function> und 
    <function>is_a</function>.
   </para>
  </sect1>

 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
