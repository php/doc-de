<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.19 $ -->
<!-- EN-Revision: 1.52 Maintainer: sammywg Status: ready -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Grundlagen der Syntax</title>
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>Den HTML-Bereich der Datei verlassen</title>
   <para>
    Wenn PHP eine Datei parst, sucht es nach öffnenden und schließenden Tags,
    die PHP anweisen, den dazwischen befindlichen Code zu interpretieren. Das
    Parsen auf diese Art erlaubt Ihnen, PHP in allen möglichen Arten von
    unterschiedlichen Dokumenten einzubinden, da alles außerhalb des Paars aus
    öffnendem und schließendem Tag vom Parser ignoriert wird. In den meisten
    Fällen werden Sie wie im folgenden Beispiel PHP in HTML-Dokumente
    eingebettet finden.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>Das hier wird ignoriert werden.</p>
<?php echo 'Wohingegen das hier geparst werden wird.'; ?>
<p>Dies wird ebenfalls ignoriert.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Sie können aber auch komplexere Strukturen verwenden:
    <example>
     <title>Fortgeschrittenes Erweitern</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($ausdruck) {
    ?>
    <strong>Dies ist wahr.</strong>
    <?php
} else {
    ?>
    <strong>Dies ist falsch.</strong>
    <?php
}
?>
]]>
     </programlisting>
    </example>
    Dies arbeitet wie erwartet, da PHP, wenn es auf ein schließendes &gt;?-Tag
    trifft, einfach beginnt, alles folgende auszugeben, bis es wieder auf einen
    öffnenden Tag stößt (mit Ausnahme eines direkt folgenden Newline-Zeichens -
    siehe auch Abschnitt <link linkend="language.basic-syntax.instruction-separation">Abgrenzung 
    von Anweisungen</link>). Das hier angegebene Beispiel ist natürlich nur
    ausgedacht, aber für die Ausgabe von großen Textblöcken ist der Ausstieg aus
    dem Parse-Modus generell effizienter, als den gesamten Text durch
    <function>echo</function> oder <function>print</function> zu jagen.
   </para>
   <para>
    Es gibt vier unterschiedliche Paare öffnender und schließender Tags, die in
    PHP verwendet werden können. Zwei davon, &lt;?php ?&gt; und &lt;script
    language="php"&gt; &lt;/script&gt;, sind immer verfügbar. Die anderen beiden
    sind Short-Tags und <productname>ASP</productname>-Tags, die über das
    &php.ini;-Konfigurationsfile ein- und ausgeschaltet werden können. Das
    bedeutet, wenn einige Leute Short-Tags und
    <productname>ASP</productname>-Tags bequem finden, sind die daraus
    resultierenden Skripte nicht überall einsetzbar, so dass diese Tags
    grundsätzlich nicht empfehlenswert sind.
    <note>
     <para>
      Beachten Sie auch, dass Sie, wenn Sie PHP in XML oder XHTML einbinden
      wollen, die &lt;?php ?&gt;-Tags verwenden müssen, um keine Parserfehler
      aufgrund vermischter Standards zu provozieren.
     </para>
    </note>
   </para>
   <para>
    <example>
     <title>Die öffnenden und schließenden Tags von PHP</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo
      'wenn Sie XHTML- oder XML-Dokumente ausliefern wollen, machen Sie es so'; ?>

2.  <script language="php">
        echo 'manche Editoren(wie FrontPage) moegen
              keine Verarbeitungsanweisungen';
    </script>

3.  <? echo 'das ist das Einfachste, eine SGML-Verarbeitungsanweisung'; ?>

4.  <% echo 'Optional koennen Sie auch Tags im ASP-Stil verwenden'; %>
    <%= $variable; # Das ist ein Abkuerzung fuer "<% echo . . ." %>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Während die Tags in Beispiel eins und zwei jederzeit verfügbar sind, ist
    Beispiel eins das meist verwendete und grundsätzlich empfohlene von beiden.
   </para>
   <para>
    Short-Tags (Beispiel drei) sind nur verfügbar, wenn sie via <link
    linkend="ini.short-open-tag">short_open_tag</link>-Direktive im
    &php.ini;-Konfigurationsfile eingeschaltet wurden, oder wenn PHP mit
    <option>--enable-short-tags</option> konfiguriert wurde.
   </para>
   <para>
    <productname>ASP</productname>-Tags (Beispiel vier) sind nur verfügbar,
    wenn sie mittels der <link linkend="ini.asp-tags">asp_tags</link>-Direktive
    im &php.ini; Konfigurationsfile eingeschaltet wurden.
   </para>
   <para>
    <note>
     <para>
      Die Verwendung der Short-Tags sollten Sie vermeiden, wenn Sie
      Applikationen oder Bibliotheken entwickeln, die für die Weitergabe oder
      den Einsatz auf nicht Ihrer Kontrolle unterstehenden PHP-Servern bestimmt
      sind, da es sein kann, dass Short-Tags auf dem Zielsystem nicht
      unterstützt werden. Um portablen, weiterverteilbaren Code zu haben,
      verwenden Sie keine Short-Tags.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>Abgrenzung von Anweisungen</title>
   <para>
    Wie in C oder Perl verlangt PHP, dass Anweisungen am Ende jedes Statements
    mit einem Semikolon beendet werden. Der schließende Tag eines Blocks mit
    PHP-Code impliziert automatisch ein Semikolon, Sie brauchen daher kein
    abschließendes Semikolon in der letzten Zeile des PHP-Blocks zu setzen. Der
    schließende Tag für den Block fügt das direkt nachfolgende
    Zeilenumbruch-Zeichen ein, wenn es vorhanden ist.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Dies ist ein Test';
?>

<?php echo 'Dies ist ein Test' ?>

<?php echo 'Wir ließen den letzen schließenden Tag weg';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      Der schließende Tag eines PHP-Blocks am Ende einer Datei ist optional, und
      in einigen Fällen ist das Weglassen hilfreich, wenn Sie
      <function>include</function> oder <function>require</function> verwenden,
      so dass ungewollte Whitespaces nicht am Ende einer Datei auftreten und Sie
      noch im Stande sind, später weitere Header an die Response hinzuzufügen.
      Es ist ebenfalls praktisch, wenn Sie Output Buffering verwenden und keine
      ungewollten Whitespaces am Ende eines durch die eingebundenen Dateien
      erzeugten Parts sehen wollen.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.comments">
   <title>Kommentare</title>
   <para>
    PHP unterstützt 'C', 'C++' und Unix-Shell-artige (Perl-artige) Kommentare.
    Zum Beispiel:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo "Dies ist ein Test"; // Dies ist ein einzeiliger Kommentar im C++-Stil
    /* Dies ist ein mehrzeiliger Kommentar
       noch eine weitere Kommentar-Zeile */
    echo 'Dies ist noch ein Test';
    echo '... und ein letzter Test'; # Dies ist ein einzeiliger Shell-Kommentar
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Die "einzeiligen" Kommentar-Arten kommentieren sämtlichen Text bis
    zum Zeilenende oder bis zum Ende des aktuellen PHP-Blocks aus, je
    nachdem, was zuerst eintritt. Das bedeutet, das HTML-Code nach
    <literal>// ..?&gt;</literal> oder <literal># ... ?&gt;</literal>
    ausgegeben WIRD: ?&gt; beendet den PHP-Modus und kehrt in den HTML-Modus
    zurück, so dass sich <literal>//</literal> oder <literal>#</literal> nicht
    nicht darauf auswirkt. Wenn die <link linkend="ini.asp-tags">asp_tags</link>
    Konfigurations-Direktive eingeschaltet ist, verhält es sich genauso bei
    <literal>// %&gt;</literal> und <literal># %&gt;</literal>. Jedoch beendet
    das <literal>&lt;/script&gt;</literal>-Tag den PHP-Modus innerhalb eines
    einzeiligen Kommentars nicht.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Dies ist ein  <?php # echo 'einfaches';?> Beispiel.</h1>
<p>Obige Überschrift wird lauten: 'Dies ist ein Beispiel.'.
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    'C'-artige Kommentare enden am ersten Vorkommen von <literal>*/</literal>.
    Achten Sie daher darauf, 'C'-artige Kommentare nicht zu verschachteln.
    Dieser Fehler entsteht leicht, wenn Sie längere Code-Blöcke auskommentieren.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/*
   echo 'Dies ist ein Test'; /* Dieser Kommentar wird ein Problem verursachen. */
*/
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
