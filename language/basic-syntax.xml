<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341083 Maintainer: cmb Status: ready -->

 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Grundlagen der Syntax</title>
  <sect1 xml:id="language.basic-syntax.phptags">
   <title>PHP Tags</title>
   <para>
    Wenn PHP eine Datei parst, schaut es nach öffnenden und schließenden Tags,
    also <literal>&lt;?php</literal> und <literal>?&gt;</literal>, die PHP
    anweisen, das Interpretieren des zwischenliegenden Codes zu beginnen bzw.
    zu beenden. Auf diese Weise zu parsen ermöglicht die Einbettung von PHP
    in allen möglichen unterschiedlichen Dokumenten, da alles außerhalb eines
    Paares von öffnenden und schließenden Tags vom PHP Parser ignoriert wird.
   </para>
   <para>
    PHP erlaubt ebenfalls kurze öffnende Tags <literal>&lt;?</literal>
    (von denen abgeraten wird, da sie nur verfügbar sind, wenn sie durch
    die <link linkend="ini.short-open-tag">short_open_tag</link> &php.ini;
    Konfigurationsdirektive aktiviert wurden, oder PHP mit der
    <option>--enable-short-tags</option> Option konfiguriert wurde).
   </para>
   <para>
    Ist eine Datei reiner PHP-Code, ist es besser den schließenden PHP-Tag
    am Ende der Datei wegzulassen. Das verhindert, dass versehentlich Whitespace
    oder Zeilenumbrüche nach dem schließenden PHP-Tag hinzugefügt werden,
    die unerwünschte Auswirkungen haben können, da PHP das Puffern der Ausgabe
    beginnt, auch wenn der Programmierer keinerlei Absicht hatte, irgendwelche
    Ausgaben an dieser Stelle des Scripts zu senden.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "Hallo Welt";

// ... mehr Code

echo "Letzte Anweisung";

// das Script endet hier ohne schließenden PHP-Tag
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <table>
     &reftitle.changelog;
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>7.0.0</entry>
         <entry>
          Die ASP-Tags <code>&lt;%</code>, <code>%&gt;</code>,
          <code>&lt;%=</code>, und der Script-Tag
          <code>&lt;script language="php"&gt;</code> wurden von PHP entfernt.
         </entry>
       </row>
       <row>
        <entry>5.4.0</entry>
         <entry>
          Der Tag &lt;?= ist immer verfügbar, unabhängig von der short_open_tag
          ini Einstellung.
         </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>Den HTML-Bereich der Datei verlassen</title>
   <para>
    Alles außerhalb eines Paares von öffnenden und schließenden Tags wird
    vom PHP-Parser ignoriert, was es ermöglicht, dass PHP-Dateien gemischten
    Inhalt haben können. Das ermöglicht die Einbettung von PHP in HTML-Dokumenten,
    zum Beispiel um Templates zu erstellen.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>Das hier wird von PHP ignoriert, und vom Browser angezeigt.</p>
<?php echo 'Wohingegen das hier geparst wird.'; ?>
<p>Dies wird ebenfalls von PHP ignoriert, und vom Browser angezeigt.</p>
]]>
     </programlisting>
    </informalexample>
    Dies arbeitet wie erwartet, da PHP, wenn es auf ein schließendes ?&gt;-Tag
    trifft, einfach beginnt, alles folgende auszugeben, bis es wieder auf einen
    öffnenden Tag stößt (mit Ausnahme eines direkt folgenden Newline-Zeichens -
    siehe auch Abschnitt <link linkend="language.basic-syntax.instruction-separation">Abgrenzung
    von Anweisungen</link>).
    Das gilt nicht in der Mitte einer bedingten Anweisung, in welchem Fall
    der Interpreter das Resultat der Bedingung ermittelt, bevor die Entscheidung
    getroffen wird, was übersprungen wird. Siehe das folgende Beispiel.
   </para>
   <para>
    Verwendung von Strukturen mit Bedingungen
    <example>
     <title>Fortgeschrittene Ausgabe unter Verwendung von Bedingungen</title>
     <programlisting role="php">
<![CDATA[
<?php if ($expression == true): ?>
  Dies wird angezeigt, wenn der Ausdruck wahr ist.
<?php else: ?>
  Andernfalls wird dies angezeigt.
<?php endif; ?>
]]>
     </programlisting>
    </example>
    In diesem Beispiel überspringt PHP die Blöcke, in denen die Bedingung nicht
    erfüllt ist; selbst wenn diese außerhalb der öffnenden/schließenden PHP-Tags
    liegen, überspringt PHP sie gemäß der Bedingung, da der PHP-Interpreter
    Blöcke überspringt, die in einer Bedinungen liegen, die nicht erfüllt ist.
   </para>
   <para>
    Für die Ausgabe von großen Textblöcken ist der Ausstieg aus
    dem Parse-Modus generell effizienter, als den gesamten Text durch
    <function>echo</function> oder <function>print</function> zu jagen.
   </para>
   <para>
    Es gibt in PHP 5 bis zu fünf unterschiedliche Paare öffnender und schließender Tags, die
    in Abhängigkeit von der PHP-Konfiguration verwendet werden können.
    Zwei davon, <code>&lt;?php ?&gt;</code> und <code>&lt;script
    language="php"&gt; &lt;/script&gt;</code>, sind immer verfügbar.
    Es gibt ebenfalls den kurzen Echo-Tag <code>&lt;?= ?&gt;</code>,
    der ab PHP 5.4.0 immer verfügbar ist.
   </para>
   <para>
    Die anderen beiden
    sind Short-Tags und <productname>ASP</productname>-Tags. Das
    bedeutet, wenn einige Leute Short-Tags und
    <productname>ASP</productname>-Tags bequem finden, sind die daraus
    resultierenden Skripte nicht überall einsetzbar, so dass diese Tags
    grundsätzlich nicht empfehlenswert sind.
    <note>
     <para>
      Beachten Sie auch, dass Sie, wenn Sie PHP in XML oder XHTML einbinden
      wollen, die &lt;?php ?&gt;-Tags verwenden müssen, um keine Parserfehler
      aufgrund vermischter Standards zu provozieren.
     </para>
    </note>
   </para>
   <para>
    PHP 7 entfernt die Unterstützung von <productname>ASP</productname>-Tags und
    <code>&lt;script language="php"&gt;</code> Tags. Daher empfehlen wir beim
    Schreiben von PHP-Code für maximale Kompatibilität nur
    <code>&lt;?php ?&gt;</code> und <code>&lt;?= ?&gt;</code> zu verwenden.
   </para>
   <para>
    <example>
     <title>Die öffnenden und schließenden Tags</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'wenn Sie PHP-Code in XHTML oder XML-Dokumenten ausliefern wollen,
                verwenden Sie diese Tags'; ?>

2.  Sie können den kurzen Echo-Tag verwenden um <?= 'diese Zeichenkette auszugeben' ?>.
    Jener ist ab PHP 5.4.0 immer verfügbar, und ist equivalent zu
    <?php echo 'diese Zeichenkette auszugeben' ?>.

3.  <? echo 'dieser Code befindet sich innerhalb von Short-Tags, und funktioniert nur, '.
            'wenn short_open_tag aktiviert ist'; ?>

4.  <script language="php">
        echo 'manche Editoren (like FrontPage) mögen
              keine Processing-Instructions innerhalb dieser Tags';
    </script>
    Diese Syntax wurde in PHP 7.0.0 entfernt.

5.  <% echo 'Sie können optional ASP-Tags verwenden'; %>
    Code innerhalb dieser Tags <%= $variable; %> ist eine Abkürzung für den Code <% echo $variable; %>
    Diese beiden syntaktischen Konstrukte wurde in PHP 7.0.0 entfernt.
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Short-Tags (Beispiel drei) sind nur verfügbar, wenn sie via <link
    linkend="ini.short-open-tag">short_open_tag</link>-Direktive im
    &php.ini;-Konfigurationsfile eingeschaltet wurden, oder wenn PHP mit
    <option>--enable-short-tags</option> konfiguriert wurde.
   </para>
   <para>
    <productname>ASP</productname>-Tags (Beispiel fünf) sind nur verfügbar,
    wenn sie mittels der <link linkend="ini.asp-tags">asp_tags</link>-Direktive
    im &php.ini; Konfigurationsfile eingeschaltet wurden,
    und wurden in PHP 7.0.0 entfernt.
   </para>
   <para>
    <note>
     <para>
      Die Verwendung der Short-Tags sollten Sie vermeiden, wenn Sie
      Applikationen oder Bibliotheken entwickeln, die für die Weitergabe oder
      den Einsatz auf nicht Ihrer Kontrolle unterstehenden PHP-Servern bestimmt
      sind, da es sein kann, dass Short-Tags auf dem Zielsystem nicht
      unterstützt werden. Um portablen, weiterverteilbaren Code zu haben,
      verwenden Sie keine Short-Tags.
     </para>
    </note>
    <note>
     <para>
      Unter PHP 5.2 und früher war es nicht erlaubt, dass der
      öffnende <literal>&lt;?php</literal> Tag allein in einer Datei stand.
      Dies ist seit PHP 5.3 erlaubt, vorausgesetzt, dass wenigstens ein Whitespace-Zeichen
      auf den öffnenden Tag folgt.
     </para>
    </note>
    <note>
     <para>
      Beginnend mit PHP 5.4 wird der kurze Echo-Tag <literal>&lt;?=</literal>
      immer erkannt und ist gültig, unabhängig von der 
      <link linkend="ini.short-open-tag">short_open_tag</link> Einstellung.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>Abgrenzung von Anweisungen</title>
   <para>
    Wie in C oder Perl verlangt PHP, dass Anweisungen am Ende jedes Statements
    mit einem Semikolon beendet werden. Der schließende Tag eines Blocks mit
    PHP-Code impliziert automatisch ein Semikolon; Sie brauchen daher kein
    abschließendes Semikolon in der letzten Zeile des PHP-Blocks zu setzen. Der
    schließende Tag für den Block schließt das direkt nachfolgende
    Zeilenumbruch-Zeichen ein, wenn es vorhanden ist.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Dies ist ein Test';
?>

<?php echo 'Dies ist ein Test' ?>

<?php echo 'Wir ließen den letzen schließenden Tag weg';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      Der schließende Tag eines PHP-Blocks am Ende einer Datei ist optional, und
      in einigen Fällen ist das Weglassen hilfreich, wenn Sie
      <function>include</function> oder <function>require</function> verwenden,
      so dass ungewollte Whitespaces nicht am Ende einer Datei auftreten und Sie
      noch im Stande sind, später weitere Header an die Response hinzuzufügen.
      Es ist ebenfalls praktisch, wenn Sie Output Buffering verwenden und keine
      ungewollten Whitespaces am Ende eines durch die eingebundenen Dateien
      erzeugten Parts sehen wollen.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.comments">
   <title>Kommentare</title>
   <para>
    PHP unterstützt 'C', 'C++' und Unix-Shell-artige (Perl-artige) Kommentare.
    Zum Beispiel:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Dies ist ein Test'; // Dies ist ein einzeiliger Kommentar im C++-Stil
    /* Dies ist ein mehrzeiliger Kommentar
       noch eine weitere Kommentar-Zeile */
    echo 'Dies ist noch ein Test';
    echo '... und ein letzter Test'; # Dies ist ein einzeiliger Shell-Kommentar
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Die "einzeiligen" Kommentar-Arten kommentieren sämtlichen Text bis
    zum Zeilenende oder bis zum Ende des aktuellen PHP-Blocks aus, je
    nachdem, was zuerst eintritt. Das bedeutet, das HTML-Code nach
    <literal>// ..?&gt;</literal> oder <literal># ... ?&gt;</literal>
    ausgegeben WIRD: ?&gt; beendet den PHP-Modus und kehrt in den HTML-Modus
    zurück, so dass sich <literal>//</literal> oder <literal>#</literal>
    nicht darauf auswirkt. Wenn die <link linkend="ini.asp-tags">asp_tags</link>
    Konfigurations-Direktive eingeschaltet ist, verhält es sich genauso bei
    <literal>// %&gt;</literal> und <literal># %&gt;</literal>. Jedoch beendet
    der <literal>&lt;/script&gt;</literal>-Tag den PHP-Modus innerhalb eines
    einzeiligen Kommentars nicht.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Dies ist ein <?php # echo 'einfaches';?> Beispiel.</h1>
<p>Obige Überschrift wird lauten: 'Dies ist ein  Beispiel.'.
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    'C'-artige Kommentare enden am ersten Vorkommen von <literal>*/</literal>.
    Achten Sie daher darauf, 'C'-artige Kommentare nicht zu verschachteln.
    Dieser Fehler entsteht leicht, wenn Sie längere Code-Blöcke auskommentieren.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/*
   echo 'Dies ist ein Test'; /* Dieser Kommentar wird ein Problem verursachen. */
*/
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
