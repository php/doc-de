<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.22 $ -->
<!-- EN-Revision: 1.50 Maintainer: fa Status: ready -->
 <chapter xml:id="language.references" xmlns="http://docbook.org/ns/docbook">
  <title>Referenzen in PHP</title>

  <sect1 xml:id="language.references.whatare">
   <title>Was Referenzen sind</title>
   <simpara>  
    Referenzen sind in PHP ein Mechanismus um verschiedene Namen
    für den gleichen Inhalt von Variablen zu ermöglichen. 
    Sie sind nicht mit Zeigern in C zu vergleichen, sondern 
    Aliasdefinitionen für die Symboltabelle. 
    PHP unterscheidet zwischen Variablenname und Variableninhalt, 
    wobei der gleiche Variableninhalt unterschiedliche Namen besitzen kann. 
    Der bestmögliche Vergleich ist der mit Dateinamen und Dateien 
    im Dateisystem von Unix - Variablennamen sind Verzeichniseinträge, 
    während der Variableninhalt die eigentliche Datei darstellt. 
    Referenzen können nun als Hardlinks im Dateisystem verstanden werden.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.whatdo">
   <title>Was Referenzen leisten</title>
   <para>
    PHP Referenzen erlauben es, zwei Variablennamen, sich auf den
    gleichen Variableninhalt beziehen zu lassen. Das heißt im
    folgenden Beispiel, dass sich <varname>$a</varname> und
    <varname>$b</varname> auf dieselbe Variable beziehen:

    <informalexample>
     <programlisting role="php">
<![CDATA[
$a =& $b 
]]>
     </programlisting>
    </informalexample>

    <note>
     <para>
      <varname>$a</varname> und <varname>$b</varname> sind hier
      gleichwertig, und <varname>$a</varname> ist nicht nur ein
      Zeiger auf <varname>$b</varname> oder umgekehrt, sondern
      <varname>$a</varname> und <varname>$b</varname> zeigen auf
      den selben Inhalt.
     </para>
    </note>
   </para>
   <note>
    <para>
     Wenn ein Array mit Referenzen kopiert wird, werden seine Werte nicht
     dereferenziert. Dies gilt auch für Array, die per Wert an Funktionen
     übergeben werden
    </para>
   </note>
   <note>
    <para>
    Wenn man eine undefinierte Variable per Referenz zuweist, übergibt oder
    zurückgibt, wird sie erstellt.
     <example>
      <title>Referenzen mit undefinierten Variablen benutzen</title>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$var) { }

foo($a); // $a wird "erstellt" mit dem Wert null

$b = array();
foo($b['b']);
var_dump(array_key_exists('b', $b)); // bool(true)

$c = new StdClass;
foo($c->d);
var_dump(property_exists($c, 'd')); // bool(true)
?>
]]>
      </programlisting>
     </example>
    </para>
   </note>
   <para>
   Diese Syntax kann auch mit Funktionen, die Referenzen zurückgeben, benutzt
   werden und seit PHP 4.0.4 auch in Verbindung mit dem
   <literal>new</literal>-Operator.
   <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$bar =& new fooclass();
$foo =& find_var ($bar);
?>
]]>
     </programlisting>
    </informalexample>
    Seit PHP 5 referenziert return
    <link linkend="language.oop5.basic.new">new</link> automatisch, also erzeugt
    die Verwendung der veralteten Syntax <literal>=&amp;</literal> eine
    E_STRICT-Warnung.
    </para>
    <note>
     <para>
     Wenn der <literal>&amp;</literal> Operator nicht verwendet wird, erzeugt
     PHP eine Kopie des Objekts. Wenn nun <literal>$this</literal> innerhalb 
     der Klasse verwendet wird, bezieht es sich auf die aktuelle Instanz der 
     Klasse. Die Zuordnung ohne <literal>&amp;</literal> erzeugt eine Kopie der 
     Instanz (d.h. des Objekts) und <literal>$this</literal> wird sich auf 
     die Kopie beziehen. In der Regel will man aus Performance- und 
     Speicherverbrausgründen nur eine einzige Instanz einer Klasse
     erzeugen. Dafür stellt PHP den <literal>&amp;</literal> bereit. 
     </para>
     <para>
      Während man den <literal>@</literal>-Operator benutzen kann, um Fehler
      im Konstruktor zu <emphasis>unterdrücken</emphasis>, wenn man ihn als
      <literal>@new</literal> benutzt, funktioniert dies nicht bei der Benutzung
      von <literal>&amp;new</literal>. Dies ist eine Einschränkung der Zend
      Engine und resultiert daher in einem Parserfehler.
     </para>
   </note>
   <warning>
    <para>
     Wenn man einer als <literal>global</literal> deklarierten Variable eine
     Referenz innerhalb einer Funktion zuweist, wird die Referenz nur innerhalb
     der Funktion sichtbar sein. Dies kann durch die Verwendung des
     <varname>$GLOBALS</varname>-Arrays vermieden werden.
     <example>
      <title>Globale Variablen innerhalb einer Funktion referenzieren</title>
      <programlisting role="php">
<![CDATA[
<?php
$var1 = "Example variable";
$var2 = "";

function global_references($use_globals)
{
    global $var1, $var2;
    if (!$use_globals) {
        $var2 =& $var1; // nur innerhalb der Funktion sichtbar
    } else {
        $GLOBALS["var2"] =& $var1; // auch im globalen Kontext sichtbar
    }
}

global_references(false);
echo "var2 is set to '$var2'\n"; // var2 ist ''
global_references(true);
echo "var2 is set to '$var2'\n"; // var2 ist 'Example variable'
?>
]]>
      </programlisting>
     </example>
     Man sollte <literal>global $var;</literal> als Abkürzung für
     <literal>global $GLOBALS['var'];</literal> sehen. Deswegen ändert die
     Zuweisung per Referenz an <literal>$var</literal> nur die Referenz
     der lokalen Variable.
    </para>
   </warning>
   <note>
    <para>
     Wenn man einer Variable einen Wert per Referenz in einer <link
     linkend="control-structures.foreach">foreach</link>-Anweisung zuweist,
     werden die Referenzen auch geändert.
     <example>
      <title>Referenzen und die foreach-Anweisung</title>
      <programlisting role="php">
<![CDATA[
<?php
$ref = 0;
$row =& $ref;
foreach (array(1, 2, 3) as $row) {
    // do something
}
echo $ref; // 3 - letztes Element des durchlaufenen Arrays
?>
]]>
      </programlisting>
     </example>
    </para>
   </note>
   
   <para>
    Eine weitere Einsatzmöglichkeit von Referenzen ist die Übergabe 
    von Parametern an eine Funktion mit pass-by-reference. Hierbei 
    beziehen sich der lokale Variablenname als auch der Variablenname 
    der aufrufenden Instanz auf denselben Variableninhalt:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(&$var) {
    $var++;
}

$a=5;
foo($a);
?>
]]>
     </programlisting>
    </informalexample>
    Nach der Ausführung hat <varname>$a</varname> den Wert 6, da sich 
    in der Funktion <varname>foo</varname> der Variablenname 
    <varname>$var</varname> auf denselben Variableninhalt bezieht wie 
    <varname>$a</varname> in der aufrufenden Instanz (hier das Hauptprogramm).
    Es gibt auch eine detailliertere Erläuterung der Parameterübergabe <link
    linkend="language.references.pass">by-reference</link>
   </para>
   <simpara>
    Daneben besteht die Möglichkeit aus Funktionen heraus Werte mit 
    <link linkend="language.references.return">return by-reference</link> 
    zurückzugeben.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.arent">
   <title>Was Referenzen nicht sind</title>
   <para>
    Wie bereits gesagt: Referenzen sind keine Zeiger. Das bedeutet, 
    der folgende Code tut nicht, was zum Beispiel ein C Programmierer 
    erwarten würde:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(&$var) {
    $var =& $GLOBALS["baz"];
}
foo($bar);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Folgendes wird passieren: <varname>$var</varname> in foo wird zunächst 
    an  <varname>$bar</varname> aus der aufrufenden Instanz, dann 
    aber an <varname>$GLOBALS["baz"]</varname>, gebunden.
    Es gibt keine Möglichkeit, <varname>$bar</varname> aus der aufrufenden 
    Instanz mittels Referenz-Mechanismen an etwas anderes zu binden, da 
    <varname>$bar</varname> in der Funktion foo nicht zur Verfügung steht 
    (<varname>$bar</varname> wird durch <varname>$var</varname> repräsentiert; 
    <varname>$var</varname> verfügt nur über Variableninhalt, besitzt 
    aber keinen name-to-value Eintrag in der Symboltabelle der aufrufenden 
    Instanz).
    Man kann durch die <link linkend="language.references.return">Rückgabe
    von Referenzen</link> die von der Funktion benutzten Variablen
    referenzieren.
   </simpara>
  </sect1>

<sect1 xml:id="language.references.pass">
   <title>Parameterübergabe per Referenz</title>
   <para>
   Man kann Variablen an Funktionen per Referenz übergeben, so dass die Funktion
   ihre Argumente modifizieren kann. Dazu benutzt man folgende Syntax:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(&$var)
{
    $var++;
}

$a=5;
foo($a);
// $a ist 6
?>
]]>
     </programlisting>
    </informalexample>
  Zu beachten ist, dass kein Referenz-Zeichen beim Funktionsaufruf steht, nur in
  der Funktionsdefinition. Diese allein ist ausreichend, um das Argument per
  Referenz zu übergeben. In neueren PHP-Versionen gibt es eine Warnung, dass die
  Benutzung von "Call-time pass-by-reference" mit Hilfe von &amp; in 
  <literal>foo(&amp;$a);</literal> veraltet ist.
  </para>
  <para>
  Folgende Dinge können per Referenz übergeben werden:
   <itemizedlist>
    <listitem>
     <simpara>
      Variablen, zum Beispiel <literal>foo($a)</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "New"-Ausdrücke, zum Beispiel <literal>foo(new foobar())</literal>
     </simpara>
    </listitem>
    <listitem>
     <para>
      Referenzen, zurückgegeben von einer Funktion, zum Beispiel:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function &bar()
{
    $a = 5;
    return $a;
}
foo(bar());
?>
]]>
     </programlisting>
    </informalexample>
    Es gibt detailliertere Erläuterungen zur Rückgabe <link
    linkend="language.references.return">by-reference</link>. 
     </para>
    </listitem>
  </itemizedlist>
  </para>
  <para>
  Alle anderen Ausdrücke sollte nicht per Referenz übergeben werden, da das
  Ergebnis undefiniert ist. Folgende Beispiele sind etwa ungültig:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function bar() // Beachte das fehlende &
{
    $a = 5;
    return $a;
}
foo(bar()); // Fatal error seit PHP 5.0.5

foo($a = 5); // Ausdruck, keine Variable
foo(5); // Fatal error
?>
]]>
     </programlisting>
    </informalexample>
    Diese Anforderungen gelten für PHP 4.0.4 und später.
  </para>
  </sect1>

  <sect1 xml:id="language.references.return">
   <title>Referenzen zurückgeben</title>
   <para>
    Das Zurückgeben von Ergebnissen per Referenz aus Funktionen 
    heraus kann manchmal recht nüzlich sein, um herauszufinden, an welche
    Variable eine Referenz gebunden werden soll. Man sollte diese Funktionalität
    <emphasis>nicht</emphasis> aus Performancegründen benutzen, der Kern ist
    ist intelligent genug, um dies selbst zu optimieren. Man sollte Referenzen
    nur dann zurückgeben, wenn man sinnvolle technische Gründe hat. Hierbei
    ist folgende Syntax zu beachten:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class foo {
    public $value = 42;

    public function &getValue() {
        return $this->value;
    }
}

$obj = new foo;
$myValue = &$obj->getValue(); // $myValue ist eine  Referenz zu to $obj->value, mit dem Wert 42.
$obj->value = 2;
echo $myValue;                // Zeigt den neuen Wert von $obj->value, also 2.
?>
]]>
     </programlisting>
    </informalexample>
    In diesem Beispiel wird also die Eigenschaft des von 
    <varname>getValue</varname> gelieferten Objektes gesetzt, nicht die der Kopie, 
    wie es der Fall wäre, wenn die Funktion <varname>getValue</varname> 
    ihr Ergebnis nicht per Referenz liefern würde.
   </para>
   <note>
    <simpara>
     Im Gegensatz zur Parameterübergabe per Referenz ist bei der 
     Rückgabe mittels Referenz an beiden Stellen die Angabe des 
     <literal>&amp;</literal> notwendig.
    </simpara>
   </note>
   <note>
    <simpara>
     Wenn man versucht, eine Referenz aus einer Funktion mit der Syntax
     <literal>return ($this->value);</literal> zurückzugeben, wird das
     <emphasis>nicht</emphasis> funktionieren, weil man versucht, das
     Ergebnis eines <emphasis>Ausdrucks</emphasis> zurückzugeben und nicht
     eine Variable per Referenz. Man kann nur Variablen per Referenz aus
     einer Funktion zurückgeben - sonst nichts.
     Seit PHP 4.4.0 und PHP 5.1.0 wird ein <constant>E_NOTICE</constant>-Fehler
     erzeugt, wenn versucht wird, einen dynamischen Ausdruck oder das Ergebnis
     eines <literal>new</literal> zurückzugeben.
    </simpara>
   </note>
  </sect1>

  <sect1 xml:id="language.references.unset">
   <title>Referenzen aufheben</title>
   <para>
    Wird eine Referenz aufgehoben, so wird nur die Bindung zwischen einem 
    Variablennamen und dem Variableninhalt entfernt. Der Inhalt der Variablen 
    wird hierbei nicht gelöscht. Betrachten wir folgendes Beispiel:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b =& $a;
unset($a);
?>
]]>
     </programlisting>
    </informalexample>
    Die Variable <varname>$b</varname> wird nicht gelöscht, sondern es 
    wird nur die Bindung des Variablennamen <varname>$a</varname> an den 
    Variableninhalt aufgehoben. Dieser Variableninhalt ist immer noch 
    über <varname>$b</varname> verfügbar.
   </para>
   <simpara>
    Wiederum sieht man die Analogie zwischen Unix und den Referenzen: Das 
    Aufheben einer Referenz entspricht einem Aufruf von 
    <command>unlink</command> unter Unix.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.spot">
   <title>Referenzen entdecken</title>
   <simpara>
    Viele Sprachelemente von PHP sind intern mit der Benutzung von Referenzen 
    implementiert, daher gilt alles bisher gesagte auch für diese 
    Konstrukte:
   </simpara>

   <sect2 xml:id="references.global">
    <title><literal>global</literal> References</title>
    <para>
     Die Verwendung von <command>global $var</command> erzeugt im aktuellen 
     Gültigkeitsbereich eine Referenz auf die globale Variable <varname>$var</varname>, 
     sie ist also äquivalent zu folgendem:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$var =& $GLOBALS["var"];
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Dies hat zur Folge, dass das Anwenden von unset() auf <varname>$var</varname> 
     keinen Einfluss auf die globale Variable hat.
    </simpara>
   </sect2>

   <sect2 xml:id="references.this">
    <title><literal>$this</literal></title>
    <simpara>
     In einer Objektmethode ist <varname>$this</varname> immer eine Referenz 
     auf die aufrufende Objektinstanz.
    </simpara>
   </sect2>
  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
