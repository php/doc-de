<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.14 $ -->
<!-- EN-Revision: 1.39 Maintainer: betz Status: ready -->
<!-- CREDITS: tzwenny -->

  <chapter id="language.constants">
   <title>Konstanten</title>

  <simpara>
   Eine Konstante ist ein Bezeichner (Name) für eine simple Variable.
   Wie der Name schon ausdrückt, kann sich der Wert einer Konstanten
   zur Laufzeit eines Skripts nicht ändern (eine Ausnahme bilden die
   <link linkend="language.constants.predefined">Magischen Konstanten</link>,
   die aber tatsächlich keine Konstanten sind.) Eine Konstante unterscheidet
   zwischen Groß- und Kleinschreinbung (case-sensitive). Nach gängiger
   Konvention werden Konstanten immer in Großbuchstaben geschrieben.
  </simpara>
  <para>
   Der Name einer Konstanten folgt den gleichen Regeln wie alle anderen
   Bezeichner in PHP. Ein gültiger Name beginnt mit einem Buchstaben
   oder einem Unterstrich, gefolgt von beliebig vielen Buchstaben, Nummern
   oder Understrichen. Als regulärer Ausdruck geschrieben:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  <para>
   <example>
    <title>Gültige und ungültige Namen für Konstanten</title>
    <programlisting role="php">
<![CDATA[
<?php

// Gültige Namen für Konstanten
define("FOO",     "irgendwas");
define("FOO2",    "etwas anderes");
define("FOO_BAR", "irgendwas ganz anderes")

// Invalid constant names
define("2FOO",    "irgendwas");

// Folgendes ist korrekt, sollte aber vermieden werden:
// Eines Tages könnte es in PHP eine Magische Konstante
// __FOO__ geben und Ihr Skript wird dadurch nicht mehr
// wie gewünscht funktionieren.

define("__FOO__", "irgendwas"); 

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Für unsere Zwecke ist ein Buchstabe a-z, A-Z und die ASCII-Zeichen
    von 127 bis 255 (0x7f-0xff).
   </simpara>
  </note>

  <simpara>
   Wie bei &link.superglobals; ist der Gültigkeitsbereich einer Konstanten
   global. Unabhängig vom Gültigkeitsbereich können Sie in Ihrem Skript
   überall auf eine Konstante zugreifen. Für mehr Information zum
   Gültigkeitsbereich lesen Sie bitte den Abschnitt über den
   <link linkend="language.variables.scope">Geltungsbereich von Variablen</link>.
  </simpara>

  <sect1 id="language.constants.syntax">
   <title>Syntax</title>
   <simpara>
    Eine Konstante können Sie über die Funktion <function>define</function>
    definieren. Einmal definiert, kann eine Konstane weder verändert
    noch gelöscht werden.
   </simpara>
   <simpara>
    Konstanten können nur scalare Daten (<type>boolean</type>,
    <type>integer</type>, <type>float</type> und <type>string</type>)
    enthalten.
   </simpara>
   <simpara>
    Den Wert einer Konstanten erhalten Sie ganz einfach durch die Angabe ihres
    Namens. Einer Konstanten sollten Sie <emphasis>nicht</emphasis>, wie bei
    Variablen, ein <literal>$</literal> voranstellen. Ebenso können Sie die
    Funktion <function>constant</function> benutzen um den Wert einer Konstanten
    auszulesen, wenn Sie den Namen der Konstanten dynamisch erhalten wollen.
    Benutzen Sie <function>get_defined_constants</function> um eine Liste
    aller definierten Konstanten zu erhalten.
   </simpara>
   <note>
    <simpara>
     Konstanten und (globale) Variablen befinden sich in unterschiedlichen
     Namensräumen. Das hat zum Beispiel zur Folge, dass &true; und 
     <varname>$TRUE</varname> grundsätzlich unterschiedlich sind.
    </simpara>
   </note>

   <simpara>
    Falls Sie eine undefinierte Konstante verwenden nimmt PHP an, dass
    Sie den Namen der Konstanten selber meinen, genauso als ob Sie einen
    <type>string</type> (CONSTANT vs "CONSTANT") angegeben hätten. Falls das
    passiert, wird Ihnen ein Fehler vom Typ
    <link linkend="ref.errorfunc">E_NOTICE</link> ausgegeben. Lesen Sie hier
    nach, warum die Angabe
    <link linkend="language.types.array.foo-bar">$foo[bar]</link> falsch ist
    (zumindest solange Sie nicht zuerst <literal>bar</literal> mittels
    <function>define</function> als Konstante definiert haben). Möchten Sie
    einfach nur nachprüfen, ob eine Konstante definiert ist, benutzen Sie die
    Funktion <function>defined</function> für diesen Zweck.
   </simpara>
   <para>
    Das hier sind die Unterschiede zwischen Konstanten und Variablen:
    <itemizedlist>
     <listitem>
      <simpara>
       Konstanten haben kein Dollarzeichen (<literal>$</literal>)
       vorangestellt;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Konstanten können nur über die Funktion <function>define</function>
       definiert werden, nicht durch einfache Zuweisung;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Konstanten können überall definiert werden und auf Ihren Wert
       können Sie ohne Rücksicht auf Namensraumregeln von Variablen zugreifen;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Sobald Konstanten definiert sind, können sie nicht neu definiert
       oder gelöscht werden; und
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Konstanten können nur skalare Werte haben.
       </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    <example>
     <title>Definiton von Konstanten</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Hallo Welt.");
echo CONSTANT; // Ausgabe: "Hallo Welt."
echo Constant; // Ausgabe: "Constant" und eine Notice.
?>
]]>
     </programlisting>
    </example>

   </para>
  </sect1>

  <sect1 id="language.constants.predefined">
   <title>Magische Konstanten</title>
   <simpara>
    PHP stellt jedem Skript eine Vielzahl von <link
    linkend="reserved.constants">vordefinierten Konstanten</link>
    zur Verfügung. Viele dieser Konstanten werden jedoch von verschiedenen
    Erweiterungen definiert, die nur zur Verfügung stehen, wenn diese
    Erweiterungen selbst zur Verfügung stehen, d.h. entweder über dynamisches
    Laden zur Laufzeit oder sie sind einkompiliert.
   </simpara>

   <para>
    Es gibt fünf magische Konstanten, die abhängig davon, wo sie eingesetzt
    werden, einen unterschiedlichen Wert haben. Zum Beispiel hängt
    der Wert der Konstanten <constant>__LINE__</constant> davon ab, in welcher
    Zeile ihres Skripts Sie diese Konstante verwenden. Diese besonderen
    Konstanten sind unabhängig von Groß-/Kleinschreibung und sind folgende:
   </para>
   <para>
    <table>
     <title>Einige "magische" PHP "Konstanten"</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Name</entry>
        <entry>Beschreibung</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><constant>__LINE__</constant></entry>
        <entry>
         Die aktuelle Zeilennummer einer Datei.
        </entry>
       </row>
       <row>
        <entry><constant>__FILE__</constant></entry>
        <entry>
         Der vollständige Pfad- und Dateiname einer Datei. Wird diese Konstante
         innerhalb einer Datei, die mit <function>include</function>
         eingebunden wurde, verwendet, wird der Name der eingebundenen Datei
         zurückgegeben.
        </entry>
       </row>
       <row>
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         Der Name einer Funktion. Steht seit PHP 4.3.0 zur Verfügung. Mit PHP 5
         enthält diese Konstante den Namen der Funktion, wie dieser deklariert
         wurde (Beachtung der Groß- und Kleinschreibung). In PHP 4 wird der Wert
         immer in Kleinschrift ausgegeben.
        </entry>
       </row>
       <row>
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         Der Name einer Klasse. Steht seit PHP 4.3.0 zur Verfügung. Mit PHP 5
         enthält diese Konstante den Namen der Klasse, wie dieser deklariert
         wurde (Beachtung der Groß- und Kleinschreibung). In PHP 4 wird der Wert
         immer in Kleinschrift ausgegeben.
        </entry>
       </row>
       <row>
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         Der Name einer Klassenmethode. Steht seit PHP 5.0.0 zur Verfügung. Der
         Methodenname wird genauso zurückgegeben, wie dieser deklariert wurde
         (Beachtung der Groß- und Kleinschreibung).
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Siehe auch
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>
  </sect1>
 </chapter>

<!--  Alter Inhalt: bitte nicht löschen
   <para>
    Folgende vordefinierten Variablen sind immer verfügbar:

    <variablelist>

     <varlistentry>
      <term>__FILE__</term>
      <listitem>
       <simpara>
        Der Name der Skript-Datei, die gerade geparsed wird. Wird 
        diese Konstante in einer Datei verwendet, die per
        <function>include</function> oder <function>require</function>
        eingebunden wurde, liefert sie den Namen der eingebundenen
        Datei, nicht den der aufrufenden Datei.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>__LINE__</term>
      <listitem>
       <simpara>
        Die Nummer der Zeile im laufenden Skript, die gerade geparst
        wird. Wird diese Konstante in einer Datei benutzt, die per
        <function>include</function> oder <function>require</function>
        eingebunden wurde, liefert sie die Zeilennummer innerhalb der
        eingebundenen Datei.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>PHP_VERSION</term>
      <listitem>
       <simpara>
        Ein String, der die Versionsnummer des PHP-Parsers
        enthält, der gerade verwendet wird; z. B.´3.0.8-dev´.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>PHP_OS</term>
      <listitem>
       <simpara>
        Der Name des Betriebsystems, auf dem der PHP-Parser
        ausgeführt  wird; z. B. ´Linux´.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>&true;</term>
      <listitem>
       <simpara>
        Der Wert ´wahr´.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>&false;</term>
      <listitem>
       <simpara>
        Der Wert ´falsch´.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>E_ERROR</term>
      <listitem>
       <simpara>
        Bedeutet einen Fehler, der sich von einem    
        ´parsing error´ unterscheidet. Die Ausführung des Skriptes
                wird beendet. 
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>E_WARNING</term>
      <listitem>
       <simpara>
                Gibt einen Zustand zurück,durch den PHP weiß, dass etwas 
                nicht in Ordnung ist, das aktuelle Skript aber trotzdem
                weiter ausführt; dies kann vom Skript selbst aufgefangen
                werden.
                Ein Beispiel wäre ein ungültiger regulärer Ausdruck (regexp)
                in der Funktion <function>ereg</function>.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>E_PARSE</term>
      <listitem>
       <simpara>
                Der Parser hat Probleme mit ungültiger Syntax in
                der Skript-Datei. Die Ausführung des Skriptes wird
                beendet.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>E_NOTICE</term>
      <listitem>
       <simpara>
                Etwas ist aufgetreten, das ein Fehler sein kann oder nicht.
                Das aktuelle Skript wird weiter ausgeführt. Beispiele hierfür
                sind ein nicht gequoteter string als Hash-Index oder der 
                Zugriff auf eine Variable, die nicht gesetzt wurde.
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist></para>

   <para>
        Die E_*-Konstanten werden typischerweise mit der
        <function>error_reporting</function>-Funktion benutzt, um 
        das Fehlermeldungs-Niveau festzusetzen.</para>

   <para>
    Zusätzliche Konstanten können mithilfe der 
   <function>define</function>-Funktion definiert werden.</para>
    
   <para>
        Zu beachten ist, dass dies Konstanten sind, und  keine Makros, wie man
        sie von C her kennt; nur gültige Skalar-Daten können von einer
        Konstante vertreten werden.
    <example>
     <title>Konstanten definieren</title>
     <programlisting>
&lt;?php
define("CONSTANT", "Hallo Welt.");
echo CONSTANT; // gibt  "Hallo Welt." aus.
?&gt;
     </programlisting>
    </example>

    <example>
     <title>Die Benutzung von  __FILE__ und __LINE__</title>
     <programlisting>
&lt;?php
function report_error($file, $line, $message) {
    echo "Ein Fehler ist aufgetreten in $file in Zeile $line: $message.";
}

report_error(__FILE__,__LINE__, "Irgendetwas ist falsch gelaufen!");
?&gt;
     </programlisting>
    </example></para>
    
  </chapter>

ENDE alter Inhalt
-->

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
