<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335457 Maintainer: sammywg Status: ready -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Konstanten</title>

  <simpara>
   Eine Konstante ist ein Bezeichner (Name) für einen einfachen Wert. Wie der
   Name bereits nahelegt, kann der Wert einer Konstanten zur Laufzeit des
   Skripts nicht verändert werden (ausgenommen die <link
   linkend="language.constants.predefined">Magischen Konstanten</link>, die aber
   keine wirklichen Konstanten sind.) Eine Konstante unterscheidet standardmäßig
   zwischen Groß- und Kleinschreinbung (case-sensitive). Nach gängiger
   Konvention werden Konstanten immer in Großbuchstaben geschrieben.
  </simpara>
  <para>
   Der Name einer Konstanten folgt den gleichen Regeln wie alle anderen
   Bezeichner in PHP. Ein gültiger Name beginnt mit einem Buchstaben oder einem
   Unterstrich, gefolgt von beliebig vielen Buchstaben, Ziffern oder
   Unterstrichen. Als regulärer Ausdruck könnte das so beschrieben werden:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  &tip.userlandnaming;
  <para>
   <example>
    <title>Gültige und ungültige Namen für Konstanten</title>
    <programlisting role="php">
<![CDATA[
<?php

// Gueltige Namen fuer Konstanten
define("FOO",     "irgendwas");
define("FOO2",    "etwas anderes");
define("FOO_BAR", "irgendwas ganz anderes");

// Ungueltige Namen fuer Konstanten
define("2FOO",    "irgendwas");

// Folgendes ist korrekt, sollte aber vermieden werden:
// PHP koennte eines Tages eine Magische Konstante unterstuetzen
// die Ihr Skript nicht mehr wie gewuenscht funktionieren laesst
define("__FOO__", "irgendwas");

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Für unsere Zwecke ist ein Buchstabe a-z, A-Z und die ASCII-Zeichen
    von 127 bis 255 (0x7f-0xff).
   </simpara>
  </note>

  <simpara>
   Wie bei &link.superglobals; ist der Gültigkeitsbereich einer Konstanten
   global. Unabhängig vom Gültigkeitsbereich können Sie in Ihrem Skript überall
   auf eine Konstante zugreifen. Für mehr Information zum Gültigkeitsbereich
   lesen Sie bitte den Abschnitt über den <link
   linkend="language.variables.scope">Geltungsbereich von Variablen</link>.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>Syntax</title>
   <simpara>
    Sie können eine Konstante definieren, indem Sie entweder die
    <function>define</function>-Funktion oder ab PHP 5.3.0 das Schlüsselwort
    <literal>const</literal> außerhalb einer Klassendefinition verwenden. Einmal
    definiert, kann eine Konstane weder verändert noch gelöscht werden.
   </simpara>
   <simpara>
    Vor PHP 5.6 können Konstanten nur skalare Daten (<type>boolean</type>,
    <type>integer</type>, <type>float</type> und <type>string</type>) enthalten.
    Von PHP 5.6 an ist es möglich eine Konstante als skalaren Ausdruck zu
    definieren, und es ist ebenfalls möglich eine <type>Array</type> Konstante zu definieren.
    Es ist möglich, Konstanten vom Typ <type>resource</type> zu definieren,
    dies sollte allerdings vermieden werden, da es zu unerwarteten Ergebnissen
    führen kann.
   </simpara>
   <simpara>
    Den Wert einer Konstanten erhalten Sie durch die einfache Angabe ihres
    Namens. Im Gegensatz zu Variablen sollten Sie einer Konstanten
    <emphasis>kein</emphasis> <literal>$</literal> voranstellen.
    Ebenso können Sie die Funktion <function>constant</function> benutzen, um
    den Wert einer Konstanten auszulesen, wenn Sie den Namen der Konstanten
    dynamisch erhalten wollen.
    Benutzen Sie <function>get_defined_constants</function>, um eine Liste
    aller definierten Konstanten zu erhalten.
   </simpara>
   <note>
    <simpara>
     Konstanten und (globale) Variablen befinden sich in unterschiedlichen
     Namensräumen. Das hat zum Beispiel zur Folge, dass &true; und
     <varname>$TRUE</varname> etwas völlig Verschiedenes sind.
    </simpara>
   </note>
   <simpara>
    Falls Sie eine undefinierte Konstante verwenden, nimmt PHP an, dass
    Sie den Namen der Konstanten selbst meinen, so als ob Sie sie als einen
    <type>string</type> (CONSTANT vs "CONSTANT") aufgerufen hätten. Falls das
    passiert, wird Ihnen ein Fehler vom Typ <link
    linkend="ref.errorfunc">E_NOTICE</link> ausgegeben. Lesen Sie ebenfalls
    den entsprechenden Manualabschnitt, der erklärt, warum <link
    linkend="language.types.array.foo-bar">$foo[bar]</link> falsch ist
    (zumindest solange Sie nicht zuvor <literal>bar</literal> mittels
    <function>define</function> als Konstante definiert haben). Möchten Sie
    einfach nur nachprüfen, ob eine Konstante definiert ist, benutzen Sie die
    Funktion <function>defined</function>.
   </simpara>
   <para>
    Das hier sind die Unterschiede zwischen Konstanten und Variablen:
    <itemizedlist>
     <listitem>
      <simpara>
       Konstanten haben kein Dollarzeichen (<literal>$</literal>) vorangestellt;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Vor PHP 5.3 können Konstanten nur über die Funktion <function>define</function>
       definiert werden, nicht durch einfache Zuweisung;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Konstanten können überall definiert werden, und auf Ihren Wert können Sie
       ohne Rücksicht auf Namensraumregeln von Variablen zugreifen;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Sobald Konstanten definiert sind, können sie nicht neu definiert
       oder gelöscht werden; und
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Konstanten können nur skalare Werte haben, oder skalare oder Array-Werte
       in PHP 5.6 und später. In konstanten skalaren Ausdrücken können Arrays
       verwendet werden (z.B. <literal>const FOO = array(1, 2, 3)[0];</literal>),
       aber das Endergebnis muss ein skalarer Wert sein.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>Definiton von Konstanten</title>
     <programlisting role="php">
<![CDATA[
<?php
define("KONSTANTE", "Hallo Welt.");
echo KONSTANTE;     // Ausgabe: "Hallo Welt."
echo Konstante;     // Ausgabe: "Konstante" und eine Notice.
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title>Definition von Konstanten unter Verwendung des
      <literal>const</literal>-Keywords</title>
      <programlisting role="php">
<![CDATA[
<?php
// Funktioniert seit PHP 5.3.0
const KONSTANTE = 'Hallo Welt';

echo KONSTANTE;

// Funktioniert seit PHP 5.6.0
const ANDERE_KONSTANTE = KONSTANTE . '; Ade Welt';

echo ANDERE_KONSTANTE;
?>
]]>
     </programlisting>
    </example>
   </para>

   <note>
    <para>
     Im Gegensatz zu Konstanten, welche mit <function>define</function>
     ersellt werden, müssen über <literal>const</literal> definierte Konstanten
     im Top-Level Scope erstellt werden, weil sie zur Compile Zeit definiert
     werden. Das heißt, dass sie nicht innerhalb von Funktionen, Schleifen,
     <literal>if</literal> Statements oder <literal>try</literal>/<literal>catch</literal>
     Blöcken definiert werden können.
    </para>
   </note>

   <simpara>
    Lesen Sie ebenfalls den Abschnitt über <link
    linkend="language.oop5.constants">Klassenkonstanten</link>.
   </simpara>
  </sect1>

  <sect1 xml:id="language.constants.predefined">
   <title>Magische Konstanten</title>

   <simpara>
    PHP stellt jedem Skript zur Laufzeit eine Vielzahl von <link
    linkend="reserved.constants">vordefinierten Konstanten</link>
    zur Verfügung. Viele dieser Konstanten werden jedoch von verschiedenen
    Erweiterungen definiert, die nur zur Verfügung stehen, wenn diese
    Erweiterungen selbst zur Verfügung stehen, d.h. entweder über dynamisches
    Laden zur Laufzeit oder Einkompilieren.
   </simpara>

   <para>
    Es gibt acht magische Konstanten, die, abhängig davon, wo sie eingesetzt
    werden, einen unterschiedlichen Wert haben. Zum Beispiel hängt
    der Wert der Konstanten <constant>__LINE__</constant> davon ab, in welcher
    Zeile ihres Skripts Sie diese Konstante verwenden. Diese besonderen
    Konstanten sind unabhängig von Groß-/Kleinschreibung und sind folgende:
   </para>
   <para>
    <table>
     <title>Einige "magische" PHP-Konstanten</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Name</entry>
        <entry>Beschreibung</entry>
       </row>
      </thead>
      <tbody>
       <row xml:id="constant.line">
        <entry><constant>__LINE__</constant></entry>
        <entry>
         Die aktuelle Zeilennummer einer Datei.
        </entry>
       </row>
       <row xml:id="constant.file">
        <entry><constant>__FILE__</constant></entry>
        <entry>
         Der vollständige Pfad- und Dateiname einer Datei wobei Symlinks
         aufgelöst wurden. Wird diese Konstante
         innerhalb einer nachgeladenen Datei verwendet, wird der Name
         dieser eingebundenen Datei zurückgegeben.
        </entry>
       </row>
       <row xml:id="constant.dir">
        <entry><constant>__DIR__</constant></entry>
        <entry>Der Name des Verzeichnisses, in dem sich die Datei befindet. Wird
         die Konstante innerhalb eines Includes verwendet, wird das Verzeichnis
         der eingebundenen Datei zurückgegeben. Dies entspricht dem Verhalten
         von <literal>dirname(__FILE__)</literal>. Der Verzeichnisname hat keinen
         beendenden Schrägstrich, sofern es sich nicht um das Rootverzeichnis
         handelt.
        </entry>
       </row>
       <row xml:id="constant.function">
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         Der Name der Funktion.
        </entry>
       </row>
       <row xml:id="constant.class">
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         Der Name einer Klasse. Der Klassenname enthält auch den Namen
         des Namespaces in dem er deklariert wurde (z.B. <literal>Foo\Bar</literal>).
         __CLASS__ kann seit PHP 5.4 auch in Traits verwendet werden, in welchem Fall
         Name der Klasse welche den Trait verwendet zurückgegeben wird.
        </entry>
       </row>
       <row xml:id="constant.trait">
        <entry><constant>__TRAIT__</constant></entry>
        <entry>
         Der Trait Name. Dieser enthält auch den
         Namespace in welchem der Trait definiert wurde (z.B. <literal>Foo\Bar</literal>).
        </entry>
       </row>
       <row xml:id="constant.method">
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         Der Name der Klassenmethode.
        </entry>
       </row>
       <row xml:id="constant.namespace">
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         Der Name des aktuellen Namespace.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Siehe auch
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>

   <sect2 xml:id="language.constants.predefined.changelog">
    &reftitle.changelog;

    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>5.4.0</entry>
         <entry>
          <constant>__TRAIT__</constant> Konstante hinzugefügt
         </entry>
        </row>
        <row>
         <entry>5.3.0</entry>
         <entry>
          <constant>__DIR__</constant> und <constant>__NAMESPACE__</constant> Konstanten hinzugefügt
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          <constant>__METHOD__</constant> Konstante hinzugefügt
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          Vor dieser Version waren die Werte von manchen "magischen" Konstanten
          immer in Kleinschreibung. Diese sind nun allesamt in der Groß-/Kleinschreibung,
          in der sie deklariert wurden.
         </entry>
        </row>
        <row>
         <entry>4.3.0</entry>
         <entry>
          <constant>__FUNCTION__</constant> und <constant>__CLASS__</constant> Konstanten hinzugefügt
         </entry>
        </row>
        <row>
         <entry>4.0.2</entry>
         <entry>
          <constant>__FILE__</constant> enthält immer einen absoluten Pfad, wobei
          Symlinks aufgelöst wurden, wohingegen es in älteren Versionen unter
          Umständen einen relativen Pfad enthielt
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
